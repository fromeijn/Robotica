/*
Navigate in grid versie 0.1
Groep J
*/
#define FOLLOW_LINE 0
#define LEFT 0
#define CENTER 1
#define RIGHT 2

#define NORTH 0
#define EAST 1
#define SOUTH 2
#define WEST 3

/*
      N
      ^
      |
W <--- --->  E
      |
     \/
     S

*/
unsigned char direction = 0;
unsigned char posX = 0;
unsigned char posY = 0;

unsigned char lane_count = 0;

unsigned char grid_size_x= 5;
unsigned char grid_size_y = 5;

unsigned char lane_visible = 0;      // value is true of the robot is on a lane

unsigned char left_bm = 1 << 2;
unsigned char center_bm = 1 << 1;
unsigned char right_bm = 1 << 0;

unsigned int motorLeft = OUT_B;
unsigned int motorRight = OUT_A;
unsigned int sensorLeft = IN_3;
unsigned int sensorCenter = IN_2;
unsigned int sensorRight = IN_1;

unsigned int cruiseSpeed = 90;

unsigned int calibrateWhite[3];
unsigned int calibrateBlack[3];
unsigned int whiteThreshold = 15;
unsigned int blackThreshold = 10;

unsigned int currentTask = FOLLOW_LINE;

unsigned int sensorLine;

void calibrate(void);
void FollowLine(void);
void updateLine(void);
void drawInfo(void);

void updatePos() {

     switch(direction) {
     
       case NORTH:
         posY++;
       break;
       
       case EAST:
          posX++;
       break;
       
       case SOUTH:
          posY--;
       break;
       
       case WEST:
         posX--;
       break;
     
     }
     
     if(posX < 0) { posX = 0; }
     if(posX > grid_size_x) { posX = grid_size_x; }
     if(posY < 0) { posY = 0; }
     if(posY > grid_size_y) { posY = grid_size_y; }
}

void turnDegrees(unsigned char degrees) {
 OnFwd(motorLeft, 60);
 OnFwd(motorRight, -60);
 Wait(200);
 direction++;
 if(direction > 3) direction = 0;
 
}

void FollowLine() {

     drawInfo();
     
     // Sensor: ? ? 1
     // Type: lane visible but check if it was not before visible. We don't want to
     // run this code multiple times on each lane!
     if( ( sensorLine & right_bm) && !(lane_visible) ) {

         lane_visible = 1;
         updatePos();
         

         if(posX >= 5 && posY == 0 || posY == 5) {
          turnDegrees(90);
         }
         if(posX < 0 && posY == 0 || posY == 5) {
          turnDegrees(90);
         }
         if(posY >= 5 && posX == 0 || posX == 5) {
          turnDegrees(90);
         }
         if(posY < 0 && posX == 0 || posX == 5) {
          turnDegrees(90);
         }

     } else
     
     // Sensor: ? ? 0
     // Type: No lane, reset lane_visible
     if( !( sensorLine & right_bm) ) {
     
          lane_visible = 0;
          
     }
     
     // Sensor: 1 ? 0
     // Type: Line on left sensor, trim movement to the left!
     if( ( sensorLine & left_bm ) && !(sensorLine & right_bm) ) {
     
         OnFwd(motorRight, cruiseSpeed);
         OnFwd(motorLeft, cruiseSpeed - 15);
         
     } else
     
     // Sensor: 0 1 0
     // Type: Line in the center, we are on track! No need to slow down so let's go full speed :)
     if( !(sensorLine & left_bm ) && ( sensorLine & center_bm ) && !(sensorLine & right_bm) ) {

         OnFwd(motorRight, cruiseSpeed + 10);
         OnFwd(motorLeft, cruiseSpeed + 10);

     }  else
     
     // Sensor: 0 0 0
     // Type: Eh, we lost the line, we will probably find it back on our right side
     if( !(sensorLine & left_bm ) && !(sensorLine & center_bm ) && !(sensorLine & right_bm) ) {

         OnFwd(motorRight, cruiseSpeed - 10);
         OnFwd(motorLeft, cruiseSpeed);

     }
}

void Calibrate() {

     ClearScreen();
     TextOut(0, LCD_LINE1, "Calibrate black");
     while( ! ButtonPressed(BTNCENTER, false));

     Wait(500);
     calibrateBlack[RIGHT] = Sensor(sensorRight);
     calibrateBlack[CENTER] = Sensor(sensorCenter);
     calibrateBlack[LEFT] = Sensor(sensorLeft);

}

void updateLine() {

  sensorLine = (Sensor(sensorLeft) < (calibrateBlack[LEFT] + whiteThreshold)) << 2;
  sensorLine |= (Sensor(sensorCenter) < (calibrateBlack[CENTER] + whiteThreshold)) << 1;
  sensorLine |= (Sensor(sensorRight) < (calibrateBlack[RIGHT] + whiteThreshold)) << 0;
  
}

void drawInfo() {

     ClearScreen();
     TextOut(0, LCD_LINE1, "Direction = ");
     TextOut(0, LCD_LINE3, "X = ");
     TextOut(0, LCD_LINE4, "Y = ");
     NumOut(14*5, LCD_LINE1, direction);
     NumOut(4*5, LCD_LINE3, posX);
     NumOut(4*5, LCD_LINE4, posY);
     
}

task main() {

     SetSensorLight(sensorLeft);
     SetSensorLight(sensorCenter);
     SetSensorLight(sensorRight);

     Calibrate();
     
     ClearScreen();
     TextOut(0, LCD_LINE1, "Ready to start.");
     while( ! ButtonPressed(BTNCENTER, false));

     while(1) {
     
              // Update sensor values
              updateLine();


              switch(currentTask) {

                case FOLLOW_LINE:
                  FollowLine();
                break;

              }

     }

}
