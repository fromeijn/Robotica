#define LEFT 0
#define CENTER 1
#define RIGHT 2

#define NORTH 0
#define EAST 1
#define SOUTH 2
#define WEST 3

#define FIND_CORNER 0
#define FOLLOW_GRID 1

unsigned char left_bm = 1 << 2;
unsigned char center_bm = 1 << 1;
unsigned char right_bm = 1 << 0;

bool executeFreeGrid = true;
bool pauseFreeGrid = false;

bool leftHold = false;
bool centerHold = false;
bool rightHold = false;

unsigned char numCornerFound = 0;

unsigned char currentTask;

unsigned long firstTick, lastTick;
unsigned char lastLane;

unsigned char fgrid_motorLeft, fgrid_motorRight, fgrid_sensLeft, fgrid_sensCenter, fgrid_sensRight;

bool fgrid_showDisplay;
unsigned char lS;
unsigned char fgrid_blackThreshold;
unsigned char fgrid_calibratedBlack[3];

void fgrid_updateLine(void);
bool findCorner(void);
void followGrid(void);


task FreeGridTask() {

	while(executeFreeGrid) {
		if(pauseFreeGrid) {

			Wait(10);
			continue;

		}

		switch(currentTask) {

			case FIND_CORNER:
				findCorner();
			break;

			case FOLLOW_GRID:
				followGrid();
			break;

		}

	}
}

void fgrid_init(unsigned char motorLeft, unsigned char motorRight, unsigned char sensLeft, unsigned char sensCenter unsigned char sensRight) {

	fgrid_motorLeft = motorLeft;
	fgrid_motorRight = motorRight;
	fgrid_sensLeft = sensLeft;
	fgrid_sensCenter = sensCenter;
	fgrid_sensRight = sensRight;

	fgrid_showDisplay = false;
	fgrid_blackThreshold = 15;

	fgrid_calibratedBlack[LEFT] = 35;
	fgrid_calibratedBlack[CENTER] = 35;
	fgrid_calibratedBlack[RIGHT] = 35;

	currentTask = FIND_CORNER;

	OnFwd(fgrid_motorLeft, 0);
	OnFwd(fgrid_motorLeft, 0);

	SetSensorLight(sensLeft);
	SetSensorLight(sensCenter);
	SetSensorLight(sensRight);

}

void fgrid_pause(bool pause) {

	pauseFreeGrid = pause;

}

void fgrid_setDisplay(bool show) {

	fgrid_showDisplay = show;

}

void fgrid_start() {

	firstTick = lastTick = CurrentTick();

	start FreeGridTask;
}

void fgrid_updateLine() {

  lS = (Sensor(fgrid_sensLeft) < (fgrid_calibratedBlack[LEFT] + fgrid_blackThreshold)) << 2;
  lS |= (Sensor(fgrid_sensCenter) < (fgrid_calibratedBlack[CENTER] + fgrid_blackThreshold)) << 1;
  lS |= (Sensor(fgrid_sensRight) < (fgrid_calibratedBlack[RIGHT] + fgrid_blackThreshold)) << 0;
  
}

void fgrid_calibrate() {

     ClearScreen();
     TextOut(0, LCD_LINE1, "Calibrate black");
     while( ! ButtonPressed(BTNCENTER, false));

     Wait(500);
     fgrid_calibratedBlack[RIGHT] = Sensor(fgrid_sensRight);
     fgrid_calibratedBlack[CENTER] = Sensor(fgrid_sensCenter);
     fgrid_calibratedBlack[LEFT] = Sensor(fgrid_sensLeft);

     ClearScreen();
     TextOut(0, LCD_LINE1, "Let's go!");
     while( ! ButtonPressed(BTNCENTER, false));

     Wait(500);

}

void stopRobot(int time, unsigned char beeps) {

	unsigned long _tick = CurrentTick();
	OnFwd(fgrid_motorRight, 0);
	OnFwd(fgrid_motorLeft, 0);

	for(int i = 0; i < beeps; i++) {

		//PlayTone(500, 150);
		//Wait(300);

	}
	Wait(250);

}

unsigned char laneCount = 0;

void followGrid() {

	fgrid_updateLine();

	if(lS & center_bm) {

		lastTick = CurrentTick();
		OnFwd(fgrid_motorRight, 100);
		OnFwd(fgrid_motorLeft, 85);

	} else {

		OnFwd(fgrid_motorRight, 85);
		OnFwd(fgrid_motorLeft, 100);

	}

	if((lS & left_bm) && (! leftHold)) {

		laneCount++;
		if(laneCount >= 5) {

			OnFwd(fgrid_motorLeft, 100);
			OnFwd(fgrid_motorLeft, 0);
			Wait(490);
			laneCount = 0;

		}

		leftHold = true;
		lastLane = LEFT;

		//PlayTone(400, 250);

	}

	if((lS & right_bm) && (! rightHold)) {

		
		rightHold = true;
		lastLane = RIGHT;

		PlayTone(800, 500);

	}

	if(!(lS & left_bm)) {

		leftHold = false;
	}
	if(!(lS & right_bm)) {

		rightHold = false;
	}

}

void getBackToLine() {

	OnFwd(fgrid_motorRight, -60);
	OnFwd(fgrid_motorLeft, -60);
	Wait(500);
	if(lastLane == LEFT) {
		OnFwd(fgrid_motorRight, 60);
		OnFwd(fgrid_motorLeft, -85);
	} else {
		OnFwd(fgrid_motorRight, -85);
		OnFwd(fgrid_motorLeft, 60);

	}
	bool foundLine = false;
	while(! foundLine) {

		fgrid_updateLine();
		if( (lS & left_bm) || (lS & center_bm) || (lS & right_bm) ) {

			foundLine = true;

		}

	}

	if(lastLane == LEFT) {

		OnFwd(fgrid_motorRight, 30);
		OnFwd(fgrid_motorLeft, -30);

	} else {

		OnFwd(fgrid_motorRight, -30);
		OnFwd(fgrid_motorLeft, 30);	

	}

	foundLine = false;
	while(! foundLine) {

		fgrid_updateLine();
		if(lastLane == LEFT) {
			if(lS & right_bm) {

				foundLine = true;

			}
		} else {

			if(lS & left_bm) {

				foundLine = true;

			}

		}

	}
	bool _centerHold = false;
	bool stabilized = false;
	while(! stabilized) {
		fgrid_updateLine();
		if(lS & center_bm) {
			if(! _centerHold) {

				_centerHold = true;
				lastTick = CurrentTick();

			} else {
				
				//lastTick = CurrentTick();
			}
			OnFwd(fgrid_motorRight, 80);
			OnFwd(fgrid_motorLeft, 30);

		} else {

			_centerHold = false;
			if( (CurrentTick() - lastTick) < 230) {
				stabilized = true;
				ClearScreen();
					NumOut(0, LCD_LINE1, (CurrentTick() - lastTick));

			} else {
				OnFwd(fgrid_motorRight, 30);
				OnFwd(fgrid_motorLeft, 80);
			}
		}
	}

	lastTick = CurrentTick();

}

bool findCorner() {

	fgrid_updateLine();

	if(lS & center_bm) {

		lastTick = CurrentTick();
		OnFwd(fgrid_motorRight, 100);
		OnFwd(fgrid_motorLeft, 85);

	} else {

		if(CurrentTick() - lastTick > 500) {

			getBackToLine();

			
			numCornerFound++;
			if(numCornerFound >= 2) {

				currentTask = FOLLOW_GRID;
				return 1;

			}
			
			OnFwd(fgrid_motorRight, 0);
			OnFwd(fgrid_motorLeft, 0);
			
			OnFwd(fgrid_motorRight, 85);
			OnFwd(fgrid_motorLeft, 100);
			lastTick = CurrentTick();

		} else {

			OnFwd(fgrid_motorRight, 85);
			OnFwd(fgrid_motorLeft, 100);
		}

	}

}
