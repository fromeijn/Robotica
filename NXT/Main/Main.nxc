#define LEFT 0
#define CENTER 1
#define RIGHT 2
#define RAW 1

#define NORTH 0
#define EAST 1
#define SOUTH 2
#define WEST 3

#define FIND_CORNER 0
#define FOLLOW_GRID 1

#define LANE_LEFT 0
#define LANE_RIGHT 1

#define SONARA_DETECT_RANGE 25
#define SONARB_DETECT_RANGE 25
#define RFID_SCAN_RANGE 2

#define NO_RFID_SCANNED 9

#define SLAVE_ADDRESS 0x02 //address slave Xmega (0x01 in atmelstudio)
#define RFID_DETECT_ADDRESS 0x00
#define RFID_NUMBER_ADDRESS 0x01
#define SONAR_A_ADDRESS 0x0B
#define SONAR_B_ADDRESS 0x0D
#define RFID_DETECT_RESET_ADDRES 0x10

#define LINE_ADDRESS_0 0x20
#define LINE_ADDRESS_1 0x22
#define LINE_ADDRESS_2 0x24
#define LINE_ADDRESS_3 0x26

#define RFID_DETECT_BYTES 1
#define RFID_NUMBER_BYTES 11
#define SONAR_A_BYTES 2
#define SONAR_B_BYTES 2

byte RFIDDetect = 0;
byte RFIDNumber[RFID_NUMBER_BYTES];
int sonarA = 0;
int sonarB = 0;

int lineSensorRight;
int lineSensorRightOffset;

int lineSensorCenterRight;
int lineSensorCenterRightOffset;

int lineSensorCenterLeft;
int lineSensorCenterLeftOffset;

int lineSensorLeft;
int lineSensorLeftOffset;

unsigned char detectLaneDir = LANE_RIGHT;

unsigned char BLUETOOTH_STRING = 0;
string bleutoothTMP;

bool runProgram;

char direction = 0;
unsigned char posX = 0;
unsigned char posY = 0;

unsigned char gridObjects[5][5];
unsigned char objectRfidTranslate[6];

unsigned char grid_size_x= 5;
unsigned char grid_size_y = 5;	

unsigned char left_bm = 1 << 2;
unsigned char center_bm = 1 << 1;
unsigned char right_bm = 1 << 0;

unsigned char posUpdateCount = 0;

bool executeFreeGrid = true;
bool pauseFreeGrid = false;

bool leftHold = false;
bool centerHold = false;
bool rightHold = false;
bool allowedToCheckForRFID = true;

unsigned char numCornerFound = 0;

unsigned char currentTask;

unsigned long firstTick, lastTick;
unsigned char lastLane;

unsigned char motorLeft, motorRight, sensLeft, sensCenter, sensRight, sensXMega;

bool showDisplay;
unsigned char lS;
unsigned char blackThreshold;
unsigned char calibratedBlack[3];

void Init(unsigned char _motorLeft, unsigned char _motorRight, unsigned char _sensXMega);
void Start(void);
void StopProgram(void);
bool detectLane(void);
bool confirmLane(void);
unsigned char CheckSensors();
unsigned char FindCorner(void);
unsigned char FollowGrid(void);
unsigned char ScanRFID(void);
unsigned char GetBackToLine(void);
void Calibrate(void);
void UpdatePos(void);
void Turn(int Dir);
void DrawInfo(void);
void ReadBasicXmegaData(void);
void ReadLineXmegaData(bool Raw);
void ConfirmRFID(void);
void DrawGrid(void);
unsigned char returnRfidNum(byte in);

task main() {

	Init(OUT_B, OUT_A, S1);
  	Calibrate();
	runProgram = true;
	ConfirmRFID();

	Start(); // Last program initialisation
	//currentTask = FIND_CORNER;
	while(runProgram) {

		currentTask = CheckSensors();
		//DrawGrid();
		//DrawInfo();
		switch(currentTask) {

			case FIND_CORNER:
				currentTask = FindCorner();
			break;

			case FOLLOW_GRID:
				currentTask = FollowGrid();
			break;

		}

	}
}

void Init(unsigned char _motorLeft, unsigned char _motorRight, unsigned char _sensXMega) {

	motorLeft = _motorLeft;
	motorRight = _motorRight;
	sensXMega = _sensXMega;

	showDisplay = false;

	detectLaneDir = LANE_RIGHT;

	currentTask = FOLLOW_GRID;

	OnFwd(motorLeft, 0);
	OnFwd(motorLeft, 0);

	SetSensorLowspeed(sensXMega);
}

void SetDisplay(bool show) {

	showDisplay = show;

}

void DrawGrid() {

	for(int bloky = 0; bloky<5; bloky++){
	   for(int blokx = 0; blokx<5; blokx++){
	        RectOut(23+10*blokx, 7+10*bloky, 10, 10);
	   }
	 }


	 for(int locy = 0; locy<5; locy++){
	   for(int locx = 0; locx<5; locx++){
	     if (gridObjects[locx][locy] == 1) {
	        TextOut(26+10*locx, 8+10*locy, "1");
	     } else if (gridObjects[locx][locy] == 2){
	        TextOut(26+10*locx, 8+10*locy, "2");
	     } else if (gridObjects[locx][locy] == 3){
	        TextOut(26+10*locx, 8+10*locy, "3");
	     } else if (gridObjects[locx][locy] == 4){
	        TextOut(26+10*locx, 8+10*locy, "4");
	     } else if (gridObjects[locx][locy] == 5){
	        TextOut(26+10*locx, 8+10*locy, "5");
	     } else if (gridObjects[locx][locy] == 6){
	        TextOut(26+10*locx, 8+10*locy, "6");
	     } else if (gridObjects[locx][locy] == NO_RFID_SCANNED){
	        TextOut(26+10*locx, 8+10*locy, "0");
	     }

	  }
	 }

	 NumOut(0, LCD_LINE8, posUpdateCount);

}

unsigned char returnRfidNum(byte in) {

	switch(in) {

		case '1': return 1;
		case '2': return 2;
		case 'A': return 3;
		case 'E': return 4;
		case '9': return 5;
		case 'C': return 6;

	}

}

void Start() {

	firstTick = lastTick = CurrentTick();
}

void Calibrate()
{
	Wait(500);
	ReadLineXmegaData(RAW);

	lineSensorRightOffset = lineSensorRight;
	lineSensorCenterRightOffset = lineSensorCenterRight;
	lineSensorCenterLeftOffset = lineSensorCenterLeft;
	lineSensorLeftOffset = lineSensorLeft;

	ClearScreen();
	TextOut(0, LCD_LINE1, "Let's go!");
	while( ! ButtonPressed(BTNCENTER, false));
	
	Wait(500);
}

unsigned char CheckSensors()
{
	ReadBasicXmegaData();
	ReadLineXmegaData(0);
	// if((sonarA<SONARA_DETECT_RANGE) && currentTask==FOLLOW_GRID && allowedToCheckForRFID){
	// 	ScanRFID();
	// 	allowedToCheckForRFID = false;
	// }
	return currentTask;
}

unsigned char GetBackToLine() {

	OnFwd(motorRight, -60);
	OnFwd(motorLeft, -60);
	Wait(500);
	OnFwd(motorLeft, 60);
	OnFwd(motorRight, -85);
	bool foundLine = false;
	while(! foundLine) {

		//UpdateLine();
		if( (lS & left_bm)) {

			foundLine = true;

		}

	}

	bool _centerHold = false;
	bool stabilized = false;
	while(! stabilized) {
		//UpdateLine();
		if(lS & center_bm) {
			if(! _centerHold) {

				_centerHold = true;
				lastTick = CurrentTick();

			}
			OnFwd(motorLeft, 80);
			OnFwd(motorRight, 30);

		} else {

			_centerHold = false;
			if( (CurrentTick() - lastTick) < 230) {
				stabilized = true;
				//BlueToothStr("Back on grid\n\r");

			} else {
				OnFwd(motorLeft, 30);
				OnFwd(motorRight, 80);
			}
		}
	}

	lastTick = CurrentTick();

	return currentTask;

}

bool detectLane() {

	if(detectLaneDir == LANE_RIGHT) {

		return ((lineSensorRight< -70) && (!rightHold));

	} else {

		return ((lineSensorLeft< -70) && (!leftHold));

	}

}

bool confirmLane() {

	rightHold = true;
	lastLane = RIGHT;

	return true;

}



unsigned char FindCorner() {

	//UpdateLine();
	
	if(lS & center_bm) {

		lastTick = CurrentTick();
		OnFwd(motorLeft, 100);
		OnFwd(motorRight, 80);

	} else {

		if(CurrentTick() - lastTick > 550) {
			//BlueToothStr("Grid lost\n\r");
			GetBackToLine();

			
			numCornerFound++;
			if(numCornerFound >= 2) {
				//BlueToothStr("Found corner, follow grid\n\r");
				return FOLLOW_GRID;

			}
			
			OnFwd(motorLeft, 80);
			OnFwd(motorRight, 100);
			lastTick = CurrentTick();

		} else {

			OnFwd(motorLeft, 80);
			OnFwd(motorRight, 100);
		}

	}

	return currentTask;

}

unsigned char FollowGrid() {

	if(lineSensorCenterRight>lineSensorCenterLeft) //follow line
	{
		OnRev(motorLeft, 55);
		OnRev(motorRight, 50);
	}else
	{
		OnRev(motorLeft, 50);
		OnRev(motorRight, 55);
	}	


	if(detectLane())
	{
		PlayTone(800, 50);
		posUpdateCount++;
		switch(posUpdateCount)
		{
			case 3: Turn(RIGHT); //case 5: TurnDegrees(90);
			break;
			case 10: Turn(RIGHT);
			break;
			case 15: Turn(RIGHT);
			break;
			case 19: Turn(RIGHT);
			break;
			case 23: Turn(RIGHT);
			break;
			case 26: Turn(RIGHT);
			break;
			case 29: Turn(RIGHT);
			break;
			case 31: Turn(RIGHT);
			break;
			case 33: Turn(LEFT);
			break;
			case 35: 
				Turn(LEFT);
				detectLaneDir = LANE_LEFT;
			break;
			case 38: StopProgram();
			break;
			default: 
				UpdatePos();
				allowedToCheckForRFID = true;

			break;
		}
		confirmLane();
	}

	if(lineSensorLeft< -70 && (!leftHold))
	{
		leftHold = true;
		lastLane = LEFT;
	}

	if(lineSensorRight< -70 && (!rightHold))
	{
		rightHold = true;
		lastLane = RIGHT;
	}

	if(lineSensorLeft> -20 && leftHold)
	{
		leftHold = false;
	}

	if(lineSensorRight> -20 && rightHold)
	{
		rightHold = false;
	}

	return currentTask;
}


//co√∂rdinaten syteem
void UpdatePos()
{
	if(direction == NORTH) posY++;
	if(direction == EAST) posX++;
	if(direction == SOUTH) posY--;
	if(direction == WEST) posX--;
	
   //posUpdateCount++;
}

void Turn(int Dir)
{
	if(Dir = RIGHT)
	{
		OnFwd(motorLeft, 30);
		OnRev(motorRight, 30);
		Wait(600);
		while(lineSensorLeft< -70){
			ReadLineXmegaData(0);
		}
		direction++;
	}else{
		OnFwd(motorLeft,    25);
		OnFwd(motorRight, 100);
		//Wait(670);//leeg
		//Wait(650);//vol
		Wait(580); 				//wacht totdat de linker sensor over 2 lijnen heen is
		until(lS & left_bm); 	//wacht totdat de linker sensor de lijn ziet
		direction--;
	}
	if(direction > 3) direction = 0;
	if(direction < 0) direction = 3;
}

void StopProgram(void)
{
		OnFwd(motorLeft, 100);
		OnRev(motorRight, 100);
		Wait(700);//vol
		OnFwd(motorLeft, 0);
		OnFwd(motorRight, 0);
		while(1);

}

void DrawInfo() {
	//maybe graphics?
	TextOut(0, LCD_LINE1, "direction =      ");
	TextOut(0, LCD_LINE2, "X         =      ");
	TextOut(0, LCD_LINE3, "Y         =      ");
	TextOut(0, LCD_LINE4, "task      =      ");
	TextOut(0, LCD_LINE5, "SonarA    =      ");
	TextOut(0, LCD_LINE6, "SonarB    =      ");
	NumOut(14*5, LCD_LINE1, direction);
	NumOut(14*5, LCD_LINE2, posX);
	NumOut(14*5, LCD_LINE3, posY);
	NumOut(14*5, LCD_LINE4, currentTask);
	NumOut(14*5, LCD_LINE5, sonarA);
	NumOut(14*5, LCD_LINE6, sonarB);
}

void ReadBasicXmegaData(void)
{
	byte writeToTWI[2] = { SLAVE_ADDRESS, RFID_DETECT_ADDRESS };
	byte readFromTWI[];
	byte bytesToRead = 16;

	I2CBytes(S1, writeToTWI, bytesToRead, readFromTWI);

	RFIDDetect = readFromTWI[RFID_DETECT_ADDRESS];
	for(int byteNumber=0; byteNumber<RFID_NUMBER_BYTES; byteNumber++)
	{
		RFIDNumber[byteNumber] = readFromTWI[RFID_NUMBER_ADDRESS+byteNumber];
	}
	sonarA = (readFromTWI[SONAR_A_ADDRESS+1]<<8)+readFromTWI[SONAR_A_ADDRESS];
	sonarB = (readFromTWI[SONAR_B_ADDRESS+1]<<8)+readFromTWI[SONAR_B_ADDRESS];
}

void ReadLineXmegaData(bool Raw)
{
	byte writeToTWI[2] = { SLAVE_ADDRESS, LINE_ADDRESS_0 };
	byte readFromTWI[];
	byte bytesToRead = 16;

	I2CBytes(S1, writeToTWI, bytesToRead, readFromTWI);

	if(Raw){
	lineSensorRight 		= (readFromTWI[(LINE_ADDRESS_0-LINE_ADDRESS_0)+1]<<8)+readFromTWI[(LINE_ADDRESS_0-LINE_ADDRESS_0)];
	lineSensorCenterRight 	= (readFromTWI[(LINE_ADDRESS_1-LINE_ADDRESS_0)+1]<<8)+readFromTWI[(LINE_ADDRESS_1-LINE_ADDRESS_0)];
	lineSensorCenterLeft 	= (readFromTWI[(LINE_ADDRESS_2-LINE_ADDRESS_0)+1]<<8)+readFromTWI[(LINE_ADDRESS_2-LINE_ADDRESS_0)];
	lineSensorLeft 			= (readFromTWI[(LINE_ADDRESS_3-LINE_ADDRESS_0)+1]<<8)+readFromTWI[(LINE_ADDRESS_3-LINE_ADDRESS_0)];
	}
	else{
	lineSensorRight 		= (readFromTWI[(LINE_ADDRESS_0-LINE_ADDRESS_0)+1]<<8)+readFromTWI[(LINE_ADDRESS_0-LINE_ADDRESS_0)] - lineSensorRightOffset;
	lineSensorCenterRight 	= (readFromTWI[(LINE_ADDRESS_1-LINE_ADDRESS_0)+1]<<8)+readFromTWI[(LINE_ADDRESS_1-LINE_ADDRESS_0)] - lineSensorCenterRightOffset;
	lineSensorCenterLeft 	= (readFromTWI[(LINE_ADDRESS_2-LINE_ADDRESS_0)+1]<<8)+readFromTWI[(LINE_ADDRESS_2-LINE_ADDRESS_0)] - lineSensorCenterLeftOffset;
	lineSensorLeft 			= (readFromTWI[(LINE_ADDRESS_3-LINE_ADDRESS_0)+1]<<8)+readFromTWI[(LINE_ADDRESS_3-LINE_ADDRESS_0)] - lineSensorLeftOffset;
	}
}

void ConfirmRFID(void)
{
	byte writeToTWI[2] = { SLAVE_ADDRESS,  RFID_DETECT_RESET_ADDRES };
	byte readFromTWI[];
	byte bytesToRead = 2;
	
	I2CBytes(S4, writeToTWI, bytesToRead, readFromTWI);
	RFIDDetect = 0;
}

unsigned char ScanRFID(void)
{
	ConfirmRFID(); //clear RFID bit to be sure

	OnRev(motorLeft,  50); //backup
	OnRev(motorRight, 50);
	Wait(400);

	OnFwd(motorLeft, 30); //turn  right
	OnFwd(motorRight, 0);
	while(sonarB>SONARA_DETECT_RANGE+10){
		ReadBasicXmegaData();
		//DrawInfo();
	}
	OnFwd(motorLeft, 40); //turn  right
	OnFwd(motorRight, 0);

	while(sonarB>SONARA_DETECT_RANGE+5){
		ReadBasicXmegaData();
	}

	OnFwd(motorLeft,  35); //forward
	OnFwd(motorRight, 35);
	while(sonarB>5 || !RFIDDetect){
		ReadBasicXmegaData();
		//DrawInfo();
	}

	//gridObjects[posX][posY] = returnRfidNum( RFIDNumber[8]); //objectRfidTranslate[RFIDNumber[10]];

	/*
	OnFwd(OUT_ABC, 0);
	ClearScreen();

	NumOut(0, 0, returnRfidNum( RFIDNumber[8]) );
	Wait(5000);
	*/

	ConfirmRFID();
	PlayTone(800, 100);
	if(!RFIDDetect){
		OnFwd(motorLeft,  35); //forward some more for RFID
		OnFwd(motorRight, 35);
		Wait(400);
	}

	while(sonarB>RFID_SCAN_RANGE && !RFIDDetect){
		ReadBasicXmegaData();
	}

	if (RFIDDetect)
	{
		gridObjects[posX][posY] = returnRfidNum(RFIDNumber[8]);
		ConfirmRFID();
		PlayTone(800, 100);
	}
	else
	{
		gridObjects[posX][posY] = NO_RFID_SCANNED;
		PlayTone(500, 100);
	}

	OnRev(motorLeft,  35); //backup
	OnRev(motorRight, 35);
	while(!(lS & left_bm)){
		//UpdateLine();
	}

	OnFwd(motorLeft,   0); //turn  left
	OnFwd(motorRight, 45);
	while(!(lS & center_bm)){
		//UpdateLine();
	}

}
