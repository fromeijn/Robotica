
Xmega_NXT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00802000  00001a1e  00001ab2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003a8  0080206c  0080206c  00001b1e  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  00001b20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a29  00000000  00000000  00004628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005051  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000200  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003df6  00000000  00000000  00005280  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d4b  00000000  00000000  00009076  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000016c0  00000000  00000000  00009dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000878  00000000  00000000  0000b484  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000220f  00000000  00000000  0000bcfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002440  00000000  00000000  0000df0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000190  00000000  00000000  0001034b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	43 c2       	rjmp	.+1158   	; 0x490 <__vector_2>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c1       	rjmp	.+1014   	; 0x428 <__vector_12>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	33 c2       	rjmp	.+1126   	; 0x4b8 <__vector_20>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
      66:	00 00       	nop
      68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0b c1       	rjmp	.+534    	; 0x288 <__vector_28>
      72:	00 00       	nop
      74:	3d c1       	rjmp	.+634    	; 0x2f0 <__vector_29>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	04 c3       	rjmp	.+1544   	; 0x6c6 <__vector_47>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	33 c2       	rjmp	.+1126   	; 0x5a4 <__vector_79>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	8f c2       	rjmp	.+1310   	; 0x674 <__vector_85>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	fb c0       	rjmp	.+502    	; 0x358 <__vector_88>
     162:	00 00       	nop
     164:	2d c1       	rjmp	.+602    	; 0x3c0 <__vector_89>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e3       	ldi	r29, 0x3F	; 63
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ee e1       	ldi	r30, 0x1E	; 30
     21c:	fa e1       	ldi	r31, 0x1A	; 26
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ac 36       	cpi	r26, 0x6C	; 108
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	24 e2       	ldi	r18, 0x24	; 36
     232:	ac e6       	ldi	r26, 0x6C	; 108
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a4 31       	cpi	r26, 0x14	; 20
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	08 d3       	rcall	.+1552   	; 0x852 <main>
     242:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <TWIC_SlaveProcessData>:
	}
}

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
     248:	e0 91 08 22 	lds	r30, 0x2208
	for(uint8_t i = 0; i < NUM_BYTES; i++)
	{
		if (transmitArray[i+askbyte] >= ' ')
     24c:	f0 e0       	ldi	r31, 0x00	; 0
		PORTC.OUTCLR = PIN3_bm;
		switchy = 1;
	}
}

void TWIC_SlaveProcessData(void)
     24e:	e4 59       	subi	r30, 0x94	; 148
     250:	ff 4d       	sbci	r31, 0xDF	; 223
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (transmitArray[i+askbyte] >= ' ')
		{
			twiSlave.sendData[i] = transmitArray[i+askbyte];
			}else{
			twiSlave.sendData[i] = '_';
     256:	3f e5       	ldi	r19, 0x5F	; 95
void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
	for(uint8_t i = 0; i < NUM_BYTES; i++)
	{
		if (transmitArray[i+askbyte] >= ' ')
     258:	21 91       	ld	r18, Z+
     25a:	20 32       	cpi	r18, 0x20	; 32
     25c:	28 f0       	brcs	.+10     	; 0x268 <TWIC_SlaveProcessData+0x20>
		{
			twiSlave.sendData[i] = transmitArray[i+askbyte];
     25e:	dc 01       	movw	r26, r24
     260:	a8 5b       	subi	r26, 0xB8	; 184
     262:	bd 4d       	sbci	r27, 0xDD	; 221
     264:	2c 93       	st	X, r18
     266:	04 c0       	rjmp	.+8      	; 0x270 <TWIC_SlaveProcessData+0x28>
			}else{
			twiSlave.sendData[i] = '_';
     268:	dc 01       	movw	r26, r24
     26a:	a8 5b       	subi	r26, 0xB8	; 184
     26c:	bd 4d       	sbci	r27, 0xDD	; 221
     26e:	3c 93       	st	X, r19
     270:	01 96       	adiw	r24, 0x01	; 1
}

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
	for(uint8_t i = 0; i < NUM_BYTES; i++)
     272:	80 31       	cpi	r24, 0x10	; 16
     274:	91 05       	cpc	r25, r1
     276:	81 f7       	brne	.-32     	; 0x258 <TWIC_SlaveProcessData+0x10>
			twiSlave.sendData[i] = transmitArray[i+askbyte];
			}else{
			twiSlave.sendData[i] = '_';
		}
	}
	if(twiSlave.receivedData[0] == 0x01) transmitArray[5] = '_';
     278:	80 91 08 22 	lds	r24, 0x2208
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	19 f4       	brne	.+6      	; 0x286 <TWIC_SlaveProcessData+0x3e>
     280:	8f e5       	ldi	r24, 0x5F	; 95
     282:	80 93 71 20 	sts	0x2071, r24
     286:	08 95       	ret

00000288 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     288:	1f 92       	push	r1
     28a:	0f 92       	push	r0
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	08 b6       	in	r0, 0x38	; 56
     294:	0f 92       	push	r0
     296:	18 be       	out	0x38, r1	; 56
     298:	09 b6       	in	r0, 0x39	; 57
     29a:	0f 92       	push	r0
     29c:	19 be       	out	0x39, r1	; 57
     29e:	0b b6       	in	r0, 0x3b	; 59
     2a0:	0f 92       	push	r0
     2a2:	1b be       	out	0x3b, r1	; 59
     2a4:	2f 93       	push	r18
     2a6:	3f 93       	push	r19
     2a8:	4f 93       	push	r20
     2aa:	5f 93       	push	r21
     2ac:	6f 93       	push	r22
     2ae:	7f 93       	push	r23
     2b0:	8f 93       	push	r24
     2b2:	9f 93       	push	r25
     2b4:	af 93       	push	r26
     2b6:	bf 93       	push	r27
     2b8:	ef 93       	push	r30
     2ba:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     2bc:	8d e8       	ldi	r24, 0x8D	; 141
     2be:	92 e2       	ldi	r25, 0x22	; 34
     2c0:	6d d6       	rcall	.+3290   	; 0xf9c <USART_RXComplete>
}
     2c2:	ff 91       	pop	r31
     2c4:	ef 91       	pop	r30
     2c6:	bf 91       	pop	r27
     2c8:	af 91       	pop	r26
     2ca:	9f 91       	pop	r25
     2cc:	8f 91       	pop	r24
     2ce:	7f 91       	pop	r23
     2d0:	6f 91       	pop	r22
     2d2:	5f 91       	pop	r21
     2d4:	4f 91       	pop	r20
     2d6:	3f 91       	pop	r19
     2d8:	2f 91       	pop	r18
     2da:	0f 90       	pop	r0
     2dc:	0b be       	out	0x3b, r0	; 59
     2de:	0f 90       	pop	r0
     2e0:	09 be       	out	0x39, r0	; 57
     2e2:	0f 90       	pop	r0
     2e4:	08 be       	out	0x38, r0	; 56
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	08 b6       	in	r0, 0x38	; 56
     2fc:	0f 92       	push	r0
     2fe:	18 be       	out	0x38, r1	; 56
     300:	09 b6       	in	r0, 0x39	; 57
     302:	0f 92       	push	r0
     304:	19 be       	out	0x39, r1	; 57
     306:	0b b6       	in	r0, 0x3b	; 59
     308:	0f 92       	push	r0
     30a:	1b be       	out	0x3b, r1	; 59
     30c:	2f 93       	push	r18
     30e:	3f 93       	push	r19
     310:	4f 93       	push	r20
     312:	5f 93       	push	r21
     314:	6f 93       	push	r22
     316:	7f 93       	push	r23
     318:	8f 93       	push	r24
     31a:	9f 93       	push	r25
     31c:	af 93       	push	r26
     31e:	bf 93       	push	r27
     320:	ef 93       	push	r30
     322:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     324:	8d e8       	ldi	r24, 0x8D	; 141
     326:	92 e2       	ldi	r25, 0x22	; 34
     328:	57 d6       	rcall	.+3246   	; 0xfd8 <USART_DataRegEmpty>
}
     32a:	ff 91       	pop	r31
     32c:	ef 91       	pop	r30
     32e:	bf 91       	pop	r27
     330:	af 91       	pop	r26
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	7f 91       	pop	r23
     338:	6f 91       	pop	r22
     33a:	5f 91       	pop	r21
     33c:	4f 91       	pop	r20
     33e:	3f 91       	pop	r19
     340:	2f 91       	pop	r18
     342:	0f 90       	pop	r0
     344:	0b be       	out	0x3b, r0	; 59
     346:	0f 90       	pop	r0
     348:	09 be       	out	0x39, r0	; 57
     34a:	0f 90       	pop	r0
     34c:	08 be       	out	0x38, r0	; 56
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <__vector_88>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_RXC_vect)
{
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	08 b6       	in	r0, 0x38	; 56
     364:	0f 92       	push	r0
     366:	18 be       	out	0x38, r1	; 56
     368:	09 b6       	in	r0, 0x39	; 57
     36a:	0f 92       	push	r0
     36c:	19 be       	out	0x39, r1	; 57
     36e:	0b b6       	in	r0, 0x3b	; 59
     370:	0f 92       	push	r0
     372:	1b be       	out	0x3b, r1	; 59
     374:	2f 93       	push	r18
     376:	3f 93       	push	r19
     378:	4f 93       	push	r20
     37a:	5f 93       	push	r21
     37c:	6f 93       	push	r22
     37e:	7f 93       	push	r23
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
     384:	af 93       	push	r26
     386:	bf 93       	push	r27
     388:	ef 93       	push	r30
     38a:	ff 93       	push	r31
  USART_RXComplete(&uartD0);
     38c:	8c e6       	ldi	r24, 0x6C	; 108
     38e:	91 e2       	ldi	r25, 0x21	; 33
     390:	05 d6       	rcall	.+3082   	; 0xf9c <USART_RXComplete>
}
     392:	ff 91       	pop	r31
     394:	ef 91       	pop	r30
     396:	bf 91       	pop	r27
     398:	af 91       	pop	r26
     39a:	9f 91       	pop	r25
     39c:	8f 91       	pop	r24
     39e:	7f 91       	pop	r23
     3a0:	6f 91       	pop	r22
     3a2:	5f 91       	pop	r21
     3a4:	4f 91       	pop	r20
     3a6:	3f 91       	pop	r19
     3a8:	2f 91       	pop	r18
     3aa:	0f 90       	pop	r0
     3ac:	0b be       	out	0x3b, r0	; 59
     3ae:	0f 90       	pop	r0
     3b0:	09 be       	out	0x39, r0	; 57
     3b2:	0f 90       	pop	r0
     3b4:	08 be       	out	0x38, r0	; 56
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <__vector_89>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_DRE_vect)
{
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	08 b6       	in	r0, 0x38	; 56
     3cc:	0f 92       	push	r0
     3ce:	18 be       	out	0x38, r1	; 56
     3d0:	09 b6       	in	r0, 0x39	; 57
     3d2:	0f 92       	push	r0
     3d4:	19 be       	out	0x39, r1	; 57
     3d6:	0b b6       	in	r0, 0x3b	; 59
     3d8:	0f 92       	push	r0
     3da:	1b be       	out	0x3b, r1	; 59
     3dc:	2f 93       	push	r18
     3de:	3f 93       	push	r19
     3e0:	4f 93       	push	r20
     3e2:	5f 93       	push	r21
     3e4:	6f 93       	push	r22
     3e6:	7f 93       	push	r23
     3e8:	8f 93       	push	r24
     3ea:	9f 93       	push	r25
     3ec:	af 93       	push	r26
     3ee:	bf 93       	push	r27
     3f0:	ef 93       	push	r30
     3f2:	ff 93       	push	r31
  USART_DataRegEmpty(&uartD0);
     3f4:	8c e6       	ldi	r24, 0x6C	; 108
     3f6:	91 e2       	ldi	r25, 0x21	; 33
     3f8:	ef d5       	rcall	.+3038   	; 0xfd8 <USART_DataRegEmpty>
}
     3fa:	ff 91       	pop	r31
     3fc:	ef 91       	pop	r30
     3fe:	bf 91       	pop	r27
     400:	af 91       	pop	r26
     402:	9f 91       	pop	r25
     404:	8f 91       	pop	r24
     406:	7f 91       	pop	r23
     408:	6f 91       	pop	r22
     40a:	5f 91       	pop	r21
     40c:	4f 91       	pop	r20
     40e:	3f 91       	pop	r19
     410:	2f 91       	pop	r18
     412:	0f 90       	pop	r0
     414:	0b be       	out	0x3b, r0	; 59
     416:	0f 90       	pop	r0
     418:	09 be       	out	0x39, r0	; 57
     41a:	0f 90       	pop	r0
     41c:	08 be       	out	0x38, r0	; 56
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <__vector_12>:
		_delay_ms(1000);
	}
}

ISR(TWIC_TWIS_vect)
{
     428:	1f 92       	push	r1
     42a:	0f 92       	push	r0
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	0f 92       	push	r0
     430:	11 24       	eor	r1, r1
     432:	08 b6       	in	r0, 0x38	; 56
     434:	0f 92       	push	r0
     436:	18 be       	out	0x38, r1	; 56
     438:	09 b6       	in	r0, 0x39	; 57
     43a:	0f 92       	push	r0
     43c:	19 be       	out	0x39, r1	; 57
     43e:	0b b6       	in	r0, 0x3b	; 59
     440:	0f 92       	push	r0
     442:	1b be       	out	0x3b, r1	; 59
     444:	2f 93       	push	r18
     446:	3f 93       	push	r19
     448:	4f 93       	push	r20
     44a:	5f 93       	push	r21
     44c:	6f 93       	push	r22
     44e:	7f 93       	push	r23
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
     454:	af 93       	push	r26
     456:	bf 93       	push	r27
     458:	ef 93       	push	r30
     45a:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twiSlave);
     45c:	84 e0       	ldi	r24, 0x04	; 4
     45e:	92 e2       	ldi	r25, 0x22	; 34
     460:	86 d3       	rcall	.+1804   	; 0xb6e <TWI_SlaveInterruptHandler>
}
     462:	ff 91       	pop	r31
     464:	ef 91       	pop	r30
     466:	bf 91       	pop	r27
     468:	af 91       	pop	r26
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	7f 91       	pop	r23
     470:	6f 91       	pop	r22
     472:	5f 91       	pop	r21
     474:	4f 91       	pop	r20
     476:	3f 91       	pop	r19
     478:	2f 91       	pop	r18
     47a:	0f 90       	pop	r0
     47c:	0b be       	out	0x3b, r0	; 59
     47e:	0f 90       	pop	r0
     480:	09 be       	out	0x39, r0	; 57
     482:	0f 90       	pop	r0
     484:	08 be       	out	0x38, r0	; 56
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <__vector_2>:

ISR(PORTC_INT0_vect)//start uart delay
{
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	08 b6       	in	r0, 0x38	; 56
     49c:	0f 92       	push	r0
     49e:	18 be       	out	0x38, r1	; 56
     4a0:	8f 93       	push	r24
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
     4a2:	87 e0       	ldi	r24, 0x07	; 7
     4a4:	80 93 40 08 	sts	0x0840, r24
}
     4a8:	8f 91       	pop	r24
     4aa:	0f 90       	pop	r0
     4ac:	08 be       	out	0x38, r0	; 56
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <__vector_20>:

ISR(TCC1_OVF_vect)//uart delay
{
     4b8:	1f 92       	push	r1
     4ba:	0f 92       	push	r0
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	0f 92       	push	r0
     4c0:	11 24       	eor	r1, r1
     4c2:	08 b6       	in	r0, 0x38	; 56
     4c4:	0f 92       	push	r0
     4c6:	18 be       	out	0x38, r1	; 56
     4c8:	09 b6       	in	r0, 0x39	; 57
     4ca:	0f 92       	push	r0
     4cc:	19 be       	out	0x39, r1	; 57
     4ce:	0a b6       	in	r0, 0x3a	; 58
     4d0:	0f 92       	push	r0
     4d2:	1a be       	out	0x3a, r1	; 58
     4d4:	0b b6       	in	r0, 0x3b	; 59
     4d6:	0f 92       	push	r0
     4d8:	1b be       	out	0x3b, r1	; 59
     4da:	df 92       	push	r13
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	2f 93       	push	r18
     4e6:	3f 93       	push	r19
     4e8:	4f 93       	push	r20
     4ea:	5f 93       	push	r21
     4ec:	6f 93       	push	r22
     4ee:	7f 93       	push	r23
     4f0:	8f 93       	push	r24
     4f2:	9f 93       	push	r25
     4f4:	af 93       	push	r26
     4f6:	bf 93       	push	r27
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ef 93       	push	r30
     4fe:	ff 93       	push	r31
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     500:	10 92 40 08 	sts	0x0840, r1
     504:	03 ef       	ldi	r16, 0xF3	; 243
     506:	11 e2       	ldi	r17, 0x21	; 33
ISR(PORTC_INT0_vect)//start uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
}

ISR(TCC1_OVF_vect)//uart delay
     508:	0f 2e       	mov	r0, r31
     50a:	f3 e0       	ldi	r31, 0x03	; 3
     50c:	ef 2e       	mov	r14, r31
     50e:	f2 e2       	ldi	r31, 0x22	; 34
     510:	ff 2e       	mov	r15, r31
     512:	f0 2d       	mov	r31, r0
     514:	e8 01       	movw	r28, r16
	{
		if (USART_RXBufferData_Available(&uartC1))
		{
			receiveArray[i] = USART_RXBuffer_GetByte(&uartC1);
		}else{
			receiveArray[i] = '_';
     516:	0f 2e       	mov	r0, r31
     518:	ff e5       	ldi	r31, 0x5F	; 95
     51a:	df 2e       	mov	r13, r31
     51c:	f0 2d       	mov	r31, r0
{
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
	int i = 0;
	while (i < NUM_BYTES)
	{
		if (USART_RXBufferData_Available(&uartC1))
     51e:	8d e8       	ldi	r24, 0x8D	; 141
     520:	92 e2       	ldi	r25, 0x22	; 34
     522:	21 d5       	rcall	.+2626   	; 0xf66 <USART_RXBufferData_Available>
     524:	88 23       	and	r24, r24
     526:	29 f0       	breq	.+10     	; 0x532 <__vector_20+0x7a>
		{
			receiveArray[i] = USART_RXBuffer_GetByte(&uartC1);
     528:	8d e8       	ldi	r24, 0x8D	; 141
     52a:	92 e2       	ldi	r25, 0x22	; 34
     52c:	29 d5       	rcall	.+2642   	; 0xf80 <USART_RXBuffer_GetByte>
     52e:	88 83       	st	Y, r24
     530:	01 c0       	rjmp	.+2      	; 0x534 <__vector_20+0x7c>
		}else{
			receiveArray[i] = '_';
     532:	d8 82       	st	Y, r13
     534:	21 96       	adiw	r28, 0x01	; 1

ISR(TCC1_OVF_vect)//uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
	int i = 0;
	while (i < NUM_BYTES)
     536:	ce 15       	cp	r28, r14
     538:	df 05       	cpc	r29, r15
     53a:	89 f7       	brne	.-30     	; 0x51e <__vector_20+0x66>
		}
		i++;
	}
	
	i = 0;
	uart_puts(&uartD0, "ID: ");
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e2       	ldi	r23, 0x20	; 32
     540:	8c e6       	ldi	r24, 0x6C	; 108
     542:	91 e2       	ldi	r25, 0x21	; 33
     544:	5e d3       	rcall	.+1724   	; 0xc02 <uart_puts>
     546:	cb e7       	ldi	r28, 0x7B	; 123
     548:	d0 e2       	ldi	r29, 0x20	; 32
	while (i < NUM_BYTES)
	{
		transmitArray[i+0x0F] = receiveArray[i];
     54a:	f8 01       	movw	r30, r16
     54c:	61 91       	ld	r22, Z+
     54e:	8f 01       	movw	r16, r30
     550:	69 93       	st	Y+, r22
		uart_putc(&uartD0, receiveArray[i]);
     552:	8c e6       	ldi	r24, 0x6C	; 108
     554:	91 e2       	ldi	r25, 0x21	; 33
     556:	46 d3       	rcall	.+1676   	; 0xbe4 <uart_putc>
		i++;
	}
	
	i = 0;
	uart_puts(&uartD0, "ID: ");
	while (i < NUM_BYTES)
     558:	e0 16       	cp	r14, r16
     55a:	f1 06       	cpc	r15, r17
     55c:	b1 f7       	brne	.-20     	; 0x54a <__vector_20+0x92>
	{
		transmitArray[i+0x0F] = receiveArray[i];
		uart_putc(&uartD0, receiveArray[i]);
		i++;
	}
	transmitArray[5] = 'B'; //beep -> NXT
     55e:	82 e4       	ldi	r24, 0x42	; 66
     560:	80 93 71 20 	sts	0x2071, r24
}
     564:	ff 91       	pop	r31
     566:	ef 91       	pop	r30
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	bf 91       	pop	r27
     56e:	af 91       	pop	r26
     570:	9f 91       	pop	r25
     572:	8f 91       	pop	r24
     574:	7f 91       	pop	r23
     576:	6f 91       	pop	r22
     578:	5f 91       	pop	r21
     57a:	4f 91       	pop	r20
     57c:	3f 91       	pop	r19
     57e:	2f 91       	pop	r18
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	df 90       	pop	r13
     58a:	0f 90       	pop	r0
     58c:	0b be       	out	0x3b, r0	; 59
     58e:	0f 90       	pop	r0
     590:	0a be       	out	0x3a, r0	; 58
     592:	0f 90       	pop	r0
     594:	09 be       	out	0x39, r0	; 57
     596:	0f 90       	pop	r0
     598:	08 be       	out	0x38, r0	; 56
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <__vector_79>:

ISR(TCD0_CCA_vect) //sonar A
{
     5a4:	1f 92       	push	r1
     5a6:	0f 92       	push	r0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	08 b6       	in	r0, 0x38	; 56
     5b0:	0f 92       	push	r0
     5b2:	18 be       	out	0x38, r1	; 56
     5b4:	09 b6       	in	r0, 0x39	; 57
     5b6:	0f 92       	push	r0
     5b8:	19 be       	out	0x39, r1	; 57
     5ba:	0a b6       	in	r0, 0x3a	; 58
     5bc:	0f 92       	push	r0
     5be:	1a be       	out	0x3a, r1	; 58
     5c0:	0b b6       	in	r0, 0x3b	; 59
     5c2:	0f 92       	push	r0
     5c4:	1b be       	out	0x3b, r1	; 59
     5c6:	2f 93       	push	r18
     5c8:	3f 93       	push	r19
     5ca:	4f 93       	push	r20
     5cc:	5f 93       	push	r21
     5ce:	6f 93       	push	r22
     5d0:	7f 93       	push	r23
     5d2:	8f 93       	push	r24
     5d4:	9f 93       	push	r25
     5d6:	af 93       	push	r26
     5d8:	bf 93       	push	r27
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ef 93       	push	r30
     5e0:	ff 93       	push	r31
	uint16_t time = TCD0.CCA;
     5e2:	c0 e0       	ldi	r28, 0x00	; 0
     5e4:	d9 e0       	ldi	r29, 0x09	; 9
     5e6:	28 a5       	ldd	r18, Y+40	; 0x28
     5e8:	39 a5       	ldd	r19, Y+41	; 0x29
	transmitArray[0x22] = '0';
     5ea:	80 e3       	ldi	r24, 0x30	; 48
     5ec:	80 93 8e 20 	sts	0x208E, r24
	transmitArray[0x21] = '0';
     5f0:	80 93 8d 20 	sts	0x208D, r24
	transmitArray[0x20] = '0';
     5f4:	80 93 8c 20 	sts	0x208C, r24
	int cm = time/116;
     5f8:	af e9       	ldi	r26, 0x9F	; 159
     5fa:	b6 e4       	ldi	r27, 0x46	; 70
     5fc:	48 d7       	rcall	.+3728   	; 0x148e <__umulhisi3>
     5fe:	96 95       	lsr	r25
     600:	87 95       	ror	r24
     602:	92 95       	swap	r25
     604:	82 95       	swap	r24
     606:	8f 70       	andi	r24, 0x0F	; 15
     608:	89 27       	eor	r24, r25
     60a:	9f 70       	andi	r25, 0x0F	; 15
     60c:	89 27       	eor	r24, r25
	sprintf(str, "Zonar A = %04d cm\n\r", cm);
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	85 e0       	ldi	r24, 0x05	; 5
     614:	90 e2       	ldi	r25, 0x20	; 32
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	84 e1       	ldi	r24, 0x14	; 20
     61c:	93 e2       	ldi	r25, 0x23	; 35
     61e:	9f 93       	push	r25
     620:	8f 93       	push	r24
     622:	41 d7       	rcall	.+3714   	; 0x14a6 <sprintf>
	uart_puts(&uartD0, str);
     624:	64 e1       	ldi	r22, 0x14	; 20
     626:	73 e2       	ldi	r23, 0x23	; 35
     628:	8c e6       	ldi	r24, 0x6C	; 108
     62a:	91 e2       	ldi	r25, 0x21	; 33
     62c:	ea d2       	rcall	.+1492   	; 0xc02 <uart_puts>
	{
		transmitArray[0x20]++;
		cm-=1;
	}
	*/
	TCD0.CTRLFSET = TC_CMD_RESTART_gc;
     62e:	88 e0       	ldi	r24, 0x08	; 8
     630:	89 87       	std	Y+9, r24	; 0x09
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
}
     63e:	ff 91       	pop	r31
     640:	ef 91       	pop	r30
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	bf 91       	pop	r27
     648:	af 91       	pop	r26
     64a:	9f 91       	pop	r25
     64c:	8f 91       	pop	r24
     64e:	7f 91       	pop	r23
     650:	6f 91       	pop	r22
     652:	5f 91       	pop	r21
     654:	4f 91       	pop	r20
     656:	3f 91       	pop	r19
     658:	2f 91       	pop	r18
     65a:	0f 90       	pop	r0
     65c:	0b be       	out	0x3b, r0	; 59
     65e:	0f 90       	pop	r0
     660:	0a be       	out	0x3a, r0	; 58
     662:	0f 90       	pop	r0
     664:	09 be       	out	0x39, r0	; 57
     666:	0f 90       	pop	r0
     668:	08 be       	out	0x38, r0	; 56
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <__vector_85>:

ISR(TCD1_CCA_vect) //Sonar B
{
     674:	1f 92       	push	r1
     676:	0f 92       	push	r0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	08 b6       	in	r0, 0x38	; 56
     680:	0f 92       	push	r0
     682:	18 be       	out	0x38, r1	; 56
     684:	0b b6       	in	r0, 0x3b	; 59
     686:	0f 92       	push	r0
     688:	1b be       	out	0x3b, r1	; 59
     68a:	8f 93       	push	r24
     68c:	9f 93       	push	r25
     68e:	ef 93       	push	r30
     690:	ff 93       	push	r31
	uint16_t time = TCD1.CCA;
     692:	e0 e4       	ldi	r30, 0x40	; 64
     694:	f9 e0       	ldi	r31, 0x09	; 9
     696:	80 a5       	ldd	r24, Z+40	; 0x28
     698:	91 a5       	ldd	r25, Z+41	; 0x29
	transmitArray[0x32] = '0';
     69a:	80 e3       	ldi	r24, 0x30	; 48
     69c:	80 93 9e 20 	sts	0x209E, r24
	transmitArray[0x31] = '0';
     6a0:	80 93 9d 20 	sts	0x209D, r24
	transmitArray[0x30] = '0';
     6a4:	80 93 9c 20 	sts	0x209C, r24
	{
		transmitArray[0x30]++;
		cm-=1;
	}
	*/
	TCD1.CTRLFSET = TC_CMD_RESTART_gc;
     6a8:	88 e0       	ldi	r24, 0x08	; 8
     6aa:	81 87       	std	Z+9, r24	; 0x09
}
     6ac:	ff 91       	pop	r31
     6ae:	ef 91       	pop	r30
     6b0:	9f 91       	pop	r25
     6b2:	8f 91       	pop	r24
     6b4:	0f 90       	pop	r0
     6b6:	0b be       	out	0x3b, r0	; 59
     6b8:	0f 90       	pop	r0
     6ba:	08 be       	out	0x38, r0	; 56
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <__vector_47>:

ISR(TCE0_OVF_vect) //trigger sonar, cascading
{
     6c6:	1f 92       	push	r1
     6c8:	0f 92       	push	r0
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	0f 92       	push	r0
     6ce:	11 24       	eor	r1, r1
     6d0:	08 b6       	in	r0, 0x38	; 56
     6d2:	0f 92       	push	r0
     6d4:	18 be       	out	0x38, r1	; 56
     6d6:	0b b6       	in	r0, 0x3b	; 59
     6d8:	0f 92       	push	r0
     6da:	1b be       	out	0x3b, r1	; 59
     6dc:	8f 93       	push	r24
     6de:	9f 93       	push	r25
     6e0:	ef 93       	push	r30
     6e2:	ff 93       	push	r31
	if (switchy)
     6e4:	80 91 03 22 	lds	r24, 0x2203
     6e8:	88 23       	and	r24, r24
     6ea:	61 f0       	breq	.+24     	; 0x704 <__vector_47+0x3e>
	{
		PORTC.OUTSET = PIN2_bm;
     6ec:	e0 e4       	ldi	r30, 0x40	; 64
     6ee:	f6 e0       	ldi	r31, 0x06	; 6
     6f0:	84 e0       	ldi	r24, 0x04	; 4
     6f2:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f4:	96 e0       	ldi	r25, 0x06	; 6
     6f6:	9a 95       	dec	r25
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <__vector_47+0x30>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <__vector_47+0x36>
		_delay_us(10);
		PORTC.OUTCLR = PIN2_bm;
     6fc:	86 83       	std	Z+6, r24	; 0x06
		switchy = 0;
     6fe:	10 92 03 22 	sts	0x2203, r1
     702:	0c c0       	rjmp	.+24     	; 0x71c <__vector_47+0x56>
	} 
	else
	{
		PORTC.OUTSET = PIN3_bm;
     704:	e0 e4       	ldi	r30, 0x40	; 64
     706:	f6 e0       	ldi	r31, 0x06	; 6
     708:	88 e0       	ldi	r24, 0x08	; 8
     70a:	85 83       	std	Z+5, r24	; 0x05
     70c:	96 e0       	ldi	r25, 0x06	; 6
     70e:	9a 95       	dec	r25
     710:	f1 f7       	brne	.-4      	; 0x70e <__vector_47+0x48>
     712:	00 c0       	rjmp	.+0      	; 0x714 <__vector_47+0x4e>
		_delay_us(10);
		PORTC.OUTCLR = PIN3_bm;
     714:	86 83       	std	Z+6, r24	; 0x06
		switchy = 1;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 03 22 	sts	0x2203, r24
	}
}
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	9f 91       	pop	r25
     722:	8f 91       	pop	r24
     724:	0f 90       	pop	r0
     726:	0b be       	out	0x3b, r0	; 59
     728:	0f 90       	pop	r0
     72a:	08 be       	out	0x38, r0	; 56
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <init_all>:
	}
	if(twiSlave.receivedData[0] == 0x01) transmitArray[5] = '_';
}

void init_all(void)
{
     736:	cf 92       	push	r12
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
	// set port direction //
	PORTE.DIRSET = PIN0_bm; //debug led
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	e0 e8       	ldi	r30, 0x80	; 128
     748:	f6 e0       	ldi	r31, 0x06	; 6
     74a:	21 83       	std	Z+1, r18	; 0x01
	PORTC.DIRSET = PIN2_bm|PIN3_bm; //sonar trigger
     74c:	e0 e4       	ldi	r30, 0x40	; 64
     74e:	f6 e0       	ldi	r31, 0x06	; 6
     750:	8c e0       	ldi	r24, 0x0C	; 12
     752:	81 83       	std	Z+1, r24	; 0x01

	// set timers //
	//delay for uart read need other solution
	PORTC.INT0MASK = PIN6_bm;
     754:	80 e4       	ldi	r24, 0x40	; 64
     756:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.PIN6CTRL = PORT_ISC_RISING_gc;
     758:	26 8b       	std	Z+22, r18	; 0x16
	PORTC.INTCTRL  = PORT_INT0LVL_LO_gc;
     75a:	21 87       	std	Z+9, r18	; 0x09
	TCC1.CTRLB     = TC_WGMODE_NORMAL_gc;
     75c:	a0 e4       	ldi	r26, 0x40	; 64
     75e:	b8 e0       	ldi	r27, 0x08	; 8
     760:	11 96       	adiw	r26, 0x01	; 1
     762:	1c 92       	st	X, r1
     764:	11 97       	sbiw	r26, 0x01	; 1
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     766:	1c 92       	st	X, r1
	TCC1.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     768:	16 96       	adiw	r26, 0x06	; 6
     76a:	2c 93       	st	X, r18
     76c:	16 97       	sbiw	r26, 0x06	; 6
	TCC1.PER       = 400;
     76e:	80 e9       	ldi	r24, 0x90	; 144
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	96 96       	adiw	r26, 0x26	; 38
     774:	8d 93       	st	X+, r24
     776:	9c 93       	st	X, r25
     778:	97 97       	sbiw	r26, 0x27	; 39
	//sonar request
	TCE0.CTRLB     = TC_WGMODE_NORMAL_gc;
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	ba e0       	ldi	r27, 0x0A	; 10
     77e:	11 96       	adiw	r26, 0x01	; 1
     780:	1c 92       	st	X, r1
     782:	11 97       	sbiw	r26, 0x01	; 1
	TCE0.CTRLA     = TC_CLKSEL_DIV1024_gc;
     784:	87 e0       	ldi	r24, 0x07	; 7
     786:	8c 93       	st	X, r24
	TCE0.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     788:	16 96       	adiw	r26, 0x06	; 6
     78a:	2c 93       	st	X, r18
     78c:	16 97       	sbiw	r26, 0x06	; 6
	TCE0.PER       = 500;//195;//~10Hz so 5Hz each
     78e:	84 ef       	ldi	r24, 0xF4	; 244
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	96 96       	adiw	r26, 0x26	; 38
     794:	8d 93       	st	X+, r24
     796:	9c 93       	st	X, r25
     798:	97 97       	sbiw	r26, 0x27	; 39
	//timer for sonar A
	PORTC.PIN4CTRL = PORT_ISC_BOTHEDGES_gc;
     79a:	14 8a       	std	Z+20, r1	; 0x14
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
     79c:	c0 e8       	ldi	r28, 0x80	; 128
     79e:	d1 e0       	ldi	r29, 0x01	; 1
     7a0:	84 e6       	ldi	r24, 0x64	; 100
     7a2:	88 83       	st	Y, r24
	TCD0.CTRLD = TC_EVACT_PW_gc | TC_EVSEL_CH0_gc;
     7a4:	a0 e0       	ldi	r26, 0x00	; 0
     7a6:	b9 e0       	ldi	r27, 0x09	; 9
     7a8:	88 ec       	ldi	r24, 0xC8	; 200
     7aa:	13 96       	adiw	r26, 0x03	; 3
     7ac:	8c 93       	st	X, r24
     7ae:	13 97       	sbiw	r26, 0x03	; 3
	TCD0.CTRLB = TC0_CCAEN_bm | TC_WGMODE_NORMAL_gc;
     7b0:	30 e1       	ldi	r19, 0x10	; 16
     7b2:	11 96       	adiw	r26, 0x01	; 1
     7b4:	3c 93       	st	X, r19
     7b6:	11 97       	sbiw	r26, 0x01	; 1
	TCD0.CTRLA = TC_CLKSEL_DIV1_gc;
     7b8:	2c 93       	st	X, r18
	TCD0.INTCTRLB = TC_CCAINTLVL_LO_gc;
     7ba:	17 96       	adiw	r26, 0x07	; 7
     7bc:	2c 93       	st	X, r18
     7be:	17 97       	sbiw	r26, 0x07	; 7
	TCD0.PER = 0xFFFF;
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	9f ef       	ldi	r25, 0xFF	; 255
     7c4:	96 96       	adiw	r26, 0x26	; 38
     7c6:	8d 93       	st	X+, r24
     7c8:	9c 93       	st	X, r25
     7ca:	97 97       	sbiw	r26, 0x27	; 39
	//timer for sonar B
	PORTC.PIN5CTRL = PORT_ISC_BOTHEDGES_gc;
     7cc:	15 8a       	std	Z+21, r1	; 0x15
	EVSYS.CH1MUX = EVSYS_CHMUX_PORTC_PIN5_gc;
     7ce:	45 e6       	ldi	r20, 0x65	; 101
     7d0:	49 83       	std	Y+1, r20	; 0x01
	TCD1.CTRLD = TC_EVACT_PW_gc | TC_EVSEL_CH1_gc;
     7d2:	e0 e4       	ldi	r30, 0x40	; 64
     7d4:	f9 e0       	ldi	r31, 0x09	; 9
     7d6:	49 ec       	ldi	r20, 0xC9	; 201
     7d8:	43 83       	std	Z+3, r20	; 0x03
	TCD1.CTRLB = TC1_CCAEN_bm | TC_WGMODE_NORMAL_gc;
     7da:	31 83       	std	Z+1, r19	; 0x01
	TCD1.CTRLA = TC_CLKSEL_DIV1_gc;
     7dc:	20 83       	st	Z, r18
	TCD1.INTCTRLB = TC_CCAINTLVL_LO_gc;
     7de:	27 83       	std	Z+7, r18	; 0x07
	TCD1.PER = 0xFFFF;
     7e0:	86 a3       	std	Z+38, r24	; 0x26
     7e2:	97 a3       	std	Z+39, r25	; 0x27
	
	// set uart's //
	init_uart(&uartD0, &USARTD0, F_CPU, D0_BAUD, D0_CLK2X); //debug
     7e4:	c1 2c       	mov	r12, r1
     7e6:	e1 2c       	mov	r14, r1
     7e8:	12 ec       	ldi	r17, 0xC2	; 194
     7ea:	f1 2e       	mov	r15, r17
     7ec:	01 e0       	ldi	r16, 0x01	; 1
     7ee:	10 e0       	ldi	r17, 0x00	; 0
     7f0:	20 e8       	ldi	r18, 0x80	; 128
     7f2:	34 e8       	ldi	r19, 0x84	; 132
     7f4:	4e e1       	ldi	r20, 0x1E	; 30
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	60 ea       	ldi	r22, 0xA0	; 160
     7fa:	79 e0       	ldi	r23, 0x09	; 9
     7fc:	8c e6       	ldi	r24, 0x6C	; 108
     7fe:	91 e2       	ldi	r25, 0x21	; 33
     800:	12 d3       	rcall	.+1572   	; 0xe26 <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); //RFID reader
     802:	10 e8       	ldi	r17, 0x80	; 128
     804:	e1 2e       	mov	r14, r17
     806:	15 e2       	ldi	r17, 0x25	; 37
     808:	f1 2e       	mov	r15, r17
     80a:	00 e0       	ldi	r16, 0x00	; 0
     80c:	10 e0       	ldi	r17, 0x00	; 0
     80e:	20 e8       	ldi	r18, 0x80	; 128
     810:	34 e8       	ldi	r19, 0x84	; 132
     812:	4e e1       	ldi	r20, 0x1E	; 30
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	60 eb       	ldi	r22, 0xB0	; 176
     818:	78 e0       	ldi	r23, 0x08	; 8
     81a:	8d e8       	ldi	r24, 0x8D	; 141
     81c:	92 e2       	ldi	r25, 0x22	; 34
     81e:	03 d3       	rcall	.+1542   	; 0xe26 <init_uart>
	
	// set TWI as slave for NXT //
	TWI_SlaveInitializeDriver(&twiSlave, &TWIC, TWIC_SlaveProcessData);
     820:	44 e2       	ldi	r20, 0x24	; 36
     822:	51 e0       	ldi	r21, 0x01	; 1
     824:	60 e8       	ldi	r22, 0x80	; 128
     826:	74 e0       	ldi	r23, 0x04	; 4
     828:	84 e0       	ldi	r24, 0x04	; 4
     82a:	92 e2       	ldi	r25, 0x22	; 34
     82c:	ad d0       	rcall	.+346    	; 0x988 <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twiSlave, SLAVE_ADDRESS, TWI_SLAVE_INTLVL_MED_gc);
     82e:	40 e8       	ldi	r20, 0x80	; 128
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	92 e2       	ldi	r25, 0x22	; 34
     836:	c1 d0       	rcall	.+386    	; 0x9ba <TWI_SlaveInitializeModule>
	
	// Turnon interrupts //
	PMIC.CTRL = PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm;
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	e0 ea       	ldi	r30, 0xA0	; 160
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	82 83       	std	Z+2, r24	; 0x02
	sei();
     840:	78 94       	sei
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	cf 90       	pop	r12
     850:	08 95       	ret

00000852 <main>:
void TWIC_SlaveProcessData(void);
void init_all(void);

int main(void)
{
	init_all();
     852:	71 df       	rcall	.-286    	; 0x736 <init_all>
	
	sprintf(str, "UART Connected!!!\n\r");
     854:	84 e1       	ldi	r24, 0x14	; 20
     856:	e9 e1       	ldi	r30, 0x19	; 25
     858:	f0 e2       	ldi	r31, 0x20	; 32
     85a:	a4 e1       	ldi	r26, 0x14	; 20
     85c:	b3 e2       	ldi	r27, 0x23	; 35
     85e:	01 90       	ld	r0, Z+
     860:	0d 92       	st	X+, r0
     862:	8a 95       	dec	r24
     864:	e1 f7       	brne	.-8      	; 0x85e <main+0xc>
	uart_puts(&uartD0, str);
     866:	64 e1       	ldi	r22, 0x14	; 20
     868:	73 e2       	ldi	r23, 0x23	; 35
     86a:	8c e6       	ldi	r24, 0x6C	; 108
     86c:	91 e2       	ldi	r25, 0x21	; 33
     86e:	c9 d1       	rcall	.+914    	; 0xc02 <uart_puts>
	
	uint8_t x = 0;
     870:	71 2c       	mov	r7, r1
	while(1)
	{
		transmitArray[0] = 'T';
     872:	0f 2e       	mov	r0, r31
     874:	fc e6       	ldi	r31, 0x6C	; 108
     876:	af 2e       	mov	r10, r31
     878:	f0 e2       	ldi	r31, 0x20	; 32
     87a:	bf 2e       	mov	r11, r31
     87c:	f0 2d       	mov	r31, r0
		transmitArray[1] = 'W';
     87e:	0f 2e       	mov	r0, r31
     880:	fd e6       	ldi	r31, 0x6D	; 109
     882:	cf 2e       	mov	r12, r31
     884:	f0 e2       	ldi	r31, 0x20	; 32
     886:	df 2e       	mov	r13, r31
     888:	f0 2d       	mov	r31, r0
     88a:	0f 2e       	mov	r0, r31
     88c:	f7 e5       	ldi	r31, 0x57	; 87
     88e:	4f 2e       	mov	r4, r31
     890:	f0 2d       	mov	r31, r0
		transmitArray[2] = 'I';
     892:	0f 2e       	mov	r0, r31
     894:	f9 e4       	ldi	r31, 0x49	; 73
     896:	5f 2e       	mov	r5, r31
     898:	f0 2d       	mov	r31, r0
		transmitArray[3] = ' ';
     89a:	68 94       	set
     89c:	66 24       	eor	r6, r6
     89e:	65 f8       	bld	r6, 5
		transmitArray[4] = '0'+x;
     8a0:	0f 2e       	mov	r0, r31
     8a2:	f0 e7       	ldi	r31, 0x70	; 112
     8a4:	8f 2e       	mov	r8, r31
     8a6:	f0 e2       	ldi	r31, 0x20	; 32
     8a8:	9f 2e       	mov	r9, r31
     8aa:	f0 2d       	mov	r31, r0
		sprintf(str, "still alive! %d\n\r", x);
     8ac:	0f 2e       	mov	r0, r31
     8ae:	fd e2       	ldi	r31, 0x2D	; 45
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f0 e2       	ldi	r31, 0x20	; 32
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
     8b8:	c4 e1       	ldi	r28, 0x14	; 20
     8ba:	d3 e2       	ldi	r29, 0x23	; 35
		uart_puts(&uartD0, str);
		sprintf(str, "Sonar A = %c%c%c cm\n\r", transmitArray[0x20], transmitArray[0x21], transmitArray[0x22]);
     8bc:	0f e3       	ldi	r16, 0x3F	; 63
     8be:	10 e2       	ldi	r17, 0x20	; 32
		uart_puts(&uartD0, str);
		sprintf(str, "Sonar B = %c%c%c cm\n\r", transmitArray[0x30], transmitArray[0x31], transmitArray[0x32]);
     8c0:	0f 2e       	mov	r0, r31
     8c2:	fd e9       	ldi	r31, 0x9D	; 157
     8c4:	2f 2e       	mov	r2, r31
     8c6:	f0 e2       	ldi	r31, 0x20	; 32
     8c8:	3f 2e       	mov	r3, r31
     8ca:	f0 2d       	mov	r31, r0
	uart_puts(&uartD0, str);
	
	uint8_t x = 0;
	while(1)
	{
		transmitArray[0] = 'T';
     8cc:	24 e5       	ldi	r18, 0x54	; 84
     8ce:	f5 01       	movw	r30, r10
     8d0:	20 83       	st	Z, r18
		transmitArray[1] = 'W';
     8d2:	f6 01       	movw	r30, r12
     8d4:	40 82       	st	Z, r4
		transmitArray[2] = 'I';
     8d6:	ee e6       	ldi	r30, 0x6E	; 110
     8d8:	f0 e2       	ldi	r31, 0x20	; 32
     8da:	50 82       	st	Z, r5
		transmitArray[3] = ' ';
     8dc:	ef e6       	ldi	r30, 0x6F	; 111
     8de:	f0 e2       	ldi	r31, 0x20	; 32
     8e0:	60 82       	st	Z, r6
		transmitArray[4] = '0'+x;
     8e2:	87 2d       	mov	r24, r7
     8e4:	80 5d       	subi	r24, 0xD0	; 208
     8e6:	f4 01       	movw	r30, r8
     8e8:	80 83       	st	Z, r24
		sprintf(str, "still alive! %d\n\r", x);
     8ea:	1f 92       	push	r1
     8ec:	7f 92       	push	r7
     8ee:	ff 92       	push	r15
     8f0:	ef 92       	push	r14
     8f2:	df 93       	push	r29
     8f4:	cf 93       	push	r28
     8f6:	d7 d5       	rcall	.+2990   	; 0x14a6 <sprintf>
		uart_puts(&uartD0, str);
     8f8:	be 01       	movw	r22, r28
     8fa:	8c e6       	ldi	r24, 0x6C	; 108
     8fc:	91 e2       	ldi	r25, 0x21	; 33
     8fe:	81 d1       	rcall	.+770    	; 0xc02 <uart_puts>
		sprintf(str, "Sonar A = %c%c%c cm\n\r", transmitArray[0x20], transmitArray[0x21], transmitArray[0x22]);
     900:	ee e8       	ldi	r30, 0x8E	; 142
     902:	f0 e2       	ldi	r31, 0x20	; 32
     904:	80 81       	ld	r24, Z
     906:	1f 92       	push	r1
     908:	8f 93       	push	r24
     90a:	ed e8       	ldi	r30, 0x8D	; 141
     90c:	f0 e2       	ldi	r31, 0x20	; 32
     90e:	80 81       	ld	r24, Z
     910:	1f 92       	push	r1
     912:	8f 93       	push	r24
     914:	ec e8       	ldi	r30, 0x8C	; 140
     916:	f0 e2       	ldi	r31, 0x20	; 32
     918:	80 81       	ld	r24, Z
     91a:	1f 92       	push	r1
     91c:	8f 93       	push	r24
     91e:	1f 93       	push	r17
     920:	0f 93       	push	r16
     922:	df 93       	push	r29
     924:	cf 93       	push	r28
     926:	bf d5       	rcall	.+2942   	; 0x14a6 <sprintf>
		uart_puts(&uartD0, str);
     928:	be 01       	movw	r22, r28
     92a:	8c e6       	ldi	r24, 0x6C	; 108
     92c:	91 e2       	ldi	r25, 0x21	; 33
     92e:	69 d1       	rcall	.+722    	; 0xc02 <uart_puts>
		sprintf(str, "Sonar B = %c%c%c cm\n\r", transmitArray[0x30], transmitArray[0x31], transmitArray[0x32]);
     930:	ee e9       	ldi	r30, 0x9E	; 158
     932:	f0 e2       	ldi	r31, 0x20	; 32
     934:	80 81       	ld	r24, Z
     936:	1f 92       	push	r1
     938:	8f 93       	push	r24
     93a:	f1 01       	movw	r30, r2
     93c:	80 81       	ld	r24, Z
     93e:	1f 92       	push	r1
     940:	8f 93       	push	r24
     942:	80 91 9c 20 	lds	r24, 0x209C
     946:	1f 92       	push	r1
     948:	8f 93       	push	r24
     94a:	85 e5       	ldi	r24, 0x55	; 85
     94c:	90 e2       	ldi	r25, 0x20	; 32
     94e:	9f 93       	push	r25
     950:	8f 93       	push	r24
     952:	df 93       	push	r29
     954:	cf 93       	push	r28
     956:	a7 d5       	rcall	.+2894   	; 0x14a6 <sprintf>
		uart_puts(&uartD0, str);
     958:	be 01       	movw	r22, r28
     95a:	8c e6       	ldi	r24, 0x6C	; 108
     95c:	91 e2       	ldi	r25, 0x21	; 33
     95e:	51 d1       	rcall	.+674    	; 0xc02 <uart_puts>
		x++;
     960:	73 94       	inc	r7
		if (x>=10)
     962:	8d b7       	in	r24, 0x3d	; 61
     964:	9e b7       	in	r25, 0x3e	; 62
     966:	4a 96       	adiw	r24, 0x1a	; 26
     968:	8d bf       	out	0x3d, r24	; 61
     96a:	9e bf       	out	0x3e, r25	; 62
     96c:	99 e0       	ldi	r25, 0x09	; 9
     96e:	97 15       	cp	r25, r7
     970:	08 f4       	brcc	.+2      	; 0x974 <main+0x122>
		{
			x = 0;
     972:	71 2c       	mov	r7, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     974:	ef e7       	ldi	r30, 0x7F	; 127
     976:	fa e1       	ldi	r31, 0x1A	; 26
     978:	26 e0       	ldi	r18, 0x06	; 6
     97a:	e1 50       	subi	r30, 0x01	; 1
     97c:	f0 40       	sbci	r31, 0x00	; 0
     97e:	20 40       	sbci	r18, 0x00	; 0
     980:	e1 f7       	brne	.-8      	; 0x97a <main+0x128>
     982:	00 c0       	rjmp	.+0      	; 0x984 <main+0x132>
     984:	00 00       	nop
     986:	a2 cf       	rjmp	.-188    	; 0x8cc <main+0x7a>

00000988 <TWI_SlaveInitializeDriver>:
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
	twi->interface = module;
     988:	fc 01       	movw	r30, r24
     98a:	60 83       	st	Z, r22
     98c:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
     98e:	42 83       	std	Z+2, r20	; 0x02
     990:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
     992:	ec 57       	subi	r30, 0x7C	; 124
     994:	ff 4f       	sbci	r31, 0xFF	; 255
     996:	10 82       	st	Z, r1
	twi->bytesSent = 0;
     998:	fc 01       	movw	r30, r24
     99a:	eb 57       	subi	r30, 0x7B	; 123
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	10 82       	st	Z, r1
	twi->status = TWIS_STATUS_READY;
     9a0:	fc 01       	movw	r30, r24
     9a2:	ea 57       	subi	r30, 0x7A	; 122
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	10 82       	st	Z, r1
	twi->result = TWIS_RESULT_UNKNOWN;
     9a8:	fc 01       	movw	r30, r24
     9aa:	e9 57       	subi	r30, 0x79	; 121
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	10 82       	st	Z, r1
	twi->abort = false;
     9b0:	fc 01       	movw	r30, r24
     9b2:	e8 57       	subi	r30, 0x78	; 120
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
     9b6:	10 82       	st	Z, r1
     9b8:	08 95       	ret

000009ba <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
     9ba:	dc 01       	movw	r26, r24
     9bc:	ed 91       	ld	r30, X+
     9be:	fc 91       	ld	r31, X
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	48 63       	ori	r20, 0x38	; 56
     9c4:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
     9c6:	ed 91       	ld	r30, X+
     9c8:	fc 91       	ld	r31, X
     9ca:	66 0f       	add	r22, r22
     9cc:	63 87       	std	Z+11, r22	; 0x0b
     9ce:	08 95       	ret

000009d0 <TWI_SlaveTransactionFinished>:
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     9d0:	fc 01       	movw	r30, r24
     9d2:	e9 57       	subi	r30, 0x79	; 121
     9d4:	ff 4f       	sbci	r31, 0xFF	; 255
     9d6:	60 83       	st	Z, r22
	twi->status = TWIS_STATUS_READY;
     9d8:	fc 01       	movw	r30, r24
     9da:	ea 57       	subi	r30, 0x7A	; 122
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	10 82       	st	Z, r1
     9e0:	08 95       	ret

000009e2 <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
     9e6:	fc 01       	movw	r30, r24
     9e8:	eb 57       	subi	r30, 0x7B	; 123
     9ea:	ff 4f       	sbci	r31, 0xFF	; 255
     9ec:	20 81       	ld	r18, Z
     9ee:	22 23       	and	r18, r18
     9f0:	59 f0       	breq	.+22     	; 0xa08 <TWI_SlaveWriteHandler+0x26>
     9f2:	dc 01       	movw	r26, r24
     9f4:	ed 91       	ld	r30, X+
     9f6:	fc 91       	ld	r31, X
     9f8:	22 85       	ldd	r18, Z+10	; 0x0a
     9fa:	24 ff       	sbrs	r18, 4
     9fc:	05 c0       	rjmp	.+10     	; 0xa08 <TWI_SlaveWriteHandler+0x26>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     9fe:	22 e0       	ldi	r18, 0x02	; 2
     a00:	21 87       	std	Z+9, r18	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	e5 df       	rcall	.-54     	; 0x9d0 <TWI_SlaveTransactionFinished>
     a06:	24 c0       	rjmp	.+72     	; 0xa50 <TWI_SlaveWriteHandler+0x6e>
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
     a08:	fc 01       	movw	r30, r24
     a0a:	eb 57       	subi	r30, 0x7B	; 123
     a0c:	ff 4f       	sbci	r31, 0xFF	; 255
     a0e:	20 81       	ld	r18, Z
     a10:	20 34       	cpi	r18, 0x40	; 64
     a12:	b8 f4       	brcc	.+46     	; 0xa42 <TWI_SlaveWriteHandler+0x60>
			uint8_t data = twi->sendData[twi->bytesSent];
     a14:	fc 01       	movw	r30, r24
     a16:	eb 57       	subi	r30, 0x7B	; 123
     a18:	ff 4f       	sbci	r31, 0xFF	; 255
     a1a:	20 81       	ld	r18, Z
     a1c:	dc 01       	movw	r26, r24
     a1e:	a2 0f       	add	r26, r18
     a20:	b1 1d       	adc	r27, r1
     a22:	ac 5b       	subi	r26, 0xBC	; 188
     a24:	bf 4f       	sbci	r27, 0xFF	; 255
     a26:	2c 91       	ld	r18, X
			twi->interface->SLAVE.DATA = data;
     a28:	ec 01       	movw	r28, r24
     a2a:	a8 81       	ld	r26, Y
     a2c:	b9 81       	ldd	r27, Y+1	; 0x01
     a2e:	1c 96       	adiw	r26, 0x0c	; 12
     a30:	2c 93       	st	X, r18
			twi->bytesSent++;
     a32:	20 81       	ld	r18, Z
     a34:	2f 5f       	subi	r18, 0xFF	; 255
     a36:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     a38:	e8 81       	ld	r30, Y
     a3a:	f9 81       	ldd	r31, Y+1	; 0x01
     a3c:	83 e0       	ldi	r24, 0x03	; 3
     a3e:	81 87       	std	Z+9, r24	; 0x09
     a40:	07 c0       	rjmp	.+14     	; 0xa50 <TWI_SlaveWriteHandler+0x6e>
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     a42:	dc 01       	movw	r26, r24
     a44:	ed 91       	ld	r30, X+
     a46:	fc 91       	ld	r31, X
     a48:	22 e0       	ldi	r18, 0x02	; 2
     a4a:	21 87       	std	Z+9, r18	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     a4c:	62 e0       	ldi	r22, 0x02	; 2
     a4e:	c0 df       	rcall	.-128    	; 0x9d0 <TWI_SlaveTransactionFinished>
		}
	}
}
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	ec 01       	movw	r28, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     a60:	e8 81       	ld	r30, Y
     a62:	f9 81       	ldd	r31, Y+1	; 0x01
     a64:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
     a66:	84 60       	ori	r24, 0x04	; 4
     a68:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
     a6a:	fe 01       	movw	r30, r28
     a6c:	ec 57       	subi	r30, 0x7C	; 124
     a6e:	ff 4f       	sbci	r31, 0xFF	; 255
     a70:	80 81       	ld	r24, Z
     a72:	80 34       	cpi	r24, 0x40	; 64
     a74:	48 f5       	brcc	.+82     	; 0xac8 <TWI_SlaveReadHandler+0x72>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
     a76:	e8 81       	ld	r30, Y
     a78:	f9 81       	ldd	r31, Y+1	; 0x01
     a7a:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
     a7c:	8e 01       	movw	r16, r28
     a7e:	0c 57       	subi	r16, 0x7C	; 124
     a80:	1f 4f       	sbci	r17, 0xFF	; 255
     a82:	f8 01       	movw	r30, r16
     a84:	90 81       	ld	r25, Z
     a86:	fe 01       	movw	r30, r28
     a88:	e9 0f       	add	r30, r25
     a8a:	f1 1d       	adc	r31, r1
     a8c:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
     a8e:	ea 81       	ldd	r30, Y+2	; 0x02
     a90:	fb 81       	ldd	r31, Y+3	; 0x03
     a92:	19 95       	eicall

		twi->bytesReceived++;
     a94:	f8 01       	movw	r30, r16
     a96:	80 81       	ld	r24, Z
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	80 83       	st	Z, r24

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
     a9c:	fe 01       	movw	r30, r28
     a9e:	e8 57       	subi	r30, 0x78	; 120
     aa0:	ff 4f       	sbci	r31, 0xFF	; 255
     aa2:	80 81       	ld	r24, Z
     aa4:	88 23       	and	r24, r24
     aa6:	59 f0       	breq	.+22     	; 0xabe <TWI_SlaveReadHandler+0x68>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     aa8:	e8 81       	ld	r30, Y
     aaa:	f9 81       	ldd	r31, Y+1	; 0x01
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	81 87       	std	Z+9, r24	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     ab0:	66 e0       	ldi	r22, 0x06	; 6
     ab2:	ce 01       	movw	r24, r28
     ab4:	8d df       	rcall	.-230    	; 0x9d0 <TWI_SlaveTransactionFinished>
			twi->abort = false;
     ab6:	c8 57       	subi	r28, 0x78	; 120
     ab8:	df 4f       	sbci	r29, 0xFF	; 255
     aba:	18 82       	st	Y, r1
     abc:	0c c0       	rjmp	.+24     	; 0xad6 <TWI_SlaveReadHandler+0x80>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     abe:	e8 81       	ld	r30, Y
     ac0:	f9 81       	ldd	r31, Y+1	; 0x01
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	81 87       	std	Z+9, r24	; 0x09
     ac6:	07 c0       	rjmp	.+14     	; 0xad6 <TWI_SlaveReadHandler+0x80>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
     ac8:	e8 81       	ld	r30, Y
     aca:	f9 81       	ldd	r31, Y+1	; 0x01
     acc:	86 e0       	ldi	r24, 0x06	; 6
     ace:	81 87       	std	Z+9, r24	; 0x09
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     ad0:	62 e0       	ldi	r22, 0x02	; 2
     ad2:	ce 01       	movw	r24, r28
     ad4:	7d df       	rcall	.-262    	; 0x9d0 <TWI_SlaveTransactionFinished>
	}
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	08 95       	ret

00000ae0 <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
     ae0:	dc 01       	movw	r26, r24
     ae2:	ed 91       	ld	r30, X+
     ae4:	fc 91       	ld	r31, X
     ae6:	22 85       	ldd	r18, Z+10	; 0x0a
     ae8:	21 ff       	sbrs	r18, 1
     aea:	01 c0       	rjmp	.+2      	; 0xaee <TWI_SlaveDataHandler+0xe>
		TWI_SlaveWriteHandler(twi);
     aec:	7a cf       	rjmp	.-268    	; 0x9e2 <TWI_SlaveWriteHandler>
	} else {
		TWI_SlaveReadHandler(twi);
     aee:	b3 cf       	rjmp	.-154    	; 0xa56 <TWI_SlaveReadHandler>

00000af0 <TWI_SlaveStopHandler>:
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     af0:	dc 01       	movw	r26, r24
     af2:	ed 91       	ld	r30, X+
     af4:	fc 91       	ld	r31, X
     af6:	11 97       	sbiw	r26, 0x01	; 1
     af8:	20 85       	ldd	r18, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     afa:	2b 7f       	andi	r18, 0xFB	; 251
     afc:	20 87       	std	Z+8, r18	; 0x08
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     afe:	ed 91       	ld	r30, X+
     b00:	fc 91       	ld	r31, X
     b02:	22 85       	ldd	r18, Z+10	; 0x0a
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
     b04:	20 64       	ori	r18, 0x40	; 64
     b06:	22 87       	std	Z+10, r18	; 0x0a

	TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	62 cf       	rjmp	.-316    	; 0x9d0 <TWI_SlaveTransactionFinished>

00000b0c <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	ec 01       	movw	r28, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
     b12:	fc 01       	movw	r30, r24
     b14:	e8 57       	subi	r30, 0x78	; 120
     b16:	ff 4f       	sbci	r31, 0xFF	; 255
     b18:	80 81       	ld	r24, Z
     b1a:	88 23       	and	r24, r24
     b1c:	59 f0       	breq	.+22     	; 0xb34 <TWI_SlaveAddressMatchHandler+0x28>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     b1e:	e8 81       	ld	r30, Y
     b20:	f9 81       	ldd	r31, Y+1	; 0x01
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	81 87       	std	Z+9, r24	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     b26:	66 e0       	ldi	r22, 0x06	; 6
     b28:	ce 01       	movw	r24, r28
     b2a:	52 df       	rcall	.-348    	; 0x9d0 <TWI_SlaveTransactionFinished>
		twi->abort = false;
     b2c:	c8 57       	subi	r28, 0x78	; 120
     b2e:	df 4f       	sbci	r29, 0xFF	; 255
     b30:	18 82       	st	Y, r1
     b32:	1a c0       	rjmp	.+52     	; 0xb68 <TWI_SlaveAddressMatchHandler+0x5c>
	} else {
		twi->status = TWIS_STATUS_BUSY;
     b34:	fe 01       	movw	r30, r28
     b36:	ea 57       	subi	r30, 0x7A	; 122
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	80 83       	st	Z, r24
		twi->result = TWIS_RESULT_UNKNOWN;
     b3e:	fe 01       	movw	r30, r28
     b40:	e9 57       	subi	r30, 0x79	; 121
     b42:	ff 4f       	sbci	r31, 0xFF	; 255
     b44:	10 82       	st	Z, r1

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     b46:	e8 81       	ld	r30, Y
     b48:	f9 81       	ldd	r31, Y+1	; 0x01
     b4a:	80 85       	ldd	r24, Z+8	; 0x08
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     b4c:	8b 7f       	andi	r24, 0xFB	; 251
     b4e:	80 87       	std	Z+8, r24	; 0x08

		twi->bytesReceived = 0;
     b50:	fe 01       	movw	r30, r28
     b52:	ec 57       	subi	r30, 0x7C	; 124
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     b58:	fe 01       	movw	r30, r28
     b5a:	eb 57       	subi	r30, 0x7B	; 123
     b5c:	ff 4f       	sbci	r31, 0xFF	; 255
     b5e:	10 82       	st	Z, r1

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     b60:	e8 81       	ld	r30, Y
     b62:	f9 81       	ldd	r31, Y+1	; 0x01
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	81 87       	std	Z+9, r24	; 0x09
	}
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <TWI_SlaveInterruptHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     b6e:	dc 01       	movw	r26, r24
     b70:	ed 91       	ld	r30, X+
     b72:	fc 91       	ld	r31, X
     b74:	22 85       	ldd	r18, Z+10	; 0x0a

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
     b76:	22 ff       	sbrs	r18, 2
     b78:	12 c0       	rjmp	.+36     	; 0xb9e <TWI_SlaveInterruptHandler+0x30>
		twi->bytesReceived = 0;
     b7a:	fc 01       	movw	r30, r24
     b7c:	ec 57       	subi	r30, 0x7C	; 124
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     b82:	fc 01       	movw	r30, r24
     b84:	eb 57       	subi	r30, 0x7B	; 123
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_BUS_ERROR;
     b8a:	fc 01       	movw	r30, r24
     b8c:	e9 57       	subi	r30, 0x79	; 121
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	24 e0       	ldi	r18, 0x04	; 4
     b92:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     b94:	fc 01       	movw	r30, r24
     b96:	ea 57       	subi	r30, 0x7A	; 122
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	10 82       	st	Z, r1
     b9c:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
     b9e:	23 ff       	sbrs	r18, 3
     ba0:	12 c0       	rjmp	.+36     	; 0xbc6 <TWI_SlaveInterruptHandler+0x58>
		twi->bytesReceived = 0;
     ba2:	fc 01       	movw	r30, r24
     ba4:	ec 57       	subi	r30, 0x7C	; 124
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     baa:	fc 01       	movw	r30, r24
     bac:	eb 57       	subi	r30, 0x7B	; 123
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
     bb2:	fc 01       	movw	r30, r24
     bb4:	e9 57       	subi	r30, 0x79	; 121
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	23 e0       	ldi	r18, 0x03	; 3
     bba:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     bbc:	fc 01       	movw	r30, r24
     bbe:	ea 57       	subi	r30, 0x7A	; 122
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	10 82       	st	Z, r1
     bc4:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     bc6:	42 2f       	mov	r20, r18
     bc8:	40 74       	andi	r20, 0x40	; 64
 *  Handles all TWI transactions and responses to address match, data reception,
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
     bca:	32 2f       	mov	r19, r18
     bcc:	31 74       	andi	r19, 0x41	; 65
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
		twi->status = TWIS_STATUS_READY;
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     bce:	31 34       	cpi	r19, 0x41	; 65
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <TWI_SlaveInterruptHandler+0x66>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
     bd2:	9c cf       	rjmp	.-200    	; 0xb0c <TWI_SlaveAddressMatchHandler>
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
     bd4:	44 23       	and	r20, r20
     bd6:	09 f0       	breq	.+2      	; 0xbda <TWI_SlaveInterruptHandler+0x6c>
		TWI_SlaveStopHandler(twi);
     bd8:	8b cf       	rjmp	.-234    	; 0xaf0 <TWI_SlaveStopHandler>
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
     bda:	22 23       	and	r18, r18
     bdc:	0c f4       	brge	.+2      	; 0xbe0 <TWI_SlaveInterruptHandler+0x72>
		TWI_SlaveDataHandler(twi);
     bde:	80 cf       	rjmp	.-256    	; 0xae0 <TWI_SlaveDataHandler>
	}

	/* If unexpected state. */
	else {
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_FAIL);
     be0:	65 e0       	ldi	r22, 0x05	; 5
     be2:	f6 ce       	rjmp	.-532    	; 0x9d0 <TWI_SlaveTransactionFinished>

00000be4 <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	ec 01       	movw	r28, r24
     bec:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     bee:	8c d1       	rcall	.+792    	; 0xf08 <USART_TXBuffer_FreeSpace>
     bf0:	88 23       	and	r24, r24
     bf2:	19 f0       	breq	.+6      	; 0xbfa <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     bf4:	61 2f       	mov	r22, r17
     bf6:	ce 01       	movw	r24, r28
     bf8:	96 d1       	rcall	.+812    	; 0xf26 <USART_TXBuffer_PutByte>
  }
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	08 95       	ret

00000c02 <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
     c0c:	c6 2f       	mov	r28, r22
     c0e:	d7 2f       	mov	r29, r23
     c10:	69 91       	ld	r22, Y+
     c12:	66 23       	and	r22, r22
     c14:	29 f0       	breq	.+10     	; 0xc20 <uart_puts+0x1e>
    uart_putc(uart, c);
     c16:	c8 01       	movw	r24, r16
     c18:	e5 df       	rcall	.-54     	; 0xbe4 <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     c1a:	69 91       	ld	r22, Y+
     c1c:	61 11       	cpse	r22, r1
     c1e:	fb cf       	rjmp	.-10     	; 0xc16 <uart_puts+0x14>
    uart_putc(uart, c);
  }
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     c2a:	80 3a       	cpi	r24, 0xA0	; 160
     c2c:	28 e0       	ldi	r18, 0x08	; 8
     c2e:	92 07       	cpc	r25, r18
     c30:	39 f4       	brne	.+14     	; 0xc40 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     c32:	e0 e4       	ldi	r30, 0x40	; 64
     c34:	f6 e0       	ldi	r31, 0x06	; 6
     c36:	88 e0       	ldi	r24, 0x08	; 8
     c38:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     c3a:	84 e0       	ldi	r24, 0x04	; 4
     c3c:	82 83       	std	Z+2, r24	; 0x02
     return;
     c3e:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     c40:	80 3b       	cpi	r24, 0xB0	; 176
     c42:	28 e0       	ldi	r18, 0x08	; 8
     c44:	92 07       	cpc	r25, r18
     c46:	39 f4       	brne	.+14     	; 0xc56 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     c48:	e0 e4       	ldi	r30, 0x40	; 64
     c4a:	f6 e0       	ldi	r31, 0x06	; 6
     c4c:	80 e8       	ldi	r24, 0x80	; 128
     c4e:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     c50:	80 e4       	ldi	r24, 0x40	; 64
     c52:	82 83       	std	Z+2, r24	; 0x02
     return;
     c54:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     c56:	80 3a       	cpi	r24, 0xA0	; 160
     c58:	29 e0       	ldi	r18, 0x09	; 9
     c5a:	92 07       	cpc	r25, r18
     c5c:	39 f4       	brne	.+14     	; 0xc6c <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     c5e:	e0 e6       	ldi	r30, 0x60	; 96
     c60:	f6 e0       	ldi	r31, 0x06	; 6
     c62:	88 e0       	ldi	r24, 0x08	; 8
     c64:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	82 83       	std	Z+2, r24	; 0x02
     return;
     c6a:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     c6c:	80 3b       	cpi	r24, 0xB0	; 176
     c6e:	29 e0       	ldi	r18, 0x09	; 9
     c70:	92 07       	cpc	r25, r18
     c72:	39 f4       	brne	.+14     	; 0xc82 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     c74:	e0 e6       	ldi	r30, 0x60	; 96
     c76:	f6 e0       	ldi	r31, 0x06	; 6
     c78:	80 e8       	ldi	r24, 0x80	; 128
     c7a:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	82 83       	std	Z+2, r24	; 0x02
     return;
     c80:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     c82:	80 3a       	cpi	r24, 0xA0	; 160
     c84:	9a 40       	sbci	r25, 0x0A	; 10
     c86:	31 f4       	brne	.+12     	; 0xc94 <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     c88:	e0 e8       	ldi	r30, 0x80	; 128
     c8a:	f6 e0       	ldi	r31, 0x06	; 6
     c8c:	88 e0       	ldi	r24, 0x08	; 8
     c8e:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     c90:	84 e0       	ldi	r24, 0x04	; 4
     c92:	82 83       	std	Z+2, r24	; 0x02
     c94:	08 95       	ret

00000c96 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     c96:	4f 92       	push	r4
     c98:	5f 92       	push	r5
     c9a:	6f 92       	push	r6
     c9c:	7f 92       	push	r7
     c9e:	8f 92       	push	r8
     ca0:	9f 92       	push	r9
     ca2:	af 92       	push	r10
     ca4:	bf 92       	push	r11
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	49 01       	movw	r8, r18
     cb4:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     cb6:	4e 2d       	mov	r20, r14
     cb8:	41 70       	andi	r20, 0x01	; 1
     cba:	20 e1       	ldi	r18, 0x10	; 16
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	79 01       	movw	r14, r18
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <calc_bsel+0x30>
     cc2:	f5 94       	asr	r15
     cc4:	e7 94       	ror	r14
     cc6:	4a 95       	dec	r20
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <calc_bsel+0x2c>
  if ( scale < 0 ) {
     cca:	00 23       	and	r16, r16
     ccc:	0c f0       	brlt	.+2      	; 0xcd0 <calc_bsel+0x3a>
     cce:	3a c0       	rjmp	.+116    	; 0xd44 <calc_bsel+0xae>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     cd0:	a4 d2       	rcall	.+1352   	; 0x121a <__floatunsisf>
     cd2:	2b 01       	movw	r4, r22
     cd4:	3c 01       	movw	r6, r24
     cd6:	b7 01       	movw	r22, r14
     cd8:	77 27       	eor	r23, r23
     cda:	88 27       	eor	r24, r24
     cdc:	77 fd       	sbrc	r23, 7
     cde:	80 95       	com	r24
     ce0:	98 2f       	mov	r25, r24
     ce2:	9d d2       	rcall	.+1338   	; 0x121e <__floatsisf>
     ce4:	6b 01       	movw	r12, r22
     ce6:	7c 01       	movw	r14, r24
     ce8:	c5 01       	movw	r24, r10
     cea:	b4 01       	movw	r22, r8
     cec:	96 d2       	rcall	.+1324   	; 0x121a <__floatunsisf>
     cee:	9b 01       	movw	r18, r22
     cf0:	ac 01       	movw	r20, r24
     cf2:	c7 01       	movw	r24, r14
     cf4:	b6 01       	movw	r22, r12
     cf6:	1f d3       	rcall	.+1598   	; 0x1336 <__mulsf3>
     cf8:	9b 01       	movw	r18, r22
     cfa:	ac 01       	movw	r20, r24
     cfc:	c3 01       	movw	r24, r6
     cfe:	b2 01       	movw	r22, r4
     d00:	f8 d1       	rcall	.+1008   	; 0x10f2 <__divsf3>
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e8       	ldi	r20, 0x80	; 128
     d08:	5f e3       	ldi	r21, 0x3F	; 63
     d0a:	8e d1       	rcall	.+796    	; 0x1028 <__subsf3>
     d0c:	6b 01       	movw	r12, r22
     d0e:	7c 01       	movw	r14, r24
     d10:	11 27       	eor	r17, r17
     d12:	01 95       	neg	r16
     d14:	0c f4       	brge	.+2      	; 0xd18 <calc_bsel+0x82>
     d16:	10 95       	com	r17
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <calc_bsel+0x8c>
     d1e:	66 0f       	add	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	0a 95       	dec	r16
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <calc_bsel+0x88>
     d26:	88 27       	eor	r24, r24
     d28:	77 fd       	sbrc	r23, 7
     d2a:	80 95       	com	r24
     d2c:	98 2f       	mov	r25, r24
     d2e:	77 d2       	rcall	.+1262   	; 0x121e <__floatsisf>
     d30:	9b 01       	movw	r18, r22
     d32:	ac 01       	movw	r20, r24
     d34:	c7 01       	movw	r24, r14
     d36:	b6 01       	movw	r22, r12
     d38:	fe d2       	rcall	.+1532   	; 0x1336 <__mulsf3>
     d3a:	60 d3       	rcall	.+1728   	; 0x13fc <round>
     d3c:	42 d2       	rcall	.+1156   	; 0x11c2 <__fixunssfsi>
     d3e:	86 2f       	mov	r24, r22
     d40:	97 2f       	mov	r25, r23
     d42:	35 c0       	rjmp	.+106    	; 0xdae <calc_bsel+0x118>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     d44:	6a d2       	rcall	.+1236   	; 0x121a <__floatunsisf>
     d46:	2b 01       	movw	r4, r22
     d48:	3c 01       	movw	r6, r24
     d4a:	b7 01       	movw	r22, r14
     d4c:	77 27       	eor	r23, r23
     d4e:	88 27       	eor	r24, r24
     d50:	77 fd       	sbrc	r23, 7
     d52:	80 95       	com	r24
     d54:	98 2f       	mov	r25, r24
     d56:	63 d2       	rcall	.+1222   	; 0x121e <__floatsisf>
     d58:	6b 01       	movw	r12, r22
     d5a:	7c 01       	movw	r14, r24
     d5c:	c5 01       	movw	r24, r10
     d5e:	b4 01       	movw	r22, r8
     d60:	5c d2       	rcall	.+1208   	; 0x121a <__floatunsisf>
     d62:	9b 01       	movw	r18, r22
     d64:	ac 01       	movw	r20, r24
     d66:	c7 01       	movw	r24, r14
     d68:	b6 01       	movw	r22, r12
     d6a:	e5 d2       	rcall	.+1482   	; 0x1336 <__mulsf3>
     d6c:	9b 01       	movw	r18, r22
     d6e:	ac 01       	movw	r20, r24
     d70:	c3 01       	movw	r24, r6
     d72:	b2 01       	movw	r22, r4
     d74:	be d1       	rcall	.+892    	; 0x10f2 <__divsf3>
     d76:	4b 01       	movw	r8, r22
     d78:	5c 01       	movw	r10, r24
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <calc_bsel+0xee>
     d80:	66 0f       	add	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	0a 95       	dec	r16
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <calc_bsel+0xea>
     d88:	88 27       	eor	r24, r24
     d8a:	77 fd       	sbrc	r23, 7
     d8c:	80 95       	com	r24
     d8e:	98 2f       	mov	r25, r24
     d90:	46 d2       	rcall	.+1164   	; 0x121e <__floatsisf>
     d92:	9b 01       	movw	r18, r22
     d94:	ac 01       	movw	r20, r24
     d96:	c5 01       	movw	r24, r10
     d98:	b4 01       	movw	r22, r8
     d9a:	ab d1       	rcall	.+854    	; 0x10f2 <__divsf3>
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e8       	ldi	r20, 0x80	; 128
     da2:	5f e3       	ldi	r21, 0x3F	; 63
     da4:	41 d1       	rcall	.+642    	; 0x1028 <__subsf3>
     da6:	2a d3       	rcall	.+1620   	; 0x13fc <round>
     da8:	0c d2       	rcall	.+1048   	; 0x11c2 <__fixunssfsi>
     daa:	86 2f       	mov	r24, r22
     dac:	97 2f       	mov	r25, r23
  }
}
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	bf 90       	pop	r11
     dbc:	af 90       	pop	r10
     dbe:	9f 90       	pop	r9
     dc0:	8f 90       	pop	r8
     dc2:	7f 90       	pop	r7
     dc4:	6f 90       	pop	r6
     dc6:	5f 90       	pop	r5
     dc8:	4f 90       	pop	r4
     dca:	08 95       	ret

00000dcc <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     dcc:	4f 92       	push	r4
     dce:	5f 92       	push	r5
     dd0:	6f 92       	push	r6
     dd2:	7f 92       	push	r7
     dd4:	8f 92       	push	r8
     dd6:	9f 92       	push	r9
     dd8:	af 92       	push	r10
     dda:	bf 92       	push	r11
     ddc:	ef 92       	push	r14
     dde:	0f 93       	push	r16
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	2b 01       	movw	r4, r22
     de6:	3c 01       	movw	r6, r24
     de8:	49 01       	movw	r8, r18
     dea:	5a 01       	movw	r10, r20
     dec:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     dee:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     df0:	ed 2e       	mov	r14, r29
     df2:	0c 2f       	mov	r16, r28
     df4:	a5 01       	movw	r20, r10
     df6:	94 01       	movw	r18, r8
     df8:	c3 01       	movw	r24, r6
     dfa:	b2 01       	movw	r22, r4
     dfc:	4c df       	rcall	.-360    	; 0xc96 <calc_bsel>
     dfe:	81 15       	cp	r24, r1
     e00:	90 41       	sbci	r25, 0x10	; 16
     e02:	18 f0       	brcs	.+6      	; 0xe0a <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     e04:	cf 5f       	subi	r28, 0xFF	; 255
     e06:	c8 30       	cpi	r28, 0x08	; 8
     e08:	99 f7       	brne	.-26     	; 0xdf0 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     e0a:	8c 2f       	mov	r24, r28
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	0f 91       	pop	r16
     e12:	ef 90       	pop	r14
     e14:	bf 90       	pop	r11
     e16:	af 90       	pop	r10
     e18:	9f 90       	pop	r9
     e1a:	8f 90       	pop	r8
     e1c:	7f 90       	pop	r7
     e1e:	6f 90       	pop	r6
     e20:	5f 90       	pop	r5
     e22:	4f 90       	pop	r4
     e24:	08 95       	ret

00000e26 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ec 01       	movw	r28, r24
     e4a:	3b 01       	movw	r6, r22
     e4c:	49 01       	movw	r8, r18
     e4e:	5a 01       	movw	r10, r20
     e50:	17 01       	movw	r2, r14
     e52:	28 01       	movw	r4, r16
     e54:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     e56:	0c 2d       	mov	r16, r12
     e58:	a2 01       	movw	r20, r4
     e5a:	91 01       	movw	r18, r2
     e5c:	c5 01       	movw	r24, r10
     e5e:	b4 01       	movw	r22, r8
     e60:	b5 df       	rcall	.-150    	; 0xdcc <calc_bscale>
     e62:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     e64:	08 2f       	mov	r16, r24
     e66:	a2 01       	movw	r20, r4
     e68:	91 01       	movw	r18, r2
     e6a:	c5 01       	movw	r24, r10
     e6c:	b4 01       	movw	r22, r8
     e6e:	13 df       	rcall	.-474    	; 0xc96 <calc_bsel>
     e70:	b8 2e       	mov	r11, r24
     e72:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	b3 01       	movw	r22, r6
     e78:	ce 01       	movw	r24, r28
     e7a:	32 d0       	rcall	.+100    	; 0xee0 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     e7c:	e8 81       	ld	r30, Y
     e7e:	f9 81       	ldd	r31, Y+1	; 0x01
     e80:	83 e0       	ldi	r24, 0x03	; 3
     e82:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     e84:	e8 81       	ld	r30, Y
     e86:	f9 81       	ldd	r31, Y+1	; 0x01
     e88:	84 81       	ldd	r24, Z+4	; 0x04
     e8a:	80 61       	ori	r24, 0x10	; 16
     e8c:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     e8e:	e8 81       	ld	r30, Y
     e90:	f9 81       	ldd	r31, Y+1	; 0x01
     e92:	84 81       	ldd	r24, Z+4	; 0x04
     e94:	88 60       	ori	r24, 0x08	; 8
     e96:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     e98:	e8 81       	ld	r30, Y
     e9a:	f9 81       	ldd	r31, Y+1	; 0x01
     e9c:	83 81       	ldd	r24, Z+3	; 0x03
     e9e:	8f 7c       	andi	r24, 0xCF	; 207
     ea0:	80 61       	ori	r24, 0x10	; 16
     ea2:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     ea4:	e8 81       	ld	r30, Y
     ea6:	f9 81       	ldd	r31, Y+1	; 0x01
     ea8:	b6 82       	std	Z+6, r11	; 0x06
     eaa:	e8 81       	ld	r30, Y
     eac:	f9 81       	ldd	r31, Y+1	; 0x01
     eae:	12 95       	swap	r17
     eb0:	10 7f       	andi	r17, 0xF0	; 240
     eb2:	e1 2a       	or	r14, r17
     eb4:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
     eb6:	88 81       	ld	r24, Y
     eb8:	99 81       	ldd	r25, Y+1	; 0x01
     eba:	b7 de       	rcall	.-658    	; 0xc2a <set_usart_txrx_direction>
}
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	cf 90       	pop	r12
     eca:	bf 90       	pop	r11
     ecc:	af 90       	pop	r10
     ece:	9f 90       	pop	r9
     ed0:	8f 90       	pop	r8
     ed2:	7f 90       	pop	r7
     ed4:	6f 90       	pop	r6
     ed6:	5f 90       	pop	r5
     ed8:	4f 90       	pop	r4
     eda:	3f 90       	pop	r3
     edc:	2f 90       	pop	r2
     ede:	08 95       	ret

00000ee0 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     ee0:	fc 01       	movw	r30, r24
     ee2:	60 83       	st	Z, r22
     ee4:	71 83       	std	Z+1, r23	; 0x01
     ee6:	42 83       	std	Z+2, r20	; 0x02
     ee8:	ec 57       	subi	r30, 0x7C	; 124
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	10 82       	st	Z, r1
     eee:	fc 01       	movw	r30, r24
     ef0:	ed 57       	subi	r30, 0x7D	; 125
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	10 82       	st	Z, r1
     ef6:	fc 01       	movw	r30, r24
     ef8:	ea 57       	subi	r30, 0x7A	; 122
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	10 82       	st	Z, r1
     efe:	fc 01       	movw	r30, r24
     f00:	eb 57       	subi	r30, 0x7B	; 123
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	10 82       	st	Z, r1
     f06:	08 95       	ret

00000f08 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     f08:	fc 01       	movw	r30, r24
     f0a:	eb 57       	subi	r30, 0x7B	; 123
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     f10:	fc 01       	movw	r30, r24
     f12:	ea 57       	subi	r30, 0x7A	; 122
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	2f 73       	andi	r18, 0x3F	; 63
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	29 13       	cpse	r18, r25
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <USART_TXBuffer_FreeSpace+0x1c>
     f22:	80 e0       	ldi	r24, 0x00	; 0
}
     f24:	08 95       	ret

00000f26 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ec 01       	movw	r28, r24
     f2e:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
     f30:	eb df       	rcall	.-42     	; 0xf08 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
     f32:	88 23       	and	r24, r24
     f34:	a1 f0       	breq	.+40     	; 0xf5e <USART_TXBuffer_PutByte+0x38>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     f36:	fe 01       	movw	r30, r28
     f38:	eb 57       	subi	r30, 0x7B	; 123
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	90 81       	ld	r25, Z
	  	TXbufPtr->TX[tempTX_Head]= data;
     f3e:	de 01       	movw	r26, r28
     f40:	a9 0f       	add	r26, r25
     f42:	b1 1d       	adc	r27, r1
     f44:	ad 5b       	subi	r26, 0xBD	; 189
     f46:	bf 4f       	sbci	r27, 0xFF	; 255
     f48:	1c 93       	st	X, r17
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     f4a:	9f 5f       	subi	r25, 0xFF	; 255
     f4c:	9f 73       	andi	r25, 0x3F	; 63
     f4e:	90 83       	st	Z, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     f50:	e8 81       	ld	r30, Y
     f52:	f9 81       	ldd	r31, Y+1	; 0x01
     f54:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     f56:	9c 7f       	andi	r25, 0xFC	; 252
     f58:	2a 81       	ldd	r18, Y+2	; 0x02
     f5a:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     f5c:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	08 95       	ret

00000f66 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     f66:	fc 01       	movw	r30, r24
     f68:	ed 57       	subi	r30, 0x7D	; 125
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     f6e:	fc 01       	movw	r30, r24
     f70:	ec 57       	subi	r30, 0x7C	; 124
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	29 13       	cpse	r18, r25
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <USART_RXBufferData_Available+0x18>
     f7c:	80 e0       	ldi	r24, 0x00	; 0
}
     f7e:	08 95       	ret

00000f80 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     f80:	fc 01       	movw	r30, r24
     f82:	ec 57       	subi	r30, 0x7C	; 124
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	20 81       	ld	r18, Z
     f88:	dc 01       	movw	r26, r24
     f8a:	a2 0f       	add	r26, r18
     f8c:	b1 1d       	adc	r27, r1
     f8e:	13 96       	adiw	r26, 0x03	; 3
     f90:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     f92:	90 81       	ld	r25, Z
     f94:	9f 5f       	subi	r25, 0xFF	; 255
     f96:	9f 73       	andi	r25, 0x3F	; 63
     f98:	90 83       	st	Z, r25

	return ans;
}
     f9a:	08 95       	ret

00000f9c <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     f9c:	fc 01       	movw	r30, r24
     f9e:	ed 57       	subi	r30, 0x7D	; 125
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	20 81       	ld	r18, Z
     fa4:	2f 5f       	subi	r18, 0xFF	; 255
     fa6:	2f 73       	andi	r18, 0x3F	; 63

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     fa8:	fc 01       	movw	r30, r24
     faa:	ec 57       	subi	r30, 0x7C	; 124
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     fb0:	dc 01       	movw	r26, r24
     fb2:	ed 91       	ld	r30, X+
     fb4:	fc 91       	ld	r31, X
     fb6:	11 97       	sbiw	r26, 0x01	; 1
     fb8:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     fba:	23 17       	cp	r18, r19
     fbc:	59 f0       	breq	.+22     	; 0xfd4 <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     fbe:	fc 01       	movw	r30, r24
     fc0:	ed 57       	subi	r30, 0x7D	; 125
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	30 81       	ld	r19, Z
     fc6:	a3 0f       	add	r26, r19
     fc8:	b1 1d       	adc	r27, r1
     fca:	13 96       	adiw	r26, 0x03	; 3
     fcc:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     fce:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     fd4:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     fd6:	08 95       	ret

00000fd8 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     fdc:	fc 01       	movw	r30, r24
     fde:	ea 57       	subi	r30, 0x7A	; 122
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     fe4:	fc 01       	movw	r30, r24
     fe6:	eb 57       	subi	r30, 0x7B	; 123
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	30 81       	ld	r19, Z
     fec:	32 13       	cpse	r19, r18
     fee:	07 c0       	rjmp	.+14     	; 0xffe <USART_DataRegEmpty+0x26>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     ff0:	dc 01       	movw	r26, r24
     ff2:	ed 91       	ld	r30, X+
     ff4:	fc 91       	ld	r31, X
     ff6:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     ff8:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     ffa:	83 83       	std	Z+3, r24	; 0x03
     ffc:	12 c0       	rjmp	.+36     	; 0x1022 <USART_DataRegEmpty+0x4a>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     ffe:	fc 01       	movw	r30, r24
    1000:	ea 57       	subi	r30, 0x7A	; 122
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	20 81       	ld	r18, Z
    1006:	dc 01       	movw	r26, r24
    1008:	a2 0f       	add	r26, r18
    100a:	b1 1d       	adc	r27, r1
    100c:	ad 5b       	subi	r26, 0xBD	; 189
    100e:	bf 4f       	sbci	r27, 0xFF	; 255
    1010:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    1012:	ec 01       	movw	r28, r24
    1014:	a8 81       	ld	r26, Y
    1016:	b9 81       	ldd	r27, Y+1	; 0x01
    1018:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    101a:	80 81       	ld	r24, Z
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	8f 73       	andi	r24, 0x3F	; 63
    1020:	80 83       	st	Z, r24
	}
}
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <__subsf3>:
    1028:	50 58       	subi	r21, 0x80	; 128

0000102a <__addsf3>:
    102a:	bb 27       	eor	r27, r27
    102c:	aa 27       	eor	r26, r26
    102e:	0e d0       	rcall	.+28     	; 0x104c <__addsf3x>
    1030:	48 c1       	rjmp	.+656    	; 0x12c2 <__fp_round>
    1032:	39 d1       	rcall	.+626    	; 0x12a6 <__fp_pscA>
    1034:	30 f0       	brcs	.+12     	; 0x1042 <__addsf3+0x18>
    1036:	3e d1       	rcall	.+636    	; 0x12b4 <__fp_pscB>
    1038:	20 f0       	brcs	.+8      	; 0x1042 <__addsf3+0x18>
    103a:	31 f4       	brne	.+12     	; 0x1048 <__addsf3+0x1e>
    103c:	9f 3f       	cpi	r25, 0xFF	; 255
    103e:	11 f4       	brne	.+4      	; 0x1044 <__addsf3+0x1a>
    1040:	1e f4       	brtc	.+6      	; 0x1048 <__addsf3+0x1e>
    1042:	2e c1       	rjmp	.+604    	; 0x12a0 <__fp_nan>
    1044:	0e f4       	brtc	.+2      	; 0x1048 <__addsf3+0x1e>
    1046:	e0 95       	com	r30
    1048:	e7 fb       	bst	r30, 7
    104a:	24 c1       	rjmp	.+584    	; 0x1294 <__fp_inf>

0000104c <__addsf3x>:
    104c:	e9 2f       	mov	r30, r25
    104e:	4a d1       	rcall	.+660    	; 0x12e4 <__fp_split3>
    1050:	80 f3       	brcs	.-32     	; 0x1032 <__addsf3+0x8>
    1052:	ba 17       	cp	r27, r26
    1054:	62 07       	cpc	r22, r18
    1056:	73 07       	cpc	r23, r19
    1058:	84 07       	cpc	r24, r20
    105a:	95 07       	cpc	r25, r21
    105c:	18 f0       	brcs	.+6      	; 0x1064 <__addsf3x+0x18>
    105e:	71 f4       	brne	.+28     	; 0x107c <__addsf3x+0x30>
    1060:	9e f5       	brtc	.+102    	; 0x10c8 <__addsf3x+0x7c>
    1062:	62 c1       	rjmp	.+708    	; 0x1328 <__fp_zero>
    1064:	0e f4       	brtc	.+2      	; 0x1068 <__addsf3x+0x1c>
    1066:	e0 95       	com	r30
    1068:	0b 2e       	mov	r0, r27
    106a:	ba 2f       	mov	r27, r26
    106c:	a0 2d       	mov	r26, r0
    106e:	0b 01       	movw	r0, r22
    1070:	b9 01       	movw	r22, r18
    1072:	90 01       	movw	r18, r0
    1074:	0c 01       	movw	r0, r24
    1076:	ca 01       	movw	r24, r20
    1078:	a0 01       	movw	r20, r0
    107a:	11 24       	eor	r1, r1
    107c:	ff 27       	eor	r31, r31
    107e:	59 1b       	sub	r21, r25
    1080:	99 f0       	breq	.+38     	; 0x10a8 <__addsf3x+0x5c>
    1082:	59 3f       	cpi	r21, 0xF9	; 249
    1084:	50 f4       	brcc	.+20     	; 0x109a <__addsf3x+0x4e>
    1086:	50 3e       	cpi	r21, 0xE0	; 224
    1088:	68 f1       	brcs	.+90     	; 0x10e4 <__addsf3x+0x98>
    108a:	1a 16       	cp	r1, r26
    108c:	f0 40       	sbci	r31, 0x00	; 0
    108e:	a2 2f       	mov	r26, r18
    1090:	23 2f       	mov	r18, r19
    1092:	34 2f       	mov	r19, r20
    1094:	44 27       	eor	r20, r20
    1096:	58 5f       	subi	r21, 0xF8	; 248
    1098:	f3 cf       	rjmp	.-26     	; 0x1080 <__addsf3x+0x34>
    109a:	46 95       	lsr	r20
    109c:	37 95       	ror	r19
    109e:	27 95       	ror	r18
    10a0:	a7 95       	ror	r26
    10a2:	f0 40       	sbci	r31, 0x00	; 0
    10a4:	53 95       	inc	r21
    10a6:	c9 f7       	brne	.-14     	; 0x109a <__addsf3x+0x4e>
    10a8:	7e f4       	brtc	.+30     	; 0x10c8 <__addsf3x+0x7c>
    10aa:	1f 16       	cp	r1, r31
    10ac:	ba 0b       	sbc	r27, r26
    10ae:	62 0b       	sbc	r22, r18
    10b0:	73 0b       	sbc	r23, r19
    10b2:	84 0b       	sbc	r24, r20
    10b4:	ba f0       	brmi	.+46     	; 0x10e4 <__addsf3x+0x98>
    10b6:	91 50       	subi	r25, 0x01	; 1
    10b8:	a1 f0       	breq	.+40     	; 0x10e2 <__addsf3x+0x96>
    10ba:	ff 0f       	add	r31, r31
    10bc:	bb 1f       	adc	r27, r27
    10be:	66 1f       	adc	r22, r22
    10c0:	77 1f       	adc	r23, r23
    10c2:	88 1f       	adc	r24, r24
    10c4:	c2 f7       	brpl	.-16     	; 0x10b6 <__addsf3x+0x6a>
    10c6:	0e c0       	rjmp	.+28     	; 0x10e4 <__addsf3x+0x98>
    10c8:	ba 0f       	add	r27, r26
    10ca:	62 1f       	adc	r22, r18
    10cc:	73 1f       	adc	r23, r19
    10ce:	84 1f       	adc	r24, r20
    10d0:	48 f4       	brcc	.+18     	; 0x10e4 <__addsf3x+0x98>
    10d2:	87 95       	ror	r24
    10d4:	77 95       	ror	r23
    10d6:	67 95       	ror	r22
    10d8:	b7 95       	ror	r27
    10da:	f7 95       	ror	r31
    10dc:	9e 3f       	cpi	r25, 0xFE	; 254
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <__addsf3x+0x96>
    10e0:	b3 cf       	rjmp	.-154    	; 0x1048 <__addsf3+0x1e>
    10e2:	93 95       	inc	r25
    10e4:	88 0f       	add	r24, r24
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__addsf3x+0x9e>
    10e8:	99 27       	eor	r25, r25
    10ea:	ee 0f       	add	r30, r30
    10ec:	97 95       	ror	r25
    10ee:	87 95       	ror	r24
    10f0:	08 95       	ret

000010f2 <__divsf3>:
    10f2:	0c d0       	rcall	.+24     	; 0x110c <__divsf3x>
    10f4:	e6 c0       	rjmp	.+460    	; 0x12c2 <__fp_round>
    10f6:	de d0       	rcall	.+444    	; 0x12b4 <__fp_pscB>
    10f8:	40 f0       	brcs	.+16     	; 0x110a <__divsf3+0x18>
    10fa:	d5 d0       	rcall	.+426    	; 0x12a6 <__fp_pscA>
    10fc:	30 f0       	brcs	.+12     	; 0x110a <__divsf3+0x18>
    10fe:	21 f4       	brne	.+8      	; 0x1108 <__divsf3+0x16>
    1100:	5f 3f       	cpi	r21, 0xFF	; 255
    1102:	19 f0       	breq	.+6      	; 0x110a <__divsf3+0x18>
    1104:	c7 c0       	rjmp	.+398    	; 0x1294 <__fp_inf>
    1106:	51 11       	cpse	r21, r1
    1108:	10 c1       	rjmp	.+544    	; 0x132a <__fp_szero>
    110a:	ca c0       	rjmp	.+404    	; 0x12a0 <__fp_nan>

0000110c <__divsf3x>:
    110c:	eb d0       	rcall	.+470    	; 0x12e4 <__fp_split3>
    110e:	98 f3       	brcs	.-26     	; 0x10f6 <__divsf3+0x4>

00001110 <__divsf3_pse>:
    1110:	99 23       	and	r25, r25
    1112:	c9 f3       	breq	.-14     	; 0x1106 <__divsf3+0x14>
    1114:	55 23       	and	r21, r21
    1116:	b1 f3       	breq	.-20     	; 0x1104 <__divsf3+0x12>
    1118:	95 1b       	sub	r25, r21
    111a:	55 0b       	sbc	r21, r21
    111c:	bb 27       	eor	r27, r27
    111e:	aa 27       	eor	r26, r26
    1120:	62 17       	cp	r22, r18
    1122:	73 07       	cpc	r23, r19
    1124:	84 07       	cpc	r24, r20
    1126:	38 f0       	brcs	.+14     	; 0x1136 <__divsf3_pse+0x26>
    1128:	9f 5f       	subi	r25, 0xFF	; 255
    112a:	5f 4f       	sbci	r21, 0xFF	; 255
    112c:	22 0f       	add	r18, r18
    112e:	33 1f       	adc	r19, r19
    1130:	44 1f       	adc	r20, r20
    1132:	aa 1f       	adc	r26, r26
    1134:	a9 f3       	breq	.-22     	; 0x1120 <__divsf3_pse+0x10>
    1136:	33 d0       	rcall	.+102    	; 0x119e <__divsf3_pse+0x8e>
    1138:	0e 2e       	mov	r0, r30
    113a:	3a f0       	brmi	.+14     	; 0x114a <__divsf3_pse+0x3a>
    113c:	e0 e8       	ldi	r30, 0x80	; 128
    113e:	30 d0       	rcall	.+96     	; 0x11a0 <__divsf3_pse+0x90>
    1140:	91 50       	subi	r25, 0x01	; 1
    1142:	50 40       	sbci	r21, 0x00	; 0
    1144:	e6 95       	lsr	r30
    1146:	00 1c       	adc	r0, r0
    1148:	ca f7       	brpl	.-14     	; 0x113c <__divsf3_pse+0x2c>
    114a:	29 d0       	rcall	.+82     	; 0x119e <__divsf3_pse+0x8e>
    114c:	fe 2f       	mov	r31, r30
    114e:	27 d0       	rcall	.+78     	; 0x119e <__divsf3_pse+0x8e>
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	bb 1f       	adc	r27, r27
    1158:	26 17       	cp	r18, r22
    115a:	37 07       	cpc	r19, r23
    115c:	48 07       	cpc	r20, r24
    115e:	ab 07       	cpc	r26, r27
    1160:	b0 e8       	ldi	r27, 0x80	; 128
    1162:	09 f0       	breq	.+2      	; 0x1166 <__divsf3_pse+0x56>
    1164:	bb 0b       	sbc	r27, r27
    1166:	80 2d       	mov	r24, r0
    1168:	bf 01       	movw	r22, r30
    116a:	ff 27       	eor	r31, r31
    116c:	93 58       	subi	r25, 0x83	; 131
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	2a f0       	brmi	.+10     	; 0x117c <__divsf3_pse+0x6c>
    1172:	9e 3f       	cpi	r25, 0xFE	; 254
    1174:	51 05       	cpc	r21, r1
    1176:	68 f0       	brcs	.+26     	; 0x1192 <__divsf3_pse+0x82>
    1178:	8d c0       	rjmp	.+282    	; 0x1294 <__fp_inf>
    117a:	d7 c0       	rjmp	.+430    	; 0x132a <__fp_szero>
    117c:	5f 3f       	cpi	r21, 0xFF	; 255
    117e:	ec f3       	brlt	.-6      	; 0x117a <__divsf3_pse+0x6a>
    1180:	98 3e       	cpi	r25, 0xE8	; 232
    1182:	dc f3       	brlt	.-10     	; 0x117a <__divsf3_pse+0x6a>
    1184:	86 95       	lsr	r24
    1186:	77 95       	ror	r23
    1188:	67 95       	ror	r22
    118a:	b7 95       	ror	r27
    118c:	f7 95       	ror	r31
    118e:	9f 5f       	subi	r25, 0xFF	; 255
    1190:	c9 f7       	brne	.-14     	; 0x1184 <__divsf3_pse+0x74>
    1192:	88 0f       	add	r24, r24
    1194:	91 1d       	adc	r25, r1
    1196:	96 95       	lsr	r25
    1198:	87 95       	ror	r24
    119a:	97 f9       	bld	r25, 7
    119c:	08 95       	ret
    119e:	e1 e0       	ldi	r30, 0x01	; 1
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	88 1f       	adc	r24, r24
    11a6:	bb 1f       	adc	r27, r27
    11a8:	62 17       	cp	r22, r18
    11aa:	73 07       	cpc	r23, r19
    11ac:	84 07       	cpc	r24, r20
    11ae:	ba 07       	cpc	r27, r26
    11b0:	20 f0       	brcs	.+8      	; 0x11ba <__divsf3_pse+0xaa>
    11b2:	62 1b       	sub	r22, r18
    11b4:	73 0b       	sbc	r23, r19
    11b6:	84 0b       	sbc	r24, r20
    11b8:	ba 0b       	sbc	r27, r26
    11ba:	ee 1f       	adc	r30, r30
    11bc:	88 f7       	brcc	.-30     	; 0x11a0 <__divsf3_pse+0x90>
    11be:	e0 95       	com	r30
    11c0:	08 95       	ret

000011c2 <__fixunssfsi>:
    11c2:	98 d0       	rcall	.+304    	; 0x12f4 <__fp_splitA>
    11c4:	88 f0       	brcs	.+34     	; 0x11e8 <__fixunssfsi+0x26>
    11c6:	9f 57       	subi	r25, 0x7F	; 127
    11c8:	90 f0       	brcs	.+36     	; 0x11ee <__fixunssfsi+0x2c>
    11ca:	b9 2f       	mov	r27, r25
    11cc:	99 27       	eor	r25, r25
    11ce:	b7 51       	subi	r27, 0x17	; 23
    11d0:	a0 f0       	brcs	.+40     	; 0x11fa <__fixunssfsi+0x38>
    11d2:	d1 f0       	breq	.+52     	; 0x1208 <__fixunssfsi+0x46>
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	1a f0       	brmi	.+6      	; 0x11e4 <__fixunssfsi+0x22>
    11de:	ba 95       	dec	r27
    11e0:	c9 f7       	brne	.-14     	; 0x11d4 <__fixunssfsi+0x12>
    11e2:	12 c0       	rjmp	.+36     	; 0x1208 <__fixunssfsi+0x46>
    11e4:	b1 30       	cpi	r27, 0x01	; 1
    11e6:	81 f0       	breq	.+32     	; 0x1208 <__fixunssfsi+0x46>
    11e8:	9f d0       	rcall	.+318    	; 0x1328 <__fp_zero>
    11ea:	b1 e0       	ldi	r27, 0x01	; 1
    11ec:	08 95       	ret
    11ee:	9c c0       	rjmp	.+312    	; 0x1328 <__fp_zero>
    11f0:	67 2f       	mov	r22, r23
    11f2:	78 2f       	mov	r23, r24
    11f4:	88 27       	eor	r24, r24
    11f6:	b8 5f       	subi	r27, 0xF8	; 248
    11f8:	39 f0       	breq	.+14     	; 0x1208 <__fixunssfsi+0x46>
    11fa:	b9 3f       	cpi	r27, 0xF9	; 249
    11fc:	cc f3       	brlt	.-14     	; 0x11f0 <__fixunssfsi+0x2e>
    11fe:	86 95       	lsr	r24
    1200:	77 95       	ror	r23
    1202:	67 95       	ror	r22
    1204:	b3 95       	inc	r27
    1206:	d9 f7       	brne	.-10     	; 0x11fe <__fixunssfsi+0x3c>
    1208:	3e f4       	brtc	.+14     	; 0x1218 <__fixunssfsi+0x56>
    120a:	90 95       	com	r25
    120c:	80 95       	com	r24
    120e:	70 95       	com	r23
    1210:	61 95       	neg	r22
    1212:	7f 4f       	sbci	r23, 0xFF	; 255
    1214:	8f 4f       	sbci	r24, 0xFF	; 255
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	08 95       	ret

0000121a <__floatunsisf>:
    121a:	e8 94       	clt
    121c:	09 c0       	rjmp	.+18     	; 0x1230 <__floatsisf+0x12>

0000121e <__floatsisf>:
    121e:	97 fb       	bst	r25, 7
    1220:	3e f4       	brtc	.+14     	; 0x1230 <__floatsisf+0x12>
    1222:	90 95       	com	r25
    1224:	80 95       	com	r24
    1226:	70 95       	com	r23
    1228:	61 95       	neg	r22
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	99 23       	and	r25, r25
    1232:	a9 f0       	breq	.+42     	; 0x125e <__floatsisf+0x40>
    1234:	f9 2f       	mov	r31, r25
    1236:	96 e9       	ldi	r25, 0x96	; 150
    1238:	bb 27       	eor	r27, r27
    123a:	93 95       	inc	r25
    123c:	f6 95       	lsr	r31
    123e:	87 95       	ror	r24
    1240:	77 95       	ror	r23
    1242:	67 95       	ror	r22
    1244:	b7 95       	ror	r27
    1246:	f1 11       	cpse	r31, r1
    1248:	f8 cf       	rjmp	.-16     	; 0x123a <__floatsisf+0x1c>
    124a:	fa f4       	brpl	.+62     	; 0x128a <__floatsisf+0x6c>
    124c:	bb 0f       	add	r27, r27
    124e:	11 f4       	brne	.+4      	; 0x1254 <__floatsisf+0x36>
    1250:	60 ff       	sbrs	r22, 0
    1252:	1b c0       	rjmp	.+54     	; 0x128a <__floatsisf+0x6c>
    1254:	6f 5f       	subi	r22, 0xFF	; 255
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	8f 4f       	sbci	r24, 0xFF	; 255
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	16 c0       	rjmp	.+44     	; 0x128a <__floatsisf+0x6c>
    125e:	88 23       	and	r24, r24
    1260:	11 f0       	breq	.+4      	; 0x1266 <__floatsisf+0x48>
    1262:	96 e9       	ldi	r25, 0x96	; 150
    1264:	11 c0       	rjmp	.+34     	; 0x1288 <__floatsisf+0x6a>
    1266:	77 23       	and	r23, r23
    1268:	21 f0       	breq	.+8      	; 0x1272 <__floatsisf+0x54>
    126a:	9e e8       	ldi	r25, 0x8E	; 142
    126c:	87 2f       	mov	r24, r23
    126e:	76 2f       	mov	r23, r22
    1270:	05 c0       	rjmp	.+10     	; 0x127c <__floatsisf+0x5e>
    1272:	66 23       	and	r22, r22
    1274:	71 f0       	breq	.+28     	; 0x1292 <__floatsisf+0x74>
    1276:	96 e8       	ldi	r25, 0x86	; 134
    1278:	86 2f       	mov	r24, r22
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	2a f0       	brmi	.+10     	; 0x128a <__floatsisf+0x6c>
    1280:	9a 95       	dec	r25
    1282:	66 0f       	add	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	88 1f       	adc	r24, r24
    1288:	da f7       	brpl	.-10     	; 0x1280 <__floatsisf+0x62>
    128a:	88 0f       	add	r24, r24
    128c:	96 95       	lsr	r25
    128e:	87 95       	ror	r24
    1290:	97 f9       	bld	r25, 7
    1292:	08 95       	ret

00001294 <__fp_inf>:
    1294:	97 f9       	bld	r25, 7
    1296:	9f 67       	ori	r25, 0x7F	; 127
    1298:	80 e8       	ldi	r24, 0x80	; 128
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	08 95       	ret

000012a0 <__fp_nan>:
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
    12a2:	80 ec       	ldi	r24, 0xC0	; 192
    12a4:	08 95       	ret

000012a6 <__fp_pscA>:
    12a6:	00 24       	eor	r0, r0
    12a8:	0a 94       	dec	r0
    12aa:	16 16       	cp	r1, r22
    12ac:	17 06       	cpc	r1, r23
    12ae:	18 06       	cpc	r1, r24
    12b0:	09 06       	cpc	r0, r25
    12b2:	08 95       	ret

000012b4 <__fp_pscB>:
    12b4:	00 24       	eor	r0, r0
    12b6:	0a 94       	dec	r0
    12b8:	12 16       	cp	r1, r18
    12ba:	13 06       	cpc	r1, r19
    12bc:	14 06       	cpc	r1, r20
    12be:	05 06       	cpc	r0, r21
    12c0:	08 95       	ret

000012c2 <__fp_round>:
    12c2:	09 2e       	mov	r0, r25
    12c4:	03 94       	inc	r0
    12c6:	00 0c       	add	r0, r0
    12c8:	11 f4       	brne	.+4      	; 0x12ce <__fp_round+0xc>
    12ca:	88 23       	and	r24, r24
    12cc:	52 f0       	brmi	.+20     	; 0x12e2 <__fp_round+0x20>
    12ce:	bb 0f       	add	r27, r27
    12d0:	40 f4       	brcc	.+16     	; 0x12e2 <__fp_round+0x20>
    12d2:	bf 2b       	or	r27, r31
    12d4:	11 f4       	brne	.+4      	; 0x12da <__fp_round+0x18>
    12d6:	60 ff       	sbrs	r22, 0
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <__fp_round+0x20>
    12da:	6f 5f       	subi	r22, 0xFF	; 255
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	08 95       	ret

000012e4 <__fp_split3>:
    12e4:	57 fd       	sbrc	r21, 7
    12e6:	90 58       	subi	r25, 0x80	; 128
    12e8:	44 0f       	add	r20, r20
    12ea:	55 1f       	adc	r21, r21
    12ec:	59 f0       	breq	.+22     	; 0x1304 <__fp_splitA+0x10>
    12ee:	5f 3f       	cpi	r21, 0xFF	; 255
    12f0:	71 f0       	breq	.+28     	; 0x130e <__fp_splitA+0x1a>
    12f2:	47 95       	ror	r20

000012f4 <__fp_splitA>:
    12f4:	88 0f       	add	r24, r24
    12f6:	97 fb       	bst	r25, 7
    12f8:	99 1f       	adc	r25, r25
    12fa:	61 f0       	breq	.+24     	; 0x1314 <__fp_splitA+0x20>
    12fc:	9f 3f       	cpi	r25, 0xFF	; 255
    12fe:	79 f0       	breq	.+30     	; 0x131e <__fp_splitA+0x2a>
    1300:	87 95       	ror	r24
    1302:	08 95       	ret
    1304:	12 16       	cp	r1, r18
    1306:	13 06       	cpc	r1, r19
    1308:	14 06       	cpc	r1, r20
    130a:	55 1f       	adc	r21, r21
    130c:	f2 cf       	rjmp	.-28     	; 0x12f2 <__fp_split3+0xe>
    130e:	46 95       	lsr	r20
    1310:	f1 df       	rcall	.-30     	; 0x12f4 <__fp_splitA>
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <__fp_splitA+0x30>
    1314:	16 16       	cp	r1, r22
    1316:	17 06       	cpc	r1, r23
    1318:	18 06       	cpc	r1, r24
    131a:	99 1f       	adc	r25, r25
    131c:	f1 cf       	rjmp	.-30     	; 0x1300 <__fp_splitA+0xc>
    131e:	86 95       	lsr	r24
    1320:	71 05       	cpc	r23, r1
    1322:	61 05       	cpc	r22, r1
    1324:	08 94       	sec
    1326:	08 95       	ret

00001328 <__fp_zero>:
    1328:	e8 94       	clt

0000132a <__fp_szero>:
    132a:	bb 27       	eor	r27, r27
    132c:	66 27       	eor	r22, r22
    132e:	77 27       	eor	r23, r23
    1330:	cb 01       	movw	r24, r22
    1332:	97 f9       	bld	r25, 7
    1334:	08 95       	ret

00001336 <__mulsf3>:
    1336:	0b d0       	rcall	.+22     	; 0x134e <__mulsf3x>
    1338:	c4 cf       	rjmp	.-120    	; 0x12c2 <__fp_round>
    133a:	b5 df       	rcall	.-150    	; 0x12a6 <__fp_pscA>
    133c:	28 f0       	brcs	.+10     	; 0x1348 <__mulsf3+0x12>
    133e:	ba df       	rcall	.-140    	; 0x12b4 <__fp_pscB>
    1340:	18 f0       	brcs	.+6      	; 0x1348 <__mulsf3+0x12>
    1342:	95 23       	and	r25, r21
    1344:	09 f0       	breq	.+2      	; 0x1348 <__mulsf3+0x12>
    1346:	a6 cf       	rjmp	.-180    	; 0x1294 <__fp_inf>
    1348:	ab cf       	rjmp	.-170    	; 0x12a0 <__fp_nan>
    134a:	11 24       	eor	r1, r1
    134c:	ee cf       	rjmp	.-36     	; 0x132a <__fp_szero>

0000134e <__mulsf3x>:
    134e:	ca df       	rcall	.-108    	; 0x12e4 <__fp_split3>
    1350:	a0 f3       	brcs	.-24     	; 0x133a <__mulsf3+0x4>

00001352 <__mulsf3_pse>:
    1352:	95 9f       	mul	r25, r21
    1354:	d1 f3       	breq	.-12     	; 0x134a <__mulsf3+0x14>
    1356:	95 0f       	add	r25, r21
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	55 1f       	adc	r21, r21
    135c:	62 9f       	mul	r22, r18
    135e:	f0 01       	movw	r30, r0
    1360:	72 9f       	mul	r23, r18
    1362:	bb 27       	eor	r27, r27
    1364:	f0 0d       	add	r31, r0
    1366:	b1 1d       	adc	r27, r1
    1368:	63 9f       	mul	r22, r19
    136a:	aa 27       	eor	r26, r26
    136c:	f0 0d       	add	r31, r0
    136e:	b1 1d       	adc	r27, r1
    1370:	aa 1f       	adc	r26, r26
    1372:	64 9f       	mul	r22, r20
    1374:	66 27       	eor	r22, r22
    1376:	b0 0d       	add	r27, r0
    1378:	a1 1d       	adc	r26, r1
    137a:	66 1f       	adc	r22, r22
    137c:	82 9f       	mul	r24, r18
    137e:	22 27       	eor	r18, r18
    1380:	b0 0d       	add	r27, r0
    1382:	a1 1d       	adc	r26, r1
    1384:	62 1f       	adc	r22, r18
    1386:	73 9f       	mul	r23, r19
    1388:	b0 0d       	add	r27, r0
    138a:	a1 1d       	adc	r26, r1
    138c:	62 1f       	adc	r22, r18
    138e:	83 9f       	mul	r24, r19
    1390:	a0 0d       	add	r26, r0
    1392:	61 1d       	adc	r22, r1
    1394:	22 1f       	adc	r18, r18
    1396:	74 9f       	mul	r23, r20
    1398:	33 27       	eor	r19, r19
    139a:	a0 0d       	add	r26, r0
    139c:	61 1d       	adc	r22, r1
    139e:	23 1f       	adc	r18, r19
    13a0:	84 9f       	mul	r24, r20
    13a2:	60 0d       	add	r22, r0
    13a4:	21 1d       	adc	r18, r1
    13a6:	82 2f       	mov	r24, r18
    13a8:	76 2f       	mov	r23, r22
    13aa:	6a 2f       	mov	r22, r26
    13ac:	11 24       	eor	r1, r1
    13ae:	9f 57       	subi	r25, 0x7F	; 127
    13b0:	50 40       	sbci	r21, 0x00	; 0
    13b2:	8a f0       	brmi	.+34     	; 0x13d6 <__mulsf3_pse+0x84>
    13b4:	e1 f0       	breq	.+56     	; 0x13ee <__mulsf3_pse+0x9c>
    13b6:	88 23       	and	r24, r24
    13b8:	4a f0       	brmi	.+18     	; 0x13cc <__mulsf3_pse+0x7a>
    13ba:	ee 0f       	add	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	bb 1f       	adc	r27, r27
    13c0:	66 1f       	adc	r22, r22
    13c2:	77 1f       	adc	r23, r23
    13c4:	88 1f       	adc	r24, r24
    13c6:	91 50       	subi	r25, 0x01	; 1
    13c8:	50 40       	sbci	r21, 0x00	; 0
    13ca:	a9 f7       	brne	.-22     	; 0x13b6 <__mulsf3_pse+0x64>
    13cc:	9e 3f       	cpi	r25, 0xFE	; 254
    13ce:	51 05       	cpc	r21, r1
    13d0:	70 f0       	brcs	.+28     	; 0x13ee <__mulsf3_pse+0x9c>
    13d2:	60 cf       	rjmp	.-320    	; 0x1294 <__fp_inf>
    13d4:	aa cf       	rjmp	.-172    	; 0x132a <__fp_szero>
    13d6:	5f 3f       	cpi	r21, 0xFF	; 255
    13d8:	ec f3       	brlt	.-6      	; 0x13d4 <__mulsf3_pse+0x82>
    13da:	98 3e       	cpi	r25, 0xE8	; 232
    13dc:	dc f3       	brlt	.-10     	; 0x13d4 <__mulsf3_pse+0x82>
    13de:	86 95       	lsr	r24
    13e0:	77 95       	ror	r23
    13e2:	67 95       	ror	r22
    13e4:	b7 95       	ror	r27
    13e6:	f7 95       	ror	r31
    13e8:	e7 95       	ror	r30
    13ea:	9f 5f       	subi	r25, 0xFF	; 255
    13ec:	c1 f7       	brne	.-16     	; 0x13de <__mulsf3_pse+0x8c>
    13ee:	fe 2b       	or	r31, r30
    13f0:	88 0f       	add	r24, r24
    13f2:	91 1d       	adc	r25, r1
    13f4:	96 95       	lsr	r25
    13f6:	87 95       	ror	r24
    13f8:	97 f9       	bld	r25, 7
    13fa:	08 95       	ret

000013fc <round>:
    13fc:	7b df       	rcall	.-266    	; 0x12f4 <__fp_splitA>
    13fe:	e0 f0       	brcs	.+56     	; 0x1438 <round+0x3c>
    1400:	9e 37       	cpi	r25, 0x7E	; 126
    1402:	d8 f0       	brcs	.+54     	; 0x143a <round+0x3e>
    1404:	96 39       	cpi	r25, 0x96	; 150
    1406:	b8 f4       	brcc	.+46     	; 0x1436 <round+0x3a>
    1408:	9e 38       	cpi	r25, 0x8E	; 142
    140a:	48 f4       	brcc	.+18     	; 0x141e <round+0x22>
    140c:	67 2f       	mov	r22, r23
    140e:	78 2f       	mov	r23, r24
    1410:	88 27       	eor	r24, r24
    1412:	98 5f       	subi	r25, 0xF8	; 248
    1414:	f9 cf       	rjmp	.-14     	; 0x1408 <round+0xc>
    1416:	86 95       	lsr	r24
    1418:	77 95       	ror	r23
    141a:	67 95       	ror	r22
    141c:	93 95       	inc	r25
    141e:	95 39       	cpi	r25, 0x95	; 149
    1420:	d0 f3       	brcs	.-12     	; 0x1416 <round+0x1a>
    1422:	b6 2f       	mov	r27, r22
    1424:	b1 70       	andi	r27, 0x01	; 1
    1426:	6b 0f       	add	r22, r27
    1428:	71 1d       	adc	r23, r1
    142a:	81 1d       	adc	r24, r1
    142c:	20 f4       	brcc	.+8      	; 0x1436 <round+0x3a>
    142e:	87 95       	ror	r24
    1430:	77 95       	ror	r23
    1432:	67 95       	ror	r22
    1434:	93 95       	inc	r25
    1436:	02 c0       	rjmp	.+4      	; 0x143c <__fp_mintl>
    1438:	1c c0       	rjmp	.+56     	; 0x1472 <__fp_mpack>
    143a:	77 cf       	rjmp	.-274    	; 0x132a <__fp_szero>

0000143c <__fp_mintl>:
    143c:	88 23       	and	r24, r24
    143e:	71 f4       	brne	.+28     	; 0x145c <__fp_mintl+0x20>
    1440:	77 23       	and	r23, r23
    1442:	21 f0       	breq	.+8      	; 0x144c <__fp_mintl+0x10>
    1444:	98 50       	subi	r25, 0x08	; 8
    1446:	87 2b       	or	r24, r23
    1448:	76 2f       	mov	r23, r22
    144a:	07 c0       	rjmp	.+14     	; 0x145a <__fp_mintl+0x1e>
    144c:	66 23       	and	r22, r22
    144e:	11 f4       	brne	.+4      	; 0x1454 <__fp_mintl+0x18>
    1450:	99 27       	eor	r25, r25
    1452:	0d c0       	rjmp	.+26     	; 0x146e <__fp_mintl+0x32>
    1454:	90 51       	subi	r25, 0x10	; 16
    1456:	86 2b       	or	r24, r22
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	2a f0       	brmi	.+10     	; 0x1468 <__fp_mintl+0x2c>
    145e:	9a 95       	dec	r25
    1460:	66 0f       	add	r22, r22
    1462:	77 1f       	adc	r23, r23
    1464:	88 1f       	adc	r24, r24
    1466:	da f7       	brpl	.-10     	; 0x145e <__fp_mintl+0x22>
    1468:	88 0f       	add	r24, r24
    146a:	96 95       	lsr	r25
    146c:	87 95       	ror	r24
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret

00001472 <__fp_mpack>:
    1472:	9f 3f       	cpi	r25, 0xFF	; 255
    1474:	31 f0       	breq	.+12     	; 0x1482 <__fp_mpack_finite+0xc>

00001476 <__fp_mpack_finite>:
    1476:	91 50       	subi	r25, 0x01	; 1
    1478:	20 f4       	brcc	.+8      	; 0x1482 <__fp_mpack_finite+0xc>
    147a:	87 95       	ror	r24
    147c:	77 95       	ror	r23
    147e:	67 95       	ror	r22
    1480:	b7 95       	ror	r27
    1482:	88 0f       	add	r24, r24
    1484:	91 1d       	adc	r25, r1
    1486:	96 95       	lsr	r25
    1488:	87 95       	ror	r24
    148a:	97 f9       	bld	r25, 7
    148c:	08 95       	ret

0000148e <__umulhisi3>:
    148e:	a2 9f       	mul	r26, r18
    1490:	b0 01       	movw	r22, r0
    1492:	b3 9f       	mul	r27, r19
    1494:	c0 01       	movw	r24, r0
    1496:	a3 9f       	mul	r26, r19
    1498:	01 d0       	rcall	.+2      	; 0x149c <__umulhisi3+0xe>
    149a:	b2 9f       	mul	r27, r18
    149c:	70 0d       	add	r23, r0
    149e:	81 1d       	adc	r24, r1
    14a0:	11 24       	eor	r1, r1
    14a2:	91 1d       	adc	r25, r1
    14a4:	08 95       	ret

000014a6 <sprintf>:
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	2e 97       	sbiw	r28, 0x0e	; 14
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0e 89       	ldd	r16, Y+22	; 0x16
    14ba:	1f 89       	ldd	r17, Y+23	; 0x17
    14bc:	86 e0       	ldi	r24, 0x06	; 6
    14be:	8c 83       	std	Y+4, r24	; 0x04
    14c0:	09 83       	std	Y+1, r16	; 0x01
    14c2:	1a 83       	std	Y+2, r17	; 0x02
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	9f e7       	ldi	r25, 0x7F	; 127
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	ce 01       	movw	r24, r28
    14ce:	4a 96       	adiw	r24, 0x1a	; 26
    14d0:	ac 01       	movw	r20, r24
    14d2:	68 8d       	ldd	r22, Y+24	; 0x18
    14d4:	79 8d       	ldd	r23, Y+25	; 0x19
    14d6:	ce 01       	movw	r24, r28
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	0d d0       	rcall	.+26     	; 0x14f6 <vfprintf>
    14dc:	ef 81       	ldd	r30, Y+7	; 0x07
    14de:	f8 85       	ldd	r31, Y+8	; 0x08
    14e0:	e0 0f       	add	r30, r16
    14e2:	f1 1f       	adc	r31, r17
    14e4:	10 82       	st	Z, r1
    14e6:	2e 96       	adiw	r28, 0x0e	; 14
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <vfprintf>:
    14f6:	2f 92       	push	r2
    14f8:	3f 92       	push	r3
    14fa:	4f 92       	push	r4
    14fc:	5f 92       	push	r5
    14fe:	6f 92       	push	r6
    1500:	7f 92       	push	r7
    1502:	8f 92       	push	r8
    1504:	9f 92       	push	r9
    1506:	af 92       	push	r10
    1508:	bf 92       	push	r11
    150a:	cf 92       	push	r12
    150c:	df 92       	push	r13
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	2c 97       	sbiw	r28, 0x0c	; 12
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	7c 01       	movw	r14, r24
    1526:	6b 01       	movw	r12, r22
    1528:	8a 01       	movw	r16, r20
    152a:	fc 01       	movw	r30, r24
    152c:	16 82       	std	Z+6, r1	; 0x06
    152e:	17 82       	std	Z+7, r1	; 0x07
    1530:	83 81       	ldd	r24, Z+3	; 0x03
    1532:	81 ff       	sbrs	r24, 1
    1534:	b9 c1       	rjmp	.+882    	; 0x18a8 <vfprintf+0x3b2>
    1536:	88 24       	eor	r8, r8
    1538:	83 94       	inc	r8
    153a:	91 2c       	mov	r9, r1
    153c:	8c 0e       	add	r8, r28
    153e:	9d 1e       	adc	r9, r29
    1540:	f7 01       	movw	r30, r14
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	f6 01       	movw	r30, r12
    1546:	93 fd       	sbrc	r25, 3
    1548:	85 91       	lpm	r24, Z+
    154a:	93 ff       	sbrs	r25, 3
    154c:	81 91       	ld	r24, Z+
    154e:	6f 01       	movw	r12, r30
    1550:	88 23       	and	r24, r24
    1552:	09 f4       	brne	.+2      	; 0x1556 <vfprintf+0x60>
    1554:	a5 c1       	rjmp	.+842    	; 0x18a0 <vfprintf+0x3aa>
    1556:	85 32       	cpi	r24, 0x25	; 37
    1558:	39 f4       	brne	.+14     	; 0x1568 <vfprintf+0x72>
    155a:	93 fd       	sbrc	r25, 3
    155c:	85 91       	lpm	r24, Z+
    155e:	93 ff       	sbrs	r25, 3
    1560:	81 91       	ld	r24, Z+
    1562:	6f 01       	movw	r12, r30
    1564:	85 32       	cpi	r24, 0x25	; 37
    1566:	21 f4       	brne	.+8      	; 0x1570 <vfprintf+0x7a>
    1568:	b7 01       	movw	r22, r14
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	cc d1       	rcall	.+920    	; 0x1906 <fputc>
    156e:	e8 cf       	rjmp	.-48     	; 0x1540 <vfprintf+0x4a>
    1570:	51 2c       	mov	r5, r1
    1572:	31 2c       	mov	r3, r1
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	20 32       	cpi	r18, 0x20	; 32
    1578:	a8 f4       	brcc	.+42     	; 0x15a4 <vfprintf+0xae>
    157a:	8b 32       	cpi	r24, 0x2B	; 43
    157c:	61 f0       	breq	.+24     	; 0x1596 <vfprintf+0xa0>
    157e:	28 f4       	brcc	.+10     	; 0x158a <vfprintf+0x94>
    1580:	80 32       	cpi	r24, 0x20	; 32
    1582:	51 f0       	breq	.+20     	; 0x1598 <vfprintf+0xa2>
    1584:	83 32       	cpi	r24, 0x23	; 35
    1586:	71 f4       	brne	.+28     	; 0x15a4 <vfprintf+0xae>
    1588:	0b c0       	rjmp	.+22     	; 0x15a0 <vfprintf+0xaa>
    158a:	8d 32       	cpi	r24, 0x2D	; 45
    158c:	39 f0       	breq	.+14     	; 0x159c <vfprintf+0xa6>
    158e:	80 33       	cpi	r24, 0x30	; 48
    1590:	49 f4       	brne	.+18     	; 0x15a4 <vfprintf+0xae>
    1592:	21 60       	ori	r18, 0x01	; 1
    1594:	28 c0       	rjmp	.+80     	; 0x15e6 <vfprintf+0xf0>
    1596:	22 60       	ori	r18, 0x02	; 2
    1598:	24 60       	ori	r18, 0x04	; 4
    159a:	25 c0       	rjmp	.+74     	; 0x15e6 <vfprintf+0xf0>
    159c:	28 60       	ori	r18, 0x08	; 8
    159e:	23 c0       	rjmp	.+70     	; 0x15e6 <vfprintf+0xf0>
    15a0:	20 61       	ori	r18, 0x10	; 16
    15a2:	21 c0       	rjmp	.+66     	; 0x15e6 <vfprintf+0xf0>
    15a4:	27 fd       	sbrc	r18, 7
    15a6:	27 c0       	rjmp	.+78     	; 0x15f6 <vfprintf+0x100>
    15a8:	38 2f       	mov	r19, r24
    15aa:	30 53       	subi	r19, 0x30	; 48
    15ac:	3a 30       	cpi	r19, 0x0A	; 10
    15ae:	78 f4       	brcc	.+30     	; 0x15ce <vfprintf+0xd8>
    15b0:	26 ff       	sbrs	r18, 6
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <vfprintf+0xca>
    15b4:	fa e0       	ldi	r31, 0x0A	; 10
    15b6:	5f 9e       	mul	r5, r31
    15b8:	30 0d       	add	r19, r0
    15ba:	11 24       	eor	r1, r1
    15bc:	53 2e       	mov	r5, r19
    15be:	13 c0       	rjmp	.+38     	; 0x15e6 <vfprintf+0xf0>
    15c0:	8a e0       	ldi	r24, 0x0A	; 10
    15c2:	38 9e       	mul	r3, r24
    15c4:	30 0d       	add	r19, r0
    15c6:	11 24       	eor	r1, r1
    15c8:	33 2e       	mov	r3, r19
    15ca:	20 62       	ori	r18, 0x20	; 32
    15cc:	0c c0       	rjmp	.+24     	; 0x15e6 <vfprintf+0xf0>
    15ce:	8e 32       	cpi	r24, 0x2E	; 46
    15d0:	21 f4       	brne	.+8      	; 0x15da <vfprintf+0xe4>
    15d2:	26 fd       	sbrc	r18, 6
    15d4:	65 c1       	rjmp	.+714    	; 0x18a0 <vfprintf+0x3aa>
    15d6:	20 64       	ori	r18, 0x40	; 64
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <vfprintf+0xf0>
    15da:	8c 36       	cpi	r24, 0x6C	; 108
    15dc:	11 f4       	brne	.+4      	; 0x15e2 <vfprintf+0xec>
    15de:	20 68       	ori	r18, 0x80	; 128
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <vfprintf+0xf0>
    15e2:	88 36       	cpi	r24, 0x68	; 104
    15e4:	41 f4       	brne	.+16     	; 0x15f6 <vfprintf+0x100>
    15e6:	f6 01       	movw	r30, r12
    15e8:	93 fd       	sbrc	r25, 3
    15ea:	85 91       	lpm	r24, Z+
    15ec:	93 ff       	sbrs	r25, 3
    15ee:	81 91       	ld	r24, Z+
    15f0:	6f 01       	movw	r12, r30
    15f2:	81 11       	cpse	r24, r1
    15f4:	c0 cf       	rjmp	.-128    	; 0x1576 <vfprintf+0x80>
    15f6:	98 2f       	mov	r25, r24
    15f8:	95 54       	subi	r25, 0x45	; 69
    15fa:	93 30       	cpi	r25, 0x03	; 3
    15fc:	18 f0       	brcs	.+6      	; 0x1604 <vfprintf+0x10e>
    15fe:	90 52       	subi	r25, 0x20	; 32
    1600:	93 30       	cpi	r25, 0x03	; 3
    1602:	28 f4       	brcc	.+10     	; 0x160e <vfprintf+0x118>
    1604:	0c 5f       	subi	r16, 0xFC	; 252
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	ff e3       	ldi	r31, 0x3F	; 63
    160a:	f9 83       	std	Y+1, r31	; 0x01
    160c:	0d c0       	rjmp	.+26     	; 0x1628 <vfprintf+0x132>
    160e:	83 36       	cpi	r24, 0x63	; 99
    1610:	31 f0       	breq	.+12     	; 0x161e <vfprintf+0x128>
    1612:	83 37       	cpi	r24, 0x73	; 115
    1614:	71 f0       	breq	.+28     	; 0x1632 <vfprintf+0x13c>
    1616:	83 35       	cpi	r24, 0x53	; 83
    1618:	09 f0       	breq	.+2      	; 0x161c <vfprintf+0x126>
    161a:	5a c0       	rjmp	.+180    	; 0x16d0 <vfprintf+0x1da>
    161c:	22 c0       	rjmp	.+68     	; 0x1662 <vfprintf+0x16c>
    161e:	f8 01       	movw	r30, r16
    1620:	80 81       	ld	r24, Z
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	0e 5f       	subi	r16, 0xFE	; 254
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	44 24       	eor	r4, r4
    162a:	43 94       	inc	r4
    162c:	51 2c       	mov	r5, r1
    162e:	54 01       	movw	r10, r8
    1630:	14 c0       	rjmp	.+40     	; 0x165a <vfprintf+0x164>
    1632:	38 01       	movw	r6, r16
    1634:	f2 e0       	ldi	r31, 0x02	; 2
    1636:	6f 0e       	add	r6, r31
    1638:	71 1c       	adc	r7, r1
    163a:	f8 01       	movw	r30, r16
    163c:	a0 80       	ld	r10, Z
    163e:	b1 80       	ldd	r11, Z+1	; 0x01
    1640:	26 ff       	sbrs	r18, 6
    1642:	03 c0       	rjmp	.+6      	; 0x164a <vfprintf+0x154>
    1644:	65 2d       	mov	r22, r5
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	02 c0       	rjmp	.+4      	; 0x164e <vfprintf+0x158>
    164a:	6f ef       	ldi	r22, 0xFF	; 255
    164c:	7f ef       	ldi	r23, 0xFF	; 255
    164e:	c5 01       	movw	r24, r10
    1650:	2c 87       	std	Y+12, r18	; 0x0c
    1652:	4e d1       	rcall	.+668    	; 0x18f0 <strnlen>
    1654:	2c 01       	movw	r4, r24
    1656:	83 01       	movw	r16, r6
    1658:	2c 85       	ldd	r18, Y+12	; 0x0c
    165a:	6f e7       	ldi	r22, 0x7F	; 127
    165c:	26 2e       	mov	r2, r22
    165e:	22 22       	and	r2, r18
    1660:	17 c0       	rjmp	.+46     	; 0x1690 <vfprintf+0x19a>
    1662:	38 01       	movw	r6, r16
    1664:	f2 e0       	ldi	r31, 0x02	; 2
    1666:	6f 0e       	add	r6, r31
    1668:	71 1c       	adc	r7, r1
    166a:	f8 01       	movw	r30, r16
    166c:	a0 80       	ld	r10, Z
    166e:	b1 80       	ldd	r11, Z+1	; 0x01
    1670:	26 ff       	sbrs	r18, 6
    1672:	03 c0       	rjmp	.+6      	; 0x167a <vfprintf+0x184>
    1674:	65 2d       	mov	r22, r5
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	02 c0       	rjmp	.+4      	; 0x167e <vfprintf+0x188>
    167a:	6f ef       	ldi	r22, 0xFF	; 255
    167c:	7f ef       	ldi	r23, 0xFF	; 255
    167e:	c5 01       	movw	r24, r10
    1680:	2c 87       	std	Y+12, r18	; 0x0c
    1682:	2b d1       	rcall	.+598    	; 0x18da <strnlen_P>
    1684:	2c 01       	movw	r4, r24
    1686:	2c 85       	ldd	r18, Y+12	; 0x0c
    1688:	50 e8       	ldi	r21, 0x80	; 128
    168a:	25 2e       	mov	r2, r21
    168c:	22 2a       	or	r2, r18
    168e:	83 01       	movw	r16, r6
    1690:	23 fc       	sbrc	r2, 3
    1692:	1a c0       	rjmp	.+52     	; 0x16c8 <vfprintf+0x1d2>
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <vfprintf+0x1aa>
    1696:	b7 01       	movw	r22, r14
    1698:	80 e2       	ldi	r24, 0x20	; 32
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	34 d1       	rcall	.+616    	; 0x1906 <fputc>
    169e:	3a 94       	dec	r3
    16a0:	83 2d       	mov	r24, r3
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	48 16       	cp	r4, r24
    16a6:	59 06       	cpc	r5, r25
    16a8:	b0 f3       	brcs	.-20     	; 0x1696 <vfprintf+0x1a0>
    16aa:	0e c0       	rjmp	.+28     	; 0x16c8 <vfprintf+0x1d2>
    16ac:	f5 01       	movw	r30, r10
    16ae:	27 fc       	sbrc	r2, 7
    16b0:	85 91       	lpm	r24, Z+
    16b2:	27 fe       	sbrs	r2, 7
    16b4:	81 91       	ld	r24, Z+
    16b6:	5f 01       	movw	r10, r30
    16b8:	b7 01       	movw	r22, r14
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	24 d1       	rcall	.+584    	; 0x1906 <fputc>
    16be:	31 10       	cpse	r3, r1
    16c0:	3a 94       	dec	r3
    16c2:	f1 e0       	ldi	r31, 0x01	; 1
    16c4:	4f 1a       	sub	r4, r31
    16c6:	51 08       	sbc	r5, r1
    16c8:	41 14       	cp	r4, r1
    16ca:	51 04       	cpc	r5, r1
    16cc:	79 f7       	brne	.-34     	; 0x16ac <vfprintf+0x1b6>
    16ce:	e5 c0       	rjmp	.+458    	; 0x189a <vfprintf+0x3a4>
    16d0:	84 36       	cpi	r24, 0x64	; 100
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <vfprintf+0x1e2>
    16d4:	89 36       	cpi	r24, 0x69	; 105
    16d6:	39 f5       	brne	.+78     	; 0x1726 <vfprintf+0x230>
    16d8:	f8 01       	movw	r30, r16
    16da:	27 ff       	sbrs	r18, 7
    16dc:	07 c0       	rjmp	.+14     	; 0x16ec <vfprintf+0x1f6>
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	93 81       	ldd	r25, Z+3	; 0x03
    16e6:	0c 5f       	subi	r16, 0xFC	; 252
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	08 c0       	rjmp	.+16     	; 0x16fc <vfprintf+0x206>
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	88 27       	eor	r24, r24
    16f2:	77 fd       	sbrc	r23, 7
    16f4:	80 95       	com	r24
    16f6:	98 2f       	mov	r25, r24
    16f8:	0e 5f       	subi	r16, 0xFE	; 254
    16fa:	1f 4f       	sbci	r17, 0xFF	; 255
    16fc:	4f e6       	ldi	r20, 0x6F	; 111
    16fe:	b4 2e       	mov	r11, r20
    1700:	b2 22       	and	r11, r18
    1702:	97 ff       	sbrs	r25, 7
    1704:	09 c0       	rjmp	.+18     	; 0x1718 <vfprintf+0x222>
    1706:	90 95       	com	r25
    1708:	80 95       	com	r24
    170a:	70 95       	com	r23
    170c:	61 95       	neg	r22
    170e:	7f 4f       	sbci	r23, 0xFF	; 255
    1710:	8f 4f       	sbci	r24, 0xFF	; 255
    1712:	9f 4f       	sbci	r25, 0xFF	; 255
    1714:	f0 e8       	ldi	r31, 0x80	; 128
    1716:	bf 2a       	or	r11, r31
    1718:	2a e0       	ldi	r18, 0x0A	; 10
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	a4 01       	movw	r20, r8
    171e:	1f d1       	rcall	.+574    	; 0x195e <__ultoa_invert>
    1720:	a8 2e       	mov	r10, r24
    1722:	a8 18       	sub	r10, r8
    1724:	42 c0       	rjmp	.+132    	; 0x17aa <vfprintf+0x2b4>
    1726:	85 37       	cpi	r24, 0x75	; 117
    1728:	31 f4       	brne	.+12     	; 0x1736 <vfprintf+0x240>
    172a:	3f ee       	ldi	r19, 0xEF	; 239
    172c:	b3 2e       	mov	r11, r19
    172e:	b2 22       	and	r11, r18
    1730:	2a e0       	ldi	r18, 0x0A	; 10
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	24 c0       	rjmp	.+72     	; 0x177e <vfprintf+0x288>
    1736:	99 ef       	ldi	r25, 0xF9	; 249
    1738:	b9 2e       	mov	r11, r25
    173a:	b2 22       	and	r11, r18
    173c:	8f 36       	cpi	r24, 0x6F	; 111
    173e:	b9 f0       	breq	.+46     	; 0x176e <vfprintf+0x278>
    1740:	20 f4       	brcc	.+8      	; 0x174a <vfprintf+0x254>
    1742:	88 35       	cpi	r24, 0x58	; 88
    1744:	09 f0       	breq	.+2      	; 0x1748 <vfprintf+0x252>
    1746:	ac c0       	rjmp	.+344    	; 0x18a0 <vfprintf+0x3aa>
    1748:	0d c0       	rjmp	.+26     	; 0x1764 <vfprintf+0x26e>
    174a:	80 37       	cpi	r24, 0x70	; 112
    174c:	21 f0       	breq	.+8      	; 0x1756 <vfprintf+0x260>
    174e:	88 37       	cpi	r24, 0x78	; 120
    1750:	09 f0       	breq	.+2      	; 0x1754 <vfprintf+0x25e>
    1752:	a6 c0       	rjmp	.+332    	; 0x18a0 <vfprintf+0x3aa>
    1754:	02 c0       	rjmp	.+4      	; 0x175a <vfprintf+0x264>
    1756:	20 e1       	ldi	r18, 0x10	; 16
    1758:	b2 2a       	or	r11, r18
    175a:	b4 fe       	sbrs	r11, 4
    175c:	0b c0       	rjmp	.+22     	; 0x1774 <vfprintf+0x27e>
    175e:	84 e0       	ldi	r24, 0x04	; 4
    1760:	b8 2a       	or	r11, r24
    1762:	08 c0       	rjmp	.+16     	; 0x1774 <vfprintf+0x27e>
    1764:	24 ff       	sbrs	r18, 4
    1766:	09 c0       	rjmp	.+18     	; 0x177a <vfprintf+0x284>
    1768:	e6 e0       	ldi	r30, 0x06	; 6
    176a:	be 2a       	or	r11, r30
    176c:	06 c0       	rjmp	.+12     	; 0x177a <vfprintf+0x284>
    176e:	28 e0       	ldi	r18, 0x08	; 8
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	05 c0       	rjmp	.+10     	; 0x177e <vfprintf+0x288>
    1774:	20 e1       	ldi	r18, 0x10	; 16
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	02 c0       	rjmp	.+4      	; 0x177e <vfprintf+0x288>
    177a:	20 e1       	ldi	r18, 0x10	; 16
    177c:	32 e0       	ldi	r19, 0x02	; 2
    177e:	f8 01       	movw	r30, r16
    1780:	b7 fe       	sbrs	r11, 7
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <vfprintf+0x29c>
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	0c 5f       	subi	r16, 0xFC	; 252
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	06 c0       	rjmp	.+12     	; 0x179e <vfprintf+0x2a8>
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 5f       	subi	r16, 0xFE	; 254
    179c:	1f 4f       	sbci	r17, 0xFF	; 255
    179e:	a4 01       	movw	r20, r8
    17a0:	de d0       	rcall	.+444    	; 0x195e <__ultoa_invert>
    17a2:	a8 2e       	mov	r10, r24
    17a4:	a8 18       	sub	r10, r8
    17a6:	ff e7       	ldi	r31, 0x7F	; 127
    17a8:	bf 22       	and	r11, r31
    17aa:	b6 fe       	sbrs	r11, 6
    17ac:	0b c0       	rjmp	.+22     	; 0x17c4 <vfprintf+0x2ce>
    17ae:	2b 2d       	mov	r18, r11
    17b0:	2e 7f       	andi	r18, 0xFE	; 254
    17b2:	a5 14       	cp	r10, r5
    17b4:	50 f4       	brcc	.+20     	; 0x17ca <vfprintf+0x2d4>
    17b6:	b4 fe       	sbrs	r11, 4
    17b8:	0a c0       	rjmp	.+20     	; 0x17ce <vfprintf+0x2d8>
    17ba:	b2 fc       	sbrc	r11, 2
    17bc:	08 c0       	rjmp	.+16     	; 0x17ce <vfprintf+0x2d8>
    17be:	2b 2d       	mov	r18, r11
    17c0:	2e 7e       	andi	r18, 0xEE	; 238
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <vfprintf+0x2d8>
    17c4:	7a 2c       	mov	r7, r10
    17c6:	2b 2d       	mov	r18, r11
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <vfprintf+0x2da>
    17ca:	7a 2c       	mov	r7, r10
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x2da>
    17ce:	75 2c       	mov	r7, r5
    17d0:	24 ff       	sbrs	r18, 4
    17d2:	0d c0       	rjmp	.+26     	; 0x17ee <vfprintf+0x2f8>
    17d4:	fe 01       	movw	r30, r28
    17d6:	ea 0d       	add	r30, r10
    17d8:	f1 1d       	adc	r31, r1
    17da:	80 81       	ld	r24, Z
    17dc:	80 33       	cpi	r24, 0x30	; 48
    17de:	11 f4       	brne	.+4      	; 0x17e4 <vfprintf+0x2ee>
    17e0:	29 7e       	andi	r18, 0xE9	; 233
    17e2:	09 c0       	rjmp	.+18     	; 0x17f6 <vfprintf+0x300>
    17e4:	22 ff       	sbrs	r18, 2
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0x2fe>
    17e8:	73 94       	inc	r7
    17ea:	73 94       	inc	r7
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <vfprintf+0x300>
    17ee:	82 2f       	mov	r24, r18
    17f0:	86 78       	andi	r24, 0x86	; 134
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <vfprintf+0x300>
    17f4:	73 94       	inc	r7
    17f6:	23 fd       	sbrc	r18, 3
    17f8:	13 c0       	rjmp	.+38     	; 0x1820 <vfprintf+0x32a>
    17fa:	20 ff       	sbrs	r18, 0
    17fc:	0e c0       	rjmp	.+28     	; 0x181a <vfprintf+0x324>
    17fe:	5a 2c       	mov	r5, r10
    1800:	73 14       	cp	r7, r3
    1802:	58 f4       	brcc	.+22     	; 0x181a <vfprintf+0x324>
    1804:	53 0c       	add	r5, r3
    1806:	57 18       	sub	r5, r7
    1808:	73 2c       	mov	r7, r3
    180a:	07 c0       	rjmp	.+14     	; 0x181a <vfprintf+0x324>
    180c:	b7 01       	movw	r22, r14
    180e:	80 e2       	ldi	r24, 0x20	; 32
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	2c 87       	std	Y+12, r18	; 0x0c
    1814:	78 d0       	rcall	.+240    	; 0x1906 <fputc>
    1816:	73 94       	inc	r7
    1818:	2c 85       	ldd	r18, Y+12	; 0x0c
    181a:	73 14       	cp	r7, r3
    181c:	b8 f3       	brcs	.-18     	; 0x180c <vfprintf+0x316>
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <vfprintf+0x332>
    1820:	73 14       	cp	r7, r3
    1822:	10 f4       	brcc	.+4      	; 0x1828 <vfprintf+0x332>
    1824:	37 18       	sub	r3, r7
    1826:	01 c0       	rjmp	.+2      	; 0x182a <vfprintf+0x334>
    1828:	31 2c       	mov	r3, r1
    182a:	24 ff       	sbrs	r18, 4
    182c:	11 c0       	rjmp	.+34     	; 0x1850 <vfprintf+0x35a>
    182e:	b7 01       	movw	r22, r14
    1830:	80 e3       	ldi	r24, 0x30	; 48
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	2c 87       	std	Y+12, r18	; 0x0c
    1836:	67 d0       	rcall	.+206    	; 0x1906 <fputc>
    1838:	2c 85       	ldd	r18, Y+12	; 0x0c
    183a:	22 ff       	sbrs	r18, 2
    183c:	1c c0       	rjmp	.+56     	; 0x1876 <vfprintf+0x380>
    183e:	21 ff       	sbrs	r18, 1
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <vfprintf+0x352>
    1842:	88 e5       	ldi	r24, 0x58	; 88
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 c0       	rjmp	.+4      	; 0x184c <vfprintf+0x356>
    1848:	88 e7       	ldi	r24, 0x78	; 120
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	b7 01       	movw	r22, r14
    184e:	0c c0       	rjmp	.+24     	; 0x1868 <vfprintf+0x372>
    1850:	82 2f       	mov	r24, r18
    1852:	86 78       	andi	r24, 0x86	; 134
    1854:	81 f0       	breq	.+32     	; 0x1876 <vfprintf+0x380>
    1856:	21 fd       	sbrc	r18, 1
    1858:	02 c0       	rjmp	.+4      	; 0x185e <vfprintf+0x368>
    185a:	80 e2       	ldi	r24, 0x20	; 32
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <vfprintf+0x36a>
    185e:	8b e2       	ldi	r24, 0x2B	; 43
    1860:	27 fd       	sbrc	r18, 7
    1862:	8d e2       	ldi	r24, 0x2D	; 45
    1864:	b7 01       	movw	r22, r14
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	4e d0       	rcall	.+156    	; 0x1906 <fputc>
    186a:	05 c0       	rjmp	.+10     	; 0x1876 <vfprintf+0x380>
    186c:	b7 01       	movw	r22, r14
    186e:	80 e3       	ldi	r24, 0x30	; 48
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	49 d0       	rcall	.+146    	; 0x1906 <fputc>
    1874:	5a 94       	dec	r5
    1876:	a5 14       	cp	r10, r5
    1878:	c8 f3       	brcs	.-14     	; 0x186c <vfprintf+0x376>
    187a:	aa 94       	dec	r10
    187c:	f4 01       	movw	r30, r8
    187e:	ea 0d       	add	r30, r10
    1880:	f1 1d       	adc	r31, r1
    1882:	b7 01       	movw	r22, r14
    1884:	80 81       	ld	r24, Z
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	3e d0       	rcall	.+124    	; 0x1906 <fputc>
    188a:	a1 10       	cpse	r10, r1
    188c:	f6 cf       	rjmp	.-20     	; 0x187a <vfprintf+0x384>
    188e:	05 c0       	rjmp	.+10     	; 0x189a <vfprintf+0x3a4>
    1890:	b7 01       	movw	r22, r14
    1892:	80 e2       	ldi	r24, 0x20	; 32
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	37 d0       	rcall	.+110    	; 0x1906 <fputc>
    1898:	3a 94       	dec	r3
    189a:	31 10       	cpse	r3, r1
    189c:	f9 cf       	rjmp	.-14     	; 0x1890 <vfprintf+0x39a>
    189e:	50 ce       	rjmp	.-864    	; 0x1540 <vfprintf+0x4a>
    18a0:	f7 01       	movw	r30, r14
    18a2:	26 81       	ldd	r18, Z+6	; 0x06
    18a4:	37 81       	ldd	r19, Z+7	; 0x07
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <vfprintf+0x3b6>
    18a8:	2f ef       	ldi	r18, 0xFF	; 255
    18aa:	3f ef       	ldi	r19, 0xFF	; 255
    18ac:	c9 01       	movw	r24, r18
    18ae:	2c 96       	adiw	r28, 0x0c	; 12
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	bf 90       	pop	r11
    18c6:	af 90       	pop	r10
    18c8:	9f 90       	pop	r9
    18ca:	8f 90       	pop	r8
    18cc:	7f 90       	pop	r7
    18ce:	6f 90       	pop	r6
    18d0:	5f 90       	pop	r5
    18d2:	4f 90       	pop	r4
    18d4:	3f 90       	pop	r3
    18d6:	2f 90       	pop	r2
    18d8:	08 95       	ret

000018da <strnlen_P>:
    18da:	fc 01       	movw	r30, r24
    18dc:	05 90       	lpm	r0, Z+
    18de:	61 50       	subi	r22, 0x01	; 1
    18e0:	70 40       	sbci	r23, 0x00	; 0
    18e2:	01 10       	cpse	r0, r1
    18e4:	d8 f7       	brcc	.-10     	; 0x18dc <strnlen_P+0x2>
    18e6:	80 95       	com	r24
    18e8:	90 95       	com	r25
    18ea:	8e 0f       	add	r24, r30
    18ec:	9f 1f       	adc	r25, r31
    18ee:	08 95       	ret

000018f0 <strnlen>:
    18f0:	fc 01       	movw	r30, r24
    18f2:	61 50       	subi	r22, 0x01	; 1
    18f4:	70 40       	sbci	r23, 0x00	; 0
    18f6:	01 90       	ld	r0, Z+
    18f8:	01 10       	cpse	r0, r1
    18fa:	d8 f7       	brcc	.-10     	; 0x18f2 <strnlen+0x2>
    18fc:	80 95       	com	r24
    18fe:	90 95       	com	r25
    1900:	8e 0f       	add	r24, r30
    1902:	9f 1f       	adc	r25, r31
    1904:	08 95       	ret

00001906 <fputc>:
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	8c 01       	movw	r16, r24
    1910:	eb 01       	movw	r28, r22
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	81 fd       	sbrc	r24, 1
    1916:	03 c0       	rjmp	.+6      	; 0x191e <fputc+0x18>
    1918:	0f ef       	ldi	r16, 0xFF	; 255
    191a:	1f ef       	ldi	r17, 0xFF	; 255
    191c:	1a c0       	rjmp	.+52     	; 0x1952 <fputc+0x4c>
    191e:	82 ff       	sbrs	r24, 2
    1920:	0d c0       	rjmp	.+26     	; 0x193c <fputc+0x36>
    1922:	2e 81       	ldd	r18, Y+6	; 0x06
    1924:	3f 81       	ldd	r19, Y+7	; 0x07
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	28 17       	cp	r18, r24
    192c:	39 07       	cpc	r19, r25
    192e:	64 f4       	brge	.+24     	; 0x1948 <fputc+0x42>
    1930:	e8 81       	ld	r30, Y
    1932:	f9 81       	ldd	r31, Y+1	; 0x01
    1934:	01 93       	st	Z+, r16
    1936:	e8 83       	st	Y, r30
    1938:	f9 83       	std	Y+1, r31	; 0x01
    193a:	06 c0       	rjmp	.+12     	; 0x1948 <fputc+0x42>
    193c:	e8 85       	ldd	r30, Y+8	; 0x08
    193e:	f9 85       	ldd	r31, Y+9	; 0x09
    1940:	80 2f       	mov	r24, r16
    1942:	19 95       	eicall
    1944:	89 2b       	or	r24, r25
    1946:	41 f7       	brne	.-48     	; 0x1918 <fputc+0x12>
    1948:	8e 81       	ldd	r24, Y+6	; 0x06
    194a:	9f 81       	ldd	r25, Y+7	; 0x07
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	8e 83       	std	Y+6, r24	; 0x06
    1950:	9f 83       	std	Y+7, r25	; 0x07
    1952:	c8 01       	movw	r24, r16
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <__ultoa_invert>:
    195e:	fa 01       	movw	r30, r20
    1960:	aa 27       	eor	r26, r26
    1962:	28 30       	cpi	r18, 0x08	; 8
    1964:	51 f1       	breq	.+84     	; 0x19ba <__ultoa_invert+0x5c>
    1966:	20 31       	cpi	r18, 0x10	; 16
    1968:	81 f1       	breq	.+96     	; 0x19ca <__ultoa_invert+0x6c>
    196a:	e8 94       	clt
    196c:	6f 93       	push	r22
    196e:	6e 7f       	andi	r22, 0xFE	; 254
    1970:	6e 5f       	subi	r22, 0xFE	; 254
    1972:	7f 4f       	sbci	r23, 0xFF	; 255
    1974:	8f 4f       	sbci	r24, 0xFF	; 255
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	af 4f       	sbci	r26, 0xFF	; 255
    197a:	b1 e0       	ldi	r27, 0x01	; 1
    197c:	3e d0       	rcall	.+124    	; 0x19fa <__ultoa_invert+0x9c>
    197e:	b4 e0       	ldi	r27, 0x04	; 4
    1980:	3c d0       	rcall	.+120    	; 0x19fa <__ultoa_invert+0x9c>
    1982:	67 0f       	add	r22, r23
    1984:	78 1f       	adc	r23, r24
    1986:	89 1f       	adc	r24, r25
    1988:	9a 1f       	adc	r25, r26
    198a:	a1 1d       	adc	r26, r1
    198c:	68 0f       	add	r22, r24
    198e:	79 1f       	adc	r23, r25
    1990:	8a 1f       	adc	r24, r26
    1992:	91 1d       	adc	r25, r1
    1994:	a1 1d       	adc	r26, r1
    1996:	6a 0f       	add	r22, r26
    1998:	71 1d       	adc	r23, r1
    199a:	81 1d       	adc	r24, r1
    199c:	91 1d       	adc	r25, r1
    199e:	a1 1d       	adc	r26, r1
    19a0:	20 d0       	rcall	.+64     	; 0x19e2 <__ultoa_invert+0x84>
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <__ultoa_invert+0x48>
    19a4:	68 94       	set
    19a6:	3f 91       	pop	r19
    19a8:	2a e0       	ldi	r18, 0x0A	; 10
    19aa:	26 9f       	mul	r18, r22
    19ac:	11 24       	eor	r1, r1
    19ae:	30 19       	sub	r19, r0
    19b0:	30 5d       	subi	r19, 0xD0	; 208
    19b2:	31 93       	st	Z+, r19
    19b4:	de f6       	brtc	.-74     	; 0x196c <__ultoa_invert+0xe>
    19b6:	cf 01       	movw	r24, r30
    19b8:	08 95       	ret
    19ba:	46 2f       	mov	r20, r22
    19bc:	47 70       	andi	r20, 0x07	; 7
    19be:	40 5d       	subi	r20, 0xD0	; 208
    19c0:	41 93       	st	Z+, r20
    19c2:	b3 e0       	ldi	r27, 0x03	; 3
    19c4:	0f d0       	rcall	.+30     	; 0x19e4 <__ultoa_invert+0x86>
    19c6:	c9 f7       	brne	.-14     	; 0x19ba <__ultoa_invert+0x5c>
    19c8:	f6 cf       	rjmp	.-20     	; 0x19b6 <__ultoa_invert+0x58>
    19ca:	46 2f       	mov	r20, r22
    19cc:	4f 70       	andi	r20, 0x0F	; 15
    19ce:	40 5d       	subi	r20, 0xD0	; 208
    19d0:	4a 33       	cpi	r20, 0x3A	; 58
    19d2:	18 f0       	brcs	.+6      	; 0x19da <__ultoa_invert+0x7c>
    19d4:	49 5d       	subi	r20, 0xD9	; 217
    19d6:	31 fd       	sbrc	r19, 1
    19d8:	40 52       	subi	r20, 0x20	; 32
    19da:	41 93       	st	Z+, r20
    19dc:	02 d0       	rcall	.+4      	; 0x19e2 <__ultoa_invert+0x84>
    19de:	a9 f7       	brne	.-22     	; 0x19ca <__ultoa_invert+0x6c>
    19e0:	ea cf       	rjmp	.-44     	; 0x19b6 <__ultoa_invert+0x58>
    19e2:	b4 e0       	ldi	r27, 0x04	; 4
    19e4:	a6 95       	lsr	r26
    19e6:	97 95       	ror	r25
    19e8:	87 95       	ror	r24
    19ea:	77 95       	ror	r23
    19ec:	67 95       	ror	r22
    19ee:	ba 95       	dec	r27
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__ultoa_invert+0x86>
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	61 05       	cpc	r22, r1
    19f6:	71 05       	cpc	r23, r1
    19f8:	08 95       	ret
    19fa:	9b 01       	movw	r18, r22
    19fc:	ac 01       	movw	r20, r24
    19fe:	0a 2e       	mov	r0, r26
    1a00:	06 94       	lsr	r0
    1a02:	57 95       	ror	r21
    1a04:	47 95       	ror	r20
    1a06:	37 95       	ror	r19
    1a08:	27 95       	ror	r18
    1a0a:	ba 95       	dec	r27
    1a0c:	c9 f7       	brne	.-14     	; 0x1a00 <__ultoa_invert+0xa2>
    1a0e:	62 0f       	add	r22, r18
    1a10:	73 1f       	adc	r23, r19
    1a12:	84 1f       	adc	r24, r20
    1a14:	95 1f       	adc	r25, r21
    1a16:	a0 1d       	adc	r26, r0
    1a18:	08 95       	ret

00001a1a <_exit>:
    1a1a:	f8 94       	cli

00001a1c <__stop_program>:
    1a1c:	ff cf       	rjmp	.-2      	; 0x1a1c <__stop_program>
