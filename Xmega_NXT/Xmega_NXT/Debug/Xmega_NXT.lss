
Xmega_NXT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00802000  000019ce  00001a62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000497  00802038  00802038  00001a9a  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a29  00000000  00000000  000045a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004fcd  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000200  00000000  00000000  00004ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d3b  00000000  00000000  000051fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d3f  00000000  00000000  00008f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001675  00000000  00000000  00009c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000084c  00000000  00000000  0000b2ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000220a  00000000  00000000  0000bb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002399  00000000  00000000  0000dd42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000190  00000000  00000000  000100db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	3a c2       	rjmp	.+1140   	; 0x47e <__vector_2>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f2 c1       	rjmp	.+996    	; 0x416 <__vector_12>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2a c2       	rjmp	.+1108   	; 0x4a6 <__vector_20>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
      66:	00 00       	nop
      68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	02 c1       	rjmp	.+516    	; 0x276 <__vector_28>
      72:	00 00       	nop
      74:	34 c1       	rjmp	.+616    	; 0x2de <__vector_29>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f6 c2       	rjmp	.+1516   	; 0x6aa <__vector_47>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	32 c2       	rjmp	.+1124   	; 0x5a2 <__vector_79>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	68 c2       	rjmp	.+1232   	; 0x626 <__vector_85>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	f2 c0       	rjmp	.+484    	; 0x346 <__vector_88>
     162:	00 00       	nop
     164:	24 c1       	rjmp	.+584    	; 0x3ae <__vector_89>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e3       	ldi	r29, 0x3F	; 63
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ee ec       	ldi	r30, 0xCE	; 206
     21c:	f9 e1       	ldi	r31, 0x19	; 25
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a8 33       	cpi	r26, 0x38	; 56
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	24 e2       	ldi	r18, 0x24	; 36
     232:	a8 e3       	ldi	r26, 0x38	; 56
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	af 3c       	cpi	r26, 0xCF	; 207
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	fa d2       	rcall	.+1524   	; 0x836 <main>
     242:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <TWIC_SlaveProcessData>:
	}
}

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
     248:	e0 91 43 21 	lds	r30, 0x2143
	for(uint8_t i = 0; i < 16; i++) //give the right information back
	{
		twiSlave.sendData[i] = TWIOut[i+askbyte];
     24c:	f0 e0       	ldi	r31, 0x00	; 0
		PORTC.OUTCLR = PIN3_bm;
		sonarSwitch = 1;
	}
}

void TWIC_SlaveProcessData(void)
     24e:	e1 53       	subi	r30, 0x31	; 49
     250:	fd 4d       	sbci	r31, 0xDD	; 221
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t askbyte = twiSlave.receivedData[0];
	for(uint8_t i = 0; i < 16; i++) //give the right information back
	{
		twiSlave.sendData[i] = TWIOut[i+askbyte];
     256:	21 91       	ld	r18, Z+
     258:	dc 01       	movw	r26, r24
     25a:	ad 57       	subi	r26, 0x7D	; 125
     25c:	be 4d       	sbci	r27, 0xDE	; 222
     25e:	2c 93       	st	X, r18
     260:	01 96       	adiw	r24, 0x01	; 1
}

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
	for(uint8_t i = 0; i < 16; i++) //give the right information back
     262:	80 31       	cpi	r24, 0x10	; 16
     264:	91 05       	cpc	r25, r1
     266:	b9 f7       	brne	.-18     	; 0x256 <TWIC_SlaveProcessData+0xe>
	{
		twiSlave.sendData[i] = TWIOut[i+askbyte];
	}
	
	if(twiSlave.receivedData[0] == RFID_DETECT_RESET_ADDRES) TWIOut[RFID_DETECT_ADDRESS] = 0; //card has been read
     268:	80 91 43 21 	lds	r24, 0x2143
     26c:	80 31       	cpi	r24, 0x10	; 16
     26e:	11 f4       	brne	.+4      	; 0x274 <TWIC_SlaveProcessData+0x2c>
     270:	10 92 cf 22 	sts	0x22CF, r1
     274:	08 95       	ret

00000276 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	08 b6       	in	r0, 0x38	; 56
     282:	0f 92       	push	r0
     284:	18 be       	out	0x38, r1	; 56
     286:	09 b6       	in	r0, 0x39	; 57
     288:	0f 92       	push	r0
     28a:	19 be       	out	0x39, r1	; 57
     28c:	0b b6       	in	r0, 0x3b	; 59
     28e:	0f 92       	push	r0
     290:	1b be       	out	0x3b, r1	; 59
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	4f 93       	push	r20
     298:	5f 93       	push	r21
     29a:	6f 93       	push	r22
     29c:	7f 93       	push	r23
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
     2a2:	af 93       	push	r26
     2a4:	bf 93       	push	r27
     2a6:	ef 93       	push	r30
     2a8:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     2aa:	88 ec       	ldi	r24, 0xC8	; 200
     2ac:	91 e2       	ldi	r25, 0x21	; 33
     2ae:	4e d6       	rcall	.+3228   	; 0xf4c <USART_RXComplete>
}
     2b0:	ff 91       	pop	r31
     2b2:	ef 91       	pop	r30
     2b4:	bf 91       	pop	r27
     2b6:	af 91       	pop	r26
     2b8:	9f 91       	pop	r25
     2ba:	8f 91       	pop	r24
     2bc:	7f 91       	pop	r23
     2be:	6f 91       	pop	r22
     2c0:	5f 91       	pop	r21
     2c2:	4f 91       	pop	r20
     2c4:	3f 91       	pop	r19
     2c6:	2f 91       	pop	r18
     2c8:	0f 90       	pop	r0
     2ca:	0b be       	out	0x3b, r0	; 59
     2cc:	0f 90       	pop	r0
     2ce:	09 be       	out	0x39, r0	; 57
     2d0:	0f 90       	pop	r0
     2d2:	08 be       	out	0x38, r0	; 56
     2d4:	0f 90       	pop	r0
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	0f 90       	pop	r0
     2da:	1f 90       	pop	r1
     2dc:	18 95       	reti

000002de <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	11 24       	eor	r1, r1
     2e8:	08 b6       	in	r0, 0x38	; 56
     2ea:	0f 92       	push	r0
     2ec:	18 be       	out	0x38, r1	; 56
     2ee:	09 b6       	in	r0, 0x39	; 57
     2f0:	0f 92       	push	r0
     2f2:	19 be       	out	0x39, r1	; 57
     2f4:	0b b6       	in	r0, 0x3b	; 59
     2f6:	0f 92       	push	r0
     2f8:	1b be       	out	0x3b, r1	; 59
     2fa:	2f 93       	push	r18
     2fc:	3f 93       	push	r19
     2fe:	4f 93       	push	r20
     300:	5f 93       	push	r21
     302:	6f 93       	push	r22
     304:	7f 93       	push	r23
     306:	8f 93       	push	r24
     308:	9f 93       	push	r25
     30a:	af 93       	push	r26
     30c:	bf 93       	push	r27
     30e:	ef 93       	push	r30
     310:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     312:	88 ec       	ldi	r24, 0xC8	; 200
     314:	91 e2       	ldi	r25, 0x21	; 33
     316:	38 d6       	rcall	.+3184   	; 0xf88 <USART_DataRegEmpty>
}
     318:	ff 91       	pop	r31
     31a:	ef 91       	pop	r30
     31c:	bf 91       	pop	r27
     31e:	af 91       	pop	r26
     320:	9f 91       	pop	r25
     322:	8f 91       	pop	r24
     324:	7f 91       	pop	r23
     326:	6f 91       	pop	r22
     328:	5f 91       	pop	r21
     32a:	4f 91       	pop	r20
     32c:	3f 91       	pop	r19
     32e:	2f 91       	pop	r18
     330:	0f 90       	pop	r0
     332:	0b be       	out	0x3b, r0	; 59
     334:	0f 90       	pop	r0
     336:	09 be       	out	0x39, r0	; 57
     338:	0f 90       	pop	r0
     33a:	08 be       	out	0x38, r0	; 56
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <__vector_88>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_RXC_vect)
{
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	08 b6       	in	r0, 0x38	; 56
     352:	0f 92       	push	r0
     354:	18 be       	out	0x38, r1	; 56
     356:	09 b6       	in	r0, 0x39	; 57
     358:	0f 92       	push	r0
     35a:	19 be       	out	0x39, r1	; 57
     35c:	0b b6       	in	r0, 0x3b	; 59
     35e:	0f 92       	push	r0
     360:	1b be       	out	0x3b, r1	; 59
     362:	2f 93       	push	r18
     364:	3f 93       	push	r19
     366:	4f 93       	push	r20
     368:	5f 93       	push	r21
     36a:	6f 93       	push	r22
     36c:	7f 93       	push	r23
     36e:	8f 93       	push	r24
     370:	9f 93       	push	r25
     372:	af 93       	push	r26
     374:	bf 93       	push	r27
     376:	ef 93       	push	r30
     378:	ff 93       	push	r31
  USART_RXComplete(&uartD0);
     37a:	88 e3       	ldi	r24, 0x38	; 56
     37c:	90 e2       	ldi	r25, 0x20	; 32
     37e:	e6 d5       	rcall	.+3020   	; 0xf4c <USART_RXComplete>
}
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	bf 91       	pop	r27
     386:	af 91       	pop	r26
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	7f 91       	pop	r23
     38e:	6f 91       	pop	r22
     390:	5f 91       	pop	r21
     392:	4f 91       	pop	r20
     394:	3f 91       	pop	r19
     396:	2f 91       	pop	r18
     398:	0f 90       	pop	r0
     39a:	0b be       	out	0x3b, r0	; 59
     39c:	0f 90       	pop	r0
     39e:	09 be       	out	0x39, r0	; 57
     3a0:	0f 90       	pop	r0
     3a2:	08 be       	out	0x38, r0	; 56
     3a4:	0f 90       	pop	r0
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	0f 90       	pop	r0
     3aa:	1f 90       	pop	r1
     3ac:	18 95       	reti

000003ae <__vector_89>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_DRE_vect)
{
     3ae:	1f 92       	push	r1
     3b0:	0f 92       	push	r0
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	0f 92       	push	r0
     3b6:	11 24       	eor	r1, r1
     3b8:	08 b6       	in	r0, 0x38	; 56
     3ba:	0f 92       	push	r0
     3bc:	18 be       	out	0x38, r1	; 56
     3be:	09 b6       	in	r0, 0x39	; 57
     3c0:	0f 92       	push	r0
     3c2:	19 be       	out	0x39, r1	; 57
     3c4:	0b b6       	in	r0, 0x3b	; 59
     3c6:	0f 92       	push	r0
     3c8:	1b be       	out	0x3b, r1	; 59
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
  USART_DataRegEmpty(&uartD0);
     3e2:	88 e3       	ldi	r24, 0x38	; 56
     3e4:	90 e2       	ldi	r25, 0x20	; 32
     3e6:	d0 d5       	rcall	.+2976   	; 0xf88 <USART_DataRegEmpty>
}
     3e8:	ff 91       	pop	r31
     3ea:	ef 91       	pop	r30
     3ec:	bf 91       	pop	r27
     3ee:	af 91       	pop	r26
     3f0:	9f 91       	pop	r25
     3f2:	8f 91       	pop	r24
     3f4:	7f 91       	pop	r23
     3f6:	6f 91       	pop	r22
     3f8:	5f 91       	pop	r21
     3fa:	4f 91       	pop	r20
     3fc:	3f 91       	pop	r19
     3fe:	2f 91       	pop	r18
     400:	0f 90       	pop	r0
     402:	0b be       	out	0x3b, r0	; 59
     404:	0f 90       	pop	r0
     406:	09 be       	out	0x39, r0	; 57
     408:	0f 90       	pop	r0
     40a:	08 be       	out	0x38, r0	; 56
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <__vector_12>:
		_delay_ms(1000);
	}
}

ISR(TWIC_TWIS_vect) //TWI
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	08 b6       	in	r0, 0x38	; 56
     422:	0f 92       	push	r0
     424:	18 be       	out	0x38, r1	; 56
     426:	09 b6       	in	r0, 0x39	; 57
     428:	0f 92       	push	r0
     42a:	19 be       	out	0x39, r1	; 57
     42c:	0b b6       	in	r0, 0x3b	; 59
     42e:	0f 92       	push	r0
     430:	1b be       	out	0x3b, r1	; 59
     432:	2f 93       	push	r18
     434:	3f 93       	push	r19
     436:	4f 93       	push	r20
     438:	5f 93       	push	r21
     43a:	6f 93       	push	r22
     43c:	7f 93       	push	r23
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
     442:	af 93       	push	r26
     444:	bf 93       	push	r27
     446:	ef 93       	push	r30
     448:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twiSlave);
     44a:	8f e3       	ldi	r24, 0x3F	; 63
     44c:	91 e2       	ldi	r25, 0x21	; 33
     44e:	67 d3       	rcall	.+1742   	; 0xb1e <TWI_SlaveInterruptHandler>
}
     450:	ff 91       	pop	r31
     452:	ef 91       	pop	r30
     454:	bf 91       	pop	r27
     456:	af 91       	pop	r26
     458:	9f 91       	pop	r25
     45a:	8f 91       	pop	r24
     45c:	7f 91       	pop	r23
     45e:	6f 91       	pop	r22
     460:	5f 91       	pop	r21
     462:	4f 91       	pop	r20
     464:	3f 91       	pop	r19
     466:	2f 91       	pop	r18
     468:	0f 90       	pop	r0
     46a:	0b be       	out	0x3b, r0	; 59
     46c:	0f 90       	pop	r0
     46e:	09 be       	out	0x39, r0	; 57
     470:	0f 90       	pop	r0
     472:	08 be       	out	0x38, r0	; 56
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <__vector_2>:

ISR(PORTC_INT0_vect) //start uart delay
{
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	08 b6       	in	r0, 0x38	; 56
     48a:	0f 92       	push	r0
     48c:	18 be       	out	0x38, r1	; 56
     48e:	8f 93       	push	r24
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
     490:	87 e0       	ldi	r24, 0x07	; 7
     492:	80 93 40 08 	sts	0x0840, r24
}
     496:	8f 91       	pop	r24
     498:	0f 90       	pop	r0
     49a:	08 be       	out	0x38, r0	; 56
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <__vector_20>:

ISR(TCC1_OVF_vect) //uart delay
{
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	11 24       	eor	r1, r1
     4b0:	08 b6       	in	r0, 0x38	; 56
     4b2:	0f 92       	push	r0
     4b4:	18 be       	out	0x38, r1	; 56
     4b6:	09 b6       	in	r0, 0x39	; 57
     4b8:	0f 92       	push	r0
     4ba:	19 be       	out	0x39, r1	; 57
     4bc:	0a b6       	in	r0, 0x3a	; 58
     4be:	0f 92       	push	r0
     4c0:	1a be       	out	0x3a, r1	; 58
     4c2:	0b b6       	in	r0, 0x3b	; 59
     4c4:	0f 92       	push	r0
     4c6:	1b be       	out	0x3b, r1	; 59
     4c8:	bf 92       	push	r11
     4ca:	cf 92       	push	r12
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	2f 93       	push	r18
     4d8:	3f 93       	push	r19
     4da:	4f 93       	push	r20
     4dc:	5f 93       	push	r21
     4de:	6f 93       	push	r22
     4e0:	7f 93       	push	r23
     4e2:	8f 93       	push	r24
     4e4:	9f 93       	push	r25
     4e6:	af 93       	push	r26
     4e8:	bf 93       	push	r27
     4ea:	ef 93       	push	r30
     4ec:	ff 93       	push	r31
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	60 97       	sbiw	r28, 0x10	; 16
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	de bf       	out	0x3e, r29	; 62
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     4fc:	10 92 40 08 	sts	0x0840, r1
     500:	8e 01       	movw	r16, r28
     502:	0f 5f       	subi	r16, 0xFF	; 255
     504:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(PORTC_INT0_vect) //start uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
}

ISR(TCC1_OVF_vect) //uart delay
     506:	68 01       	movw	r12, r16
     508:	7e 01       	movw	r14, r28
     50a:	81 e1       	ldi	r24, 0x11	; 17
     50c:	e8 0e       	add	r14, r24
     50e:	f1 1c       	adc	r15, r1
	{
		if (USART_RXBufferData_Available(&uartC1))
		{
			RFIDDataIn[i] = USART_RXBuffer_GetByte(&uartC1);
		}else{
			RFIDDataIn[i] = '_';
     510:	0f 2e       	mov	r0, r31
     512:	ff e5       	ldi	r31, 0x5F	; 95
     514:	bf 2e       	mov	r11, r31
     516:	f0 2d       	mov	r31, r0
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;

	uint8_t RFIDDataIn[RFID_UART_NUM_BYTES]; //RFID data
	for(int i=0; i<RFID_UART_NUM_BYTES; i++)
	{
		if (USART_RXBufferData_Available(&uartC1))
     518:	88 ec       	ldi	r24, 0xC8	; 200
     51a:	91 e2       	ldi	r25, 0x21	; 33
     51c:	fc d4       	rcall	.+2552   	; 0xf16 <USART_RXBufferData_Available>
     51e:	88 23       	and	r24, r24
     520:	31 f0       	breq	.+12     	; 0x52e <__vector_20+0x88>
		{
			RFIDDataIn[i] = USART_RXBuffer_GetByte(&uartC1);
     522:	88 ec       	ldi	r24, 0xC8	; 200
     524:	91 e2       	ldi	r25, 0x21	; 33
     526:	04 d5       	rcall	.+2568   	; 0xf30 <USART_RXBuffer_GetByte>
     528:	f8 01       	movw	r30, r16
     52a:	80 83       	st	Z, r24
     52c:	02 c0       	rjmp	.+4      	; 0x532 <__vector_20+0x8c>
		}else{
			RFIDDataIn[i] = '_';
     52e:	f8 01       	movw	r30, r16
     530:	b0 82       	st	Z, r11
     532:	0f 5f       	subi	r16, 0xFF	; 255
     534:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(TCC1_OVF_vect) //uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;

	uint8_t RFIDDataIn[RFID_UART_NUM_BYTES]; //RFID data
	for(int i=0; i<RFID_UART_NUM_BYTES; i++)
     536:	0e 15       	cp	r16, r14
     538:	1f 05       	cpc	r17, r15
     53a:	71 f7       	brne	.-36     	; 0x518 <__vector_20+0x72>
     53c:	fe 01       	movw	r30, r28
     53e:	32 96       	adiw	r30, 0x02	; 2
     540:	a0 ed       	ldi	r26, 0xD0	; 208
     542:	b2 e2       	ldi	r27, 0x22	; 34
ISR(PORTC_INT0_vect) //start uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
}

ISR(TCC1_OVF_vect) //uart delay
     544:	c6 01       	movw	r24, r12
     546:	0b 96       	adiw	r24, 0x0b	; 11
		}
	}
	
	for(int i=0; i<RFID_NUMBER_BYTES; i++)
	{
		TWIOut[RFID_NUMBER_ADDRESS+i] = RFIDDataIn[i+1];;
     548:	21 91       	ld	r18, Z+
     54a:	2d 93       	st	X+, r18
		}else{
			RFIDDataIn[i] = '_';
		}
	}
	
	for(int i=0; i<RFID_NUMBER_BYTES; i++)
     54c:	e8 17       	cp	r30, r24
     54e:	f9 07       	cpc	r31, r25
     550:	d9 f7       	brne	.-10     	; 0x548 <__vector_20+0xa2>
	{
		TWIOut[RFID_NUMBER_ADDRESS+i] = RFIDDataIn[i+1];;
	}

	TWIOut[RFID_DETECT_ADDRESS] = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 cf 22 	sts	0x22CF, r24
}
     558:	60 96       	adiw	r28, 0x10	; 16
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	ff 91       	pop	r31
     564:	ef 91       	pop	r30
     566:	bf 91       	pop	r27
     568:	af 91       	pop	r26
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	7f 91       	pop	r23
     570:	6f 91       	pop	r22
     572:	5f 91       	pop	r21
     574:	4f 91       	pop	r20
     576:	3f 91       	pop	r19
     578:	2f 91       	pop	r18
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	ff 90       	pop	r15
     580:	ef 90       	pop	r14
     582:	df 90       	pop	r13
     584:	cf 90       	pop	r12
     586:	bf 90       	pop	r11
     588:	0f 90       	pop	r0
     58a:	0b be       	out	0x3b, r0	; 59
     58c:	0f 90       	pop	r0
     58e:	0a be       	out	0x3a, r0	; 58
     590:	0f 90       	pop	r0
     592:	09 be       	out	0x39, r0	; 57
     594:	0f 90       	pop	r0
     596:	08 be       	out	0x38, r0	; 56
     598:	0f 90       	pop	r0
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	0f 90       	pop	r0
     59e:	1f 90       	pop	r1
     5a0:	18 95       	reti

000005a2 <__vector_79>:

ISR(TCD0_CCA_vect) //sonar A
{
     5a2:	1f 92       	push	r1
     5a4:	0f 92       	push	r0
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	0f 92       	push	r0
     5aa:	11 24       	eor	r1, r1
     5ac:	08 b6       	in	r0, 0x38	; 56
     5ae:	0f 92       	push	r0
     5b0:	18 be       	out	0x38, r1	; 56
     5b2:	09 b6       	in	r0, 0x39	; 57
     5b4:	0f 92       	push	r0
     5b6:	19 be       	out	0x39, r1	; 57
     5b8:	0b b6       	in	r0, 0x3b	; 59
     5ba:	0f 92       	push	r0
     5bc:	1b be       	out	0x3b, r1	; 59
     5be:	2f 93       	push	r18
     5c0:	3f 93       	push	r19
     5c2:	6f 93       	push	r22
     5c4:	7f 93       	push	r23
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	af 93       	push	r26
     5cc:	bf 93       	push	r27
     5ce:	ef 93       	push	r30
     5d0:	ff 93       	push	r31
	uint16_t time = TCD0.CCA;
     5d2:	e0 e0       	ldi	r30, 0x00	; 0
     5d4:	f9 e0       	ldi	r31, 0x09	; 9
     5d6:	20 a5       	ldd	r18, Z+40	; 0x28
     5d8:	31 a5       	ldd	r19, Z+41	; 0x29
	uint16_t cm = time/116;
     5da:	af e9       	ldi	r26, 0x9F	; 159
     5dc:	b6 e4       	ldi	r27, 0x46	; 70
     5de:	2f d7       	rcall	.+3678   	; 0x143e <__umulhisi3>
     5e0:	96 95       	lsr	r25
     5e2:	87 95       	ror	r24
     5e4:	92 95       	swap	r25
     5e6:	82 95       	swap	r24
     5e8:	8f 70       	andi	r24, 0x0F	; 15
     5ea:	89 27       	eor	r24, r25
     5ec:	9f 70       	andi	r25, 0x0F	; 15
     5ee:	89 27       	eor	r24, r25
	TWIOut[SONAR_A_ADDRESS] = cm & 0x00FF;	//LSB
     5f0:	80 93 da 22 	sts	0x22DA, r24
	TWIOut[SONAR_A_ADDRESS+1] = cm>>8;		//MSB
     5f4:	90 93 db 22 	sts	0x22DB, r25
	TCD0.CTRLFSET = TC_CMD_RESTART_gc;
     5f8:	88 e0       	ldi	r24, 0x08	; 8
     5fa:	81 87       	std	Z+9, r24	; 0x09
}
     5fc:	ff 91       	pop	r31
     5fe:	ef 91       	pop	r30
     600:	bf 91       	pop	r27
     602:	af 91       	pop	r26
     604:	9f 91       	pop	r25
     606:	8f 91       	pop	r24
     608:	7f 91       	pop	r23
     60a:	6f 91       	pop	r22
     60c:	3f 91       	pop	r19
     60e:	2f 91       	pop	r18
     610:	0f 90       	pop	r0
     612:	0b be       	out	0x3b, r0	; 59
     614:	0f 90       	pop	r0
     616:	09 be       	out	0x39, r0	; 57
     618:	0f 90       	pop	r0
     61a:	08 be       	out	0x38, r0	; 56
     61c:	0f 90       	pop	r0
     61e:	0f be       	out	0x3f, r0	; 63
     620:	0f 90       	pop	r0
     622:	1f 90       	pop	r1
     624:	18 95       	reti

00000626 <__vector_85>:

ISR(TCD1_CCA_vect) //Sonar B
{
     626:	1f 92       	push	r1
     628:	0f 92       	push	r0
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	0f 92       	push	r0
     62e:	11 24       	eor	r1, r1
     630:	08 b6       	in	r0, 0x38	; 56
     632:	0f 92       	push	r0
     634:	18 be       	out	0x38, r1	; 56
     636:	09 b6       	in	r0, 0x39	; 57
     638:	0f 92       	push	r0
     63a:	19 be       	out	0x39, r1	; 57
     63c:	0b b6       	in	r0, 0x3b	; 59
     63e:	0f 92       	push	r0
     640:	1b be       	out	0x3b, r1	; 59
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	6f 93       	push	r22
     648:	7f 93       	push	r23
     64a:	8f 93       	push	r24
     64c:	9f 93       	push	r25
     64e:	af 93       	push	r26
     650:	bf 93       	push	r27
     652:	ef 93       	push	r30
     654:	ff 93       	push	r31
	uint16_t time = TCD1.CCA;
     656:	e0 e4       	ldi	r30, 0x40	; 64
     658:	f9 e0       	ldi	r31, 0x09	; 9
     65a:	20 a5       	ldd	r18, Z+40	; 0x28
     65c:	31 a5       	ldd	r19, Z+41	; 0x29
	uint16_t cm = time/116;
     65e:	af e9       	ldi	r26, 0x9F	; 159
     660:	b6 e4       	ldi	r27, 0x46	; 70
     662:	ed d6       	rcall	.+3546   	; 0x143e <__umulhisi3>
     664:	96 95       	lsr	r25
     666:	87 95       	ror	r24
     668:	92 95       	swap	r25
     66a:	82 95       	swap	r24
     66c:	8f 70       	andi	r24, 0x0F	; 15
     66e:	89 27       	eor	r24, r25
     670:	9f 70       	andi	r25, 0x0F	; 15
     672:	89 27       	eor	r24, r25
	TWIOut[SONAR_B_ADDRESS] = cm & 0x00FF;	//LSB
     674:	80 93 dc 22 	sts	0x22DC, r24
	TWIOut[SONAR_B_ADDRESS+1] = cm>>8;		//MSB
     678:	90 93 dd 22 	sts	0x22DD, r25
	TCD1.CTRLFSET = TC_CMD_RESTART_gc;
     67c:	88 e0       	ldi	r24, 0x08	; 8
     67e:	81 87       	std	Z+9, r24	; 0x09
}
     680:	ff 91       	pop	r31
     682:	ef 91       	pop	r30
     684:	bf 91       	pop	r27
     686:	af 91       	pop	r26
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	7f 91       	pop	r23
     68e:	6f 91       	pop	r22
     690:	3f 91       	pop	r19
     692:	2f 91       	pop	r18
     694:	0f 90       	pop	r0
     696:	0b be       	out	0x3b, r0	; 59
     698:	0f 90       	pop	r0
     69a:	09 be       	out	0x39, r0	; 57
     69c:	0f 90       	pop	r0
     69e:	08 be       	out	0x38, r0	; 56
     6a0:	0f 90       	pop	r0
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	0f 90       	pop	r0
     6a6:	1f 90       	pop	r1
     6a8:	18 95       	reti

000006aa <__vector_47>:

ISR(TCE0_OVF_vect) //trigger sonar, cascading
{
     6aa:	1f 92       	push	r1
     6ac:	0f 92       	push	r0
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	0f 92       	push	r0
     6b2:	11 24       	eor	r1, r1
     6b4:	08 b6       	in	r0, 0x38	; 56
     6b6:	0f 92       	push	r0
     6b8:	18 be       	out	0x38, r1	; 56
     6ba:	0b b6       	in	r0, 0x3b	; 59
     6bc:	0f 92       	push	r0
     6be:	1b be       	out	0x3b, r1	; 59
     6c0:	8f 93       	push	r24
     6c2:	9f 93       	push	r25
     6c4:	ef 93       	push	r30
     6c6:	ff 93       	push	r31
	if (sonarSwitch)
     6c8:	80 91 ce 23 	lds	r24, 0x23CE
     6cc:	88 23       	and	r24, r24
     6ce:	61 f0       	breq	.+24     	; 0x6e8 <__vector_47+0x3e>
	{
		PORTC.OUTSET = PIN2_bm;
     6d0:	e0 e4       	ldi	r30, 0x40	; 64
     6d2:	f6 e0       	ldi	r31, 0x06	; 6
     6d4:	84 e0       	ldi	r24, 0x04	; 4
     6d6:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d8:	96 e0       	ldi	r25, 0x06	; 6
     6da:	9a 95       	dec	r25
     6dc:	f1 f7       	brne	.-4      	; 0x6da <__vector_47+0x30>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <__vector_47+0x36>
		_delay_us(10);
		PORTC.OUTCLR = PIN2_bm;
     6e0:	86 83       	std	Z+6, r24	; 0x06
		sonarSwitch = 0;
     6e2:	10 92 ce 23 	sts	0x23CE, r1
     6e6:	0c c0       	rjmp	.+24     	; 0x700 <__vector_47+0x56>
	} 
	else
	{
		PORTC.OUTSET = PIN3_bm;
     6e8:	e0 e4       	ldi	r30, 0x40	; 64
     6ea:	f6 e0       	ldi	r31, 0x06	; 6
     6ec:	88 e0       	ldi	r24, 0x08	; 8
     6ee:	85 83       	std	Z+5, r24	; 0x05
     6f0:	96 e0       	ldi	r25, 0x06	; 6
     6f2:	9a 95       	dec	r25
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <__vector_47+0x48>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <__vector_47+0x4e>
		_delay_us(10);
		PORTC.OUTCLR = PIN3_bm;
     6f8:	86 83       	std	Z+6, r24	; 0x06
		sonarSwitch = 1;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 ce 23 	sts	0x23CE, r24
	}
}
     700:	ff 91       	pop	r31
     702:	ef 91       	pop	r30
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	0f 90       	pop	r0
     70a:	0b be       	out	0x3b, r0	; 59
     70c:	0f 90       	pop	r0
     70e:	08 be       	out	0x38, r0	; 56
     710:	0f 90       	pop	r0
     712:	0f be       	out	0x3f, r0	; 63
     714:	0f 90       	pop	r0
     716:	1f 90       	pop	r1
     718:	18 95       	reti

0000071a <init_all>:
	
	if(twiSlave.receivedData[0] == RFID_DETECT_RESET_ADDRES) TWIOut[RFID_DETECT_ADDRESS] = 0; //card has been read
}

void init_all(void)
{
     71a:	cf 92       	push	r12
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
	// set port direction //
	PORTE.DIRSET = PIN0_bm; //debug led
     728:	21 e0       	ldi	r18, 0x01	; 1
     72a:	e0 e8       	ldi	r30, 0x80	; 128
     72c:	f6 e0       	ldi	r31, 0x06	; 6
     72e:	21 83       	std	Z+1, r18	; 0x01
	PORTC.DIRSET = PIN2_bm|PIN3_bm; //sonar trigger
     730:	e0 e4       	ldi	r30, 0x40	; 64
     732:	f6 e0       	ldi	r31, 0x06	; 6
     734:	8c e0       	ldi	r24, 0x0C	; 12
     736:	81 83       	std	Z+1, r24	; 0x01

	// set timers //
	//delay for uart read need other solution
	PORTC.INT0MASK = PIN6_bm;
     738:	80 e4       	ldi	r24, 0x40	; 64
     73a:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.PIN6CTRL = PORT_ISC_RISING_gc;
     73c:	26 8b       	std	Z+22, r18	; 0x16
	PORTC.INTCTRL  = PORT_INT0LVL_LO_gc;
     73e:	21 87       	std	Z+9, r18	; 0x09
	TCC1.CTRLB     = TC_WGMODE_NORMAL_gc;
     740:	a0 e4       	ldi	r26, 0x40	; 64
     742:	b8 e0       	ldi	r27, 0x08	; 8
     744:	11 96       	adiw	r26, 0x01	; 1
     746:	1c 92       	st	X, r1
     748:	11 97       	sbiw	r26, 0x01	; 1
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     74a:	1c 92       	st	X, r1
	TCC1.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     74c:	16 96       	adiw	r26, 0x06	; 6
     74e:	2c 93       	st	X, r18
     750:	16 97       	sbiw	r26, 0x06	; 6
	TCC1.PER       = 400;
     752:	80 e9       	ldi	r24, 0x90	; 144
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	96 96       	adiw	r26, 0x26	; 38
     758:	8d 93       	st	X+, r24
     75a:	9c 93       	st	X, r25
     75c:	97 97       	sbiw	r26, 0x27	; 39
	//sonar request
	TCE0.CTRLB     = TC_WGMODE_NORMAL_gc;
     75e:	a0 e0       	ldi	r26, 0x00	; 0
     760:	ba e0       	ldi	r27, 0x0A	; 10
     762:	11 96       	adiw	r26, 0x01	; 1
     764:	1c 92       	st	X, r1
     766:	11 97       	sbiw	r26, 0x01	; 1
	TCE0.CTRLA     = TC_CLKSEL_DIV1024_gc;
     768:	87 e0       	ldi	r24, 0x07	; 7
     76a:	8c 93       	st	X, r24
	TCE0.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     76c:	16 96       	adiw	r26, 0x06	; 6
     76e:	2c 93       	st	X, r18
     770:	16 97       	sbiw	r26, 0x06	; 6
	TCE0.PER       = 195;//~10Hz so 5Hz each
     772:	83 ec       	ldi	r24, 0xC3	; 195
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	96 96       	adiw	r26, 0x26	; 38
     778:	8d 93       	st	X+, r24
     77a:	9c 93       	st	X, r25
     77c:	97 97       	sbiw	r26, 0x27	; 39
	//timer for sonar A
	PORTC.PIN4CTRL = PORT_ISC_BOTHEDGES_gc;
     77e:	14 8a       	std	Z+20, r1	; 0x14
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
     780:	c0 e8       	ldi	r28, 0x80	; 128
     782:	d1 e0       	ldi	r29, 0x01	; 1
     784:	84 e6       	ldi	r24, 0x64	; 100
     786:	88 83       	st	Y, r24
	TCD0.CTRLD = TC_EVACT_PW_gc | TC_EVSEL_CH0_gc;
     788:	a0 e0       	ldi	r26, 0x00	; 0
     78a:	b9 e0       	ldi	r27, 0x09	; 9
     78c:	88 ec       	ldi	r24, 0xC8	; 200
     78e:	13 96       	adiw	r26, 0x03	; 3
     790:	8c 93       	st	X, r24
     792:	13 97       	sbiw	r26, 0x03	; 3
	TCD0.CTRLB = TC0_CCAEN_bm | TC_WGMODE_NORMAL_gc;
     794:	30 e1       	ldi	r19, 0x10	; 16
     796:	11 96       	adiw	r26, 0x01	; 1
     798:	3c 93       	st	X, r19
     79a:	11 97       	sbiw	r26, 0x01	; 1
	TCD0.CTRLA = TC_CLKSEL_DIV1_gc;
     79c:	2c 93       	st	X, r18
	TCD0.INTCTRLB = TC_CCAINTLVL_LO_gc;
     79e:	17 96       	adiw	r26, 0x07	; 7
     7a0:	2c 93       	st	X, r18
     7a2:	17 97       	sbiw	r26, 0x07	; 7
	TCD0.PER = 0xFFFF;
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	9f ef       	ldi	r25, 0xFF	; 255
     7a8:	96 96       	adiw	r26, 0x26	; 38
     7aa:	8d 93       	st	X+, r24
     7ac:	9c 93       	st	X, r25
     7ae:	97 97       	sbiw	r26, 0x27	; 39
	//timer for sonar B
	PORTC.PIN5CTRL = PORT_ISC_BOTHEDGES_gc;
     7b0:	15 8a       	std	Z+21, r1	; 0x15
	EVSYS.CH1MUX = EVSYS_CHMUX_PORTC_PIN5_gc;
     7b2:	45 e6       	ldi	r20, 0x65	; 101
     7b4:	49 83       	std	Y+1, r20	; 0x01
	TCD1.CTRLD = TC_EVACT_PW_gc | TC_EVSEL_CH1_gc;
     7b6:	e0 e4       	ldi	r30, 0x40	; 64
     7b8:	f9 e0       	ldi	r31, 0x09	; 9
     7ba:	49 ec       	ldi	r20, 0xC9	; 201
     7bc:	43 83       	std	Z+3, r20	; 0x03
	TCD1.CTRLB = TC1_CCAEN_bm | TC_WGMODE_NORMAL_gc;
     7be:	31 83       	std	Z+1, r19	; 0x01
	TCD1.CTRLA = TC_CLKSEL_DIV1_gc;
     7c0:	20 83       	st	Z, r18
	TCD1.INTCTRLB = TC_CCAINTLVL_LO_gc;
     7c2:	27 83       	std	Z+7, r18	; 0x07
	TCD1.PER = 0xFFFF;
     7c4:	86 a3       	std	Z+38, r24	; 0x26
     7c6:	97 a3       	std	Z+39, r25	; 0x27
	
	// set uart's //
	init_uart(&uartD0, &USARTD0, F_CPU, D0_BAUD, D0_CLK2X); //debug
     7c8:	c1 2c       	mov	r12, r1
     7ca:	e1 2c       	mov	r14, r1
     7cc:	12 ec       	ldi	r17, 0xC2	; 194
     7ce:	f1 2e       	mov	r15, r17
     7d0:	01 e0       	ldi	r16, 0x01	; 1
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	20 e8       	ldi	r18, 0x80	; 128
     7d6:	34 e8       	ldi	r19, 0x84	; 132
     7d8:	4e e1       	ldi	r20, 0x1E	; 30
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	60 ea       	ldi	r22, 0xA0	; 160
     7de:	79 e0       	ldi	r23, 0x09	; 9
     7e0:	88 e3       	ldi	r24, 0x38	; 56
     7e2:	90 e2       	ldi	r25, 0x20	; 32
     7e4:	f8 d2       	rcall	.+1520   	; 0xdd6 <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); //RFID reader
     7e6:	10 e8       	ldi	r17, 0x80	; 128
     7e8:	e1 2e       	mov	r14, r17
     7ea:	15 e2       	ldi	r17, 0x25	; 37
     7ec:	f1 2e       	mov	r15, r17
     7ee:	00 e0       	ldi	r16, 0x00	; 0
     7f0:	10 e0       	ldi	r17, 0x00	; 0
     7f2:	20 e8       	ldi	r18, 0x80	; 128
     7f4:	34 e8       	ldi	r19, 0x84	; 132
     7f6:	4e e1       	ldi	r20, 0x1E	; 30
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	60 eb       	ldi	r22, 0xB0	; 176
     7fc:	78 e0       	ldi	r23, 0x08	; 8
     7fe:	88 ec       	ldi	r24, 0xC8	; 200
     800:	91 e2       	ldi	r25, 0x21	; 33
     802:	e9 d2       	rcall	.+1490   	; 0xdd6 <init_uart>
	
	// set TWI as slave for NXT //
	TWI_SlaveInitializeDriver(&twiSlave, &TWIC, TWIC_SlaveProcessData);
     804:	44 e2       	ldi	r20, 0x24	; 36
     806:	51 e0       	ldi	r21, 0x01	; 1
     808:	60 e8       	ldi	r22, 0x80	; 128
     80a:	74 e0       	ldi	r23, 0x04	; 4
     80c:	8f e3       	ldi	r24, 0x3F	; 63
     80e:	91 e2       	ldi	r25, 0x21	; 33
     810:	93 d0       	rcall	.+294    	; 0x938 <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twiSlave, SLAVE_ADDRESS, TWI_SLAVE_INTLVL_MED_gc);
     812:	40 e8       	ldi	r20, 0x80	; 128
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	8f e3       	ldi	r24, 0x3F	; 63
     818:	91 e2       	ldi	r25, 0x21	; 33
     81a:	a7 d0       	rcall	.+334    	; 0x96a <TWI_SlaveInitializeModule>
	
	// Turn on interrupts //
	PMIC.CTRL = PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm;
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	e0 ea       	ldi	r30, 0xA0	; 160
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	82 83       	std	Z+2, r24	; 0x02
	sei();
     824:	78 94       	sei
}	
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	cf 90       	pop	r12
     834:	08 95       	ret

00000836 <main>:
void TWIC_SlaveProcessData(void);
void init_all(void);

int main(void)
{
	init_all();
     836:	71 df       	rcall	.-286    	; 0x71a <init_all>
	TWIOut[RFID_NUMBER_ADDRESS] = 'N';
     838:	8e e4       	ldi	r24, 0x4E	; 78
     83a:	80 93 d0 22 	sts	0x22D0, r24
	TWIOut[RFID_NUMBER_ADDRESS+1] = 'o';
     83e:	8f e6       	ldi	r24, 0x6F	; 111
     840:	80 93 d1 22 	sts	0x22D1, r24
	TWIOut[RFID_NUMBER_ADDRESS+2] = ' ';
     844:	80 e2       	ldi	r24, 0x20	; 32
     846:	80 93 d2 22 	sts	0x22D2, r24
	TWIOut[RFID_NUMBER_ADDRESS+3] = 'D';
     84a:	84 e4       	ldi	r24, 0x44	; 68
     84c:	80 93 d3 22 	sts	0x22D3, r24
	TWIOut[RFID_NUMBER_ADDRESS+4] = 'a';
     850:	81 e6       	ldi	r24, 0x61	; 97
     852:	80 93 d4 22 	sts	0x22D4, r24
	TWIOut[RFID_NUMBER_ADDRESS+5] = 't';
     856:	94 e7       	ldi	r25, 0x74	; 116
     858:	90 93 d5 22 	sts	0x22D5, r25
	TWIOut[RFID_NUMBER_ADDRESS+6] = 'a';
     85c:	80 93 d6 22 	sts	0x22D6, r24
	sprintf(str, "UART Connected!!!\n\r");
     860:	84 e1       	ldi	r24, 0x14	; 20
     862:	e0 e0       	ldi	r30, 0x00	; 0
     864:	f0 e2       	ldi	r31, 0x20	; 32
     866:	af ec       	ldi	r26, 0xCF	; 207
     868:	b3 e2       	ldi	r27, 0x23	; 35
     86a:	01 90       	ld	r0, Z+
     86c:	0d 92       	st	X+, r0
     86e:	8a 95       	dec	r24
     870:	e1 f7       	brne	.-8      	; 0x86a <main+0x34>
	uart_puts(&uartD0, str);
     872:	6f ec       	ldi	r22, 0xCF	; 207
     874:	73 e2       	ldi	r23, 0x23	; 35
     876:	88 e3       	ldi	r24, 0x38	; 56
     878:	90 e2       	ldi	r25, 0x20	; 32
     87a:	9b d1       	rcall	.+822    	; 0xbb2 <uart_puts>
	
	while(1)
	{
		sprintf(str, "Sonar A = %d cm\n\r", ((TWIOut[SONAR_A_ADDRESS+1]<<8)+TWIOut[SONAR_A_ADDRESS]));
     87c:	0f 2e       	mov	r0, r31
     87e:	fb ed       	ldi	r31, 0xDB	; 219
     880:	af 2e       	mov	r10, r31
     882:	f2 e2       	ldi	r31, 0x22	; 34
     884:	bf 2e       	mov	r11, r31
     886:	f0 2d       	mov	r31, r0
     888:	0f 2e       	mov	r0, r31
     88a:	fa ed       	ldi	r31, 0xDA	; 218
     88c:	cf 2e       	mov	r12, r31
     88e:	f2 e2       	ldi	r31, 0x22	; 34
     890:	df 2e       	mov	r13, r31
     892:	f0 2d       	mov	r31, r0
     894:	0f 2e       	mov	r0, r31
     896:	f4 e1       	ldi	r31, 0x14	; 20
     898:	ef 2e       	mov	r14, r31
     89a:	f0 e2       	ldi	r31, 0x20	; 32
     89c:	ff 2e       	mov	r15, r31
     89e:	f0 2d       	mov	r31, r0
     8a0:	cf ec       	ldi	r28, 0xCF	; 207
     8a2:	d3 e2       	ldi	r29, 0x23	; 35
		uart_puts(&uartD0, str);
		sprintf(str, "Sonar B = %d cm\n\r", ((TWIOut[SONAR_B_ADDRESS+1]<<8)+TWIOut[SONAR_B_ADDRESS]));
     8a4:	0f 2e       	mov	r0, r31
     8a6:	fd ed       	ldi	r31, 0xDD	; 221
     8a8:	6f 2e       	mov	r6, r31
     8aa:	f2 e2       	ldi	r31, 0x22	; 34
     8ac:	7f 2e       	mov	r7, r31
     8ae:	f0 2d       	mov	r31, r0
     8b0:	0f 2e       	mov	r0, r31
     8b2:	fc ed       	ldi	r31, 0xDC	; 220
     8b4:	4f 2e       	mov	r4, r31
     8b6:	f2 e2       	ldi	r31, 0x22	; 34
     8b8:	5f 2e       	mov	r5, r31
     8ba:	f0 2d       	mov	r31, r0
     8bc:	0f 2e       	mov	r0, r31
     8be:	f6 e2       	ldi	r31, 0x26	; 38
     8c0:	2f 2e       	mov	r2, r31
     8c2:	f0 e2       	ldi	r31, 0x20	; 32
     8c4:	3f 2e       	mov	r3, r31
     8c6:	f0 2d       	mov	r31, r0
	sprintf(str, "UART Connected!!!\n\r");
	uart_puts(&uartD0, str);
	
	while(1)
	{
		sprintf(str, "Sonar A = %d cm\n\r", ((TWIOut[SONAR_A_ADDRESS+1]<<8)+TWIOut[SONAR_A_ADDRESS]));
     8c8:	f5 01       	movw	r30, r10
     8ca:	10 81       	ld	r17, Z
     8cc:	00 e0       	ldi	r16, 0x00	; 0
     8ce:	f6 01       	movw	r30, r12
     8d0:	80 81       	ld	r24, Z
     8d2:	98 01       	movw	r18, r16
     8d4:	28 0f       	add	r18, r24
     8d6:	31 1d       	adc	r19, r1
     8d8:	c9 01       	movw	r24, r18
     8da:	9f 93       	push	r25
     8dc:	2f 93       	push	r18
     8de:	ff 92       	push	r15
     8e0:	ef 92       	push	r14
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	b7 d5       	rcall	.+2926   	; 0x1456 <sprintf>
		uart_puts(&uartD0, str);
     8e8:	be 01       	movw	r22, r28
     8ea:	88 e3       	ldi	r24, 0x38	; 56
     8ec:	90 e2       	ldi	r25, 0x20	; 32
     8ee:	61 d1       	rcall	.+706    	; 0xbb2 <uart_puts>
		sprintf(str, "Sonar B = %d cm\n\r", ((TWIOut[SONAR_B_ADDRESS+1]<<8)+TWIOut[SONAR_B_ADDRESS]));
     8f0:	f3 01       	movw	r30, r6
     8f2:	90 80       	ld	r9, Z
     8f4:	81 2c       	mov	r8, r1
     8f6:	f2 01       	movw	r30, r4
     8f8:	80 81       	ld	r24, Z
     8fa:	94 01       	movw	r18, r8
     8fc:	28 0f       	add	r18, r24
     8fe:	31 1d       	adc	r19, r1
     900:	c9 01       	movw	r24, r18
     902:	9f 93       	push	r25
     904:	2f 93       	push	r18
     906:	3f 92       	push	r3
     908:	2f 92       	push	r2
     90a:	df 93       	push	r29
     90c:	cf 93       	push	r28
     90e:	a3 d5       	rcall	.+2886   	; 0x1456 <sprintf>
		uart_puts(&uartD0, str);
     910:	be 01       	movw	r22, r28
     912:	88 e3       	ldi	r24, 0x38	; 56
     914:	90 e2       	ldi	r25, 0x20	; 32
     916:	4d d1       	rcall	.+666    	; 0xbb2 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     918:	9f e7       	ldi	r25, 0x7F	; 127
     91a:	ea e1       	ldi	r30, 0x1A	; 26
     91c:	f6 e0       	ldi	r31, 0x06	; 6
     91e:	91 50       	subi	r25, 0x01	; 1
     920:	e0 40       	sbci	r30, 0x00	; 0
     922:	f0 40       	sbci	r31, 0x00	; 0
     924:	e1 f7       	brne	.-8      	; 0x91e <main+0xe8>
     926:	00 c0       	rjmp	.+0      	; 0x928 <main+0xf2>
     928:	00 00       	nop
     92a:	2d b7       	in	r18, 0x3d	; 61
     92c:	3e b7       	in	r19, 0x3e	; 62
     92e:	24 5f       	subi	r18, 0xF4	; 244
     930:	3f 4f       	sbci	r19, 0xFF	; 255
     932:	2d bf       	out	0x3d, r18	; 61
     934:	3e bf       	out	0x3e, r19	; 62
     936:	c8 cf       	rjmp	.-112    	; 0x8c8 <main+0x92>

00000938 <TWI_SlaveInitializeDriver>:
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
	twi->interface = module;
     938:	fc 01       	movw	r30, r24
     93a:	60 83       	st	Z, r22
     93c:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
     93e:	42 83       	std	Z+2, r20	; 0x02
     940:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
     942:	ec 57       	subi	r30, 0x7C	; 124
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	10 82       	st	Z, r1
	twi->bytesSent = 0;
     948:	fc 01       	movw	r30, r24
     94a:	eb 57       	subi	r30, 0x7B	; 123
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	10 82       	st	Z, r1
	twi->status = TWIS_STATUS_READY;
     950:	fc 01       	movw	r30, r24
     952:	ea 57       	subi	r30, 0x7A	; 122
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	10 82       	st	Z, r1
	twi->result = TWIS_RESULT_UNKNOWN;
     958:	fc 01       	movw	r30, r24
     95a:	e9 57       	subi	r30, 0x79	; 121
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	10 82       	st	Z, r1
	twi->abort = false;
     960:	fc 01       	movw	r30, r24
     962:	e8 57       	subi	r30, 0x78	; 120
     964:	ff 4f       	sbci	r31, 0xFF	; 255
     966:	10 82       	st	Z, r1
     968:	08 95       	ret

0000096a <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
     96a:	dc 01       	movw	r26, r24
     96c:	ed 91       	ld	r30, X+
     96e:	fc 91       	ld	r31, X
     970:	11 97       	sbiw	r26, 0x01	; 1
     972:	48 63       	ori	r20, 0x38	; 56
     974:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
     976:	ed 91       	ld	r30, X+
     978:	fc 91       	ld	r31, X
     97a:	66 0f       	add	r22, r22
     97c:	63 87       	std	Z+11, r22	; 0x0b
     97e:	08 95       	ret

00000980 <TWI_SlaveTransactionFinished>:
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     980:	fc 01       	movw	r30, r24
     982:	e9 57       	subi	r30, 0x79	; 121
     984:	ff 4f       	sbci	r31, 0xFF	; 255
     986:	60 83       	st	Z, r22
	twi->status = TWIS_STATUS_READY;
     988:	fc 01       	movw	r30, r24
     98a:	ea 57       	subi	r30, 0x7A	; 122
     98c:	ff 4f       	sbci	r31, 0xFF	; 255
     98e:	10 82       	st	Z, r1
     990:	08 95       	ret

00000992 <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
     996:	fc 01       	movw	r30, r24
     998:	eb 57       	subi	r30, 0x7B	; 123
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	20 81       	ld	r18, Z
     99e:	22 23       	and	r18, r18
     9a0:	59 f0       	breq	.+22     	; 0x9b8 <TWI_SlaveWriteHandler+0x26>
     9a2:	dc 01       	movw	r26, r24
     9a4:	ed 91       	ld	r30, X+
     9a6:	fc 91       	ld	r31, X
     9a8:	22 85       	ldd	r18, Z+10	; 0x0a
     9aa:	24 ff       	sbrs	r18, 4
     9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <TWI_SlaveWriteHandler+0x26>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     9ae:	22 e0       	ldi	r18, 0x02	; 2
     9b0:	21 87       	std	Z+9, r18	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	e5 df       	rcall	.-54     	; 0x980 <TWI_SlaveTransactionFinished>
     9b6:	24 c0       	rjmp	.+72     	; 0xa00 <TWI_SlaveWriteHandler+0x6e>
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
     9b8:	fc 01       	movw	r30, r24
     9ba:	eb 57       	subi	r30, 0x7B	; 123
     9bc:	ff 4f       	sbci	r31, 0xFF	; 255
     9be:	20 81       	ld	r18, Z
     9c0:	20 34       	cpi	r18, 0x40	; 64
     9c2:	b8 f4       	brcc	.+46     	; 0x9f2 <TWI_SlaveWriteHandler+0x60>
			uint8_t data = twi->sendData[twi->bytesSent];
     9c4:	fc 01       	movw	r30, r24
     9c6:	eb 57       	subi	r30, 0x7B	; 123
     9c8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ca:	20 81       	ld	r18, Z
     9cc:	dc 01       	movw	r26, r24
     9ce:	a2 0f       	add	r26, r18
     9d0:	b1 1d       	adc	r27, r1
     9d2:	ac 5b       	subi	r26, 0xBC	; 188
     9d4:	bf 4f       	sbci	r27, 0xFF	; 255
     9d6:	2c 91       	ld	r18, X
			twi->interface->SLAVE.DATA = data;
     9d8:	ec 01       	movw	r28, r24
     9da:	a8 81       	ld	r26, Y
     9dc:	b9 81       	ldd	r27, Y+1	; 0x01
     9de:	1c 96       	adiw	r26, 0x0c	; 12
     9e0:	2c 93       	st	X, r18
			twi->bytesSent++;
     9e2:	20 81       	ld	r18, Z
     9e4:	2f 5f       	subi	r18, 0xFF	; 255
     9e6:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     9e8:	e8 81       	ld	r30, Y
     9ea:	f9 81       	ldd	r31, Y+1	; 0x01
     9ec:	83 e0       	ldi	r24, 0x03	; 3
     9ee:	81 87       	std	Z+9, r24	; 0x09
     9f0:	07 c0       	rjmp	.+14     	; 0xa00 <TWI_SlaveWriteHandler+0x6e>
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     9f2:	dc 01       	movw	r26, r24
     9f4:	ed 91       	ld	r30, X+
     9f6:	fc 91       	ld	r31, X
     9f8:	22 e0       	ldi	r18, 0x02	; 2
     9fa:	21 87       	std	Z+9, r18	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     9fc:	62 e0       	ldi	r22, 0x02	; 2
     9fe:	c0 df       	rcall	.-128    	; 0x980 <TWI_SlaveTransactionFinished>
		}
	}
}
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	ec 01       	movw	r28, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     a10:	e8 81       	ld	r30, Y
     a12:	f9 81       	ldd	r31, Y+1	; 0x01
     a14:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
     a16:	84 60       	ori	r24, 0x04	; 4
     a18:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
     a1a:	fe 01       	movw	r30, r28
     a1c:	ec 57       	subi	r30, 0x7C	; 124
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	80 81       	ld	r24, Z
     a22:	80 34       	cpi	r24, 0x40	; 64
     a24:	48 f5       	brcc	.+82     	; 0xa78 <TWI_SlaveReadHandler+0x72>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
     a26:	e8 81       	ld	r30, Y
     a28:	f9 81       	ldd	r31, Y+1	; 0x01
     a2a:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
     a2c:	8e 01       	movw	r16, r28
     a2e:	0c 57       	subi	r16, 0x7C	; 124
     a30:	1f 4f       	sbci	r17, 0xFF	; 255
     a32:	f8 01       	movw	r30, r16
     a34:	90 81       	ld	r25, Z
     a36:	fe 01       	movw	r30, r28
     a38:	e9 0f       	add	r30, r25
     a3a:	f1 1d       	adc	r31, r1
     a3c:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
     a3e:	ea 81       	ldd	r30, Y+2	; 0x02
     a40:	fb 81       	ldd	r31, Y+3	; 0x03
     a42:	19 95       	eicall

		twi->bytesReceived++;
     a44:	f8 01       	movw	r30, r16
     a46:	80 81       	ld	r24, Z
     a48:	8f 5f       	subi	r24, 0xFF	; 255
     a4a:	80 83       	st	Z, r24

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
     a4c:	fe 01       	movw	r30, r28
     a4e:	e8 57       	subi	r30, 0x78	; 120
     a50:	ff 4f       	sbci	r31, 0xFF	; 255
     a52:	80 81       	ld	r24, Z
     a54:	88 23       	and	r24, r24
     a56:	59 f0       	breq	.+22     	; 0xa6e <TWI_SlaveReadHandler+0x68>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     a58:	e8 81       	ld	r30, Y
     a5a:	f9 81       	ldd	r31, Y+1	; 0x01
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	81 87       	std	Z+9, r24	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     a60:	66 e0       	ldi	r22, 0x06	; 6
     a62:	ce 01       	movw	r24, r28
     a64:	8d df       	rcall	.-230    	; 0x980 <TWI_SlaveTransactionFinished>
			twi->abort = false;
     a66:	c8 57       	subi	r28, 0x78	; 120
     a68:	df 4f       	sbci	r29, 0xFF	; 255
     a6a:	18 82       	st	Y, r1
     a6c:	0c c0       	rjmp	.+24     	; 0xa86 <TWI_SlaveReadHandler+0x80>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     a6e:	e8 81       	ld	r30, Y
     a70:	f9 81       	ldd	r31, Y+1	; 0x01
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	81 87       	std	Z+9, r24	; 0x09
     a76:	07 c0       	rjmp	.+14     	; 0xa86 <TWI_SlaveReadHandler+0x80>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
     a78:	e8 81       	ld	r30, Y
     a7a:	f9 81       	ldd	r31, Y+1	; 0x01
     a7c:	86 e0       	ldi	r24, 0x06	; 6
     a7e:	81 87       	std	Z+9, r24	; 0x09
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     a80:	62 e0       	ldi	r22, 0x02	; 2
     a82:	ce 01       	movw	r24, r28
     a84:	7d df       	rcall	.-262    	; 0x980 <TWI_SlaveTransactionFinished>
	}
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
     a90:	dc 01       	movw	r26, r24
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	22 85       	ldd	r18, Z+10	; 0x0a
     a98:	21 ff       	sbrs	r18, 1
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <TWI_SlaveDataHandler+0xe>
		TWI_SlaveWriteHandler(twi);
     a9c:	7a cf       	rjmp	.-268    	; 0x992 <TWI_SlaveWriteHandler>
	} else {
		TWI_SlaveReadHandler(twi);
     a9e:	b3 cf       	rjmp	.-154    	; 0xa06 <TWI_SlaveReadHandler>

00000aa0 <TWI_SlaveStopHandler>:
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     aa0:	dc 01       	movw	r26, r24
     aa2:	ed 91       	ld	r30, X+
     aa4:	fc 91       	ld	r31, X
     aa6:	11 97       	sbiw	r26, 0x01	; 1
     aa8:	20 85       	ldd	r18, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     aaa:	2b 7f       	andi	r18, 0xFB	; 251
     aac:	20 87       	std	Z+8, r18	; 0x08
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     aae:	ed 91       	ld	r30, X+
     ab0:	fc 91       	ld	r31, X
     ab2:	22 85       	ldd	r18, Z+10	; 0x0a
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
     ab4:	20 64       	ori	r18, 0x40	; 64
     ab6:	22 87       	std	Z+10, r18	; 0x0a

	TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	62 cf       	rjmp	.-316    	; 0x980 <TWI_SlaveTransactionFinished>

00000abc <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	ec 01       	movw	r28, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
     ac2:	fc 01       	movw	r30, r24
     ac4:	e8 57       	subi	r30, 0x78	; 120
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	80 81       	ld	r24, Z
     aca:	88 23       	and	r24, r24
     acc:	59 f0       	breq	.+22     	; 0xae4 <TWI_SlaveAddressMatchHandler+0x28>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     ace:	e8 81       	ld	r30, Y
     ad0:	f9 81       	ldd	r31, Y+1	; 0x01
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	81 87       	std	Z+9, r24	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     ad6:	66 e0       	ldi	r22, 0x06	; 6
     ad8:	ce 01       	movw	r24, r28
     ada:	52 df       	rcall	.-348    	; 0x980 <TWI_SlaveTransactionFinished>
		twi->abort = false;
     adc:	c8 57       	subi	r28, 0x78	; 120
     ade:	df 4f       	sbci	r29, 0xFF	; 255
     ae0:	18 82       	st	Y, r1
     ae2:	1a c0       	rjmp	.+52     	; 0xb18 <TWI_SlaveAddressMatchHandler+0x5c>
	} else {
		twi->status = TWIS_STATUS_BUSY;
     ae4:	fe 01       	movw	r30, r28
     ae6:	ea 57       	subi	r30, 0x7A	; 122
     ae8:	ff 4f       	sbci	r31, 0xFF	; 255
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 83       	st	Z, r24
		twi->result = TWIS_RESULT_UNKNOWN;
     aee:	fe 01       	movw	r30, r28
     af0:	e9 57       	subi	r30, 0x79	; 121
     af2:	ff 4f       	sbci	r31, 0xFF	; 255
     af4:	10 82       	st	Z, r1

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     af6:	e8 81       	ld	r30, Y
     af8:	f9 81       	ldd	r31, Y+1	; 0x01
     afa:	80 85       	ldd	r24, Z+8	; 0x08
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     afc:	8b 7f       	andi	r24, 0xFB	; 251
     afe:	80 87       	std	Z+8, r24	; 0x08

		twi->bytesReceived = 0;
     b00:	fe 01       	movw	r30, r28
     b02:	ec 57       	subi	r30, 0x7C	; 124
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     b08:	fe 01       	movw	r30, r28
     b0a:	eb 57       	subi	r30, 0x7B	; 123
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	10 82       	st	Z, r1

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     b10:	e8 81       	ld	r30, Y
     b12:	f9 81       	ldd	r31, Y+1	; 0x01
     b14:	83 e0       	ldi	r24, 0x03	; 3
     b16:	81 87       	std	Z+9, r24	; 0x09
	}
}
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	08 95       	ret

00000b1e <TWI_SlaveInterruptHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     b1e:	dc 01       	movw	r26, r24
     b20:	ed 91       	ld	r30, X+
     b22:	fc 91       	ld	r31, X
     b24:	22 85       	ldd	r18, Z+10	; 0x0a

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
     b26:	22 ff       	sbrs	r18, 2
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <TWI_SlaveInterruptHandler+0x30>
		twi->bytesReceived = 0;
     b2a:	fc 01       	movw	r30, r24
     b2c:	ec 57       	subi	r30, 0x7C	; 124
     b2e:	ff 4f       	sbci	r31, 0xFF	; 255
     b30:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     b32:	fc 01       	movw	r30, r24
     b34:	eb 57       	subi	r30, 0x7B	; 123
     b36:	ff 4f       	sbci	r31, 0xFF	; 255
     b38:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_BUS_ERROR;
     b3a:	fc 01       	movw	r30, r24
     b3c:	e9 57       	subi	r30, 0x79	; 121
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	24 e0       	ldi	r18, 0x04	; 4
     b42:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     b44:	fc 01       	movw	r30, r24
     b46:	ea 57       	subi	r30, 0x7A	; 122
     b48:	ff 4f       	sbci	r31, 0xFF	; 255
     b4a:	10 82       	st	Z, r1
     b4c:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
     b4e:	23 ff       	sbrs	r18, 3
     b50:	12 c0       	rjmp	.+36     	; 0xb76 <TWI_SlaveInterruptHandler+0x58>
		twi->bytesReceived = 0;
     b52:	fc 01       	movw	r30, r24
     b54:	ec 57       	subi	r30, 0x7C	; 124
     b56:	ff 4f       	sbci	r31, 0xFF	; 255
     b58:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     b5a:	fc 01       	movw	r30, r24
     b5c:	eb 57       	subi	r30, 0x7B	; 123
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
     b62:	fc 01       	movw	r30, r24
     b64:	e9 57       	subi	r30, 0x79	; 121
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	23 e0       	ldi	r18, 0x03	; 3
     b6a:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     b6c:	fc 01       	movw	r30, r24
     b6e:	ea 57       	subi	r30, 0x7A	; 122
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	10 82       	st	Z, r1
     b74:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     b76:	42 2f       	mov	r20, r18
     b78:	40 74       	andi	r20, 0x40	; 64
 *  Handles all TWI transactions and responses to address match, data reception,
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
     b7a:	32 2f       	mov	r19, r18
     b7c:	31 74       	andi	r19, 0x41	; 65
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
		twi->status = TWIS_STATUS_READY;
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     b7e:	31 34       	cpi	r19, 0x41	; 65
     b80:	09 f4       	brne	.+2      	; 0xb84 <TWI_SlaveInterruptHandler+0x66>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
     b82:	9c cf       	rjmp	.-200    	; 0xabc <TWI_SlaveAddressMatchHandler>
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
     b84:	44 23       	and	r20, r20
     b86:	09 f0       	breq	.+2      	; 0xb8a <TWI_SlaveInterruptHandler+0x6c>
		TWI_SlaveStopHandler(twi);
     b88:	8b cf       	rjmp	.-234    	; 0xaa0 <TWI_SlaveStopHandler>
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
     b8a:	22 23       	and	r18, r18
     b8c:	0c f4       	brge	.+2      	; 0xb90 <TWI_SlaveInterruptHandler+0x72>
		TWI_SlaveDataHandler(twi);
     b8e:	80 cf       	rjmp	.-256    	; 0xa90 <TWI_SlaveDataHandler>
	}

	/* If unexpected state. */
	else {
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_FAIL);
     b90:	65 e0       	ldi	r22, 0x05	; 5
     b92:	f6 ce       	rjmp	.-532    	; 0x980 <TWI_SlaveTransactionFinished>

00000b94 <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	ec 01       	movw	r28, r24
     b9c:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     b9e:	8c d1       	rcall	.+792    	; 0xeb8 <USART_TXBuffer_FreeSpace>
     ba0:	88 23       	and	r24, r24
     ba2:	19 f0       	breq	.+6      	; 0xbaa <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     ba4:	61 2f       	mov	r22, r17
     ba6:	ce 01       	movw	r24, r28
     ba8:	96 d1       	rcall	.+812    	; 0xed6 <USART_TXBuffer_PutByte>
  }
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	08 95       	ret

00000bb2 <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
     bbc:	c6 2f       	mov	r28, r22
     bbe:	d7 2f       	mov	r29, r23
     bc0:	69 91       	ld	r22, Y+
     bc2:	66 23       	and	r22, r22
     bc4:	29 f0       	breq	.+10     	; 0xbd0 <uart_puts+0x1e>
    uart_putc(uart, c);
     bc6:	c8 01       	movw	r24, r16
     bc8:	e5 df       	rcall	.-54     	; 0xb94 <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     bca:	69 91       	ld	r22, Y+
     bcc:	61 11       	cpse	r22, r1
     bce:	fb cf       	rjmp	.-10     	; 0xbc6 <uart_puts+0x14>
    uart_putc(uart, c);
  }
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     bda:	80 3a       	cpi	r24, 0xA0	; 160
     bdc:	28 e0       	ldi	r18, 0x08	; 8
     bde:	92 07       	cpc	r25, r18
     be0:	39 f4       	brne	.+14     	; 0xbf0 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     be2:	e0 e4       	ldi	r30, 0x40	; 64
     be4:	f6 e0       	ldi	r31, 0x06	; 6
     be6:	88 e0       	ldi	r24, 0x08	; 8
     be8:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     bea:	84 e0       	ldi	r24, 0x04	; 4
     bec:	82 83       	std	Z+2, r24	; 0x02
     return;
     bee:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     bf0:	80 3b       	cpi	r24, 0xB0	; 176
     bf2:	28 e0       	ldi	r18, 0x08	; 8
     bf4:	92 07       	cpc	r25, r18
     bf6:	39 f4       	brne	.+14     	; 0xc06 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     bf8:	e0 e4       	ldi	r30, 0x40	; 64
     bfa:	f6 e0       	ldi	r31, 0x06	; 6
     bfc:	80 e8       	ldi	r24, 0x80	; 128
     bfe:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     c00:	80 e4       	ldi	r24, 0x40	; 64
     c02:	82 83       	std	Z+2, r24	; 0x02
     return;
     c04:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     c06:	80 3a       	cpi	r24, 0xA0	; 160
     c08:	29 e0       	ldi	r18, 0x09	; 9
     c0a:	92 07       	cpc	r25, r18
     c0c:	39 f4       	brne	.+14     	; 0xc1c <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     c0e:	e0 e6       	ldi	r30, 0x60	; 96
     c10:	f6 e0       	ldi	r31, 0x06	; 6
     c12:	88 e0       	ldi	r24, 0x08	; 8
     c14:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     c16:	84 e0       	ldi	r24, 0x04	; 4
     c18:	82 83       	std	Z+2, r24	; 0x02
     return;
     c1a:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     c1c:	80 3b       	cpi	r24, 0xB0	; 176
     c1e:	29 e0       	ldi	r18, 0x09	; 9
     c20:	92 07       	cpc	r25, r18
     c22:	39 f4       	brne	.+14     	; 0xc32 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     c24:	e0 e6       	ldi	r30, 0x60	; 96
     c26:	f6 e0       	ldi	r31, 0x06	; 6
     c28:	80 e8       	ldi	r24, 0x80	; 128
     c2a:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     c2c:	80 e4       	ldi	r24, 0x40	; 64
     c2e:	82 83       	std	Z+2, r24	; 0x02
     return;
     c30:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     c32:	80 3a       	cpi	r24, 0xA0	; 160
     c34:	9a 40       	sbci	r25, 0x0A	; 10
     c36:	31 f4       	brne	.+12     	; 0xc44 <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     c38:	e0 e8       	ldi	r30, 0x80	; 128
     c3a:	f6 e0       	ldi	r31, 0x06	; 6
     c3c:	88 e0       	ldi	r24, 0x08	; 8
     c3e:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     c40:	84 e0       	ldi	r24, 0x04	; 4
     c42:	82 83       	std	Z+2, r24	; 0x02
     c44:	08 95       	ret

00000c46 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     c46:	4f 92       	push	r4
     c48:	5f 92       	push	r5
     c4a:	6f 92       	push	r6
     c4c:	7f 92       	push	r7
     c4e:	8f 92       	push	r8
     c50:	9f 92       	push	r9
     c52:	af 92       	push	r10
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	49 01       	movw	r8, r18
     c64:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     c66:	4e 2d       	mov	r20, r14
     c68:	41 70       	andi	r20, 0x01	; 1
     c6a:	20 e1       	ldi	r18, 0x10	; 16
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	79 01       	movw	r14, r18
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <calc_bsel+0x30>
     c72:	f5 94       	asr	r15
     c74:	e7 94       	ror	r14
     c76:	4a 95       	dec	r20
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <calc_bsel+0x2c>
  if ( scale < 0 ) {
     c7a:	00 23       	and	r16, r16
     c7c:	0c f0       	brlt	.+2      	; 0xc80 <calc_bsel+0x3a>
     c7e:	3a c0       	rjmp	.+116    	; 0xcf4 <calc_bsel+0xae>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     c80:	a4 d2       	rcall	.+1352   	; 0x11ca <__floatunsisf>
     c82:	2b 01       	movw	r4, r22
     c84:	3c 01       	movw	r6, r24
     c86:	b7 01       	movw	r22, r14
     c88:	77 27       	eor	r23, r23
     c8a:	88 27       	eor	r24, r24
     c8c:	77 fd       	sbrc	r23, 7
     c8e:	80 95       	com	r24
     c90:	98 2f       	mov	r25, r24
     c92:	9d d2       	rcall	.+1338   	; 0x11ce <__floatsisf>
     c94:	6b 01       	movw	r12, r22
     c96:	7c 01       	movw	r14, r24
     c98:	c5 01       	movw	r24, r10
     c9a:	b4 01       	movw	r22, r8
     c9c:	96 d2       	rcall	.+1324   	; 0x11ca <__floatunsisf>
     c9e:	9b 01       	movw	r18, r22
     ca0:	ac 01       	movw	r20, r24
     ca2:	c7 01       	movw	r24, r14
     ca4:	b6 01       	movw	r22, r12
     ca6:	1f d3       	rcall	.+1598   	; 0x12e6 <__mulsf3>
     ca8:	9b 01       	movw	r18, r22
     caa:	ac 01       	movw	r20, r24
     cac:	c3 01       	movw	r24, r6
     cae:	b2 01       	movw	r22, r4
     cb0:	f8 d1       	rcall	.+1008   	; 0x10a2 <__divsf3>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	40 e8       	ldi	r20, 0x80	; 128
     cb8:	5f e3       	ldi	r21, 0x3F	; 63
     cba:	8e d1       	rcall	.+796    	; 0xfd8 <__subsf3>
     cbc:	6b 01       	movw	r12, r22
     cbe:	7c 01       	movw	r14, r24
     cc0:	11 27       	eor	r17, r17
     cc2:	01 95       	neg	r16
     cc4:	0c f4       	brge	.+2      	; 0xcc8 <calc_bsel+0x82>
     cc6:	10 95       	com	r17
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <calc_bsel+0x8c>
     cce:	66 0f       	add	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	0a 95       	dec	r16
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <calc_bsel+0x88>
     cd6:	88 27       	eor	r24, r24
     cd8:	77 fd       	sbrc	r23, 7
     cda:	80 95       	com	r24
     cdc:	98 2f       	mov	r25, r24
     cde:	77 d2       	rcall	.+1262   	; 0x11ce <__floatsisf>
     ce0:	9b 01       	movw	r18, r22
     ce2:	ac 01       	movw	r20, r24
     ce4:	c7 01       	movw	r24, r14
     ce6:	b6 01       	movw	r22, r12
     ce8:	fe d2       	rcall	.+1532   	; 0x12e6 <__mulsf3>
     cea:	60 d3       	rcall	.+1728   	; 0x13ac <round>
     cec:	42 d2       	rcall	.+1156   	; 0x1172 <__fixunssfsi>
     cee:	86 2f       	mov	r24, r22
     cf0:	97 2f       	mov	r25, r23
     cf2:	35 c0       	rjmp	.+106    	; 0xd5e <calc_bsel+0x118>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     cf4:	6a d2       	rcall	.+1236   	; 0x11ca <__floatunsisf>
     cf6:	2b 01       	movw	r4, r22
     cf8:	3c 01       	movw	r6, r24
     cfa:	b7 01       	movw	r22, r14
     cfc:	77 27       	eor	r23, r23
     cfe:	88 27       	eor	r24, r24
     d00:	77 fd       	sbrc	r23, 7
     d02:	80 95       	com	r24
     d04:	98 2f       	mov	r25, r24
     d06:	63 d2       	rcall	.+1222   	; 0x11ce <__floatsisf>
     d08:	6b 01       	movw	r12, r22
     d0a:	7c 01       	movw	r14, r24
     d0c:	c5 01       	movw	r24, r10
     d0e:	b4 01       	movw	r22, r8
     d10:	5c d2       	rcall	.+1208   	; 0x11ca <__floatunsisf>
     d12:	9b 01       	movw	r18, r22
     d14:	ac 01       	movw	r20, r24
     d16:	c7 01       	movw	r24, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	e5 d2       	rcall	.+1482   	; 0x12e6 <__mulsf3>
     d1c:	9b 01       	movw	r18, r22
     d1e:	ac 01       	movw	r20, r24
     d20:	c3 01       	movw	r24, r6
     d22:	b2 01       	movw	r22, r4
     d24:	be d1       	rcall	.+892    	; 0x10a2 <__divsf3>
     d26:	4b 01       	movw	r8, r22
     d28:	5c 01       	movw	r10, r24
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <calc_bsel+0xee>
     d30:	66 0f       	add	r22, r22
     d32:	77 1f       	adc	r23, r23
     d34:	0a 95       	dec	r16
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <calc_bsel+0xea>
     d38:	88 27       	eor	r24, r24
     d3a:	77 fd       	sbrc	r23, 7
     d3c:	80 95       	com	r24
     d3e:	98 2f       	mov	r25, r24
     d40:	46 d2       	rcall	.+1164   	; 0x11ce <__floatsisf>
     d42:	9b 01       	movw	r18, r22
     d44:	ac 01       	movw	r20, r24
     d46:	c5 01       	movw	r24, r10
     d48:	b4 01       	movw	r22, r8
     d4a:	ab d1       	rcall	.+854    	; 0x10a2 <__divsf3>
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e8       	ldi	r20, 0x80	; 128
     d52:	5f e3       	ldi	r21, 0x3F	; 63
     d54:	41 d1       	rcall	.+642    	; 0xfd8 <__subsf3>
     d56:	2a d3       	rcall	.+1620   	; 0x13ac <round>
     d58:	0c d2       	rcall	.+1048   	; 0x1172 <__fixunssfsi>
     d5a:	86 2f       	mov	r24, r22
     d5c:	97 2f       	mov	r25, r23
  }
}
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	df 90       	pop	r13
     d68:	cf 90       	pop	r12
     d6a:	bf 90       	pop	r11
     d6c:	af 90       	pop	r10
     d6e:	9f 90       	pop	r9
     d70:	8f 90       	pop	r8
     d72:	7f 90       	pop	r7
     d74:	6f 90       	pop	r6
     d76:	5f 90       	pop	r5
     d78:	4f 90       	pop	r4
     d7a:	08 95       	ret

00000d7c <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     d7c:	4f 92       	push	r4
     d7e:	5f 92       	push	r5
     d80:	6f 92       	push	r6
     d82:	7f 92       	push	r7
     d84:	8f 92       	push	r8
     d86:	9f 92       	push	r9
     d88:	af 92       	push	r10
     d8a:	bf 92       	push	r11
     d8c:	ef 92       	push	r14
     d8e:	0f 93       	push	r16
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	2b 01       	movw	r4, r22
     d96:	3c 01       	movw	r6, r24
     d98:	49 01       	movw	r8, r18
     d9a:	5a 01       	movw	r10, r20
     d9c:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     d9e:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     da0:	ed 2e       	mov	r14, r29
     da2:	0c 2f       	mov	r16, r28
     da4:	a5 01       	movw	r20, r10
     da6:	94 01       	movw	r18, r8
     da8:	c3 01       	movw	r24, r6
     daa:	b2 01       	movw	r22, r4
     dac:	4c df       	rcall	.-360    	; 0xc46 <calc_bsel>
     dae:	81 15       	cp	r24, r1
     db0:	90 41       	sbci	r25, 0x10	; 16
     db2:	18 f0       	brcs	.+6      	; 0xdba <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     db4:	cf 5f       	subi	r28, 0xFF	; 255
     db6:	c8 30       	cpi	r28, 0x08	; 8
     db8:	99 f7       	brne	.-26     	; 0xda0 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     dba:	8c 2f       	mov	r24, r28
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	0f 91       	pop	r16
     dc2:	ef 90       	pop	r14
     dc4:	bf 90       	pop	r11
     dc6:	af 90       	pop	r10
     dc8:	9f 90       	pop	r9
     dca:	8f 90       	pop	r8
     dcc:	7f 90       	pop	r7
     dce:	6f 90       	pop	r6
     dd0:	5f 90       	pop	r5
     dd2:	4f 90       	pop	r4
     dd4:	08 95       	ret

00000dd6 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     dd6:	2f 92       	push	r2
     dd8:	3f 92       	push	r3
     dda:	4f 92       	push	r4
     ddc:	5f 92       	push	r5
     dde:	6f 92       	push	r6
     de0:	7f 92       	push	r7
     de2:	8f 92       	push	r8
     de4:	9f 92       	push	r9
     de6:	af 92       	push	r10
     de8:	bf 92       	push	r11
     dea:	cf 92       	push	r12
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	ec 01       	movw	r28, r24
     dfa:	3b 01       	movw	r6, r22
     dfc:	49 01       	movw	r8, r18
     dfe:	5a 01       	movw	r10, r20
     e00:	17 01       	movw	r2, r14
     e02:	28 01       	movw	r4, r16
     e04:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     e06:	0c 2d       	mov	r16, r12
     e08:	a2 01       	movw	r20, r4
     e0a:	91 01       	movw	r18, r2
     e0c:	c5 01       	movw	r24, r10
     e0e:	b4 01       	movw	r22, r8
     e10:	b5 df       	rcall	.-150    	; 0xd7c <calc_bscale>
     e12:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     e14:	08 2f       	mov	r16, r24
     e16:	a2 01       	movw	r20, r4
     e18:	91 01       	movw	r18, r2
     e1a:	c5 01       	movw	r24, r10
     e1c:	b4 01       	movw	r22, r8
     e1e:	13 df       	rcall	.-474    	; 0xc46 <calc_bsel>
     e20:	b8 2e       	mov	r11, r24
     e22:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	b3 01       	movw	r22, r6
     e28:	ce 01       	movw	r24, r28
     e2a:	32 d0       	rcall	.+100    	; 0xe90 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     e2c:	e8 81       	ld	r30, Y
     e2e:	f9 81       	ldd	r31, Y+1	; 0x01
     e30:	83 e0       	ldi	r24, 0x03	; 3
     e32:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     e34:	e8 81       	ld	r30, Y
     e36:	f9 81       	ldd	r31, Y+1	; 0x01
     e38:	84 81       	ldd	r24, Z+4	; 0x04
     e3a:	80 61       	ori	r24, 0x10	; 16
     e3c:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     e3e:	e8 81       	ld	r30, Y
     e40:	f9 81       	ldd	r31, Y+1	; 0x01
     e42:	84 81       	ldd	r24, Z+4	; 0x04
     e44:	88 60       	ori	r24, 0x08	; 8
     e46:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     e48:	e8 81       	ld	r30, Y
     e4a:	f9 81       	ldd	r31, Y+1	; 0x01
     e4c:	83 81       	ldd	r24, Z+3	; 0x03
     e4e:	8f 7c       	andi	r24, 0xCF	; 207
     e50:	80 61       	ori	r24, 0x10	; 16
     e52:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     e54:	e8 81       	ld	r30, Y
     e56:	f9 81       	ldd	r31, Y+1	; 0x01
     e58:	b6 82       	std	Z+6, r11	; 0x06
     e5a:	e8 81       	ld	r30, Y
     e5c:	f9 81       	ldd	r31, Y+1	; 0x01
     e5e:	12 95       	swap	r17
     e60:	10 7f       	andi	r17, 0xF0	; 240
     e62:	e1 2a       	or	r14, r17
     e64:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
     e66:	88 81       	ld	r24, Y
     e68:	99 81       	ldd	r25, Y+1	; 0x01
     e6a:	b7 de       	rcall	.-658    	; 0xbda <set_usart_txrx_direction>
}
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	7f 90       	pop	r7
     e84:	6f 90       	pop	r6
     e86:	5f 90       	pop	r5
     e88:	4f 90       	pop	r4
     e8a:	3f 90       	pop	r3
     e8c:	2f 90       	pop	r2
     e8e:	08 95       	ret

00000e90 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     e90:	fc 01       	movw	r30, r24
     e92:	60 83       	st	Z, r22
     e94:	71 83       	std	Z+1, r23	; 0x01
     e96:	42 83       	std	Z+2, r20	; 0x02
     e98:	ec 5f       	subi	r30, 0xFC	; 252
     e9a:	fe 4f       	sbci	r31, 0xFE	; 254
     e9c:	10 82       	st	Z, r1
     e9e:	fc 01       	movw	r30, r24
     ea0:	ed 5f       	subi	r30, 0xFD	; 253
     ea2:	fe 4f       	sbci	r31, 0xFE	; 254
     ea4:	10 82       	st	Z, r1
     ea6:	fc 01       	movw	r30, r24
     ea8:	ea 5f       	subi	r30, 0xFA	; 250
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	10 82       	st	Z, r1
     eae:	fc 01       	movw	r30, r24
     eb0:	eb 5f       	subi	r30, 0xFB	; 251
     eb2:	fe 4f       	sbci	r31, 0xFE	; 254
     eb4:	10 82       	st	Z, r1
     eb6:	08 95       	ret

00000eb8 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     eb8:	fc 01       	movw	r30, r24
     eba:	eb 5f       	subi	r30, 0xFB	; 251
     ebc:	fe 4f       	sbci	r31, 0xFE	; 254
     ebe:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     ec0:	fc 01       	movw	r30, r24
     ec2:	ea 5f       	subi	r30, 0xFA	; 250
     ec4:	fe 4f       	sbci	r31, 0xFE	; 254
     ec6:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     ec8:	2f 5f       	subi	r18, 0xFF	; 255
     eca:	2f 77       	andi	r18, 0x7F	; 127
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	29 13       	cpse	r18, r25
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <USART_TXBuffer_FreeSpace+0x1c>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
}
     ed4:	08 95       	ret

00000ed6 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	ec 01       	movw	r28, r24
     ede:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
     ee0:	eb df       	rcall	.-42     	; 0xeb8 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
     ee2:	88 23       	and	r24, r24
     ee4:	a1 f0       	breq	.+40     	; 0xf0e <USART_TXBuffer_PutByte+0x38>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     ee6:	fe 01       	movw	r30, r28
     ee8:	eb 5f       	subi	r30, 0xFB	; 251
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	90 81       	ld	r25, Z
	  	TXbufPtr->TX[tempTX_Head]= data;
     eee:	de 01       	movw	r26, r28
     ef0:	a9 0f       	add	r26, r25
     ef2:	b1 1d       	adc	r27, r1
     ef4:	ad 57       	subi	r26, 0x7D	; 125
     ef6:	bf 4f       	sbci	r27, 0xFF	; 255
     ef8:	1c 93       	st	X, r17
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     efa:	9f 5f       	subi	r25, 0xFF	; 255
     efc:	9f 77       	andi	r25, 0x7F	; 127
     efe:	90 83       	st	Z, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     f00:	e8 81       	ld	r30, Y
     f02:	f9 81       	ldd	r31, Y+1	; 0x01
     f04:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     f06:	9c 7f       	andi	r25, 0xFC	; 252
     f08:	2a 81       	ldd	r18, Y+2	; 0x02
     f0a:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     f0c:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	08 95       	ret

00000f16 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     f16:	fc 01       	movw	r30, r24
     f18:	ed 5f       	subi	r30, 0xFD	; 253
     f1a:	fe 4f       	sbci	r31, 0xFE	; 254
     f1c:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     f1e:	fc 01       	movw	r30, r24
     f20:	ec 5f       	subi	r30, 0xFC	; 252
     f22:	fe 4f       	sbci	r31, 0xFE	; 254
     f24:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	29 13       	cpse	r18, r25
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <USART_RXBufferData_Available+0x18>
     f2c:	80 e0       	ldi	r24, 0x00	; 0
}
     f2e:	08 95       	ret

00000f30 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     f30:	fc 01       	movw	r30, r24
     f32:	ec 5f       	subi	r30, 0xFC	; 252
     f34:	fe 4f       	sbci	r31, 0xFE	; 254
     f36:	20 81       	ld	r18, Z
     f38:	dc 01       	movw	r26, r24
     f3a:	a2 0f       	add	r26, r18
     f3c:	b1 1d       	adc	r27, r1
     f3e:	13 96       	adiw	r26, 0x03	; 3
     f40:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     f42:	90 81       	ld	r25, Z
     f44:	9f 5f       	subi	r25, 0xFF	; 255
     f46:	9f 77       	andi	r25, 0x7F	; 127
     f48:	90 83       	st	Z, r25

	return ans;
}
     f4a:	08 95       	ret

00000f4c <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     f4c:	fc 01       	movw	r30, r24
     f4e:	ed 5f       	subi	r30, 0xFD	; 253
     f50:	fe 4f       	sbci	r31, 0xFE	; 254
     f52:	20 81       	ld	r18, Z
     f54:	2f 5f       	subi	r18, 0xFF	; 255
     f56:	2f 77       	andi	r18, 0x7F	; 127

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     f58:	fc 01       	movw	r30, r24
     f5a:	ec 5f       	subi	r30, 0xFC	; 252
     f5c:	fe 4f       	sbci	r31, 0xFE	; 254
     f5e:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     f60:	dc 01       	movw	r26, r24
     f62:	ed 91       	ld	r30, X+
     f64:	fc 91       	ld	r31, X
     f66:	11 97       	sbiw	r26, 0x01	; 1
     f68:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     f6a:	23 17       	cp	r18, r19
     f6c:	59 f0       	breq	.+22     	; 0xf84 <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     f6e:	fc 01       	movw	r30, r24
     f70:	ed 5f       	subi	r30, 0xFD	; 253
     f72:	fe 4f       	sbci	r31, 0xFE	; 254
     f74:	30 81       	ld	r19, Z
     f76:	a3 0f       	add	r26, r19
     f78:	b1 1d       	adc	r27, r1
     f7a:	13 96       	adiw	r26, 0x03	; 3
     f7c:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     f7e:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     f84:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     f86:	08 95       	ret

00000f88 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     f8c:	fc 01       	movw	r30, r24
     f8e:	ea 5f       	subi	r30, 0xFA	; 250
     f90:	fe 4f       	sbci	r31, 0xFE	; 254
     f92:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     f94:	fc 01       	movw	r30, r24
     f96:	eb 5f       	subi	r30, 0xFB	; 251
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	30 81       	ld	r19, Z
     f9c:	32 13       	cpse	r19, r18
     f9e:	07 c0       	rjmp	.+14     	; 0xfae <USART_DataRegEmpty+0x26>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     fa0:	dc 01       	movw	r26, r24
     fa2:	ed 91       	ld	r30, X+
     fa4:	fc 91       	ld	r31, X
     fa6:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     fa8:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     faa:	83 83       	std	Z+3, r24	; 0x03
     fac:	12 c0       	rjmp	.+36     	; 0xfd2 <USART_DataRegEmpty+0x4a>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     fae:	fc 01       	movw	r30, r24
     fb0:	ea 5f       	subi	r30, 0xFA	; 250
     fb2:	fe 4f       	sbci	r31, 0xFE	; 254
     fb4:	20 81       	ld	r18, Z
     fb6:	dc 01       	movw	r26, r24
     fb8:	a2 0f       	add	r26, r18
     fba:	b1 1d       	adc	r27, r1
     fbc:	ad 57       	subi	r26, 0x7D	; 125
     fbe:	bf 4f       	sbci	r27, 0xFF	; 255
     fc0:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
     fc2:	ec 01       	movw	r28, r24
     fc4:	a8 81       	ld	r26, Y
     fc6:	b9 81       	ldd	r27, Y+1	; 0x01
     fc8:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     fca:	80 81       	ld	r24, Z
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	8f 77       	andi	r24, 0x7F	; 127
     fd0:	80 83       	st	Z, r24
	}
}
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <__subsf3>:
     fd8:	50 58       	subi	r21, 0x80	; 128

00000fda <__addsf3>:
     fda:	bb 27       	eor	r27, r27
     fdc:	aa 27       	eor	r26, r26
     fde:	0e d0       	rcall	.+28     	; 0xffc <__addsf3x>
     fe0:	48 c1       	rjmp	.+656    	; 0x1272 <__fp_round>
     fe2:	39 d1       	rcall	.+626    	; 0x1256 <__fp_pscA>
     fe4:	30 f0       	brcs	.+12     	; 0xff2 <__addsf3+0x18>
     fe6:	3e d1       	rcall	.+636    	; 0x1264 <__fp_pscB>
     fe8:	20 f0       	brcs	.+8      	; 0xff2 <__addsf3+0x18>
     fea:	31 f4       	brne	.+12     	; 0xff8 <__addsf3+0x1e>
     fec:	9f 3f       	cpi	r25, 0xFF	; 255
     fee:	11 f4       	brne	.+4      	; 0xff4 <__addsf3+0x1a>
     ff0:	1e f4       	brtc	.+6      	; 0xff8 <__addsf3+0x1e>
     ff2:	2e c1       	rjmp	.+604    	; 0x1250 <__fp_nan>
     ff4:	0e f4       	brtc	.+2      	; 0xff8 <__addsf3+0x1e>
     ff6:	e0 95       	com	r30
     ff8:	e7 fb       	bst	r30, 7
     ffa:	24 c1       	rjmp	.+584    	; 0x1244 <__fp_inf>

00000ffc <__addsf3x>:
     ffc:	e9 2f       	mov	r30, r25
     ffe:	4a d1       	rcall	.+660    	; 0x1294 <__fp_split3>
    1000:	80 f3       	brcs	.-32     	; 0xfe2 <__addsf3+0x8>
    1002:	ba 17       	cp	r27, r26
    1004:	62 07       	cpc	r22, r18
    1006:	73 07       	cpc	r23, r19
    1008:	84 07       	cpc	r24, r20
    100a:	95 07       	cpc	r25, r21
    100c:	18 f0       	brcs	.+6      	; 0x1014 <__addsf3x+0x18>
    100e:	71 f4       	brne	.+28     	; 0x102c <__addsf3x+0x30>
    1010:	9e f5       	brtc	.+102    	; 0x1078 <__addsf3x+0x7c>
    1012:	62 c1       	rjmp	.+708    	; 0x12d8 <__fp_zero>
    1014:	0e f4       	brtc	.+2      	; 0x1018 <__addsf3x+0x1c>
    1016:	e0 95       	com	r30
    1018:	0b 2e       	mov	r0, r27
    101a:	ba 2f       	mov	r27, r26
    101c:	a0 2d       	mov	r26, r0
    101e:	0b 01       	movw	r0, r22
    1020:	b9 01       	movw	r22, r18
    1022:	90 01       	movw	r18, r0
    1024:	0c 01       	movw	r0, r24
    1026:	ca 01       	movw	r24, r20
    1028:	a0 01       	movw	r20, r0
    102a:	11 24       	eor	r1, r1
    102c:	ff 27       	eor	r31, r31
    102e:	59 1b       	sub	r21, r25
    1030:	99 f0       	breq	.+38     	; 0x1058 <__addsf3x+0x5c>
    1032:	59 3f       	cpi	r21, 0xF9	; 249
    1034:	50 f4       	brcc	.+20     	; 0x104a <__addsf3x+0x4e>
    1036:	50 3e       	cpi	r21, 0xE0	; 224
    1038:	68 f1       	brcs	.+90     	; 0x1094 <__addsf3x+0x98>
    103a:	1a 16       	cp	r1, r26
    103c:	f0 40       	sbci	r31, 0x00	; 0
    103e:	a2 2f       	mov	r26, r18
    1040:	23 2f       	mov	r18, r19
    1042:	34 2f       	mov	r19, r20
    1044:	44 27       	eor	r20, r20
    1046:	58 5f       	subi	r21, 0xF8	; 248
    1048:	f3 cf       	rjmp	.-26     	; 0x1030 <__addsf3x+0x34>
    104a:	46 95       	lsr	r20
    104c:	37 95       	ror	r19
    104e:	27 95       	ror	r18
    1050:	a7 95       	ror	r26
    1052:	f0 40       	sbci	r31, 0x00	; 0
    1054:	53 95       	inc	r21
    1056:	c9 f7       	brne	.-14     	; 0x104a <__addsf3x+0x4e>
    1058:	7e f4       	brtc	.+30     	; 0x1078 <__addsf3x+0x7c>
    105a:	1f 16       	cp	r1, r31
    105c:	ba 0b       	sbc	r27, r26
    105e:	62 0b       	sbc	r22, r18
    1060:	73 0b       	sbc	r23, r19
    1062:	84 0b       	sbc	r24, r20
    1064:	ba f0       	brmi	.+46     	; 0x1094 <__addsf3x+0x98>
    1066:	91 50       	subi	r25, 0x01	; 1
    1068:	a1 f0       	breq	.+40     	; 0x1092 <__addsf3x+0x96>
    106a:	ff 0f       	add	r31, r31
    106c:	bb 1f       	adc	r27, r27
    106e:	66 1f       	adc	r22, r22
    1070:	77 1f       	adc	r23, r23
    1072:	88 1f       	adc	r24, r24
    1074:	c2 f7       	brpl	.-16     	; 0x1066 <__addsf3x+0x6a>
    1076:	0e c0       	rjmp	.+28     	; 0x1094 <__addsf3x+0x98>
    1078:	ba 0f       	add	r27, r26
    107a:	62 1f       	adc	r22, r18
    107c:	73 1f       	adc	r23, r19
    107e:	84 1f       	adc	r24, r20
    1080:	48 f4       	brcc	.+18     	; 0x1094 <__addsf3x+0x98>
    1082:	87 95       	ror	r24
    1084:	77 95       	ror	r23
    1086:	67 95       	ror	r22
    1088:	b7 95       	ror	r27
    108a:	f7 95       	ror	r31
    108c:	9e 3f       	cpi	r25, 0xFE	; 254
    108e:	08 f0       	brcs	.+2      	; 0x1092 <__addsf3x+0x96>
    1090:	b3 cf       	rjmp	.-154    	; 0xff8 <__addsf3+0x1e>
    1092:	93 95       	inc	r25
    1094:	88 0f       	add	r24, r24
    1096:	08 f0       	brcs	.+2      	; 0x109a <__addsf3x+0x9e>
    1098:	99 27       	eor	r25, r25
    109a:	ee 0f       	add	r30, r30
    109c:	97 95       	ror	r25
    109e:	87 95       	ror	r24
    10a0:	08 95       	ret

000010a2 <__divsf3>:
    10a2:	0c d0       	rcall	.+24     	; 0x10bc <__divsf3x>
    10a4:	e6 c0       	rjmp	.+460    	; 0x1272 <__fp_round>
    10a6:	de d0       	rcall	.+444    	; 0x1264 <__fp_pscB>
    10a8:	40 f0       	brcs	.+16     	; 0x10ba <__divsf3+0x18>
    10aa:	d5 d0       	rcall	.+426    	; 0x1256 <__fp_pscA>
    10ac:	30 f0       	brcs	.+12     	; 0x10ba <__divsf3+0x18>
    10ae:	21 f4       	brne	.+8      	; 0x10b8 <__divsf3+0x16>
    10b0:	5f 3f       	cpi	r21, 0xFF	; 255
    10b2:	19 f0       	breq	.+6      	; 0x10ba <__divsf3+0x18>
    10b4:	c7 c0       	rjmp	.+398    	; 0x1244 <__fp_inf>
    10b6:	51 11       	cpse	r21, r1
    10b8:	10 c1       	rjmp	.+544    	; 0x12da <__fp_szero>
    10ba:	ca c0       	rjmp	.+404    	; 0x1250 <__fp_nan>

000010bc <__divsf3x>:
    10bc:	eb d0       	rcall	.+470    	; 0x1294 <__fp_split3>
    10be:	98 f3       	brcs	.-26     	; 0x10a6 <__divsf3+0x4>

000010c0 <__divsf3_pse>:
    10c0:	99 23       	and	r25, r25
    10c2:	c9 f3       	breq	.-14     	; 0x10b6 <__divsf3+0x14>
    10c4:	55 23       	and	r21, r21
    10c6:	b1 f3       	breq	.-20     	; 0x10b4 <__divsf3+0x12>
    10c8:	95 1b       	sub	r25, r21
    10ca:	55 0b       	sbc	r21, r21
    10cc:	bb 27       	eor	r27, r27
    10ce:	aa 27       	eor	r26, r26
    10d0:	62 17       	cp	r22, r18
    10d2:	73 07       	cpc	r23, r19
    10d4:	84 07       	cpc	r24, r20
    10d6:	38 f0       	brcs	.+14     	; 0x10e6 <__divsf3_pse+0x26>
    10d8:	9f 5f       	subi	r25, 0xFF	; 255
    10da:	5f 4f       	sbci	r21, 0xFF	; 255
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	44 1f       	adc	r20, r20
    10e2:	aa 1f       	adc	r26, r26
    10e4:	a9 f3       	breq	.-22     	; 0x10d0 <__divsf3_pse+0x10>
    10e6:	33 d0       	rcall	.+102    	; 0x114e <__divsf3_pse+0x8e>
    10e8:	0e 2e       	mov	r0, r30
    10ea:	3a f0       	brmi	.+14     	; 0x10fa <__divsf3_pse+0x3a>
    10ec:	e0 e8       	ldi	r30, 0x80	; 128
    10ee:	30 d0       	rcall	.+96     	; 0x1150 <__divsf3_pse+0x90>
    10f0:	91 50       	subi	r25, 0x01	; 1
    10f2:	50 40       	sbci	r21, 0x00	; 0
    10f4:	e6 95       	lsr	r30
    10f6:	00 1c       	adc	r0, r0
    10f8:	ca f7       	brpl	.-14     	; 0x10ec <__divsf3_pse+0x2c>
    10fa:	29 d0       	rcall	.+82     	; 0x114e <__divsf3_pse+0x8e>
    10fc:	fe 2f       	mov	r31, r30
    10fe:	27 d0       	rcall	.+78     	; 0x114e <__divsf3_pse+0x8e>
    1100:	66 0f       	add	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	bb 1f       	adc	r27, r27
    1108:	26 17       	cp	r18, r22
    110a:	37 07       	cpc	r19, r23
    110c:	48 07       	cpc	r20, r24
    110e:	ab 07       	cpc	r26, r27
    1110:	b0 e8       	ldi	r27, 0x80	; 128
    1112:	09 f0       	breq	.+2      	; 0x1116 <__divsf3_pse+0x56>
    1114:	bb 0b       	sbc	r27, r27
    1116:	80 2d       	mov	r24, r0
    1118:	bf 01       	movw	r22, r30
    111a:	ff 27       	eor	r31, r31
    111c:	93 58       	subi	r25, 0x83	; 131
    111e:	5f 4f       	sbci	r21, 0xFF	; 255
    1120:	2a f0       	brmi	.+10     	; 0x112c <__divsf3_pse+0x6c>
    1122:	9e 3f       	cpi	r25, 0xFE	; 254
    1124:	51 05       	cpc	r21, r1
    1126:	68 f0       	brcs	.+26     	; 0x1142 <__divsf3_pse+0x82>
    1128:	8d c0       	rjmp	.+282    	; 0x1244 <__fp_inf>
    112a:	d7 c0       	rjmp	.+430    	; 0x12da <__fp_szero>
    112c:	5f 3f       	cpi	r21, 0xFF	; 255
    112e:	ec f3       	brlt	.-6      	; 0x112a <__divsf3_pse+0x6a>
    1130:	98 3e       	cpi	r25, 0xE8	; 232
    1132:	dc f3       	brlt	.-10     	; 0x112a <__divsf3_pse+0x6a>
    1134:	86 95       	lsr	r24
    1136:	77 95       	ror	r23
    1138:	67 95       	ror	r22
    113a:	b7 95       	ror	r27
    113c:	f7 95       	ror	r31
    113e:	9f 5f       	subi	r25, 0xFF	; 255
    1140:	c9 f7       	brne	.-14     	; 0x1134 <__divsf3_pse+0x74>
    1142:	88 0f       	add	r24, r24
    1144:	91 1d       	adc	r25, r1
    1146:	96 95       	lsr	r25
    1148:	87 95       	ror	r24
    114a:	97 f9       	bld	r25, 7
    114c:	08 95       	ret
    114e:	e1 e0       	ldi	r30, 0x01	; 1
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	bb 1f       	adc	r27, r27
    1158:	62 17       	cp	r22, r18
    115a:	73 07       	cpc	r23, r19
    115c:	84 07       	cpc	r24, r20
    115e:	ba 07       	cpc	r27, r26
    1160:	20 f0       	brcs	.+8      	; 0x116a <__divsf3_pse+0xaa>
    1162:	62 1b       	sub	r22, r18
    1164:	73 0b       	sbc	r23, r19
    1166:	84 0b       	sbc	r24, r20
    1168:	ba 0b       	sbc	r27, r26
    116a:	ee 1f       	adc	r30, r30
    116c:	88 f7       	brcc	.-30     	; 0x1150 <__divsf3_pse+0x90>
    116e:	e0 95       	com	r30
    1170:	08 95       	ret

00001172 <__fixunssfsi>:
    1172:	98 d0       	rcall	.+304    	; 0x12a4 <__fp_splitA>
    1174:	88 f0       	brcs	.+34     	; 0x1198 <__fixunssfsi+0x26>
    1176:	9f 57       	subi	r25, 0x7F	; 127
    1178:	90 f0       	brcs	.+36     	; 0x119e <__fixunssfsi+0x2c>
    117a:	b9 2f       	mov	r27, r25
    117c:	99 27       	eor	r25, r25
    117e:	b7 51       	subi	r27, 0x17	; 23
    1180:	a0 f0       	brcs	.+40     	; 0x11aa <__fixunssfsi+0x38>
    1182:	d1 f0       	breq	.+52     	; 0x11b8 <__fixunssfsi+0x46>
    1184:	66 0f       	add	r22, r22
    1186:	77 1f       	adc	r23, r23
    1188:	88 1f       	adc	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	1a f0       	brmi	.+6      	; 0x1194 <__fixunssfsi+0x22>
    118e:	ba 95       	dec	r27
    1190:	c9 f7       	brne	.-14     	; 0x1184 <__fixunssfsi+0x12>
    1192:	12 c0       	rjmp	.+36     	; 0x11b8 <__fixunssfsi+0x46>
    1194:	b1 30       	cpi	r27, 0x01	; 1
    1196:	81 f0       	breq	.+32     	; 0x11b8 <__fixunssfsi+0x46>
    1198:	9f d0       	rcall	.+318    	; 0x12d8 <__fp_zero>
    119a:	b1 e0       	ldi	r27, 0x01	; 1
    119c:	08 95       	ret
    119e:	9c c0       	rjmp	.+312    	; 0x12d8 <__fp_zero>
    11a0:	67 2f       	mov	r22, r23
    11a2:	78 2f       	mov	r23, r24
    11a4:	88 27       	eor	r24, r24
    11a6:	b8 5f       	subi	r27, 0xF8	; 248
    11a8:	39 f0       	breq	.+14     	; 0x11b8 <__fixunssfsi+0x46>
    11aa:	b9 3f       	cpi	r27, 0xF9	; 249
    11ac:	cc f3       	brlt	.-14     	; 0x11a0 <__fixunssfsi+0x2e>
    11ae:	86 95       	lsr	r24
    11b0:	77 95       	ror	r23
    11b2:	67 95       	ror	r22
    11b4:	b3 95       	inc	r27
    11b6:	d9 f7       	brne	.-10     	; 0x11ae <__fixunssfsi+0x3c>
    11b8:	3e f4       	brtc	.+14     	; 0x11c8 <__fixunssfsi+0x56>
    11ba:	90 95       	com	r25
    11bc:	80 95       	com	r24
    11be:	70 95       	com	r23
    11c0:	61 95       	neg	r22
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	8f 4f       	sbci	r24, 0xFF	; 255
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	08 95       	ret

000011ca <__floatunsisf>:
    11ca:	e8 94       	clt
    11cc:	09 c0       	rjmp	.+18     	; 0x11e0 <__floatsisf+0x12>

000011ce <__floatsisf>:
    11ce:	97 fb       	bst	r25, 7
    11d0:	3e f4       	brtc	.+14     	; 0x11e0 <__floatsisf+0x12>
    11d2:	90 95       	com	r25
    11d4:	80 95       	com	r24
    11d6:	70 95       	com	r23
    11d8:	61 95       	neg	r22
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	8f 4f       	sbci	r24, 0xFF	; 255
    11de:	9f 4f       	sbci	r25, 0xFF	; 255
    11e0:	99 23       	and	r25, r25
    11e2:	a9 f0       	breq	.+42     	; 0x120e <__floatsisf+0x40>
    11e4:	f9 2f       	mov	r31, r25
    11e6:	96 e9       	ldi	r25, 0x96	; 150
    11e8:	bb 27       	eor	r27, r27
    11ea:	93 95       	inc	r25
    11ec:	f6 95       	lsr	r31
    11ee:	87 95       	ror	r24
    11f0:	77 95       	ror	r23
    11f2:	67 95       	ror	r22
    11f4:	b7 95       	ror	r27
    11f6:	f1 11       	cpse	r31, r1
    11f8:	f8 cf       	rjmp	.-16     	; 0x11ea <__floatsisf+0x1c>
    11fa:	fa f4       	brpl	.+62     	; 0x123a <__floatsisf+0x6c>
    11fc:	bb 0f       	add	r27, r27
    11fe:	11 f4       	brne	.+4      	; 0x1204 <__floatsisf+0x36>
    1200:	60 ff       	sbrs	r22, 0
    1202:	1b c0       	rjmp	.+54     	; 0x123a <__floatsisf+0x6c>
    1204:	6f 5f       	subi	r22, 0xFF	; 255
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	8f 4f       	sbci	r24, 0xFF	; 255
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	16 c0       	rjmp	.+44     	; 0x123a <__floatsisf+0x6c>
    120e:	88 23       	and	r24, r24
    1210:	11 f0       	breq	.+4      	; 0x1216 <__floatsisf+0x48>
    1212:	96 e9       	ldi	r25, 0x96	; 150
    1214:	11 c0       	rjmp	.+34     	; 0x1238 <__floatsisf+0x6a>
    1216:	77 23       	and	r23, r23
    1218:	21 f0       	breq	.+8      	; 0x1222 <__floatsisf+0x54>
    121a:	9e e8       	ldi	r25, 0x8E	; 142
    121c:	87 2f       	mov	r24, r23
    121e:	76 2f       	mov	r23, r22
    1220:	05 c0       	rjmp	.+10     	; 0x122c <__floatsisf+0x5e>
    1222:	66 23       	and	r22, r22
    1224:	71 f0       	breq	.+28     	; 0x1242 <__floatsisf+0x74>
    1226:	96 e8       	ldi	r25, 0x86	; 134
    1228:	86 2f       	mov	r24, r22
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	2a f0       	brmi	.+10     	; 0x123a <__floatsisf+0x6c>
    1230:	9a 95       	dec	r25
    1232:	66 0f       	add	r22, r22
    1234:	77 1f       	adc	r23, r23
    1236:	88 1f       	adc	r24, r24
    1238:	da f7       	brpl	.-10     	; 0x1230 <__floatsisf+0x62>
    123a:	88 0f       	add	r24, r24
    123c:	96 95       	lsr	r25
    123e:	87 95       	ror	r24
    1240:	97 f9       	bld	r25, 7
    1242:	08 95       	ret

00001244 <__fp_inf>:
    1244:	97 f9       	bld	r25, 7
    1246:	9f 67       	ori	r25, 0x7F	; 127
    1248:	80 e8       	ldi	r24, 0x80	; 128
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	08 95       	ret

00001250 <__fp_nan>:
    1250:	9f ef       	ldi	r25, 0xFF	; 255
    1252:	80 ec       	ldi	r24, 0xC0	; 192
    1254:	08 95       	ret

00001256 <__fp_pscA>:
    1256:	00 24       	eor	r0, r0
    1258:	0a 94       	dec	r0
    125a:	16 16       	cp	r1, r22
    125c:	17 06       	cpc	r1, r23
    125e:	18 06       	cpc	r1, r24
    1260:	09 06       	cpc	r0, r25
    1262:	08 95       	ret

00001264 <__fp_pscB>:
    1264:	00 24       	eor	r0, r0
    1266:	0a 94       	dec	r0
    1268:	12 16       	cp	r1, r18
    126a:	13 06       	cpc	r1, r19
    126c:	14 06       	cpc	r1, r20
    126e:	05 06       	cpc	r0, r21
    1270:	08 95       	ret

00001272 <__fp_round>:
    1272:	09 2e       	mov	r0, r25
    1274:	03 94       	inc	r0
    1276:	00 0c       	add	r0, r0
    1278:	11 f4       	brne	.+4      	; 0x127e <__fp_round+0xc>
    127a:	88 23       	and	r24, r24
    127c:	52 f0       	brmi	.+20     	; 0x1292 <__fp_round+0x20>
    127e:	bb 0f       	add	r27, r27
    1280:	40 f4       	brcc	.+16     	; 0x1292 <__fp_round+0x20>
    1282:	bf 2b       	or	r27, r31
    1284:	11 f4       	brne	.+4      	; 0x128a <__fp_round+0x18>
    1286:	60 ff       	sbrs	r22, 0
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <__fp_round+0x20>
    128a:	6f 5f       	subi	r22, 0xFF	; 255
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	8f 4f       	sbci	r24, 0xFF	; 255
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	08 95       	ret

00001294 <__fp_split3>:
    1294:	57 fd       	sbrc	r21, 7
    1296:	90 58       	subi	r25, 0x80	; 128
    1298:	44 0f       	add	r20, r20
    129a:	55 1f       	adc	r21, r21
    129c:	59 f0       	breq	.+22     	; 0x12b4 <__fp_splitA+0x10>
    129e:	5f 3f       	cpi	r21, 0xFF	; 255
    12a0:	71 f0       	breq	.+28     	; 0x12be <__fp_splitA+0x1a>
    12a2:	47 95       	ror	r20

000012a4 <__fp_splitA>:
    12a4:	88 0f       	add	r24, r24
    12a6:	97 fb       	bst	r25, 7
    12a8:	99 1f       	adc	r25, r25
    12aa:	61 f0       	breq	.+24     	; 0x12c4 <__fp_splitA+0x20>
    12ac:	9f 3f       	cpi	r25, 0xFF	; 255
    12ae:	79 f0       	breq	.+30     	; 0x12ce <__fp_splitA+0x2a>
    12b0:	87 95       	ror	r24
    12b2:	08 95       	ret
    12b4:	12 16       	cp	r1, r18
    12b6:	13 06       	cpc	r1, r19
    12b8:	14 06       	cpc	r1, r20
    12ba:	55 1f       	adc	r21, r21
    12bc:	f2 cf       	rjmp	.-28     	; 0x12a2 <__fp_split3+0xe>
    12be:	46 95       	lsr	r20
    12c0:	f1 df       	rcall	.-30     	; 0x12a4 <__fp_splitA>
    12c2:	08 c0       	rjmp	.+16     	; 0x12d4 <__fp_splitA+0x30>
    12c4:	16 16       	cp	r1, r22
    12c6:	17 06       	cpc	r1, r23
    12c8:	18 06       	cpc	r1, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	f1 cf       	rjmp	.-30     	; 0x12b0 <__fp_splitA+0xc>
    12ce:	86 95       	lsr	r24
    12d0:	71 05       	cpc	r23, r1
    12d2:	61 05       	cpc	r22, r1
    12d4:	08 94       	sec
    12d6:	08 95       	ret

000012d8 <__fp_zero>:
    12d8:	e8 94       	clt

000012da <__fp_szero>:
    12da:	bb 27       	eor	r27, r27
    12dc:	66 27       	eor	r22, r22
    12de:	77 27       	eor	r23, r23
    12e0:	cb 01       	movw	r24, r22
    12e2:	97 f9       	bld	r25, 7
    12e4:	08 95       	ret

000012e6 <__mulsf3>:
    12e6:	0b d0       	rcall	.+22     	; 0x12fe <__mulsf3x>
    12e8:	c4 cf       	rjmp	.-120    	; 0x1272 <__fp_round>
    12ea:	b5 df       	rcall	.-150    	; 0x1256 <__fp_pscA>
    12ec:	28 f0       	brcs	.+10     	; 0x12f8 <__mulsf3+0x12>
    12ee:	ba df       	rcall	.-140    	; 0x1264 <__fp_pscB>
    12f0:	18 f0       	brcs	.+6      	; 0x12f8 <__mulsf3+0x12>
    12f2:	95 23       	and	r25, r21
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <__mulsf3+0x12>
    12f6:	a6 cf       	rjmp	.-180    	; 0x1244 <__fp_inf>
    12f8:	ab cf       	rjmp	.-170    	; 0x1250 <__fp_nan>
    12fa:	11 24       	eor	r1, r1
    12fc:	ee cf       	rjmp	.-36     	; 0x12da <__fp_szero>

000012fe <__mulsf3x>:
    12fe:	ca df       	rcall	.-108    	; 0x1294 <__fp_split3>
    1300:	a0 f3       	brcs	.-24     	; 0x12ea <__mulsf3+0x4>

00001302 <__mulsf3_pse>:
    1302:	95 9f       	mul	r25, r21
    1304:	d1 f3       	breq	.-12     	; 0x12fa <__mulsf3+0x14>
    1306:	95 0f       	add	r25, r21
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	55 1f       	adc	r21, r21
    130c:	62 9f       	mul	r22, r18
    130e:	f0 01       	movw	r30, r0
    1310:	72 9f       	mul	r23, r18
    1312:	bb 27       	eor	r27, r27
    1314:	f0 0d       	add	r31, r0
    1316:	b1 1d       	adc	r27, r1
    1318:	63 9f       	mul	r22, r19
    131a:	aa 27       	eor	r26, r26
    131c:	f0 0d       	add	r31, r0
    131e:	b1 1d       	adc	r27, r1
    1320:	aa 1f       	adc	r26, r26
    1322:	64 9f       	mul	r22, r20
    1324:	66 27       	eor	r22, r22
    1326:	b0 0d       	add	r27, r0
    1328:	a1 1d       	adc	r26, r1
    132a:	66 1f       	adc	r22, r22
    132c:	82 9f       	mul	r24, r18
    132e:	22 27       	eor	r18, r18
    1330:	b0 0d       	add	r27, r0
    1332:	a1 1d       	adc	r26, r1
    1334:	62 1f       	adc	r22, r18
    1336:	73 9f       	mul	r23, r19
    1338:	b0 0d       	add	r27, r0
    133a:	a1 1d       	adc	r26, r1
    133c:	62 1f       	adc	r22, r18
    133e:	83 9f       	mul	r24, r19
    1340:	a0 0d       	add	r26, r0
    1342:	61 1d       	adc	r22, r1
    1344:	22 1f       	adc	r18, r18
    1346:	74 9f       	mul	r23, r20
    1348:	33 27       	eor	r19, r19
    134a:	a0 0d       	add	r26, r0
    134c:	61 1d       	adc	r22, r1
    134e:	23 1f       	adc	r18, r19
    1350:	84 9f       	mul	r24, r20
    1352:	60 0d       	add	r22, r0
    1354:	21 1d       	adc	r18, r1
    1356:	82 2f       	mov	r24, r18
    1358:	76 2f       	mov	r23, r22
    135a:	6a 2f       	mov	r22, r26
    135c:	11 24       	eor	r1, r1
    135e:	9f 57       	subi	r25, 0x7F	; 127
    1360:	50 40       	sbci	r21, 0x00	; 0
    1362:	8a f0       	brmi	.+34     	; 0x1386 <__mulsf3_pse+0x84>
    1364:	e1 f0       	breq	.+56     	; 0x139e <__mulsf3_pse+0x9c>
    1366:	88 23       	and	r24, r24
    1368:	4a f0       	brmi	.+18     	; 0x137c <__mulsf3_pse+0x7a>
    136a:	ee 0f       	add	r30, r30
    136c:	ff 1f       	adc	r31, r31
    136e:	bb 1f       	adc	r27, r27
    1370:	66 1f       	adc	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	91 50       	subi	r25, 0x01	; 1
    1378:	50 40       	sbci	r21, 0x00	; 0
    137a:	a9 f7       	brne	.-22     	; 0x1366 <__mulsf3_pse+0x64>
    137c:	9e 3f       	cpi	r25, 0xFE	; 254
    137e:	51 05       	cpc	r21, r1
    1380:	70 f0       	brcs	.+28     	; 0x139e <__mulsf3_pse+0x9c>
    1382:	60 cf       	rjmp	.-320    	; 0x1244 <__fp_inf>
    1384:	aa cf       	rjmp	.-172    	; 0x12da <__fp_szero>
    1386:	5f 3f       	cpi	r21, 0xFF	; 255
    1388:	ec f3       	brlt	.-6      	; 0x1384 <__mulsf3_pse+0x82>
    138a:	98 3e       	cpi	r25, 0xE8	; 232
    138c:	dc f3       	brlt	.-10     	; 0x1384 <__mulsf3_pse+0x82>
    138e:	86 95       	lsr	r24
    1390:	77 95       	ror	r23
    1392:	67 95       	ror	r22
    1394:	b7 95       	ror	r27
    1396:	f7 95       	ror	r31
    1398:	e7 95       	ror	r30
    139a:	9f 5f       	subi	r25, 0xFF	; 255
    139c:	c1 f7       	brne	.-16     	; 0x138e <__mulsf3_pse+0x8c>
    139e:	fe 2b       	or	r31, r30
    13a0:	88 0f       	add	r24, r24
    13a2:	91 1d       	adc	r25, r1
    13a4:	96 95       	lsr	r25
    13a6:	87 95       	ror	r24
    13a8:	97 f9       	bld	r25, 7
    13aa:	08 95       	ret

000013ac <round>:
    13ac:	7b df       	rcall	.-266    	; 0x12a4 <__fp_splitA>
    13ae:	e0 f0       	brcs	.+56     	; 0x13e8 <round+0x3c>
    13b0:	9e 37       	cpi	r25, 0x7E	; 126
    13b2:	d8 f0       	brcs	.+54     	; 0x13ea <round+0x3e>
    13b4:	96 39       	cpi	r25, 0x96	; 150
    13b6:	b8 f4       	brcc	.+46     	; 0x13e6 <round+0x3a>
    13b8:	9e 38       	cpi	r25, 0x8E	; 142
    13ba:	48 f4       	brcc	.+18     	; 0x13ce <round+0x22>
    13bc:	67 2f       	mov	r22, r23
    13be:	78 2f       	mov	r23, r24
    13c0:	88 27       	eor	r24, r24
    13c2:	98 5f       	subi	r25, 0xF8	; 248
    13c4:	f9 cf       	rjmp	.-14     	; 0x13b8 <round+0xc>
    13c6:	86 95       	lsr	r24
    13c8:	77 95       	ror	r23
    13ca:	67 95       	ror	r22
    13cc:	93 95       	inc	r25
    13ce:	95 39       	cpi	r25, 0x95	; 149
    13d0:	d0 f3       	brcs	.-12     	; 0x13c6 <round+0x1a>
    13d2:	b6 2f       	mov	r27, r22
    13d4:	b1 70       	andi	r27, 0x01	; 1
    13d6:	6b 0f       	add	r22, r27
    13d8:	71 1d       	adc	r23, r1
    13da:	81 1d       	adc	r24, r1
    13dc:	20 f4       	brcc	.+8      	; 0x13e6 <round+0x3a>
    13de:	87 95       	ror	r24
    13e0:	77 95       	ror	r23
    13e2:	67 95       	ror	r22
    13e4:	93 95       	inc	r25
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <__fp_mintl>
    13e8:	1c c0       	rjmp	.+56     	; 0x1422 <__fp_mpack>
    13ea:	77 cf       	rjmp	.-274    	; 0x12da <__fp_szero>

000013ec <__fp_mintl>:
    13ec:	88 23       	and	r24, r24
    13ee:	71 f4       	brne	.+28     	; 0x140c <__fp_mintl+0x20>
    13f0:	77 23       	and	r23, r23
    13f2:	21 f0       	breq	.+8      	; 0x13fc <__fp_mintl+0x10>
    13f4:	98 50       	subi	r25, 0x08	; 8
    13f6:	87 2b       	or	r24, r23
    13f8:	76 2f       	mov	r23, r22
    13fa:	07 c0       	rjmp	.+14     	; 0x140a <__fp_mintl+0x1e>
    13fc:	66 23       	and	r22, r22
    13fe:	11 f4       	brne	.+4      	; 0x1404 <__fp_mintl+0x18>
    1400:	99 27       	eor	r25, r25
    1402:	0d c0       	rjmp	.+26     	; 0x141e <__fp_mintl+0x32>
    1404:	90 51       	subi	r25, 0x10	; 16
    1406:	86 2b       	or	r24, r22
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	2a f0       	brmi	.+10     	; 0x1418 <__fp_mintl+0x2c>
    140e:	9a 95       	dec	r25
    1410:	66 0f       	add	r22, r22
    1412:	77 1f       	adc	r23, r23
    1414:	88 1f       	adc	r24, r24
    1416:	da f7       	brpl	.-10     	; 0x140e <__fp_mintl+0x22>
    1418:	88 0f       	add	r24, r24
    141a:	96 95       	lsr	r25
    141c:	87 95       	ror	r24
    141e:	97 f9       	bld	r25, 7
    1420:	08 95       	ret

00001422 <__fp_mpack>:
    1422:	9f 3f       	cpi	r25, 0xFF	; 255
    1424:	31 f0       	breq	.+12     	; 0x1432 <__fp_mpack_finite+0xc>

00001426 <__fp_mpack_finite>:
    1426:	91 50       	subi	r25, 0x01	; 1
    1428:	20 f4       	brcc	.+8      	; 0x1432 <__fp_mpack_finite+0xc>
    142a:	87 95       	ror	r24
    142c:	77 95       	ror	r23
    142e:	67 95       	ror	r22
    1430:	b7 95       	ror	r27
    1432:	88 0f       	add	r24, r24
    1434:	91 1d       	adc	r25, r1
    1436:	96 95       	lsr	r25
    1438:	87 95       	ror	r24
    143a:	97 f9       	bld	r25, 7
    143c:	08 95       	ret

0000143e <__umulhisi3>:
    143e:	a2 9f       	mul	r26, r18
    1440:	b0 01       	movw	r22, r0
    1442:	b3 9f       	mul	r27, r19
    1444:	c0 01       	movw	r24, r0
    1446:	a3 9f       	mul	r26, r19
    1448:	01 d0       	rcall	.+2      	; 0x144c <__umulhisi3+0xe>
    144a:	b2 9f       	mul	r27, r18
    144c:	70 0d       	add	r23, r0
    144e:	81 1d       	adc	r24, r1
    1450:	11 24       	eor	r1, r1
    1452:	91 1d       	adc	r25, r1
    1454:	08 95       	ret

00001456 <sprintf>:
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	2e 97       	sbiw	r28, 0x0e	; 14
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0e 89       	ldd	r16, Y+22	; 0x16
    146a:	1f 89       	ldd	r17, Y+23	; 0x17
    146c:	86 e0       	ldi	r24, 0x06	; 6
    146e:	8c 83       	std	Y+4, r24	; 0x04
    1470:	09 83       	std	Y+1, r16	; 0x01
    1472:	1a 83       	std	Y+2, r17	; 0x02
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	9f e7       	ldi	r25, 0x7F	; 127
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	9e 83       	std	Y+6, r25	; 0x06
    147c:	ce 01       	movw	r24, r28
    147e:	4a 96       	adiw	r24, 0x1a	; 26
    1480:	ac 01       	movw	r20, r24
    1482:	68 8d       	ldd	r22, Y+24	; 0x18
    1484:	79 8d       	ldd	r23, Y+25	; 0x19
    1486:	ce 01       	movw	r24, r28
    1488:	01 96       	adiw	r24, 0x01	; 1
    148a:	0d d0       	rcall	.+26     	; 0x14a6 <vfprintf>
    148c:	ef 81       	ldd	r30, Y+7	; 0x07
    148e:	f8 85       	ldd	r31, Y+8	; 0x08
    1490:	e0 0f       	add	r30, r16
    1492:	f1 1f       	adc	r31, r17
    1494:	10 82       	st	Z, r1
    1496:	2e 96       	adiw	r28, 0x0e	; 14
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	08 95       	ret

000014a6 <vfprintf>:
    14a6:	2f 92       	push	r2
    14a8:	3f 92       	push	r3
    14aa:	4f 92       	push	r4
    14ac:	5f 92       	push	r5
    14ae:	6f 92       	push	r6
    14b0:	7f 92       	push	r7
    14b2:	8f 92       	push	r8
    14b4:	9f 92       	push	r9
    14b6:	af 92       	push	r10
    14b8:	bf 92       	push	r11
    14ba:	cf 92       	push	r12
    14bc:	df 92       	push	r13
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	2c 97       	sbiw	r28, 0x0c	; 12
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	7c 01       	movw	r14, r24
    14d6:	6b 01       	movw	r12, r22
    14d8:	8a 01       	movw	r16, r20
    14da:	fc 01       	movw	r30, r24
    14dc:	16 82       	std	Z+6, r1	; 0x06
    14de:	17 82       	std	Z+7, r1	; 0x07
    14e0:	83 81       	ldd	r24, Z+3	; 0x03
    14e2:	81 ff       	sbrs	r24, 1
    14e4:	b9 c1       	rjmp	.+882    	; 0x1858 <vfprintf+0x3b2>
    14e6:	88 24       	eor	r8, r8
    14e8:	83 94       	inc	r8
    14ea:	91 2c       	mov	r9, r1
    14ec:	8c 0e       	add	r8, r28
    14ee:	9d 1e       	adc	r9, r29
    14f0:	f7 01       	movw	r30, r14
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	f6 01       	movw	r30, r12
    14f6:	93 fd       	sbrc	r25, 3
    14f8:	85 91       	lpm	r24, Z+
    14fa:	93 ff       	sbrs	r25, 3
    14fc:	81 91       	ld	r24, Z+
    14fe:	6f 01       	movw	r12, r30
    1500:	88 23       	and	r24, r24
    1502:	09 f4       	brne	.+2      	; 0x1506 <vfprintf+0x60>
    1504:	a5 c1       	rjmp	.+842    	; 0x1850 <vfprintf+0x3aa>
    1506:	85 32       	cpi	r24, 0x25	; 37
    1508:	39 f4       	brne	.+14     	; 0x1518 <vfprintf+0x72>
    150a:	93 fd       	sbrc	r25, 3
    150c:	85 91       	lpm	r24, Z+
    150e:	93 ff       	sbrs	r25, 3
    1510:	81 91       	ld	r24, Z+
    1512:	6f 01       	movw	r12, r30
    1514:	85 32       	cpi	r24, 0x25	; 37
    1516:	21 f4       	brne	.+8      	; 0x1520 <vfprintf+0x7a>
    1518:	b7 01       	movw	r22, r14
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	cc d1       	rcall	.+920    	; 0x18b6 <fputc>
    151e:	e8 cf       	rjmp	.-48     	; 0x14f0 <vfprintf+0x4a>
    1520:	51 2c       	mov	r5, r1
    1522:	31 2c       	mov	r3, r1
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	20 32       	cpi	r18, 0x20	; 32
    1528:	a8 f4       	brcc	.+42     	; 0x1554 <vfprintf+0xae>
    152a:	8b 32       	cpi	r24, 0x2B	; 43
    152c:	61 f0       	breq	.+24     	; 0x1546 <vfprintf+0xa0>
    152e:	28 f4       	brcc	.+10     	; 0x153a <vfprintf+0x94>
    1530:	80 32       	cpi	r24, 0x20	; 32
    1532:	51 f0       	breq	.+20     	; 0x1548 <vfprintf+0xa2>
    1534:	83 32       	cpi	r24, 0x23	; 35
    1536:	71 f4       	brne	.+28     	; 0x1554 <vfprintf+0xae>
    1538:	0b c0       	rjmp	.+22     	; 0x1550 <vfprintf+0xaa>
    153a:	8d 32       	cpi	r24, 0x2D	; 45
    153c:	39 f0       	breq	.+14     	; 0x154c <vfprintf+0xa6>
    153e:	80 33       	cpi	r24, 0x30	; 48
    1540:	49 f4       	brne	.+18     	; 0x1554 <vfprintf+0xae>
    1542:	21 60       	ori	r18, 0x01	; 1
    1544:	28 c0       	rjmp	.+80     	; 0x1596 <vfprintf+0xf0>
    1546:	22 60       	ori	r18, 0x02	; 2
    1548:	24 60       	ori	r18, 0x04	; 4
    154a:	25 c0       	rjmp	.+74     	; 0x1596 <vfprintf+0xf0>
    154c:	28 60       	ori	r18, 0x08	; 8
    154e:	23 c0       	rjmp	.+70     	; 0x1596 <vfprintf+0xf0>
    1550:	20 61       	ori	r18, 0x10	; 16
    1552:	21 c0       	rjmp	.+66     	; 0x1596 <vfprintf+0xf0>
    1554:	27 fd       	sbrc	r18, 7
    1556:	27 c0       	rjmp	.+78     	; 0x15a6 <vfprintf+0x100>
    1558:	38 2f       	mov	r19, r24
    155a:	30 53       	subi	r19, 0x30	; 48
    155c:	3a 30       	cpi	r19, 0x0A	; 10
    155e:	78 f4       	brcc	.+30     	; 0x157e <vfprintf+0xd8>
    1560:	26 ff       	sbrs	r18, 6
    1562:	06 c0       	rjmp	.+12     	; 0x1570 <vfprintf+0xca>
    1564:	fa e0       	ldi	r31, 0x0A	; 10
    1566:	5f 9e       	mul	r5, r31
    1568:	30 0d       	add	r19, r0
    156a:	11 24       	eor	r1, r1
    156c:	53 2e       	mov	r5, r19
    156e:	13 c0       	rjmp	.+38     	; 0x1596 <vfprintf+0xf0>
    1570:	8a e0       	ldi	r24, 0x0A	; 10
    1572:	38 9e       	mul	r3, r24
    1574:	30 0d       	add	r19, r0
    1576:	11 24       	eor	r1, r1
    1578:	33 2e       	mov	r3, r19
    157a:	20 62       	ori	r18, 0x20	; 32
    157c:	0c c0       	rjmp	.+24     	; 0x1596 <vfprintf+0xf0>
    157e:	8e 32       	cpi	r24, 0x2E	; 46
    1580:	21 f4       	brne	.+8      	; 0x158a <vfprintf+0xe4>
    1582:	26 fd       	sbrc	r18, 6
    1584:	65 c1       	rjmp	.+714    	; 0x1850 <vfprintf+0x3aa>
    1586:	20 64       	ori	r18, 0x40	; 64
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <vfprintf+0xf0>
    158a:	8c 36       	cpi	r24, 0x6C	; 108
    158c:	11 f4       	brne	.+4      	; 0x1592 <vfprintf+0xec>
    158e:	20 68       	ori	r18, 0x80	; 128
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <vfprintf+0xf0>
    1592:	88 36       	cpi	r24, 0x68	; 104
    1594:	41 f4       	brne	.+16     	; 0x15a6 <vfprintf+0x100>
    1596:	f6 01       	movw	r30, r12
    1598:	93 fd       	sbrc	r25, 3
    159a:	85 91       	lpm	r24, Z+
    159c:	93 ff       	sbrs	r25, 3
    159e:	81 91       	ld	r24, Z+
    15a0:	6f 01       	movw	r12, r30
    15a2:	81 11       	cpse	r24, r1
    15a4:	c0 cf       	rjmp	.-128    	; 0x1526 <vfprintf+0x80>
    15a6:	98 2f       	mov	r25, r24
    15a8:	95 54       	subi	r25, 0x45	; 69
    15aa:	93 30       	cpi	r25, 0x03	; 3
    15ac:	18 f0       	brcs	.+6      	; 0x15b4 <vfprintf+0x10e>
    15ae:	90 52       	subi	r25, 0x20	; 32
    15b0:	93 30       	cpi	r25, 0x03	; 3
    15b2:	28 f4       	brcc	.+10     	; 0x15be <vfprintf+0x118>
    15b4:	0c 5f       	subi	r16, 0xFC	; 252
    15b6:	1f 4f       	sbci	r17, 0xFF	; 255
    15b8:	ff e3       	ldi	r31, 0x3F	; 63
    15ba:	f9 83       	std	Y+1, r31	; 0x01
    15bc:	0d c0       	rjmp	.+26     	; 0x15d8 <vfprintf+0x132>
    15be:	83 36       	cpi	r24, 0x63	; 99
    15c0:	31 f0       	breq	.+12     	; 0x15ce <vfprintf+0x128>
    15c2:	83 37       	cpi	r24, 0x73	; 115
    15c4:	71 f0       	breq	.+28     	; 0x15e2 <vfprintf+0x13c>
    15c6:	83 35       	cpi	r24, 0x53	; 83
    15c8:	09 f0       	breq	.+2      	; 0x15cc <vfprintf+0x126>
    15ca:	5a c0       	rjmp	.+180    	; 0x1680 <vfprintf+0x1da>
    15cc:	22 c0       	rjmp	.+68     	; 0x1612 <vfprintf+0x16c>
    15ce:	f8 01       	movw	r30, r16
    15d0:	80 81       	ld	r24, Z
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	0e 5f       	subi	r16, 0xFE	; 254
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	44 24       	eor	r4, r4
    15da:	43 94       	inc	r4
    15dc:	51 2c       	mov	r5, r1
    15de:	54 01       	movw	r10, r8
    15e0:	14 c0       	rjmp	.+40     	; 0x160a <vfprintf+0x164>
    15e2:	38 01       	movw	r6, r16
    15e4:	f2 e0       	ldi	r31, 0x02	; 2
    15e6:	6f 0e       	add	r6, r31
    15e8:	71 1c       	adc	r7, r1
    15ea:	f8 01       	movw	r30, r16
    15ec:	a0 80       	ld	r10, Z
    15ee:	b1 80       	ldd	r11, Z+1	; 0x01
    15f0:	26 ff       	sbrs	r18, 6
    15f2:	03 c0       	rjmp	.+6      	; 0x15fa <vfprintf+0x154>
    15f4:	65 2d       	mov	r22, r5
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <vfprintf+0x158>
    15fa:	6f ef       	ldi	r22, 0xFF	; 255
    15fc:	7f ef       	ldi	r23, 0xFF	; 255
    15fe:	c5 01       	movw	r24, r10
    1600:	2c 87       	std	Y+12, r18	; 0x0c
    1602:	4e d1       	rcall	.+668    	; 0x18a0 <strnlen>
    1604:	2c 01       	movw	r4, r24
    1606:	83 01       	movw	r16, r6
    1608:	2c 85       	ldd	r18, Y+12	; 0x0c
    160a:	6f e7       	ldi	r22, 0x7F	; 127
    160c:	26 2e       	mov	r2, r22
    160e:	22 22       	and	r2, r18
    1610:	17 c0       	rjmp	.+46     	; 0x1640 <vfprintf+0x19a>
    1612:	38 01       	movw	r6, r16
    1614:	f2 e0       	ldi	r31, 0x02	; 2
    1616:	6f 0e       	add	r6, r31
    1618:	71 1c       	adc	r7, r1
    161a:	f8 01       	movw	r30, r16
    161c:	a0 80       	ld	r10, Z
    161e:	b1 80       	ldd	r11, Z+1	; 0x01
    1620:	26 ff       	sbrs	r18, 6
    1622:	03 c0       	rjmp	.+6      	; 0x162a <vfprintf+0x184>
    1624:	65 2d       	mov	r22, r5
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <vfprintf+0x188>
    162a:	6f ef       	ldi	r22, 0xFF	; 255
    162c:	7f ef       	ldi	r23, 0xFF	; 255
    162e:	c5 01       	movw	r24, r10
    1630:	2c 87       	std	Y+12, r18	; 0x0c
    1632:	2b d1       	rcall	.+598    	; 0x188a <strnlen_P>
    1634:	2c 01       	movw	r4, r24
    1636:	2c 85       	ldd	r18, Y+12	; 0x0c
    1638:	50 e8       	ldi	r21, 0x80	; 128
    163a:	25 2e       	mov	r2, r21
    163c:	22 2a       	or	r2, r18
    163e:	83 01       	movw	r16, r6
    1640:	23 fc       	sbrc	r2, 3
    1642:	1a c0       	rjmp	.+52     	; 0x1678 <vfprintf+0x1d2>
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <vfprintf+0x1aa>
    1646:	b7 01       	movw	r22, r14
    1648:	80 e2       	ldi	r24, 0x20	; 32
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	34 d1       	rcall	.+616    	; 0x18b6 <fputc>
    164e:	3a 94       	dec	r3
    1650:	83 2d       	mov	r24, r3
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	48 16       	cp	r4, r24
    1656:	59 06       	cpc	r5, r25
    1658:	b0 f3       	brcs	.-20     	; 0x1646 <vfprintf+0x1a0>
    165a:	0e c0       	rjmp	.+28     	; 0x1678 <vfprintf+0x1d2>
    165c:	f5 01       	movw	r30, r10
    165e:	27 fc       	sbrc	r2, 7
    1660:	85 91       	lpm	r24, Z+
    1662:	27 fe       	sbrs	r2, 7
    1664:	81 91       	ld	r24, Z+
    1666:	5f 01       	movw	r10, r30
    1668:	b7 01       	movw	r22, r14
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	24 d1       	rcall	.+584    	; 0x18b6 <fputc>
    166e:	31 10       	cpse	r3, r1
    1670:	3a 94       	dec	r3
    1672:	f1 e0       	ldi	r31, 0x01	; 1
    1674:	4f 1a       	sub	r4, r31
    1676:	51 08       	sbc	r5, r1
    1678:	41 14       	cp	r4, r1
    167a:	51 04       	cpc	r5, r1
    167c:	79 f7       	brne	.-34     	; 0x165c <vfprintf+0x1b6>
    167e:	e5 c0       	rjmp	.+458    	; 0x184a <vfprintf+0x3a4>
    1680:	84 36       	cpi	r24, 0x64	; 100
    1682:	11 f0       	breq	.+4      	; 0x1688 <vfprintf+0x1e2>
    1684:	89 36       	cpi	r24, 0x69	; 105
    1686:	39 f5       	brne	.+78     	; 0x16d6 <vfprintf+0x230>
    1688:	f8 01       	movw	r30, r16
    168a:	27 ff       	sbrs	r18, 7
    168c:	07 c0       	rjmp	.+14     	; 0x169c <vfprintf+0x1f6>
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	0c 5f       	subi	r16, 0xFC	; 252
    1698:	1f 4f       	sbci	r17, 0xFF	; 255
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <vfprintf+0x206>
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	88 27       	eor	r24, r24
    16a2:	77 fd       	sbrc	r23, 7
    16a4:	80 95       	com	r24
    16a6:	98 2f       	mov	r25, r24
    16a8:	0e 5f       	subi	r16, 0xFE	; 254
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	4f e6       	ldi	r20, 0x6F	; 111
    16ae:	b4 2e       	mov	r11, r20
    16b0:	b2 22       	and	r11, r18
    16b2:	97 ff       	sbrs	r25, 7
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <vfprintf+0x222>
    16b6:	90 95       	com	r25
    16b8:	80 95       	com	r24
    16ba:	70 95       	com	r23
    16bc:	61 95       	neg	r22
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	8f 4f       	sbci	r24, 0xFF	; 255
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	f0 e8       	ldi	r31, 0x80	; 128
    16c6:	bf 2a       	or	r11, r31
    16c8:	2a e0       	ldi	r18, 0x0A	; 10
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	a4 01       	movw	r20, r8
    16ce:	1f d1       	rcall	.+574    	; 0x190e <__ultoa_invert>
    16d0:	a8 2e       	mov	r10, r24
    16d2:	a8 18       	sub	r10, r8
    16d4:	42 c0       	rjmp	.+132    	; 0x175a <vfprintf+0x2b4>
    16d6:	85 37       	cpi	r24, 0x75	; 117
    16d8:	31 f4       	brne	.+12     	; 0x16e6 <vfprintf+0x240>
    16da:	3f ee       	ldi	r19, 0xEF	; 239
    16dc:	b3 2e       	mov	r11, r19
    16de:	b2 22       	and	r11, r18
    16e0:	2a e0       	ldi	r18, 0x0A	; 10
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	24 c0       	rjmp	.+72     	; 0x172e <vfprintf+0x288>
    16e6:	99 ef       	ldi	r25, 0xF9	; 249
    16e8:	b9 2e       	mov	r11, r25
    16ea:	b2 22       	and	r11, r18
    16ec:	8f 36       	cpi	r24, 0x6F	; 111
    16ee:	b9 f0       	breq	.+46     	; 0x171e <vfprintf+0x278>
    16f0:	20 f4       	brcc	.+8      	; 0x16fa <vfprintf+0x254>
    16f2:	88 35       	cpi	r24, 0x58	; 88
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <vfprintf+0x252>
    16f6:	ac c0       	rjmp	.+344    	; 0x1850 <vfprintf+0x3aa>
    16f8:	0d c0       	rjmp	.+26     	; 0x1714 <vfprintf+0x26e>
    16fa:	80 37       	cpi	r24, 0x70	; 112
    16fc:	21 f0       	breq	.+8      	; 0x1706 <vfprintf+0x260>
    16fe:	88 37       	cpi	r24, 0x78	; 120
    1700:	09 f0       	breq	.+2      	; 0x1704 <vfprintf+0x25e>
    1702:	a6 c0       	rjmp	.+332    	; 0x1850 <vfprintf+0x3aa>
    1704:	02 c0       	rjmp	.+4      	; 0x170a <vfprintf+0x264>
    1706:	20 e1       	ldi	r18, 0x10	; 16
    1708:	b2 2a       	or	r11, r18
    170a:	b4 fe       	sbrs	r11, 4
    170c:	0b c0       	rjmp	.+22     	; 0x1724 <vfprintf+0x27e>
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	b8 2a       	or	r11, r24
    1712:	08 c0       	rjmp	.+16     	; 0x1724 <vfprintf+0x27e>
    1714:	24 ff       	sbrs	r18, 4
    1716:	09 c0       	rjmp	.+18     	; 0x172a <vfprintf+0x284>
    1718:	e6 e0       	ldi	r30, 0x06	; 6
    171a:	be 2a       	or	r11, r30
    171c:	06 c0       	rjmp	.+12     	; 0x172a <vfprintf+0x284>
    171e:	28 e0       	ldi	r18, 0x08	; 8
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	05 c0       	rjmp	.+10     	; 0x172e <vfprintf+0x288>
    1724:	20 e1       	ldi	r18, 0x10	; 16
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	02 c0       	rjmp	.+4      	; 0x172e <vfprintf+0x288>
    172a:	20 e1       	ldi	r18, 0x10	; 16
    172c:	32 e0       	ldi	r19, 0x02	; 2
    172e:	f8 01       	movw	r30, r16
    1730:	b7 fe       	sbrs	r11, 7
    1732:	07 c0       	rjmp	.+14     	; 0x1742 <vfprintf+0x29c>
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	0c 5f       	subi	r16, 0xFC	; 252
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	06 c0       	rjmp	.+12     	; 0x174e <vfprintf+0x2a8>
    1742:	60 81       	ld	r22, Z
    1744:	71 81       	ldd	r23, Z+1	; 0x01
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 5f       	subi	r16, 0xFE	; 254
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
    174e:	a4 01       	movw	r20, r8
    1750:	de d0       	rcall	.+444    	; 0x190e <__ultoa_invert>
    1752:	a8 2e       	mov	r10, r24
    1754:	a8 18       	sub	r10, r8
    1756:	ff e7       	ldi	r31, 0x7F	; 127
    1758:	bf 22       	and	r11, r31
    175a:	b6 fe       	sbrs	r11, 6
    175c:	0b c0       	rjmp	.+22     	; 0x1774 <vfprintf+0x2ce>
    175e:	2b 2d       	mov	r18, r11
    1760:	2e 7f       	andi	r18, 0xFE	; 254
    1762:	a5 14       	cp	r10, r5
    1764:	50 f4       	brcc	.+20     	; 0x177a <vfprintf+0x2d4>
    1766:	b4 fe       	sbrs	r11, 4
    1768:	0a c0       	rjmp	.+20     	; 0x177e <vfprintf+0x2d8>
    176a:	b2 fc       	sbrc	r11, 2
    176c:	08 c0       	rjmp	.+16     	; 0x177e <vfprintf+0x2d8>
    176e:	2b 2d       	mov	r18, r11
    1770:	2e 7e       	andi	r18, 0xEE	; 238
    1772:	05 c0       	rjmp	.+10     	; 0x177e <vfprintf+0x2d8>
    1774:	7a 2c       	mov	r7, r10
    1776:	2b 2d       	mov	r18, r11
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <vfprintf+0x2da>
    177a:	7a 2c       	mov	r7, r10
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <vfprintf+0x2da>
    177e:	75 2c       	mov	r7, r5
    1780:	24 ff       	sbrs	r18, 4
    1782:	0d c0       	rjmp	.+26     	; 0x179e <vfprintf+0x2f8>
    1784:	fe 01       	movw	r30, r28
    1786:	ea 0d       	add	r30, r10
    1788:	f1 1d       	adc	r31, r1
    178a:	80 81       	ld	r24, Z
    178c:	80 33       	cpi	r24, 0x30	; 48
    178e:	11 f4       	brne	.+4      	; 0x1794 <vfprintf+0x2ee>
    1790:	29 7e       	andi	r18, 0xE9	; 233
    1792:	09 c0       	rjmp	.+18     	; 0x17a6 <vfprintf+0x300>
    1794:	22 ff       	sbrs	r18, 2
    1796:	06 c0       	rjmp	.+12     	; 0x17a4 <vfprintf+0x2fe>
    1798:	73 94       	inc	r7
    179a:	73 94       	inc	r7
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <vfprintf+0x300>
    179e:	82 2f       	mov	r24, r18
    17a0:	86 78       	andi	r24, 0x86	; 134
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <vfprintf+0x300>
    17a4:	73 94       	inc	r7
    17a6:	23 fd       	sbrc	r18, 3
    17a8:	13 c0       	rjmp	.+38     	; 0x17d0 <vfprintf+0x32a>
    17aa:	20 ff       	sbrs	r18, 0
    17ac:	0e c0       	rjmp	.+28     	; 0x17ca <vfprintf+0x324>
    17ae:	5a 2c       	mov	r5, r10
    17b0:	73 14       	cp	r7, r3
    17b2:	58 f4       	brcc	.+22     	; 0x17ca <vfprintf+0x324>
    17b4:	53 0c       	add	r5, r3
    17b6:	57 18       	sub	r5, r7
    17b8:	73 2c       	mov	r7, r3
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <vfprintf+0x324>
    17bc:	b7 01       	movw	r22, r14
    17be:	80 e2       	ldi	r24, 0x20	; 32
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	2c 87       	std	Y+12, r18	; 0x0c
    17c4:	78 d0       	rcall	.+240    	; 0x18b6 <fputc>
    17c6:	73 94       	inc	r7
    17c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ca:	73 14       	cp	r7, r3
    17cc:	b8 f3       	brcs	.-18     	; 0x17bc <vfprintf+0x316>
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <vfprintf+0x332>
    17d0:	73 14       	cp	r7, r3
    17d2:	10 f4       	brcc	.+4      	; 0x17d8 <vfprintf+0x332>
    17d4:	37 18       	sub	r3, r7
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <vfprintf+0x334>
    17d8:	31 2c       	mov	r3, r1
    17da:	24 ff       	sbrs	r18, 4
    17dc:	11 c0       	rjmp	.+34     	; 0x1800 <vfprintf+0x35a>
    17de:	b7 01       	movw	r22, r14
    17e0:	80 e3       	ldi	r24, 0x30	; 48
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	2c 87       	std	Y+12, r18	; 0x0c
    17e6:	67 d0       	rcall	.+206    	; 0x18b6 <fputc>
    17e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ea:	22 ff       	sbrs	r18, 2
    17ec:	1c c0       	rjmp	.+56     	; 0x1826 <vfprintf+0x380>
    17ee:	21 ff       	sbrs	r18, 1
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <vfprintf+0x352>
    17f2:	88 e5       	ldi	r24, 0x58	; 88
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <vfprintf+0x356>
    17f8:	88 e7       	ldi	r24, 0x78	; 120
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	b7 01       	movw	r22, r14
    17fe:	0c c0       	rjmp	.+24     	; 0x1818 <vfprintf+0x372>
    1800:	82 2f       	mov	r24, r18
    1802:	86 78       	andi	r24, 0x86	; 134
    1804:	81 f0       	breq	.+32     	; 0x1826 <vfprintf+0x380>
    1806:	21 fd       	sbrc	r18, 1
    1808:	02 c0       	rjmp	.+4      	; 0x180e <vfprintf+0x368>
    180a:	80 e2       	ldi	r24, 0x20	; 32
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <vfprintf+0x36a>
    180e:	8b e2       	ldi	r24, 0x2B	; 43
    1810:	27 fd       	sbrc	r18, 7
    1812:	8d e2       	ldi	r24, 0x2D	; 45
    1814:	b7 01       	movw	r22, r14
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	4e d0       	rcall	.+156    	; 0x18b6 <fputc>
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <vfprintf+0x380>
    181c:	b7 01       	movw	r22, r14
    181e:	80 e3       	ldi	r24, 0x30	; 48
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	49 d0       	rcall	.+146    	; 0x18b6 <fputc>
    1824:	5a 94       	dec	r5
    1826:	a5 14       	cp	r10, r5
    1828:	c8 f3       	brcs	.-14     	; 0x181c <vfprintf+0x376>
    182a:	aa 94       	dec	r10
    182c:	f4 01       	movw	r30, r8
    182e:	ea 0d       	add	r30, r10
    1830:	f1 1d       	adc	r31, r1
    1832:	b7 01       	movw	r22, r14
    1834:	80 81       	ld	r24, Z
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	3e d0       	rcall	.+124    	; 0x18b6 <fputc>
    183a:	a1 10       	cpse	r10, r1
    183c:	f6 cf       	rjmp	.-20     	; 0x182a <vfprintf+0x384>
    183e:	05 c0       	rjmp	.+10     	; 0x184a <vfprintf+0x3a4>
    1840:	b7 01       	movw	r22, r14
    1842:	80 e2       	ldi	r24, 0x20	; 32
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	37 d0       	rcall	.+110    	; 0x18b6 <fputc>
    1848:	3a 94       	dec	r3
    184a:	31 10       	cpse	r3, r1
    184c:	f9 cf       	rjmp	.-14     	; 0x1840 <vfprintf+0x39a>
    184e:	50 ce       	rjmp	.-864    	; 0x14f0 <vfprintf+0x4a>
    1850:	f7 01       	movw	r30, r14
    1852:	26 81       	ldd	r18, Z+6	; 0x06
    1854:	37 81       	ldd	r19, Z+7	; 0x07
    1856:	02 c0       	rjmp	.+4      	; 0x185c <vfprintf+0x3b6>
    1858:	2f ef       	ldi	r18, 0xFF	; 255
    185a:	3f ef       	ldi	r19, 0xFF	; 255
    185c:	c9 01       	movw	r24, r18
    185e:	2c 96       	adiw	r28, 0x0c	; 12
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	cf 90       	pop	r12
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	9f 90       	pop	r9
    187a:	8f 90       	pop	r8
    187c:	7f 90       	pop	r7
    187e:	6f 90       	pop	r6
    1880:	5f 90       	pop	r5
    1882:	4f 90       	pop	r4
    1884:	3f 90       	pop	r3
    1886:	2f 90       	pop	r2
    1888:	08 95       	ret

0000188a <strnlen_P>:
    188a:	fc 01       	movw	r30, r24
    188c:	05 90       	lpm	r0, Z+
    188e:	61 50       	subi	r22, 0x01	; 1
    1890:	70 40       	sbci	r23, 0x00	; 0
    1892:	01 10       	cpse	r0, r1
    1894:	d8 f7       	brcc	.-10     	; 0x188c <strnlen_P+0x2>
    1896:	80 95       	com	r24
    1898:	90 95       	com	r25
    189a:	8e 0f       	add	r24, r30
    189c:	9f 1f       	adc	r25, r31
    189e:	08 95       	ret

000018a0 <strnlen>:
    18a0:	fc 01       	movw	r30, r24
    18a2:	61 50       	subi	r22, 0x01	; 1
    18a4:	70 40       	sbci	r23, 0x00	; 0
    18a6:	01 90       	ld	r0, Z+
    18a8:	01 10       	cpse	r0, r1
    18aa:	d8 f7       	brcc	.-10     	; 0x18a2 <strnlen+0x2>
    18ac:	80 95       	com	r24
    18ae:	90 95       	com	r25
    18b0:	8e 0f       	add	r24, r30
    18b2:	9f 1f       	adc	r25, r31
    18b4:	08 95       	ret

000018b6 <fputc>:
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	8c 01       	movw	r16, r24
    18c0:	eb 01       	movw	r28, r22
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	81 fd       	sbrc	r24, 1
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <fputc+0x18>
    18c8:	0f ef       	ldi	r16, 0xFF	; 255
    18ca:	1f ef       	ldi	r17, 0xFF	; 255
    18cc:	1a c0       	rjmp	.+52     	; 0x1902 <fputc+0x4c>
    18ce:	82 ff       	sbrs	r24, 2
    18d0:	0d c0       	rjmp	.+26     	; 0x18ec <fputc+0x36>
    18d2:	2e 81       	ldd	r18, Y+6	; 0x06
    18d4:	3f 81       	ldd	r19, Y+7	; 0x07
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	28 17       	cp	r18, r24
    18dc:	39 07       	cpc	r19, r25
    18de:	64 f4       	brge	.+24     	; 0x18f8 <fputc+0x42>
    18e0:	e8 81       	ld	r30, Y
    18e2:	f9 81       	ldd	r31, Y+1	; 0x01
    18e4:	01 93       	st	Z+, r16
    18e6:	e8 83       	st	Y, r30
    18e8:	f9 83       	std	Y+1, r31	; 0x01
    18ea:	06 c0       	rjmp	.+12     	; 0x18f8 <fputc+0x42>
    18ec:	e8 85       	ldd	r30, Y+8	; 0x08
    18ee:	f9 85       	ldd	r31, Y+9	; 0x09
    18f0:	80 2f       	mov	r24, r16
    18f2:	19 95       	eicall
    18f4:	89 2b       	or	r24, r25
    18f6:	41 f7       	brne	.-48     	; 0x18c8 <fputc+0x12>
    18f8:	8e 81       	ldd	r24, Y+6	; 0x06
    18fa:	9f 81       	ldd	r25, Y+7	; 0x07
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	8e 83       	std	Y+6, r24	; 0x06
    1900:	9f 83       	std	Y+7, r25	; 0x07
    1902:	c8 01       	movw	r24, r16
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	08 95       	ret

0000190e <__ultoa_invert>:
    190e:	fa 01       	movw	r30, r20
    1910:	aa 27       	eor	r26, r26
    1912:	28 30       	cpi	r18, 0x08	; 8
    1914:	51 f1       	breq	.+84     	; 0x196a <__ultoa_invert+0x5c>
    1916:	20 31       	cpi	r18, 0x10	; 16
    1918:	81 f1       	breq	.+96     	; 0x197a <__ultoa_invert+0x6c>
    191a:	e8 94       	clt
    191c:	6f 93       	push	r22
    191e:	6e 7f       	andi	r22, 0xFE	; 254
    1920:	6e 5f       	subi	r22, 0xFE	; 254
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	8f 4f       	sbci	r24, 0xFF	; 255
    1926:	9f 4f       	sbci	r25, 0xFF	; 255
    1928:	af 4f       	sbci	r26, 0xFF	; 255
    192a:	b1 e0       	ldi	r27, 0x01	; 1
    192c:	3e d0       	rcall	.+124    	; 0x19aa <__ultoa_invert+0x9c>
    192e:	b4 e0       	ldi	r27, 0x04	; 4
    1930:	3c d0       	rcall	.+120    	; 0x19aa <__ultoa_invert+0x9c>
    1932:	67 0f       	add	r22, r23
    1934:	78 1f       	adc	r23, r24
    1936:	89 1f       	adc	r24, r25
    1938:	9a 1f       	adc	r25, r26
    193a:	a1 1d       	adc	r26, r1
    193c:	68 0f       	add	r22, r24
    193e:	79 1f       	adc	r23, r25
    1940:	8a 1f       	adc	r24, r26
    1942:	91 1d       	adc	r25, r1
    1944:	a1 1d       	adc	r26, r1
    1946:	6a 0f       	add	r22, r26
    1948:	71 1d       	adc	r23, r1
    194a:	81 1d       	adc	r24, r1
    194c:	91 1d       	adc	r25, r1
    194e:	a1 1d       	adc	r26, r1
    1950:	20 d0       	rcall	.+64     	; 0x1992 <__ultoa_invert+0x84>
    1952:	09 f4       	brne	.+2      	; 0x1956 <__ultoa_invert+0x48>
    1954:	68 94       	set
    1956:	3f 91       	pop	r19
    1958:	2a e0       	ldi	r18, 0x0A	; 10
    195a:	26 9f       	mul	r18, r22
    195c:	11 24       	eor	r1, r1
    195e:	30 19       	sub	r19, r0
    1960:	30 5d       	subi	r19, 0xD0	; 208
    1962:	31 93       	st	Z+, r19
    1964:	de f6       	brtc	.-74     	; 0x191c <__ultoa_invert+0xe>
    1966:	cf 01       	movw	r24, r30
    1968:	08 95       	ret
    196a:	46 2f       	mov	r20, r22
    196c:	47 70       	andi	r20, 0x07	; 7
    196e:	40 5d       	subi	r20, 0xD0	; 208
    1970:	41 93       	st	Z+, r20
    1972:	b3 e0       	ldi	r27, 0x03	; 3
    1974:	0f d0       	rcall	.+30     	; 0x1994 <__ultoa_invert+0x86>
    1976:	c9 f7       	brne	.-14     	; 0x196a <__ultoa_invert+0x5c>
    1978:	f6 cf       	rjmp	.-20     	; 0x1966 <__ultoa_invert+0x58>
    197a:	46 2f       	mov	r20, r22
    197c:	4f 70       	andi	r20, 0x0F	; 15
    197e:	40 5d       	subi	r20, 0xD0	; 208
    1980:	4a 33       	cpi	r20, 0x3A	; 58
    1982:	18 f0       	brcs	.+6      	; 0x198a <__ultoa_invert+0x7c>
    1984:	49 5d       	subi	r20, 0xD9	; 217
    1986:	31 fd       	sbrc	r19, 1
    1988:	40 52       	subi	r20, 0x20	; 32
    198a:	41 93       	st	Z+, r20
    198c:	02 d0       	rcall	.+4      	; 0x1992 <__ultoa_invert+0x84>
    198e:	a9 f7       	brne	.-22     	; 0x197a <__ultoa_invert+0x6c>
    1990:	ea cf       	rjmp	.-44     	; 0x1966 <__ultoa_invert+0x58>
    1992:	b4 e0       	ldi	r27, 0x04	; 4
    1994:	a6 95       	lsr	r26
    1996:	97 95       	ror	r25
    1998:	87 95       	ror	r24
    199a:	77 95       	ror	r23
    199c:	67 95       	ror	r22
    199e:	ba 95       	dec	r27
    19a0:	c9 f7       	brne	.-14     	; 0x1994 <__ultoa_invert+0x86>
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	61 05       	cpc	r22, r1
    19a6:	71 05       	cpc	r23, r1
    19a8:	08 95       	ret
    19aa:	9b 01       	movw	r18, r22
    19ac:	ac 01       	movw	r20, r24
    19ae:	0a 2e       	mov	r0, r26
    19b0:	06 94       	lsr	r0
    19b2:	57 95       	ror	r21
    19b4:	47 95       	ror	r20
    19b6:	37 95       	ror	r19
    19b8:	27 95       	ror	r18
    19ba:	ba 95       	dec	r27
    19bc:	c9 f7       	brne	.-14     	; 0x19b0 <__ultoa_invert+0xa2>
    19be:	62 0f       	add	r22, r18
    19c0:	73 1f       	adc	r23, r19
    19c2:	84 1f       	adc	r24, r20
    19c4:	95 1f       	adc	r25, r21
    19c6:	a0 1d       	adc	r26, r0
    19c8:	08 95       	ret

000019ca <_exit>:
    19ca:	f8 94       	cli

000019cc <__stop_program>:
    19cc:	ff cf       	rjmp	.-2      	; 0x19cc <__stop_program>
