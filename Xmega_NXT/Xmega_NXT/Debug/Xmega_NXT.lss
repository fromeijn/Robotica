
Xmega_NXT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00802000  00001b28  00001bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000049f  00802036  00802036  00001bf2  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a29  00000000  00000000  000046fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005125  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000280  00000000  00000000  00005154  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004be8  00000000  00000000  000053d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f63  00000000  00000000  00009fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a44  00000000  00000000  0000af1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000958  00000000  00000000  0000c964  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002d17  00000000  00000000  0000d2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002684  00000000  00000000  0000ffd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000200  00000000  00000000  00012657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	80 c2       	rjmp	.+1280   	; 0x50a <__vector_2>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	38 c2       	rjmp	.+1136   	; 0x4a2 <__vector_12>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	70 c2       	rjmp	.+1248   	; 0x532 <__vector_20>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
      66:	00 00       	nop
      68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c1       	rjmp	.+656    	; 0x302 <__vector_28>
      72:	00 00       	nop
      74:	7a c1       	rjmp	.+756    	; 0x36a <__vector_29>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3c c3       	rjmp	.+1656   	; 0x736 <__vector_47>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	78 c2       	rjmp	.+1264   	; 0x62e <__vector_79>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	ae c2       	rjmp	.+1372   	; 0x6b2 <__vector_85>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	38 c1       	rjmp	.+624    	; 0x3d2 <__vector_88>
     162:	00 00       	nop
     164:	6a c1       	rjmp	.+724    	; 0x43a <__vector_89>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e3       	ldi	r29, 0x3F	; 63
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 e2       	ldi	r30, 0x28	; 40
     21c:	fb e1       	ldi	r31, 0x1B	; 27
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a6 33       	cpi	r26, 0x36	; 54
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	24 e2       	ldi	r18, 0x24	; 36
     232:	a6 e3       	ldi	r26, 0x36	; 54
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a5 3d       	cpi	r26, 0xD5	; 213
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	a6 d3       	rcall	.+1868   	; 0x98e <main>
     242:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     248:	0f 93       	push	r16
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	2f b7       	in	r18, 0x3f	; 63
     256:	29 83       	std	Y+1, r18	; 0x01
     258:	f8 94       	cli
     25a:	1b be       	out	0x3b, r1	; 59
     25c:	fc 01       	movw	r30, r24
     25e:	08 ed       	ldi	r16, 0xD8	; 216
     260:	04 bf       	out	0x34, r16	; 52
     262:	60 83       	st	Z, r22
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	8f bf       	out	0x3f, r24	; 63
     268:	0f 90       	pop	r0
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	0f 91       	pop	r16
     270:	08 95       	ret

00000272 <CLKSYS_Disable>:
     272:	e0 e5       	ldi	r30, 0x50	; 80
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	90 81       	ld	r25, Z
     278:	28 2f       	mov	r18, r24
     27a:	20 95       	com	r18
     27c:	92 23       	and	r25, r18
     27e:	90 83       	st	Z, r25
     280:	90 81       	ld	r25, Z
     282:	89 23       	and	r24, r25
     284:	08 95       	ret

00000286 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     28e:	c0 e4       	ldi	r28, 0x40	; 64
     290:	d0 e0       	ldi	r29, 0x00	; 0
     292:	68 81       	ld	r22, Y
     294:	68 7f       	andi	r22, 0xF8	; 248
     296:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     298:	80 e4       	ldi	r24, 0x40	; 64
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	d5 df       	rcall	.-86     	; 0x248 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     29e:	88 81       	ld	r24, Y
	return clkCtrl;
}
     2a0:	81 23       	and	r24, r17
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <TWIC_SlaveProcessData>:
	}
}

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
     2aa:	e0 91 41 21 	lds	r30, 0x2141
	if(askbyte >= 0 && askbyte < 16) { // Ask for sonar and rfid information
     2ae:	e0 31       	cpi	r30, 0x10	; 16
     2b0:	a8 f4       	brcc	.+42     	; 0x2dc <TWIC_SlaveProcessData+0x32>
		for(uint8_t i = 0; i < LIGHT_REQUEST_ADDRESS; i++) //give the right information back
		{
			twiSlave.sendData[i] = TWIOut[i+askbyte];
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
		PORTC.OUTCLR = PIN3_bm;
		sonarSwitch = 1;
	}
}

void TWIC_SlaveProcessData(void)
     2b4:	e3 53       	subi	r30, 0x33	; 51
     2b6:	fd 4d       	sbci	r31, 0xDD	; 221
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t askbyte = twiSlave.receivedData[0];
	if(askbyte >= 0 && askbyte < 16) { // Ask for sonar and rfid information
		for(uint8_t i = 0; i < LIGHT_REQUEST_ADDRESS; i++) //give the right information back
		{
			twiSlave.sendData[i] = TWIOut[i+askbyte];
     2bc:	21 91       	ld	r18, Z+
     2be:	dc 01       	movw	r26, r24
     2c0:	af 57       	subi	r26, 0x7F	; 127
     2c2:	be 4d       	sbci	r27, 0xDE	; 222
     2c4:	2c 93       	st	X, r18
     2c6:	01 96       	adiw	r24, 0x01	; 1

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
	if(askbyte >= 0 && askbyte < 16) { // Ask for sonar and rfid information
		for(uint8_t i = 0; i < LIGHT_REQUEST_ADDRESS; i++) //give the right information back
     2c8:	80 31       	cpi	r24, 0x10	; 16
     2ca:	91 05       	cpc	r25, r1
     2cc:	b9 f7       	brne	.-18     	; 0x2bc <TWIC_SlaveProcessData+0x12>
		{
			twiSlave.sendData[i] = TWIOut[i+askbyte];
		}
	
		if(twiSlave.receivedData[0] == RFID_DETECT_RESET_ADDRES) TWIOut[RFID_DETECT_ADDRESS] = 0; //card has been read
     2ce:	80 91 41 21 	lds	r24, 0x2141
     2d2:	80 31       	cpi	r24, 0x10	; 16
     2d4:	a9 f4       	brne	.+42     	; 0x300 <TWIC_SlaveProcessData+0x56>
     2d6:	10 92 cd 22 	sts	0x22CD, r1
     2da:	08 95       	ret
	} else if(askbyte == LIGHT_REQUEST_ADDRESS) { // ask for lightsensor information
     2dc:	e0 31       	cpi	r30, 0x10	; 16
     2de:	81 f4       	brne	.+32     	; 0x300 <TWIC_SlaveProcessData+0x56>
     2e0:	ec ec       	ldi	r30, 0xCC	; 204
     2e2:	f3 e2       	ldi	r31, 0x23	; 35
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
		
		for(uint8_t i = 0; i < 4; i++) {
			
			twiSlave.sendData[i] = *lightSensor[i];
     2e8:	a1 91       	ld	r26, Z+
     2ea:	b1 91       	ld	r27, Z+
     2ec:	2d 91       	ld	r18, X+
     2ee:	3c 91       	ld	r19, X
     2f0:	dc 01       	movw	r26, r24
     2f2:	af 57       	subi	r26, 0x7F	; 127
     2f4:	be 4d       	sbci	r27, 0xDE	; 222
     2f6:	2c 93       	st	X, r18
     2f8:	01 96       	adiw	r24, 0x01	; 1
		}
	
		if(twiSlave.receivedData[0] == RFID_DETECT_RESET_ADDRES) TWIOut[RFID_DETECT_ADDRESS] = 0; //card has been read
	} else if(askbyte == LIGHT_REQUEST_ADDRESS) { // ask for lightsensor information
		
		for(uint8_t i = 0; i < 4; i++) {
     2fa:	84 30       	cpi	r24, 0x04	; 4
     2fc:	91 05       	cpc	r25, r1
     2fe:	a1 f7       	brne	.-24     	; 0x2e8 <TWIC_SlaveProcessData+0x3e>
     300:	08 95       	ret

00000302 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
     30c:	08 b6       	in	r0, 0x38	; 56
     30e:	0f 92       	push	r0
     310:	18 be       	out	0x38, r1	; 56
     312:	09 b6       	in	r0, 0x39	; 57
     314:	0f 92       	push	r0
     316:	19 be       	out	0x39, r1	; 57
     318:	0b b6       	in	r0, 0x3b	; 59
     31a:	0f 92       	push	r0
     31c:	1b be       	out	0x3b, r1	; 59
     31e:	2f 93       	push	r18
     320:	3f 93       	push	r19
     322:	4f 93       	push	r20
     324:	5f 93       	push	r21
     326:	6f 93       	push	r22
     328:	7f 93       	push	r23
     32a:	8f 93       	push	r24
     32c:	9f 93       	push	r25
     32e:	af 93       	push	r26
     330:	bf 93       	push	r27
     332:	ef 93       	push	r30
     334:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     336:	86 ec       	ldi	r24, 0xC6	; 198
     338:	91 e2       	ldi	r25, 0x21	; 33
     33a:	b5 d6       	rcall	.+3434   	; 0x10a6 <USART_RXComplete>
}
     33c:	ff 91       	pop	r31
     33e:	ef 91       	pop	r30
     340:	bf 91       	pop	r27
     342:	af 91       	pop	r26
     344:	9f 91       	pop	r25
     346:	8f 91       	pop	r24
     348:	7f 91       	pop	r23
     34a:	6f 91       	pop	r22
     34c:	5f 91       	pop	r21
     34e:	4f 91       	pop	r20
     350:	3f 91       	pop	r19
     352:	2f 91       	pop	r18
     354:	0f 90       	pop	r0
     356:	0b be       	out	0x3b, r0	; 59
     358:	0f 90       	pop	r0
     35a:	09 be       	out	0x39, r0	; 57
     35c:	0f 90       	pop	r0
     35e:	08 be       	out	0x38, r0	; 56
     360:	0f 90       	pop	r0
     362:	0f be       	out	0x3f, r0	; 63
     364:	0f 90       	pop	r0
     366:	1f 90       	pop	r1
     368:	18 95       	reti

0000036a <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     36a:	1f 92       	push	r1
     36c:	0f 92       	push	r0
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	0f 92       	push	r0
     372:	11 24       	eor	r1, r1
     374:	08 b6       	in	r0, 0x38	; 56
     376:	0f 92       	push	r0
     378:	18 be       	out	0x38, r1	; 56
     37a:	09 b6       	in	r0, 0x39	; 57
     37c:	0f 92       	push	r0
     37e:	19 be       	out	0x39, r1	; 57
     380:	0b b6       	in	r0, 0x3b	; 59
     382:	0f 92       	push	r0
     384:	1b be       	out	0x3b, r1	; 59
     386:	2f 93       	push	r18
     388:	3f 93       	push	r19
     38a:	4f 93       	push	r20
     38c:	5f 93       	push	r21
     38e:	6f 93       	push	r22
     390:	7f 93       	push	r23
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	af 93       	push	r26
     398:	bf 93       	push	r27
     39a:	ef 93       	push	r30
     39c:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     39e:	86 ec       	ldi	r24, 0xC6	; 198
     3a0:	91 e2       	ldi	r25, 0x21	; 33
     3a2:	9f d6       	rcall	.+3390   	; 0x10e2 <USART_DataRegEmpty>
}
     3a4:	ff 91       	pop	r31
     3a6:	ef 91       	pop	r30
     3a8:	bf 91       	pop	r27
     3aa:	af 91       	pop	r26
     3ac:	9f 91       	pop	r25
     3ae:	8f 91       	pop	r24
     3b0:	7f 91       	pop	r23
     3b2:	6f 91       	pop	r22
     3b4:	5f 91       	pop	r21
     3b6:	4f 91       	pop	r20
     3b8:	3f 91       	pop	r19
     3ba:	2f 91       	pop	r18
     3bc:	0f 90       	pop	r0
     3be:	0b be       	out	0x3b, r0	; 59
     3c0:	0f 90       	pop	r0
     3c2:	09 be       	out	0x39, r0	; 57
     3c4:	0f 90       	pop	r0
     3c6:	08 be       	out	0x38, r0	; 56
     3c8:	0f 90       	pop	r0
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	0f 90       	pop	r0
     3ce:	1f 90       	pop	r1
     3d0:	18 95       	reti

000003d2 <__vector_88>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_RXC_vect)
{
     3d2:	1f 92       	push	r1
     3d4:	0f 92       	push	r0
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	0f 92       	push	r0
     3da:	11 24       	eor	r1, r1
     3dc:	08 b6       	in	r0, 0x38	; 56
     3de:	0f 92       	push	r0
     3e0:	18 be       	out	0x38, r1	; 56
     3e2:	09 b6       	in	r0, 0x39	; 57
     3e4:	0f 92       	push	r0
     3e6:	19 be       	out	0x39, r1	; 57
     3e8:	0b b6       	in	r0, 0x3b	; 59
     3ea:	0f 92       	push	r0
     3ec:	1b be       	out	0x3b, r1	; 59
     3ee:	2f 93       	push	r18
     3f0:	3f 93       	push	r19
     3f2:	4f 93       	push	r20
     3f4:	5f 93       	push	r21
     3f6:	6f 93       	push	r22
     3f8:	7f 93       	push	r23
     3fa:	8f 93       	push	r24
     3fc:	9f 93       	push	r25
     3fe:	af 93       	push	r26
     400:	bf 93       	push	r27
     402:	ef 93       	push	r30
     404:	ff 93       	push	r31
  USART_RXComplete(&uartD0);
     406:	86 e3       	ldi	r24, 0x36	; 54
     408:	90 e2       	ldi	r25, 0x20	; 32
     40a:	4d d6       	rcall	.+3226   	; 0x10a6 <USART_RXComplete>
}
     40c:	ff 91       	pop	r31
     40e:	ef 91       	pop	r30
     410:	bf 91       	pop	r27
     412:	af 91       	pop	r26
     414:	9f 91       	pop	r25
     416:	8f 91       	pop	r24
     418:	7f 91       	pop	r23
     41a:	6f 91       	pop	r22
     41c:	5f 91       	pop	r21
     41e:	4f 91       	pop	r20
     420:	3f 91       	pop	r19
     422:	2f 91       	pop	r18
     424:	0f 90       	pop	r0
     426:	0b be       	out	0x3b, r0	; 59
     428:	0f 90       	pop	r0
     42a:	09 be       	out	0x39, r0	; 57
     42c:	0f 90       	pop	r0
     42e:	08 be       	out	0x38, r0	; 56
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <__vector_89>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_DRE_vect)
{
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	08 b6       	in	r0, 0x38	; 56
     446:	0f 92       	push	r0
     448:	18 be       	out	0x38, r1	; 56
     44a:	09 b6       	in	r0, 0x39	; 57
     44c:	0f 92       	push	r0
     44e:	19 be       	out	0x39, r1	; 57
     450:	0b b6       	in	r0, 0x3b	; 59
     452:	0f 92       	push	r0
     454:	1b be       	out	0x3b, r1	; 59
     456:	2f 93       	push	r18
     458:	3f 93       	push	r19
     45a:	4f 93       	push	r20
     45c:	5f 93       	push	r21
     45e:	6f 93       	push	r22
     460:	7f 93       	push	r23
     462:	8f 93       	push	r24
     464:	9f 93       	push	r25
     466:	af 93       	push	r26
     468:	bf 93       	push	r27
     46a:	ef 93       	push	r30
     46c:	ff 93       	push	r31
  USART_DataRegEmpty(&uartD0);
     46e:	86 e3       	ldi	r24, 0x36	; 54
     470:	90 e2       	ldi	r25, 0x20	; 32
     472:	37 d6       	rcall	.+3182   	; 0x10e2 <USART_DataRegEmpty>
}
     474:	ff 91       	pop	r31
     476:	ef 91       	pop	r30
     478:	bf 91       	pop	r27
     47a:	af 91       	pop	r26
     47c:	9f 91       	pop	r25
     47e:	8f 91       	pop	r24
     480:	7f 91       	pop	r23
     482:	6f 91       	pop	r22
     484:	5f 91       	pop	r21
     486:	4f 91       	pop	r20
     488:	3f 91       	pop	r19
     48a:	2f 91       	pop	r18
     48c:	0f 90       	pop	r0
     48e:	0b be       	out	0x3b, r0	; 59
     490:	0f 90       	pop	r0
     492:	09 be       	out	0x39, r0	; 57
     494:	0f 90       	pop	r0
     496:	08 be       	out	0x38, r0	; 56
     498:	0f 90       	pop	r0
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	0f 90       	pop	r0
     49e:	1f 90       	pop	r1
     4a0:	18 95       	reti

000004a2 <__vector_12>:
		_delay_ms(1000);
	}
}

ISR(TWIC_TWIS_vect) //TWI
{
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
     4ac:	08 b6       	in	r0, 0x38	; 56
     4ae:	0f 92       	push	r0
     4b0:	18 be       	out	0x38, r1	; 56
     4b2:	09 b6       	in	r0, 0x39	; 57
     4b4:	0f 92       	push	r0
     4b6:	19 be       	out	0x39, r1	; 57
     4b8:	0b b6       	in	r0, 0x3b	; 59
     4ba:	0f 92       	push	r0
     4bc:	1b be       	out	0x3b, r1	; 59
     4be:	2f 93       	push	r18
     4c0:	3f 93       	push	r19
     4c2:	4f 93       	push	r20
     4c4:	5f 93       	push	r21
     4c6:	6f 93       	push	r22
     4c8:	7f 93       	push	r23
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
     4ce:	af 93       	push	r26
     4d0:	bf 93       	push	r27
     4d2:	ef 93       	push	r30
     4d4:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twiSlave);
     4d6:	8d e3       	ldi	r24, 0x3D	; 61
     4d8:	91 e2       	ldi	r25, 0x21	; 33
     4da:	ce d3       	rcall	.+1948   	; 0xc78 <TWI_SlaveInterruptHandler>
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	bf 91       	pop	r27
     4e2:	af 91       	pop	r26
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	7f 91       	pop	r23
     4ea:	6f 91       	pop	r22
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	0f 90       	pop	r0
     4f6:	0b be       	out	0x3b, r0	; 59
     4f8:	0f 90       	pop	r0
     4fa:	09 be       	out	0x39, r0	; 57
     4fc:	0f 90       	pop	r0
     4fe:	08 be       	out	0x38, r0	; 56
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <__vector_2>:

ISR(PORTC_INT0_vect) //start uart delay
{
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	08 b6       	in	r0, 0x38	; 56
     516:	0f 92       	push	r0
     518:	18 be       	out	0x38, r1	; 56
     51a:	8f 93       	push	r24
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
     51c:	87 e0       	ldi	r24, 0x07	; 7
     51e:	80 93 40 08 	sts	0x0840, r24
}
     522:	8f 91       	pop	r24
     524:	0f 90       	pop	r0
     526:	08 be       	out	0x38, r0	; 56
     528:	0f 90       	pop	r0
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	0f 90       	pop	r0
     52e:	1f 90       	pop	r1
     530:	18 95       	reti

00000532 <__vector_20>:

ISR(TCC1_OVF_vect) //uart delay
{
     532:	1f 92       	push	r1
     534:	0f 92       	push	r0
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	0f 92       	push	r0
     53a:	11 24       	eor	r1, r1
     53c:	08 b6       	in	r0, 0x38	; 56
     53e:	0f 92       	push	r0
     540:	18 be       	out	0x38, r1	; 56
     542:	09 b6       	in	r0, 0x39	; 57
     544:	0f 92       	push	r0
     546:	19 be       	out	0x39, r1	; 57
     548:	0a b6       	in	r0, 0x3a	; 58
     54a:	0f 92       	push	r0
     54c:	1a be       	out	0x3a, r1	; 58
     54e:	0b b6       	in	r0, 0x3b	; 59
     550:	0f 92       	push	r0
     552:	1b be       	out	0x3b, r1	; 59
     554:	bf 92       	push	r11
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	2f 93       	push	r18
     564:	3f 93       	push	r19
     566:	4f 93       	push	r20
     568:	5f 93       	push	r21
     56a:	6f 93       	push	r22
     56c:	7f 93       	push	r23
     56e:	8f 93       	push	r24
     570:	9f 93       	push	r25
     572:	af 93       	push	r26
     574:	bf 93       	push	r27
     576:	ef 93       	push	r30
     578:	ff 93       	push	r31
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	60 97       	sbiw	r28, 0x10	; 16
     584:	cd bf       	out	0x3d, r28	; 61
     586:	de bf       	out	0x3e, r29	; 62
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     588:	10 92 40 08 	sts	0x0840, r1
     58c:	8e 01       	movw	r16, r28
     58e:	0f 5f       	subi	r16, 0xFF	; 255
     590:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(PORTC_INT0_vect) //start uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
}

ISR(TCC1_OVF_vect) //uart delay
     592:	68 01       	movw	r12, r16
     594:	7e 01       	movw	r14, r28
     596:	81 e1       	ldi	r24, 0x11	; 17
     598:	e8 0e       	add	r14, r24
     59a:	f1 1c       	adc	r15, r1
	{
		if (USART_RXBufferData_Available(&uartC1))
		{
			RFIDDataIn[i] = USART_RXBuffer_GetByte(&uartC1);
		}else{
			RFIDDataIn[i] = '_';
     59c:	0f 2e       	mov	r0, r31
     59e:	ff e5       	ldi	r31, 0x5F	; 95
     5a0:	bf 2e       	mov	r11, r31
     5a2:	f0 2d       	mov	r31, r0
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;

	uint8_t RFIDDataIn[RFID_UART_NUM_BYTES]; //RFID data
	for(int i=0; i<RFID_UART_NUM_BYTES; i++)
	{
		if (USART_RXBufferData_Available(&uartC1))
     5a4:	86 ec       	ldi	r24, 0xC6	; 198
     5a6:	91 e2       	ldi	r25, 0x21	; 33
     5a8:	63 d5       	rcall	.+2758   	; 0x1070 <USART_RXBufferData_Available>
     5aa:	88 23       	and	r24, r24
     5ac:	31 f0       	breq	.+12     	; 0x5ba <__vector_20+0x88>
		{
			RFIDDataIn[i] = USART_RXBuffer_GetByte(&uartC1);
     5ae:	86 ec       	ldi	r24, 0xC6	; 198
     5b0:	91 e2       	ldi	r25, 0x21	; 33
     5b2:	6b d5       	rcall	.+2774   	; 0x108a <USART_RXBuffer_GetByte>
     5b4:	f8 01       	movw	r30, r16
     5b6:	80 83       	st	Z, r24
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <__vector_20+0x8c>
		}else{
			RFIDDataIn[i] = '_';
     5ba:	f8 01       	movw	r30, r16
     5bc:	b0 82       	st	Z, r11
     5be:	0f 5f       	subi	r16, 0xFF	; 255
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(TCC1_OVF_vect) //uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;

	uint8_t RFIDDataIn[RFID_UART_NUM_BYTES]; //RFID data
	for(int i=0; i<RFID_UART_NUM_BYTES; i++)
     5c2:	0e 15       	cp	r16, r14
     5c4:	1f 05       	cpc	r17, r15
     5c6:	71 f7       	brne	.-36     	; 0x5a4 <__vector_20+0x72>
     5c8:	fe 01       	movw	r30, r28
     5ca:	32 96       	adiw	r30, 0x02	; 2
     5cc:	ae ec       	ldi	r26, 0xCE	; 206
     5ce:	b2 e2       	ldi	r27, 0x22	; 34
ISR(PORTC_INT0_vect) //start uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
}

ISR(TCC1_OVF_vect) //uart delay
     5d0:	c6 01       	movw	r24, r12
     5d2:	0b 96       	adiw	r24, 0x0b	; 11
		}
	}
	
	for(int i=0; i<RFID_NUMBER_BYTES; i++)
	{
		TWIOut[RFID_NUMBER_ADDRESS+i] = RFIDDataIn[i+1];;
     5d4:	21 91       	ld	r18, Z+
     5d6:	2d 93       	st	X+, r18
		}else{
			RFIDDataIn[i] = '_';
		}
	}
	
	for(int i=0; i<RFID_NUMBER_BYTES; i++)
     5d8:	e8 17       	cp	r30, r24
     5da:	f9 07       	cpc	r31, r25
     5dc:	d9 f7       	brne	.-10     	; 0x5d4 <__vector_20+0xa2>
	{
		TWIOut[RFID_NUMBER_ADDRESS+i] = RFIDDataIn[i+1];;
	}

	TWIOut[RFID_DETECT_ADDRESS] = 1;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 cd 22 	sts	0x22CD, r24
}
     5e4:	60 96       	adiw	r28, 0x10	; 16
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	4f 91       	pop	r20
     602:	3f 91       	pop	r19
     604:	2f 91       	pop	r18
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	bf 90       	pop	r11
     614:	0f 90       	pop	r0
     616:	0b be       	out	0x3b, r0	; 59
     618:	0f 90       	pop	r0
     61a:	0a be       	out	0x3a, r0	; 58
     61c:	0f 90       	pop	r0
     61e:	09 be       	out	0x39, r0	; 57
     620:	0f 90       	pop	r0
     622:	08 be       	out	0x38, r0	; 56
     624:	0f 90       	pop	r0
     626:	0f be       	out	0x3f, r0	; 63
     628:	0f 90       	pop	r0
     62a:	1f 90       	pop	r1
     62c:	18 95       	reti

0000062e <__vector_79>:

ISR(TCD0_CCA_vect) //sonar A
{
     62e:	1f 92       	push	r1
     630:	0f 92       	push	r0
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	0f 92       	push	r0
     636:	11 24       	eor	r1, r1
     638:	08 b6       	in	r0, 0x38	; 56
     63a:	0f 92       	push	r0
     63c:	18 be       	out	0x38, r1	; 56
     63e:	09 b6       	in	r0, 0x39	; 57
     640:	0f 92       	push	r0
     642:	19 be       	out	0x39, r1	; 57
     644:	0b b6       	in	r0, 0x3b	; 59
     646:	0f 92       	push	r0
     648:	1b be       	out	0x3b, r1	; 59
     64a:	2f 93       	push	r18
     64c:	3f 93       	push	r19
     64e:	6f 93       	push	r22
     650:	7f 93       	push	r23
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	af 93       	push	r26
     658:	bf 93       	push	r27
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
	uint16_t time = TCD0.CCA;
     65e:	e0 e0       	ldi	r30, 0x00	; 0
     660:	f9 e0       	ldi	r31, 0x09	; 9
     662:	20 a5       	ldd	r18, Z+40	; 0x28
     664:	31 a5       	ldd	r19, Z+41	; 0x29
	uint16_t cm = time/116;
     666:	af e9       	ldi	r26, 0x9F	; 159
     668:	b6 e4       	ldi	r27, 0x46	; 70
     66a:	96 d7       	rcall	.+3884   	; 0x1598 <__umulhisi3>
     66c:	96 95       	lsr	r25
     66e:	87 95       	ror	r24
     670:	92 95       	swap	r25
     672:	82 95       	swap	r24
     674:	8f 70       	andi	r24, 0x0F	; 15
     676:	89 27       	eor	r24, r25
     678:	9f 70       	andi	r25, 0x0F	; 15
     67a:	89 27       	eor	r24, r25
	TWIOut[SONAR_A_ADDRESS] = cm & 0x00FF;	//LSB
     67c:	80 93 d8 22 	sts	0x22D8, r24
	TWIOut[SONAR_A_ADDRESS+1] = cm>>8;		//MSB
     680:	90 93 d9 22 	sts	0x22D9, r25
	TCD0.CTRLFSET = TC_CMD_RESTART_gc;
     684:	88 e0       	ldi	r24, 0x08	; 8
     686:	81 87       	std	Z+9, r24	; 0x09
}
     688:	ff 91       	pop	r31
     68a:	ef 91       	pop	r30
     68c:	bf 91       	pop	r27
     68e:	af 91       	pop	r26
     690:	9f 91       	pop	r25
     692:	8f 91       	pop	r24
     694:	7f 91       	pop	r23
     696:	6f 91       	pop	r22
     698:	3f 91       	pop	r19
     69a:	2f 91       	pop	r18
     69c:	0f 90       	pop	r0
     69e:	0b be       	out	0x3b, r0	; 59
     6a0:	0f 90       	pop	r0
     6a2:	09 be       	out	0x39, r0	; 57
     6a4:	0f 90       	pop	r0
     6a6:	08 be       	out	0x38, r0	; 56
     6a8:	0f 90       	pop	r0
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	0f 90       	pop	r0
     6ae:	1f 90       	pop	r1
     6b0:	18 95       	reti

000006b2 <__vector_85>:

ISR(TCD1_CCA_vect) //Sonar B
{
     6b2:	1f 92       	push	r1
     6b4:	0f 92       	push	r0
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
     6bc:	08 b6       	in	r0, 0x38	; 56
     6be:	0f 92       	push	r0
     6c0:	18 be       	out	0x38, r1	; 56
     6c2:	09 b6       	in	r0, 0x39	; 57
     6c4:	0f 92       	push	r0
     6c6:	19 be       	out	0x39, r1	; 57
     6c8:	0b b6       	in	r0, 0x3b	; 59
     6ca:	0f 92       	push	r0
     6cc:	1b be       	out	0x3b, r1	; 59
     6ce:	2f 93       	push	r18
     6d0:	3f 93       	push	r19
     6d2:	6f 93       	push	r22
     6d4:	7f 93       	push	r23
     6d6:	8f 93       	push	r24
     6d8:	9f 93       	push	r25
     6da:	af 93       	push	r26
     6dc:	bf 93       	push	r27
     6de:	ef 93       	push	r30
     6e0:	ff 93       	push	r31
	uint16_t time = TCD1.CCA;
     6e2:	e0 e4       	ldi	r30, 0x40	; 64
     6e4:	f9 e0       	ldi	r31, 0x09	; 9
     6e6:	20 a5       	ldd	r18, Z+40	; 0x28
     6e8:	31 a5       	ldd	r19, Z+41	; 0x29
	uint16_t cm = time/116;
     6ea:	af e9       	ldi	r26, 0x9F	; 159
     6ec:	b6 e4       	ldi	r27, 0x46	; 70
     6ee:	54 d7       	rcall	.+3752   	; 0x1598 <__umulhisi3>
     6f0:	96 95       	lsr	r25
     6f2:	87 95       	ror	r24
     6f4:	92 95       	swap	r25
     6f6:	82 95       	swap	r24
     6f8:	8f 70       	andi	r24, 0x0F	; 15
     6fa:	89 27       	eor	r24, r25
     6fc:	9f 70       	andi	r25, 0x0F	; 15
     6fe:	89 27       	eor	r24, r25
	TWIOut[SONAR_B_ADDRESS] = cm & 0x00FF;	//LSB
     700:	80 93 da 22 	sts	0x22DA, r24
	TWIOut[SONAR_B_ADDRESS+1] = cm>>8;		//MSB
     704:	90 93 db 22 	sts	0x22DB, r25
	TCD1.CTRLFSET = TC_CMD_RESTART_gc;
     708:	88 e0       	ldi	r24, 0x08	; 8
     70a:	81 87       	std	Z+9, r24	; 0x09
}
     70c:	ff 91       	pop	r31
     70e:	ef 91       	pop	r30
     710:	bf 91       	pop	r27
     712:	af 91       	pop	r26
     714:	9f 91       	pop	r25
     716:	8f 91       	pop	r24
     718:	7f 91       	pop	r23
     71a:	6f 91       	pop	r22
     71c:	3f 91       	pop	r19
     71e:	2f 91       	pop	r18
     720:	0f 90       	pop	r0
     722:	0b be       	out	0x3b, r0	; 59
     724:	0f 90       	pop	r0
     726:	09 be       	out	0x39, r0	; 57
     728:	0f 90       	pop	r0
     72a:	08 be       	out	0x38, r0	; 56
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <__vector_47>:

ISR(TCE0_OVF_vect) //trigger sonar, cascading
{
     736:	1f 92       	push	r1
     738:	0f 92       	push	r0
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	0f 92       	push	r0
     73e:	11 24       	eor	r1, r1
     740:	08 b6       	in	r0, 0x38	; 56
     742:	0f 92       	push	r0
     744:	18 be       	out	0x38, r1	; 56
     746:	0b b6       	in	r0, 0x3b	; 59
     748:	0f 92       	push	r0
     74a:	1b be       	out	0x3b, r1	; 59
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	ef 93       	push	r30
     752:	ff 93       	push	r31
	if (sonarSwitch)
     754:	80 91 d4 23 	lds	r24, 0x23D4
     758:	88 23       	and	r24, r24
     75a:	61 f0       	breq	.+24     	; 0x774 <__vector_47+0x3e>
	{
		PORTC.OUTSET = PIN2_bm;
     75c:	e0 e4       	ldi	r30, 0x40	; 64
     75e:	f6 e0       	ldi	r31, 0x06	; 6
     760:	84 e0       	ldi	r24, 0x04	; 4
     762:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     764:	9a e6       	ldi	r25, 0x6A	; 106
     766:	9a 95       	dec	r25
     768:	f1 f7       	brne	.-4      	; 0x766 <__vector_47+0x30>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <__vector_47+0x36>
		_delay_us(10);
		PORTC.OUTCLR = PIN2_bm;
     76c:	86 83       	std	Z+6, r24	; 0x06
		sonarSwitch = 0;
     76e:	10 92 d4 23 	sts	0x23D4, r1
     772:	0c c0       	rjmp	.+24     	; 0x78c <__vector_47+0x56>
	} 
	else
	{
		PORTC.OUTSET = PIN3_bm;
     774:	e0 e4       	ldi	r30, 0x40	; 64
     776:	f6 e0       	ldi	r31, 0x06	; 6
     778:	88 e0       	ldi	r24, 0x08	; 8
     77a:	85 83       	std	Z+5, r24	; 0x05
     77c:	9a e6       	ldi	r25, 0x6A	; 106
     77e:	9a 95       	dec	r25
     780:	f1 f7       	brne	.-4      	; 0x77e <__vector_47+0x48>
     782:	00 c0       	rjmp	.+0      	; 0x784 <__vector_47+0x4e>
		_delay_us(10);
		PORTC.OUTCLR = PIN3_bm;
     784:	86 83       	std	Z+6, r24	; 0x06
		sonarSwitch = 1;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	80 93 d4 23 	sts	0x23D4, r24
	}
}
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	9f 91       	pop	r25
     792:	8f 91       	pop	r24
     794:	0f 90       	pop	r0
     796:	0b be       	out	0x3b, r0	; 59
     798:	0f 90       	pop	r0
     79a:	08 be       	out	0x38, r0	; 56
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	0f 90       	pop	r0
     7a2:	1f 90       	pop	r1
     7a4:	18 95       	reti

000007a6 <set_adcch_input>:
	}
}

void set_adcch_input(ADC_CH_t *ch, uint8_t pos_pin_gc, uint8_t neg_pin_gc)
{
	ch->MUXCTRL = pos_pin_gc | neg_pin_gc;
     7a6:	64 2b       	or	r22, r20
     7a8:	fc 01       	movw	r30, r24
     7aa:	61 83       	std	Z+1, r22	; 0x01
	ch->CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	20 83       	st	Z, r18
     7b0:	08 95       	ret

000007b2 <init_adc>:
}

   void init_adc(void)
   {
	   PORTA.DIRCLR = PIN4_bm|PIN3_bm|PIN2_bm|PIN1_bm|PIN0_bm; // PA3..0 are input
     7b2:	8f e1       	ldi	r24, 0x1F	; 31
     7b4:	e0 e0       	ldi	r30, 0x00	; 0
     7b6:	f6 e0       	ldi	r31, 0x06	; 6
     7b8:	82 83       	std	Z+2, r24	; 0x02
	   
	   lightSensor[0] =  &ADCA.CH0.RES;
     7ba:	84 e2       	ldi	r24, 0x24	; 36
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	80 93 cc 23 	sts	0x23CC, r24
     7c2:	90 93 cd 23 	sts	0x23CD, r25
	   lightSensor[1] =  &ADCA.CH1.RES;
     7c6:	8c e2       	ldi	r24, 0x2C	; 44
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	80 93 ce 23 	sts	0x23CE, r24
     7ce:	90 93 cf 23 	sts	0x23CF, r25
	   lightSensor[2] =  &ADCA.CH2.RES;
     7d2:	84 e3       	ldi	r24, 0x34	; 52
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	80 93 d0 23 	sts	0x23D0, r24
     7da:	90 93 d1 23 	sts	0x23D1, r25
	   lightSensor[3] =  &ADCA.CH3.RES;
     7de:	8c e3       	ldi	r24, 0x3C	; 60
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	80 93 d2 23 	sts	0x23D2, r24
     7e6:	90 93 d3 23 	sts	0x23D3, r25
	   
	   set_adcch_input(&ADCA.CH0, ADC_CH_MUXPOS_PIN1_gc, ADC_CH_MUXNEG_INTGND_gc);
     7ea:	47 e0       	ldi	r20, 0x07	; 7
     7ec:	68 e0       	ldi	r22, 0x08	; 8
     7ee:	80 e2       	ldi	r24, 0x20	; 32
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	d9 df       	rcall	.-78     	; 0x7a6 <set_adcch_input>
	   set_adcch_input(&ADCA.CH1, ADC_CH_MUXPOS_PIN2_gc, ADC_CH_MUXNEG_INTGND_gc);
     7f4:	47 e0       	ldi	r20, 0x07	; 7
     7f6:	60 e1       	ldi	r22, 0x10	; 16
     7f8:	88 e2       	ldi	r24, 0x28	; 40
     7fa:	92 e0       	ldi	r25, 0x02	; 2
     7fc:	d4 df       	rcall	.-88     	; 0x7a6 <set_adcch_input>
	   set_adcch_input(&ADCA.CH2, ADC_CH_MUXPOS_PIN3_gc, ADC_CH_MUXNEG_INTGND_gc);
     7fe:	47 e0       	ldi	r20, 0x07	; 7
     800:	68 e1       	ldi	r22, 0x18	; 24
     802:	80 e3       	ldi	r24, 0x30	; 48
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	cf df       	rcall	.-98     	; 0x7a6 <set_adcch_input>
	   set_adcch_input(&ADCA.CH3, ADC_CH_MUXPOS_PIN4_gc, ADC_CH_MUXNEG_INTGND_gc);
     808:	47 e0       	ldi	r20, 0x07	; 7
     80a:	60 e2       	ldi	r22, 0x20	; 32
     80c:	88 e3       	ldi	r24, 0x38	; 56
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	ca df       	rcall	.-108    	; 0x7a6 <set_adcch_input>
	   ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc |
     812:	e0 e0       	ldi	r30, 0x00	; 0
     814:	f2 e0       	ldi	r31, 0x02	; 2
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	81 83       	std	Z+1, r24	; 0x01
	   (!ADC_CONMODE_bm) |
	   ADC_FREERUN_bm; // free running mode
	   ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
     81a:	80 e2       	ldi	r24, 0x20	; 32
     81c:	82 83       	std	Z+2, r24	; 0x02
	   ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
     81e:	87 e0       	ldi	r24, 0x07	; 7
     820:	84 83       	std	Z+4, r24	; 0x04
	   ADCA.CTRLA = ADC_ENABLE_bm;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	80 83       	st	Z, r24
     826:	08 95       	ret

00000828 <clock_init32MCalibrate>:
   }
   
void clock_init32MCalibrate(void) {
	
	// Select 32 kHz crystal and low power mode
	OSC.XOSCCTRL = ( OSC.XOSCCTRL & ~OSC_XOSCSEL_gm) | OSC_XOSCSEL_32KHz_gc;
     828:	e0 e5       	ldi	r30, 0x50	; 80
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	82 81       	ldd	r24, Z+2	; 0x02
     82e:	80 7f       	andi	r24, 0xF0	; 240
     830:	82 60       	ori	r24, 0x02	; 2
     832:	82 83       	std	Z+2, r24	; 0x02

	// Switch to calibrated 32MHz oscillator and disable 2 MHz RC oscillator
	CLKSYS_Enable( OSC_XOSCEN_bm );
     834:	80 81       	ld	r24, Z
     836:	88 60       	ori	r24, 0x08	; 8
     838:	80 83       	st	Z, r24
	CLKSYS_Enable( OSC_RC32MEN_bm );
     83a:	80 81       	ld	r24, Z
     83c:	82 60       	ori	r24, 0x02	; 2
     83e:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     840:	81 81       	ldd	r24, Z+1	; 0x01
     842:	83 ff       	sbrs	r24, 3
     844:	fd cf       	rjmp	.-6      	; 0x840 <clock_init32MCalibrate+0x18>
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
     846:	e0 e5       	ldi	r30, 0x50	; 80
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	81 81       	ldd	r24, Z+1	; 0x01
     84c:	81 ff       	sbrs	r24, 1
     84e:	fd cf       	rjmp	.-6      	; 0x84a <clock_init32MCalibrate+0x22>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	19 dd       	rcall	.-1486   	; 0x286 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	0d dd       	rcall	.-1510   	; 0x272 <CLKSYS_Disable>
	OSC.DFLLCTRL = (OSC.DFLLCTRL & ~OSC_RC32MCREF_gm) | OSC_RC32MCREF_XOSC32K_gc;
     858:	e0 e5       	ldi	r30, 0x50	; 80
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	86 81       	ldd	r24, Z+6	; 0x06
     85e:	89 7f       	andi	r24, 0xF9	; 249
     860:	82 60       	ori	r24, 0x02	; 2
     862:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     864:	e0 e6       	ldi	r30, 0x60	; 96
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	81 60       	ori	r24, 0x01	; 1
     86c:	80 83       	st	Z, r24
     86e:	08 95       	ret

00000870 <init_all>:
}

void init_all(void)
{
     870:	cf 92       	push	r12
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
	// set port direction //
	PORTE.DIRSET = PIN0_bm; //debug led
     87e:	21 e0       	ldi	r18, 0x01	; 1
     880:	e0 e8       	ldi	r30, 0x80	; 128
     882:	f6 e0       	ldi	r31, 0x06	; 6
     884:	21 83       	std	Z+1, r18	; 0x01
	PORTC.DIRSET = PIN2_bm|PIN3_bm; //sonar trigger
     886:	e0 e4       	ldi	r30, 0x40	; 64
     888:	f6 e0       	ldi	r31, 0x06	; 6
     88a:	8c e0       	ldi	r24, 0x0C	; 12
     88c:	81 83       	std	Z+1, r24	; 0x01

	// set timers //
	//delay for uart read need other solution
	PORTC.INT0MASK = PIN6_bm;
     88e:	80 e4       	ldi	r24, 0x40	; 64
     890:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.PIN6CTRL = PORT_ISC_RISING_gc;
     892:	26 8b       	std	Z+22, r18	; 0x16
	PORTC.INTCTRL  = PORT_INT0LVL_LO_gc;
     894:	21 87       	std	Z+9, r18	; 0x09
	TCC1.CTRLB     = TC_WGMODE_NORMAL_gc;
     896:	a0 e4       	ldi	r26, 0x40	; 64
     898:	b8 e0       	ldi	r27, 0x08	; 8
     89a:	11 96       	adiw	r26, 0x01	; 1
     89c:	1c 92       	st	X, r1
     89e:	11 97       	sbiw	r26, 0x01	; 1
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     8a0:	1c 92       	st	X, r1
	TCC1.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     8a2:	16 96       	adiw	r26, 0x06	; 6
     8a4:	2c 93       	st	X, r18
     8a6:	16 97       	sbiw	r26, 0x06	; 6
	TCC1.PER       = 400 * 16;
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	99 e1       	ldi	r25, 0x19	; 25
     8ac:	96 96       	adiw	r26, 0x26	; 38
     8ae:	8d 93       	st	X+, r24
     8b0:	9c 93       	st	X, r25
     8b2:	97 97       	sbiw	r26, 0x27	; 39
	//sonar request
	TCE0.CTRLB     = TC_WGMODE_NORMAL_gc;
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	ba e0       	ldi	r27, 0x0A	; 10
     8b8:	11 96       	adiw	r26, 0x01	; 1
     8ba:	1c 92       	st	X, r1
     8bc:	11 97       	sbiw	r26, 0x01	; 1
	TCE0.CTRLA     = TC_CLKSEL_DIV1024_gc;
     8be:	87 e0       	ldi	r24, 0x07	; 7
     8c0:	8c 93       	st	X, r24
	TCE0.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     8c2:	16 96       	adiw	r26, 0x06	; 6
     8c4:	2c 93       	st	X, r18
     8c6:	16 97       	sbiw	r26, 0x06	; 6
	TCE0.PER       = 195 * 16;//~10Hz so 5Hz each
     8c8:	80 e3       	ldi	r24, 0x30	; 48
     8ca:	9c e0       	ldi	r25, 0x0C	; 12
     8cc:	96 96       	adiw	r26, 0x26	; 38
     8ce:	8d 93       	st	X+, r24
     8d0:	9c 93       	st	X, r25
     8d2:	97 97       	sbiw	r26, 0x27	; 39
	//timer for sonar A
	PORTC.PIN4CTRL = PORT_ISC_BOTHEDGES_gc;
     8d4:	14 8a       	std	Z+20, r1	; 0x14
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
     8d6:	c0 e8       	ldi	r28, 0x80	; 128
     8d8:	d1 e0       	ldi	r29, 0x01	; 1
     8da:	84 e6       	ldi	r24, 0x64	; 100
     8dc:	88 83       	st	Y, r24
	TCD0.CTRLD = TC_EVACT_PW_gc | TC_EVSEL_CH0_gc;
     8de:	a0 e0       	ldi	r26, 0x00	; 0
     8e0:	b9 e0       	ldi	r27, 0x09	; 9
     8e2:	88 ec       	ldi	r24, 0xC8	; 200
     8e4:	13 96       	adiw	r26, 0x03	; 3
     8e6:	8c 93       	st	X, r24
     8e8:	13 97       	sbiw	r26, 0x03	; 3
	TCD0.CTRLB = TC0_CCAEN_bm | TC_WGMODE_NORMAL_gc;
     8ea:	30 e1       	ldi	r19, 0x10	; 16
     8ec:	11 96       	adiw	r26, 0x01	; 1
     8ee:	3c 93       	st	X, r19
     8f0:	11 97       	sbiw	r26, 0x01	; 1
	TCD0.CTRLA = TC_CLKSEL_DIV1_gc;
     8f2:	2c 93       	st	X, r18
	TCD0.INTCTRLB = TC_CCAINTLVL_LO_gc;
     8f4:	17 96       	adiw	r26, 0x07	; 7
     8f6:	2c 93       	st	X, r18
     8f8:	17 97       	sbiw	r26, 0x07	; 7
	TCD0.PER = 0xFFFF;
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	9f ef       	ldi	r25, 0xFF	; 255
     8fe:	96 96       	adiw	r26, 0x26	; 38
     900:	8d 93       	st	X+, r24
     902:	9c 93       	st	X, r25
     904:	97 97       	sbiw	r26, 0x27	; 39
	//timer for sonar B
	PORTC.PIN5CTRL = PORT_ISC_BOTHEDGES_gc;
     906:	15 8a       	std	Z+21, r1	; 0x15
	EVSYS.CH1MUX = EVSYS_CHMUX_PORTC_PIN5_gc;
     908:	45 e6       	ldi	r20, 0x65	; 101
     90a:	49 83       	std	Y+1, r20	; 0x01
	TCD1.CTRLD = TC_EVACT_PW_gc | TC_EVSEL_CH1_gc;
     90c:	e0 e4       	ldi	r30, 0x40	; 64
     90e:	f9 e0       	ldi	r31, 0x09	; 9
     910:	49 ec       	ldi	r20, 0xC9	; 201
     912:	43 83       	std	Z+3, r20	; 0x03
	TCD1.CTRLB = TC1_CCAEN_bm | TC_WGMODE_NORMAL_gc;
     914:	31 83       	std	Z+1, r19	; 0x01
	TCD1.CTRLA = TC_CLKSEL_DIV1_gc;
     916:	20 83       	st	Z, r18
	TCD1.INTCTRLB = TC_CCAINTLVL_LO_gc;
     918:	27 83       	std	Z+7, r18	; 0x07
	TCD1.PER = 0xFFFF;
     91a:	86 a3       	std	Z+38, r24	; 0x26
     91c:	97 a3       	std	Z+39, r25	; 0x27
	
	init_adc();
     91e:	49 df       	rcall	.-366    	; 0x7b2 <init_adc>
	
	// set uart's //
	init_uart(&uartD0, &USARTD0, F_CPU, D0_BAUD, D0_CLK2X); //debug
     920:	c1 2c       	mov	r12, r1
     922:	e1 2c       	mov	r14, r1
     924:	12 ec       	ldi	r17, 0xC2	; 194
     926:	f1 2e       	mov	r15, r17
     928:	01 e0       	ldi	r16, 0x01	; 1
     92a:	10 e0       	ldi	r17, 0x00	; 0
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	38 e4       	ldi	r19, 0x48	; 72
     930:	48 ee       	ldi	r20, 0xE8	; 232
     932:	51 e0       	ldi	r21, 0x01	; 1
     934:	60 ea       	ldi	r22, 0xA0	; 160
     936:	79 e0       	ldi	r23, 0x09	; 9
     938:	86 e3       	ldi	r24, 0x36	; 54
     93a:	90 e2       	ldi	r25, 0x20	; 32
     93c:	f9 d2       	rcall	.+1522   	; 0xf30 <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); //RFID reader
     93e:	10 e8       	ldi	r17, 0x80	; 128
     940:	e1 2e       	mov	r14, r17
     942:	15 e2       	ldi	r17, 0x25	; 37
     944:	f1 2e       	mov	r15, r17
     946:	00 e0       	ldi	r16, 0x00	; 0
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	38 e4       	ldi	r19, 0x48	; 72
     94e:	48 ee       	ldi	r20, 0xE8	; 232
     950:	51 e0       	ldi	r21, 0x01	; 1
     952:	60 eb       	ldi	r22, 0xB0	; 176
     954:	78 e0       	ldi	r23, 0x08	; 8
     956:	86 ec       	ldi	r24, 0xC6	; 198
     958:	91 e2       	ldi	r25, 0x21	; 33
     95a:	ea d2       	rcall	.+1492   	; 0xf30 <init_uart>
	
	// set TWI as slave for NXT //
	TWI_SlaveInitializeDriver(&twiSlave, &TWIC, TWIC_SlaveProcessData);
     95c:	45 e5       	ldi	r20, 0x55	; 85
     95e:	51 e0       	ldi	r21, 0x01	; 1
     960:	60 e8       	ldi	r22, 0x80	; 128
     962:	74 e0       	ldi	r23, 0x04	; 4
     964:	8d e3       	ldi	r24, 0x3D	; 61
     966:	91 e2       	ldi	r25, 0x21	; 33
     968:	94 d0       	rcall	.+296    	; 0xa92 <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twiSlave, SLAVE_ADDRESS, TWI_SLAVE_INTLVL_MED_gc);
     96a:	40 e8       	ldi	r20, 0x80	; 128
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	8d e3       	ldi	r24, 0x3D	; 61
     970:	91 e2       	ldi	r25, 0x21	; 33
     972:	a8 d0       	rcall	.+336    	; 0xac4 <TWI_SlaveInitializeModule>
	
	// Turn on interrupts //
	PMIC.CTRL = PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm;
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	e0 ea       	ldi	r30, 0xA0	; 160
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	82 83       	std	Z+2, r24	; 0x02
	sei();
     97c:	78 94       	sei
}	
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	cf 90       	pop	r12
     98c:	08 95       	ret

0000098e <main>:
void init_adc(void);
void clock_init32MCalibrate(void);

int main(void)
{
	clock_init32MCalibrate();
     98e:	4c df       	rcall	.-360    	; 0x828 <clock_init32MCalibrate>
	init_all();
     990:	6f df       	rcall	.-290    	; 0x870 <init_all>
	TWIOut[RFID_NUMBER_ADDRESS] =	'N';
     992:	8e e4       	ldi	r24, 0x4E	; 78
     994:	80 93 ce 22 	sts	0x22CE, r24
	TWIOut[RFID_NUMBER_ADDRESS+1] =	'o';
     998:	8f e6       	ldi	r24, 0x6F	; 111
     99a:	80 93 cf 22 	sts	0x22CF, r24
	TWIOut[RFID_NUMBER_ADDRESS+2] =	' ';
     99e:	80 e2       	ldi	r24, 0x20	; 32
     9a0:	80 93 d0 22 	sts	0x22D0, r24
	TWIOut[RFID_NUMBER_ADDRESS+3] =	'D';
     9a4:	84 e4       	ldi	r24, 0x44	; 68
     9a6:	80 93 d1 22 	sts	0x22D1, r24
	TWIOut[RFID_NUMBER_ADDRESS+4] =	'a';
     9aa:	81 e6       	ldi	r24, 0x61	; 97
     9ac:	80 93 d2 22 	sts	0x22D2, r24
	TWIOut[RFID_NUMBER_ADDRESS+5] =	't';
     9b0:	94 e7       	ldi	r25, 0x74	; 116
     9b2:	90 93 d3 22 	sts	0x22D3, r25
	TWIOut[RFID_NUMBER_ADDRESS+6] =	'a';
     9b6:	80 93 d4 22 	sts	0x22D4, r24
	sprintf(str, "UART Connected.\n\r");
     9ba:	82 e1       	ldi	r24, 0x12	; 18
     9bc:	e0 e0       	ldi	r30, 0x00	; 0
     9be:	f0 e2       	ldi	r31, 0x20	; 32
     9c0:	a5 ed       	ldi	r26, 0xD5	; 213
     9c2:	b3 e2       	ldi	r27, 0x23	; 35
     9c4:	01 90       	ld	r0, Z+
     9c6:	0d 92       	st	X+, r0
     9c8:	8a 95       	dec	r24
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <main+0x36>
	uart_puts(&uartD0, str);
     9cc:	65 ed       	ldi	r22, 0xD5	; 213
     9ce:	73 e2       	ldi	r23, 0x23	; 35
     9d0:	86 e3       	ldi	r24, 0x36	; 54
     9d2:	90 e2       	ldi	r25, 0x20	; 32
     9d4:	9b d1       	rcall	.+822    	; 0xd0c <uart_puts>
	
	while(1)
	{
		sprintf(str, "Sonar A = %d cm\n\r", ((TWIOut[SONAR_A_ADDRESS+1]<<8)+TWIOut[SONAR_A_ADDRESS]));
     9d6:	0f 2e       	mov	r0, r31
     9d8:	f9 ed       	ldi	r31, 0xD9	; 217
     9da:	af 2e       	mov	r10, r31
     9dc:	f2 e2       	ldi	r31, 0x22	; 34
     9de:	bf 2e       	mov	r11, r31
     9e0:	f0 2d       	mov	r31, r0
     9e2:	0f 2e       	mov	r0, r31
     9e4:	f8 ed       	ldi	r31, 0xD8	; 216
     9e6:	cf 2e       	mov	r12, r31
     9e8:	f2 e2       	ldi	r31, 0x22	; 34
     9ea:	df 2e       	mov	r13, r31
     9ec:	f0 2d       	mov	r31, r0
     9ee:	0f 2e       	mov	r0, r31
     9f0:	f2 e1       	ldi	r31, 0x12	; 18
     9f2:	ef 2e       	mov	r14, r31
     9f4:	f0 e2       	ldi	r31, 0x20	; 32
     9f6:	ff 2e       	mov	r15, r31
     9f8:	f0 2d       	mov	r31, r0
     9fa:	c5 ed       	ldi	r28, 0xD5	; 213
     9fc:	d3 e2       	ldi	r29, 0x23	; 35
		uart_puts(&uartD0, str);
		sprintf(str, "Sonar B = %d cm\n\r", ((TWIOut[SONAR_B_ADDRESS+1]<<8)+TWIOut[SONAR_B_ADDRESS]));
     9fe:	0f 2e       	mov	r0, r31
     a00:	fb ed       	ldi	r31, 0xDB	; 219
     a02:	6f 2e       	mov	r6, r31
     a04:	f2 e2       	ldi	r31, 0x22	; 34
     a06:	7f 2e       	mov	r7, r31
     a08:	f0 2d       	mov	r31, r0
     a0a:	0f 2e       	mov	r0, r31
     a0c:	fa ed       	ldi	r31, 0xDA	; 218
     a0e:	4f 2e       	mov	r4, r31
     a10:	f2 e2       	ldi	r31, 0x22	; 34
     a12:	5f 2e       	mov	r5, r31
     a14:	f0 2d       	mov	r31, r0
     a16:	0f 2e       	mov	r0, r31
     a18:	f4 e2       	ldi	r31, 0x24	; 36
     a1a:	2f 2e       	mov	r2, r31
     a1c:	f0 e2       	ldi	r31, 0x20	; 32
     a1e:	3f 2e       	mov	r3, r31
     a20:	f0 2d       	mov	r31, r0
	sprintf(str, "UART Connected.\n\r");
	uart_puts(&uartD0, str);
	
	while(1)
	{
		sprintf(str, "Sonar A = %d cm\n\r", ((TWIOut[SONAR_A_ADDRESS+1]<<8)+TWIOut[SONAR_A_ADDRESS]));
     a22:	f5 01       	movw	r30, r10
     a24:	10 81       	ld	r17, Z
     a26:	00 e0       	ldi	r16, 0x00	; 0
     a28:	f6 01       	movw	r30, r12
     a2a:	80 81       	ld	r24, Z
     a2c:	98 01       	movw	r18, r16
     a2e:	28 0f       	add	r18, r24
     a30:	31 1d       	adc	r19, r1
     a32:	c9 01       	movw	r24, r18
     a34:	9f 93       	push	r25
     a36:	2f 93       	push	r18
     a38:	ff 92       	push	r15
     a3a:	ef 92       	push	r14
     a3c:	df 93       	push	r29
     a3e:	cf 93       	push	r28
     a40:	b7 d5       	rcall	.+2926   	; 0x15b0 <sprintf>
		uart_puts(&uartD0, str);
     a42:	be 01       	movw	r22, r28
     a44:	86 e3       	ldi	r24, 0x36	; 54
     a46:	90 e2       	ldi	r25, 0x20	; 32
     a48:	61 d1       	rcall	.+706    	; 0xd0c <uart_puts>
		sprintf(str, "Sonar B = %d cm\n\r", ((TWIOut[SONAR_B_ADDRESS+1]<<8)+TWIOut[SONAR_B_ADDRESS]));
     a4a:	f3 01       	movw	r30, r6
     a4c:	90 80       	ld	r9, Z
     a4e:	81 2c       	mov	r8, r1
     a50:	f2 01       	movw	r30, r4
     a52:	80 81       	ld	r24, Z
     a54:	94 01       	movw	r18, r8
     a56:	28 0f       	add	r18, r24
     a58:	31 1d       	adc	r19, r1
     a5a:	c9 01       	movw	r24, r18
     a5c:	9f 93       	push	r25
     a5e:	2f 93       	push	r18
     a60:	3f 92       	push	r3
     a62:	2f 92       	push	r2
     a64:	df 93       	push	r29
     a66:	cf 93       	push	r28
     a68:	a3 d5       	rcall	.+2886   	; 0x15b0 <sprintf>
		uart_puts(&uartD0, str);
     a6a:	be 01       	movw	r22, r28
     a6c:	86 e3       	ldi	r24, 0x36	; 54
     a6e:	90 e2       	ldi	r25, 0x20	; 32
     a70:	4d d1       	rcall	.+666    	; 0xd0c <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a72:	9f ef       	ldi	r25, 0xFF	; 255
     a74:	e7 ea       	ldi	r30, 0xA7	; 167
     a76:	f1 e6       	ldi	r31, 0x61	; 97
     a78:	91 50       	subi	r25, 0x01	; 1
     a7a:	e0 40       	sbci	r30, 0x00	; 0
     a7c:	f0 40       	sbci	r31, 0x00	; 0
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <main+0xea>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <main+0xf4>
     a82:	00 00       	nop
     a84:	2d b7       	in	r18, 0x3d	; 61
     a86:	3e b7       	in	r19, 0x3e	; 62
     a88:	24 5f       	subi	r18, 0xF4	; 244
     a8a:	3f 4f       	sbci	r19, 0xFF	; 255
     a8c:	2d bf       	out	0x3d, r18	; 61
     a8e:	3e bf       	out	0x3e, r19	; 62
     a90:	c8 cf       	rjmp	.-112    	; 0xa22 <main+0x94>

00000a92 <TWI_SlaveInitializeDriver>:
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
	twi->interface = module;
     a92:	fc 01       	movw	r30, r24
     a94:	60 83       	st	Z, r22
     a96:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
     a98:	42 83       	std	Z+2, r20	; 0x02
     a9a:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
     a9c:	ec 57       	subi	r30, 0x7C	; 124
     a9e:	ff 4f       	sbci	r31, 0xFF	; 255
     aa0:	10 82       	st	Z, r1
	twi->bytesSent = 0;
     aa2:	fc 01       	movw	r30, r24
     aa4:	eb 57       	subi	r30, 0x7B	; 123
     aa6:	ff 4f       	sbci	r31, 0xFF	; 255
     aa8:	10 82       	st	Z, r1
	twi->status = TWIS_STATUS_READY;
     aaa:	fc 01       	movw	r30, r24
     aac:	ea 57       	subi	r30, 0x7A	; 122
     aae:	ff 4f       	sbci	r31, 0xFF	; 255
     ab0:	10 82       	st	Z, r1
	twi->result = TWIS_RESULT_UNKNOWN;
     ab2:	fc 01       	movw	r30, r24
     ab4:	e9 57       	subi	r30, 0x79	; 121
     ab6:	ff 4f       	sbci	r31, 0xFF	; 255
     ab8:	10 82       	st	Z, r1
	twi->abort = false;
     aba:	fc 01       	movw	r30, r24
     abc:	e8 57       	subi	r30, 0x78	; 120
     abe:	ff 4f       	sbci	r31, 0xFF	; 255
     ac0:	10 82       	st	Z, r1
     ac2:	08 95       	ret

00000ac4 <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
     ac4:	dc 01       	movw	r26, r24
     ac6:	ed 91       	ld	r30, X+
     ac8:	fc 91       	ld	r31, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	48 63       	ori	r20, 0x38	; 56
     ace:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
     ad0:	ed 91       	ld	r30, X+
     ad2:	fc 91       	ld	r31, X
     ad4:	66 0f       	add	r22, r22
     ad6:	63 87       	std	Z+11, r22	; 0x0b
     ad8:	08 95       	ret

00000ada <TWI_SlaveTransactionFinished>:
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     ada:	fc 01       	movw	r30, r24
     adc:	e9 57       	subi	r30, 0x79	; 121
     ade:	ff 4f       	sbci	r31, 0xFF	; 255
     ae0:	60 83       	st	Z, r22
	twi->status = TWIS_STATUS_READY;
     ae2:	fc 01       	movw	r30, r24
     ae4:	ea 57       	subi	r30, 0x7A	; 122
     ae6:	ff 4f       	sbci	r31, 0xFF	; 255
     ae8:	10 82       	st	Z, r1
     aea:	08 95       	ret

00000aec <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
     af0:	fc 01       	movw	r30, r24
     af2:	eb 57       	subi	r30, 0x7B	; 123
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	20 81       	ld	r18, Z
     af8:	22 23       	and	r18, r18
     afa:	59 f0       	breq	.+22     	; 0xb12 <TWI_SlaveWriteHandler+0x26>
     afc:	dc 01       	movw	r26, r24
     afe:	ed 91       	ld	r30, X+
     b00:	fc 91       	ld	r31, X
     b02:	22 85       	ldd	r18, Z+10	; 0x0a
     b04:	24 ff       	sbrs	r18, 4
     b06:	05 c0       	rjmp	.+10     	; 0xb12 <TWI_SlaveWriteHandler+0x26>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     b08:	22 e0       	ldi	r18, 0x02	; 2
     b0a:	21 87       	std	Z+9, r18	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	e5 df       	rcall	.-54     	; 0xada <TWI_SlaveTransactionFinished>
     b10:	24 c0       	rjmp	.+72     	; 0xb5a <TWI_SlaveWriteHandler+0x6e>
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
     b12:	fc 01       	movw	r30, r24
     b14:	eb 57       	subi	r30, 0x7B	; 123
     b16:	ff 4f       	sbci	r31, 0xFF	; 255
     b18:	20 81       	ld	r18, Z
     b1a:	20 34       	cpi	r18, 0x40	; 64
     b1c:	b8 f4       	brcc	.+46     	; 0xb4c <TWI_SlaveWriteHandler+0x60>
			uint8_t data = twi->sendData[twi->bytesSent];
     b1e:	fc 01       	movw	r30, r24
     b20:	eb 57       	subi	r30, 0x7B	; 123
     b22:	ff 4f       	sbci	r31, 0xFF	; 255
     b24:	20 81       	ld	r18, Z
     b26:	dc 01       	movw	r26, r24
     b28:	a2 0f       	add	r26, r18
     b2a:	b1 1d       	adc	r27, r1
     b2c:	ac 5b       	subi	r26, 0xBC	; 188
     b2e:	bf 4f       	sbci	r27, 0xFF	; 255
     b30:	2c 91       	ld	r18, X
			twi->interface->SLAVE.DATA = data;
     b32:	ec 01       	movw	r28, r24
     b34:	a8 81       	ld	r26, Y
     b36:	b9 81       	ldd	r27, Y+1	; 0x01
     b38:	1c 96       	adiw	r26, 0x0c	; 12
     b3a:	2c 93       	st	X, r18
			twi->bytesSent++;
     b3c:	20 81       	ld	r18, Z
     b3e:	2f 5f       	subi	r18, 0xFF	; 255
     b40:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     b42:	e8 81       	ld	r30, Y
     b44:	f9 81       	ldd	r31, Y+1	; 0x01
     b46:	83 e0       	ldi	r24, 0x03	; 3
     b48:	81 87       	std	Z+9, r24	; 0x09
     b4a:	07 c0       	rjmp	.+14     	; 0xb5a <TWI_SlaveWriteHandler+0x6e>
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     b4c:	dc 01       	movw	r26, r24
     b4e:	ed 91       	ld	r30, X+
     b50:	fc 91       	ld	r31, X
     b52:	22 e0       	ldi	r18, 0x02	; 2
     b54:	21 87       	std	Z+9, r18	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     b56:	62 e0       	ldi	r22, 0x02	; 2
     b58:	c0 df       	rcall	.-128    	; 0xada <TWI_SlaveTransactionFinished>
		}
	}
}
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	ec 01       	movw	r28, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     b6a:	e8 81       	ld	r30, Y
     b6c:	f9 81       	ldd	r31, Y+1	; 0x01
     b6e:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
     b70:	84 60       	ori	r24, 0x04	; 4
     b72:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
     b74:	fe 01       	movw	r30, r28
     b76:	ec 57       	subi	r30, 0x7C	; 124
     b78:	ff 4f       	sbci	r31, 0xFF	; 255
     b7a:	80 81       	ld	r24, Z
     b7c:	80 34       	cpi	r24, 0x40	; 64
     b7e:	48 f5       	brcc	.+82     	; 0xbd2 <TWI_SlaveReadHandler+0x72>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
     b80:	e8 81       	ld	r30, Y
     b82:	f9 81       	ldd	r31, Y+1	; 0x01
     b84:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
     b86:	8e 01       	movw	r16, r28
     b88:	0c 57       	subi	r16, 0x7C	; 124
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
     b8c:	f8 01       	movw	r30, r16
     b8e:	90 81       	ld	r25, Z
     b90:	fe 01       	movw	r30, r28
     b92:	e9 0f       	add	r30, r25
     b94:	f1 1d       	adc	r31, r1
     b96:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
     b98:	ea 81       	ldd	r30, Y+2	; 0x02
     b9a:	fb 81       	ldd	r31, Y+3	; 0x03
     b9c:	19 95       	eicall

		twi->bytesReceived++;
     b9e:	f8 01       	movw	r30, r16
     ba0:	80 81       	ld	r24, Z
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	80 83       	st	Z, r24

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
     ba6:	fe 01       	movw	r30, r28
     ba8:	e8 57       	subi	r30, 0x78	; 120
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	80 81       	ld	r24, Z
     bae:	88 23       	and	r24, r24
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <TWI_SlaveReadHandler+0x68>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     bb2:	e8 81       	ld	r30, Y
     bb4:	f9 81       	ldd	r31, Y+1	; 0x01
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	81 87       	std	Z+9, r24	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     bba:	66 e0       	ldi	r22, 0x06	; 6
     bbc:	ce 01       	movw	r24, r28
     bbe:	8d df       	rcall	.-230    	; 0xada <TWI_SlaveTransactionFinished>
			twi->abort = false;
     bc0:	c8 57       	subi	r28, 0x78	; 120
     bc2:	df 4f       	sbci	r29, 0xFF	; 255
     bc4:	18 82       	st	Y, r1
     bc6:	0c c0       	rjmp	.+24     	; 0xbe0 <TWI_SlaveReadHandler+0x80>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     bc8:	e8 81       	ld	r30, Y
     bca:	f9 81       	ldd	r31, Y+1	; 0x01
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	81 87       	std	Z+9, r24	; 0x09
     bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <TWI_SlaveReadHandler+0x80>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
     bd2:	e8 81       	ld	r30, Y
     bd4:	f9 81       	ldd	r31, Y+1	; 0x01
     bd6:	86 e0       	ldi	r24, 0x06	; 6
     bd8:	81 87       	std	Z+9, r24	; 0x09
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     bda:	62 e0       	ldi	r22, 0x02	; 2
     bdc:	ce 01       	movw	r24, r28
     bde:	7d df       	rcall	.-262    	; 0xada <TWI_SlaveTransactionFinished>
	}
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	08 95       	ret

00000bea <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
     bea:	dc 01       	movw	r26, r24
     bec:	ed 91       	ld	r30, X+
     bee:	fc 91       	ld	r31, X
     bf0:	22 85       	ldd	r18, Z+10	; 0x0a
     bf2:	21 ff       	sbrs	r18, 1
     bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <TWI_SlaveDataHandler+0xe>
		TWI_SlaveWriteHandler(twi);
     bf6:	7a cf       	rjmp	.-268    	; 0xaec <TWI_SlaveWriteHandler>
	} else {
		TWI_SlaveReadHandler(twi);
     bf8:	b3 cf       	rjmp	.-154    	; 0xb60 <TWI_SlaveReadHandler>

00000bfa <TWI_SlaveStopHandler>:
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     bfa:	dc 01       	movw	r26, r24
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	11 97       	sbiw	r26, 0x01	; 1
     c02:	20 85       	ldd	r18, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     c04:	2b 7f       	andi	r18, 0xFB	; 251
     c06:	20 87       	std	Z+8, r18	; 0x08
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     c08:	ed 91       	ld	r30, X+
     c0a:	fc 91       	ld	r31, X
     c0c:	22 85       	ldd	r18, Z+10	; 0x0a
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
     c0e:	20 64       	ori	r18, 0x40	; 64
     c10:	22 87       	std	Z+10, r18	; 0x0a

	TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	62 cf       	rjmp	.-316    	; 0xada <TWI_SlaveTransactionFinished>

00000c16 <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	ec 01       	movw	r28, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
     c1c:	fc 01       	movw	r30, r24
     c1e:	e8 57       	subi	r30, 0x78	; 120
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	80 81       	ld	r24, Z
     c24:	88 23       	and	r24, r24
     c26:	59 f0       	breq	.+22     	; 0xc3e <TWI_SlaveAddressMatchHandler+0x28>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     c28:	e8 81       	ld	r30, Y
     c2a:	f9 81       	ldd	r31, Y+1	; 0x01
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	81 87       	std	Z+9, r24	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     c30:	66 e0       	ldi	r22, 0x06	; 6
     c32:	ce 01       	movw	r24, r28
     c34:	52 df       	rcall	.-348    	; 0xada <TWI_SlaveTransactionFinished>
		twi->abort = false;
     c36:	c8 57       	subi	r28, 0x78	; 120
     c38:	df 4f       	sbci	r29, 0xFF	; 255
     c3a:	18 82       	st	Y, r1
     c3c:	1a c0       	rjmp	.+52     	; 0xc72 <TWI_SlaveAddressMatchHandler+0x5c>
	} else {
		twi->status = TWIS_STATUS_BUSY;
     c3e:	fe 01       	movw	r30, r28
     c40:	ea 57       	subi	r30, 0x7A	; 122
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	80 83       	st	Z, r24
		twi->result = TWIS_RESULT_UNKNOWN;
     c48:	fe 01       	movw	r30, r28
     c4a:	e9 57       	subi	r30, 0x79	; 121
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	10 82       	st	Z, r1

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     c50:	e8 81       	ld	r30, Y
     c52:	f9 81       	ldd	r31, Y+1	; 0x01
     c54:	80 85       	ldd	r24, Z+8	; 0x08
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     c56:	8b 7f       	andi	r24, 0xFB	; 251
     c58:	80 87       	std	Z+8, r24	; 0x08

		twi->bytesReceived = 0;
     c5a:	fe 01       	movw	r30, r28
     c5c:	ec 57       	subi	r30, 0x7C	; 124
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     c62:	fe 01       	movw	r30, r28
     c64:	eb 57       	subi	r30, 0x7B	; 123
     c66:	ff 4f       	sbci	r31, 0xFF	; 255
     c68:	10 82       	st	Z, r1

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     c6a:	e8 81       	ld	r30, Y
     c6c:	f9 81       	ldd	r31, Y+1	; 0x01
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	81 87       	std	Z+9, r24	; 0x09
	}
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <TWI_SlaveInterruptHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     c78:	dc 01       	movw	r26, r24
     c7a:	ed 91       	ld	r30, X+
     c7c:	fc 91       	ld	r31, X
     c7e:	22 85       	ldd	r18, Z+10	; 0x0a

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
     c80:	22 ff       	sbrs	r18, 2
     c82:	12 c0       	rjmp	.+36     	; 0xca8 <TWI_SlaveInterruptHandler+0x30>
		twi->bytesReceived = 0;
     c84:	fc 01       	movw	r30, r24
     c86:	ec 57       	subi	r30, 0x7C	; 124
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     c8c:	fc 01       	movw	r30, r24
     c8e:	eb 57       	subi	r30, 0x7B	; 123
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_BUS_ERROR;
     c94:	fc 01       	movw	r30, r24
     c96:	e9 57       	subi	r30, 0x79	; 121
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	24 e0       	ldi	r18, 0x04	; 4
     c9c:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     c9e:	fc 01       	movw	r30, r24
     ca0:	ea 57       	subi	r30, 0x7A	; 122
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	10 82       	st	Z, r1
     ca6:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
     ca8:	23 ff       	sbrs	r18, 3
     caa:	12 c0       	rjmp	.+36     	; 0xcd0 <TWI_SlaveInterruptHandler+0x58>
		twi->bytesReceived = 0;
     cac:	fc 01       	movw	r30, r24
     cae:	ec 57       	subi	r30, 0x7C	; 124
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     cb4:	fc 01       	movw	r30, r24
     cb6:	eb 57       	subi	r30, 0x7B	; 123
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
     cbc:	fc 01       	movw	r30, r24
     cbe:	e9 57       	subi	r30, 0x79	; 121
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	23 e0       	ldi	r18, 0x03	; 3
     cc4:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     cc6:	fc 01       	movw	r30, r24
     cc8:	ea 57       	subi	r30, 0x7A	; 122
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	10 82       	st	Z, r1
     cce:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     cd0:	42 2f       	mov	r20, r18
     cd2:	40 74       	andi	r20, 0x40	; 64
 *  Handles all TWI transactions and responses to address match, data reception,
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
     cd4:	32 2f       	mov	r19, r18
     cd6:	31 74       	andi	r19, 0x41	; 65
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
		twi->status = TWIS_STATUS_READY;
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     cd8:	31 34       	cpi	r19, 0x41	; 65
     cda:	09 f4       	brne	.+2      	; 0xcde <TWI_SlaveInterruptHandler+0x66>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
     cdc:	9c cf       	rjmp	.-200    	; 0xc16 <TWI_SlaveAddressMatchHandler>
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
     cde:	44 23       	and	r20, r20
     ce0:	09 f0       	breq	.+2      	; 0xce4 <TWI_SlaveInterruptHandler+0x6c>
		TWI_SlaveStopHandler(twi);
     ce2:	8b cf       	rjmp	.-234    	; 0xbfa <TWI_SlaveStopHandler>
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
     ce4:	22 23       	and	r18, r18
     ce6:	0c f4       	brge	.+2      	; 0xcea <TWI_SlaveInterruptHandler+0x72>
		TWI_SlaveDataHandler(twi);
     ce8:	80 cf       	rjmp	.-256    	; 0xbea <TWI_SlaveDataHandler>
	}

	/* If unexpected state. */
	else {
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_FAIL);
     cea:	65 e0       	ldi	r22, 0x05	; 5
     cec:	f6 ce       	rjmp	.-532    	; 0xada <TWI_SlaveTransactionFinished>

00000cee <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ec 01       	movw	r28, r24
     cf6:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     cf8:	8c d1       	rcall	.+792    	; 0x1012 <USART_TXBuffer_FreeSpace>
     cfa:	88 23       	and	r24, r24
     cfc:	19 f0       	breq	.+6      	; 0xd04 <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     cfe:	61 2f       	mov	r22, r17
     d00:	ce 01       	movw	r24, r28
     d02:	96 d1       	rcall	.+812    	; 0x1030 <USART_TXBuffer_PutByte>
  }
}
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	08 95       	ret

00000d0c <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
     d16:	c6 2f       	mov	r28, r22
     d18:	d7 2f       	mov	r29, r23
     d1a:	69 91       	ld	r22, Y+
     d1c:	66 23       	and	r22, r22
     d1e:	29 f0       	breq	.+10     	; 0xd2a <uart_puts+0x1e>
    uart_putc(uart, c);
     d20:	c8 01       	movw	r24, r16
     d22:	e5 df       	rcall	.-54     	; 0xcee <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     d24:	69 91       	ld	r22, Y+
     d26:	61 11       	cpse	r22, r1
     d28:	fb cf       	rjmp	.-10     	; 0xd20 <uart_puts+0x14>
    uart_putc(uart, c);
  }
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	08 95       	ret

00000d34 <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     d34:	80 3a       	cpi	r24, 0xA0	; 160
     d36:	28 e0       	ldi	r18, 0x08	; 8
     d38:	92 07       	cpc	r25, r18
     d3a:	39 f4       	brne	.+14     	; 0xd4a <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     d3c:	e0 e4       	ldi	r30, 0x40	; 64
     d3e:	f6 e0       	ldi	r31, 0x06	; 6
     d40:	88 e0       	ldi	r24, 0x08	; 8
     d42:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     d44:	84 e0       	ldi	r24, 0x04	; 4
     d46:	82 83       	std	Z+2, r24	; 0x02
     return;
     d48:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     d4a:	80 3b       	cpi	r24, 0xB0	; 176
     d4c:	28 e0       	ldi	r18, 0x08	; 8
     d4e:	92 07       	cpc	r25, r18
     d50:	39 f4       	brne	.+14     	; 0xd60 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     d52:	e0 e4       	ldi	r30, 0x40	; 64
     d54:	f6 e0       	ldi	r31, 0x06	; 6
     d56:	80 e8       	ldi	r24, 0x80	; 128
     d58:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     d5a:	80 e4       	ldi	r24, 0x40	; 64
     d5c:	82 83       	std	Z+2, r24	; 0x02
     return;
     d5e:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     d60:	80 3a       	cpi	r24, 0xA0	; 160
     d62:	29 e0       	ldi	r18, 0x09	; 9
     d64:	92 07       	cpc	r25, r18
     d66:	39 f4       	brne	.+14     	; 0xd76 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     d68:	e0 e6       	ldi	r30, 0x60	; 96
     d6a:	f6 e0       	ldi	r31, 0x06	; 6
     d6c:	88 e0       	ldi	r24, 0x08	; 8
     d6e:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     d70:	84 e0       	ldi	r24, 0x04	; 4
     d72:	82 83       	std	Z+2, r24	; 0x02
     return;
     d74:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     d76:	80 3b       	cpi	r24, 0xB0	; 176
     d78:	29 e0       	ldi	r18, 0x09	; 9
     d7a:	92 07       	cpc	r25, r18
     d7c:	39 f4       	brne	.+14     	; 0xd8c <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     d7e:	e0 e6       	ldi	r30, 0x60	; 96
     d80:	f6 e0       	ldi	r31, 0x06	; 6
     d82:	80 e8       	ldi	r24, 0x80	; 128
     d84:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     d86:	80 e4       	ldi	r24, 0x40	; 64
     d88:	82 83       	std	Z+2, r24	; 0x02
     return;
     d8a:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     d8c:	80 3a       	cpi	r24, 0xA0	; 160
     d8e:	9a 40       	sbci	r25, 0x0A	; 10
     d90:	31 f4       	brne	.+12     	; 0xd9e <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     d92:	e0 e8       	ldi	r30, 0x80	; 128
     d94:	f6 e0       	ldi	r31, 0x06	; 6
     d96:	88 e0       	ldi	r24, 0x08	; 8
     d98:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	82 83       	std	Z+2, r24	; 0x02
     d9e:	08 95       	ret

00000da0 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     da0:	4f 92       	push	r4
     da2:	5f 92       	push	r5
     da4:	6f 92       	push	r6
     da6:	7f 92       	push	r7
     da8:	8f 92       	push	r8
     daa:	9f 92       	push	r9
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	49 01       	movw	r8, r18
     dbe:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     dc0:	4e 2d       	mov	r20, r14
     dc2:	41 70       	andi	r20, 0x01	; 1
     dc4:	20 e1       	ldi	r18, 0x10	; 16
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	79 01       	movw	r14, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <calc_bsel+0x30>
     dcc:	f5 94       	asr	r15
     dce:	e7 94       	ror	r14
     dd0:	4a 95       	dec	r20
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <calc_bsel+0x2c>
  if ( scale < 0 ) {
     dd4:	00 23       	and	r16, r16
     dd6:	0c f0       	brlt	.+2      	; 0xdda <calc_bsel+0x3a>
     dd8:	3a c0       	rjmp	.+116    	; 0xe4e <calc_bsel+0xae>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     dda:	a4 d2       	rcall	.+1352   	; 0x1324 <__floatunsisf>
     ddc:	2b 01       	movw	r4, r22
     dde:	3c 01       	movw	r6, r24
     de0:	b7 01       	movw	r22, r14
     de2:	77 27       	eor	r23, r23
     de4:	88 27       	eor	r24, r24
     de6:	77 fd       	sbrc	r23, 7
     de8:	80 95       	com	r24
     dea:	98 2f       	mov	r25, r24
     dec:	9d d2       	rcall	.+1338   	; 0x1328 <__floatsisf>
     dee:	6b 01       	movw	r12, r22
     df0:	7c 01       	movw	r14, r24
     df2:	c5 01       	movw	r24, r10
     df4:	b4 01       	movw	r22, r8
     df6:	96 d2       	rcall	.+1324   	; 0x1324 <__floatunsisf>
     df8:	9b 01       	movw	r18, r22
     dfa:	ac 01       	movw	r20, r24
     dfc:	c7 01       	movw	r24, r14
     dfe:	b6 01       	movw	r22, r12
     e00:	1f d3       	rcall	.+1598   	; 0x1440 <__mulsf3>
     e02:	9b 01       	movw	r18, r22
     e04:	ac 01       	movw	r20, r24
     e06:	c3 01       	movw	r24, r6
     e08:	b2 01       	movw	r22, r4
     e0a:	f8 d1       	rcall	.+1008   	; 0x11fc <__divsf3>
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e8       	ldi	r20, 0x80	; 128
     e12:	5f e3       	ldi	r21, 0x3F	; 63
     e14:	8e d1       	rcall	.+796    	; 0x1132 <__subsf3>
     e16:	6b 01       	movw	r12, r22
     e18:	7c 01       	movw	r14, r24
     e1a:	11 27       	eor	r17, r17
     e1c:	01 95       	neg	r16
     e1e:	0c f4       	brge	.+2      	; 0xe22 <calc_bsel+0x82>
     e20:	10 95       	com	r17
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <calc_bsel+0x8c>
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	0a 95       	dec	r16
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <calc_bsel+0x88>
     e30:	88 27       	eor	r24, r24
     e32:	77 fd       	sbrc	r23, 7
     e34:	80 95       	com	r24
     e36:	98 2f       	mov	r25, r24
     e38:	77 d2       	rcall	.+1262   	; 0x1328 <__floatsisf>
     e3a:	9b 01       	movw	r18, r22
     e3c:	ac 01       	movw	r20, r24
     e3e:	c7 01       	movw	r24, r14
     e40:	b6 01       	movw	r22, r12
     e42:	fe d2       	rcall	.+1532   	; 0x1440 <__mulsf3>
     e44:	60 d3       	rcall	.+1728   	; 0x1506 <round>
     e46:	42 d2       	rcall	.+1156   	; 0x12cc <__fixunssfsi>
     e48:	86 2f       	mov	r24, r22
     e4a:	97 2f       	mov	r25, r23
     e4c:	35 c0       	rjmp	.+106    	; 0xeb8 <calc_bsel+0x118>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     e4e:	6a d2       	rcall	.+1236   	; 0x1324 <__floatunsisf>
     e50:	2b 01       	movw	r4, r22
     e52:	3c 01       	movw	r6, r24
     e54:	b7 01       	movw	r22, r14
     e56:	77 27       	eor	r23, r23
     e58:	88 27       	eor	r24, r24
     e5a:	77 fd       	sbrc	r23, 7
     e5c:	80 95       	com	r24
     e5e:	98 2f       	mov	r25, r24
     e60:	63 d2       	rcall	.+1222   	; 0x1328 <__floatsisf>
     e62:	6b 01       	movw	r12, r22
     e64:	7c 01       	movw	r14, r24
     e66:	c5 01       	movw	r24, r10
     e68:	b4 01       	movw	r22, r8
     e6a:	5c d2       	rcall	.+1208   	; 0x1324 <__floatunsisf>
     e6c:	9b 01       	movw	r18, r22
     e6e:	ac 01       	movw	r20, r24
     e70:	c7 01       	movw	r24, r14
     e72:	b6 01       	movw	r22, r12
     e74:	e5 d2       	rcall	.+1482   	; 0x1440 <__mulsf3>
     e76:	9b 01       	movw	r18, r22
     e78:	ac 01       	movw	r20, r24
     e7a:	c3 01       	movw	r24, r6
     e7c:	b2 01       	movw	r22, r4
     e7e:	be d1       	rcall	.+892    	; 0x11fc <__divsf3>
     e80:	4b 01       	movw	r8, r22
     e82:	5c 01       	movw	r10, r24
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <calc_bsel+0xee>
     e8a:	66 0f       	add	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	0a 95       	dec	r16
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <calc_bsel+0xea>
     e92:	88 27       	eor	r24, r24
     e94:	77 fd       	sbrc	r23, 7
     e96:	80 95       	com	r24
     e98:	98 2f       	mov	r25, r24
     e9a:	46 d2       	rcall	.+1164   	; 0x1328 <__floatsisf>
     e9c:	9b 01       	movw	r18, r22
     e9e:	ac 01       	movw	r20, r24
     ea0:	c5 01       	movw	r24, r10
     ea2:	b4 01       	movw	r22, r8
     ea4:	ab d1       	rcall	.+854    	; 0x11fc <__divsf3>
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e8       	ldi	r20, 0x80	; 128
     eac:	5f e3       	ldi	r21, 0x3F	; 63
     eae:	41 d1       	rcall	.+642    	; 0x1132 <__subsf3>
     eb0:	2a d3       	rcall	.+1620   	; 0x1506 <round>
     eb2:	0c d2       	rcall	.+1048   	; 0x12cc <__fixunssfsi>
     eb4:	86 2f       	mov	r24, r22
     eb6:	97 2f       	mov	r25, r23
  }
}
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	bf 90       	pop	r11
     ec6:	af 90       	pop	r10
     ec8:	9f 90       	pop	r9
     eca:	8f 90       	pop	r8
     ecc:	7f 90       	pop	r7
     ece:	6f 90       	pop	r6
     ed0:	5f 90       	pop	r5
     ed2:	4f 90       	pop	r4
     ed4:	08 95       	ret

00000ed6 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     ed6:	4f 92       	push	r4
     ed8:	5f 92       	push	r5
     eda:	6f 92       	push	r6
     edc:	7f 92       	push	r7
     ede:	8f 92       	push	r8
     ee0:	9f 92       	push	r9
     ee2:	af 92       	push	r10
     ee4:	bf 92       	push	r11
     ee6:	ef 92       	push	r14
     ee8:	0f 93       	push	r16
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	2b 01       	movw	r4, r22
     ef0:	3c 01       	movw	r6, r24
     ef2:	49 01       	movw	r8, r18
     ef4:	5a 01       	movw	r10, r20
     ef6:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     ef8:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     efa:	ed 2e       	mov	r14, r29
     efc:	0c 2f       	mov	r16, r28
     efe:	a5 01       	movw	r20, r10
     f00:	94 01       	movw	r18, r8
     f02:	c3 01       	movw	r24, r6
     f04:	b2 01       	movw	r22, r4
     f06:	4c df       	rcall	.-360    	; 0xda0 <calc_bsel>
     f08:	81 15       	cp	r24, r1
     f0a:	90 41       	sbci	r25, 0x10	; 16
     f0c:	18 f0       	brcs	.+6      	; 0xf14 <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     f0e:	cf 5f       	subi	r28, 0xFF	; 255
     f10:	c8 30       	cpi	r28, 0x08	; 8
     f12:	99 f7       	brne	.-26     	; 0xefa <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     f14:	8c 2f       	mov	r24, r28
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	0f 91       	pop	r16
     f1c:	ef 90       	pop	r14
     f1e:	bf 90       	pop	r11
     f20:	af 90       	pop	r10
     f22:	9f 90       	pop	r9
     f24:	8f 90       	pop	r8
     f26:	7f 90       	pop	r7
     f28:	6f 90       	pop	r6
     f2a:	5f 90       	pop	r5
     f2c:	4f 90       	pop	r4
     f2e:	08 95       	ret

00000f30 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     f30:	2f 92       	push	r2
     f32:	3f 92       	push	r3
     f34:	4f 92       	push	r4
     f36:	5f 92       	push	r5
     f38:	6f 92       	push	r6
     f3a:	7f 92       	push	r7
     f3c:	8f 92       	push	r8
     f3e:	9f 92       	push	r9
     f40:	af 92       	push	r10
     f42:	bf 92       	push	r11
     f44:	cf 92       	push	r12
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	ec 01       	movw	r28, r24
     f54:	3b 01       	movw	r6, r22
     f56:	49 01       	movw	r8, r18
     f58:	5a 01       	movw	r10, r20
     f5a:	17 01       	movw	r2, r14
     f5c:	28 01       	movw	r4, r16
     f5e:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     f60:	0c 2d       	mov	r16, r12
     f62:	a2 01       	movw	r20, r4
     f64:	91 01       	movw	r18, r2
     f66:	c5 01       	movw	r24, r10
     f68:	b4 01       	movw	r22, r8
     f6a:	b5 df       	rcall	.-150    	; 0xed6 <calc_bscale>
     f6c:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     f6e:	08 2f       	mov	r16, r24
     f70:	a2 01       	movw	r20, r4
     f72:	91 01       	movw	r18, r2
     f74:	c5 01       	movw	r24, r10
     f76:	b4 01       	movw	r22, r8
     f78:	13 df       	rcall	.-474    	; 0xda0 <calc_bsel>
     f7a:	b8 2e       	mov	r11, r24
     f7c:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	b3 01       	movw	r22, r6
     f82:	ce 01       	movw	r24, r28
     f84:	32 d0       	rcall	.+100    	; 0xfea <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     f86:	e8 81       	ld	r30, Y
     f88:	f9 81       	ldd	r31, Y+1	; 0x01
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     f8e:	e8 81       	ld	r30, Y
     f90:	f9 81       	ldd	r31, Y+1	; 0x01
     f92:	84 81       	ldd	r24, Z+4	; 0x04
     f94:	80 61       	ori	r24, 0x10	; 16
     f96:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     f98:	e8 81       	ld	r30, Y
     f9a:	f9 81       	ldd	r31, Y+1	; 0x01
     f9c:	84 81       	ldd	r24, Z+4	; 0x04
     f9e:	88 60       	ori	r24, 0x08	; 8
     fa0:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     fa2:	e8 81       	ld	r30, Y
     fa4:	f9 81       	ldd	r31, Y+1	; 0x01
     fa6:	83 81       	ldd	r24, Z+3	; 0x03
     fa8:	8f 7c       	andi	r24, 0xCF	; 207
     faa:	80 61       	ori	r24, 0x10	; 16
     fac:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     fae:	e8 81       	ld	r30, Y
     fb0:	f9 81       	ldd	r31, Y+1	; 0x01
     fb2:	b6 82       	std	Z+6, r11	; 0x06
     fb4:	e8 81       	ld	r30, Y
     fb6:	f9 81       	ldd	r31, Y+1	; 0x01
     fb8:	12 95       	swap	r17
     fba:	10 7f       	andi	r17, 0xF0	; 240
     fbc:	e1 2a       	or	r14, r17
     fbe:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
     fc0:	88 81       	ld	r24, Y
     fc2:	99 81       	ldd	r25, Y+1	; 0x01
     fc4:	b7 de       	rcall	.-658    	; 0xd34 <set_usart_txrx_direction>
}
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	cf 90       	pop	r12
     fd4:	bf 90       	pop	r11
     fd6:	af 90       	pop	r10
     fd8:	9f 90       	pop	r9
     fda:	8f 90       	pop	r8
     fdc:	7f 90       	pop	r7
     fde:	6f 90       	pop	r6
     fe0:	5f 90       	pop	r5
     fe2:	4f 90       	pop	r4
     fe4:	3f 90       	pop	r3
     fe6:	2f 90       	pop	r2
     fe8:	08 95       	ret

00000fea <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     fea:	fc 01       	movw	r30, r24
     fec:	60 83       	st	Z, r22
     fee:	71 83       	std	Z+1, r23	; 0x01
     ff0:	42 83       	std	Z+2, r20	; 0x02
     ff2:	ec 5f       	subi	r30, 0xFC	; 252
     ff4:	fe 4f       	sbci	r31, 0xFE	; 254
     ff6:	10 82       	st	Z, r1
     ff8:	fc 01       	movw	r30, r24
     ffa:	ed 5f       	subi	r30, 0xFD	; 253
     ffc:	fe 4f       	sbci	r31, 0xFE	; 254
     ffe:	10 82       	st	Z, r1
    1000:	fc 01       	movw	r30, r24
    1002:	ea 5f       	subi	r30, 0xFA	; 250
    1004:	fe 4f       	sbci	r31, 0xFE	; 254
    1006:	10 82       	st	Z, r1
    1008:	fc 01       	movw	r30, r24
    100a:	eb 5f       	subi	r30, 0xFB	; 251
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	10 82       	st	Z, r1
    1010:	08 95       	ret

00001012 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    1012:	fc 01       	movw	r30, r24
    1014:	eb 5f       	subi	r30, 0xFB	; 251
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    101a:	fc 01       	movw	r30, r24
    101c:	ea 5f       	subi	r30, 0xFA	; 250
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    1022:	2f 5f       	subi	r18, 0xFF	; 255
    1024:	2f 77       	andi	r18, 0x7F	; 127
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	29 13       	cpse	r18, r25
    102a:	01 c0       	rjmp	.+2      	; 0x102e <USART_TXBuffer_FreeSpace+0x1c>
    102c:	80 e0       	ldi	r24, 0x00	; 0
}
    102e:	08 95       	ret

00001030 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	ec 01       	movw	r28, r24
    1038:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
    103a:	eb df       	rcall	.-42     	; 0x1012 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
    103c:	88 23       	and	r24, r24
    103e:	a1 f0       	breq	.+40     	; 0x1068 <USART_TXBuffer_PutByte+0x38>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
    1040:	fe 01       	movw	r30, r28
    1042:	eb 5f       	subi	r30, 0xFB	; 251
    1044:	fe 4f       	sbci	r31, 0xFE	; 254
    1046:	90 81       	ld	r25, Z
	  	TXbufPtr->TX[tempTX_Head]= data;
    1048:	de 01       	movw	r26, r28
    104a:	a9 0f       	add	r26, r25
    104c:	b1 1d       	adc	r27, r1
    104e:	ad 57       	subi	r26, 0x7D	; 125
    1050:	bf 4f       	sbci	r27, 0xFF	; 255
    1052:	1c 93       	st	X, r17
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
    1054:	9f 5f       	subi	r25, 0xFF	; 255
    1056:	9f 77       	andi	r25, 0x7F	; 127
    1058:	90 83       	st	Z, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
    105a:	e8 81       	ld	r30, Y
    105c:	f9 81       	ldd	r31, Y+1	; 0x01
    105e:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
    1060:	9c 7f       	andi	r25, 0xFC	; 252
    1062:	2a 81       	ldd	r18, Y+2	; 0x02
    1064:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
    1066:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	08 95       	ret

00001070 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1070:	fc 01       	movw	r30, r24
    1072:	ed 5f       	subi	r30, 0xFD	; 253
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    1078:	fc 01       	movw	r30, r24
    107a:	ec 5f       	subi	r30, 0xFC	; 252
    107c:	fe 4f       	sbci	r31, 0xFE	; 254
    107e:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	29 13       	cpse	r18, r25
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <USART_RXBufferData_Available+0x18>
    1086:	80 e0       	ldi	r24, 0x00	; 0
}
    1088:	08 95       	ret

0000108a <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    108a:	fc 01       	movw	r30, r24
    108c:	ec 5f       	subi	r30, 0xFC	; 252
    108e:	fe 4f       	sbci	r31, 0xFE	; 254
    1090:	20 81       	ld	r18, Z
    1092:	dc 01       	movw	r26, r24
    1094:	a2 0f       	add	r26, r18
    1096:	b1 1d       	adc	r27, r1
    1098:	13 96       	adiw	r26, 0x03	; 3
    109a:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    109c:	90 81       	ld	r25, Z
    109e:	9f 5f       	subi	r25, 0xFF	; 255
    10a0:	9f 77       	andi	r25, 0x7F	; 127
    10a2:	90 83       	st	Z, r25

	return ans;
}
    10a4:	08 95       	ret

000010a6 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    10a6:	fc 01       	movw	r30, r24
    10a8:	ed 5f       	subi	r30, 0xFD	; 253
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
    10ac:	20 81       	ld	r18, Z
    10ae:	2f 5f       	subi	r18, 0xFF	; 255
    10b0:	2f 77       	andi	r18, 0x7F	; 127

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    10b2:	fc 01       	movw	r30, r24
    10b4:	ec 5f       	subi	r30, 0xFC	; 252
    10b6:	fe 4f       	sbci	r31, 0xFE	; 254
    10b8:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    10ba:	dc 01       	movw	r26, r24
    10bc:	ed 91       	ld	r30, X+
    10be:	fc 91       	ld	r31, X
    10c0:	11 97       	sbiw	r26, 0x01	; 1
    10c2:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    10c4:	23 17       	cp	r18, r19
    10c6:	59 f0       	breq	.+22     	; 0x10de <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    10c8:	fc 01       	movw	r30, r24
    10ca:	ed 5f       	subi	r30, 0xFD	; 253
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	30 81       	ld	r19, Z
    10d0:	a3 0f       	add	r26, r19
    10d2:	b1 1d       	adc	r27, r1
    10d4:	13 96       	adiw	r26, 0x03	; 3
    10d6:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    10d8:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    10de:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    10e0:	08 95       	ret

000010e2 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    10e6:	fc 01       	movw	r30, r24
    10e8:	ea 5f       	subi	r30, 0xFA	; 250
    10ea:	fe 4f       	sbci	r31, 0xFE	; 254
    10ec:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    10ee:	fc 01       	movw	r30, r24
    10f0:	eb 5f       	subi	r30, 0xFB	; 251
    10f2:	fe 4f       	sbci	r31, 0xFE	; 254
    10f4:	30 81       	ld	r19, Z
    10f6:	32 13       	cpse	r19, r18
    10f8:	07 c0       	rjmp	.+14     	; 0x1108 <USART_DataRegEmpty+0x26>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    10fa:	dc 01       	movw	r26, r24
    10fc:	ed 91       	ld	r30, X+
    10fe:	fc 91       	ld	r31, X
    1100:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    1102:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    1104:	83 83       	std	Z+3, r24	; 0x03
    1106:	12 c0       	rjmp	.+36     	; 0x112c <USART_DataRegEmpty+0x4a>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    1108:	fc 01       	movw	r30, r24
    110a:	ea 5f       	subi	r30, 0xFA	; 250
    110c:	fe 4f       	sbci	r31, 0xFE	; 254
    110e:	20 81       	ld	r18, Z
    1110:	dc 01       	movw	r26, r24
    1112:	a2 0f       	add	r26, r18
    1114:	b1 1d       	adc	r27, r1
    1116:	ad 57       	subi	r26, 0x7D	; 125
    1118:	bf 4f       	sbci	r27, 0xFF	; 255
    111a:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    111c:	ec 01       	movw	r28, r24
    111e:	a8 81       	ld	r26, Y
    1120:	b9 81       	ldd	r27, Y+1	; 0x01
    1122:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    1124:	80 81       	ld	r24, Z
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	8f 77       	andi	r24, 0x7F	; 127
    112a:	80 83       	st	Z, r24
	}
}
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	08 95       	ret

00001132 <__subsf3>:
    1132:	50 58       	subi	r21, 0x80	; 128

00001134 <__addsf3>:
    1134:	bb 27       	eor	r27, r27
    1136:	aa 27       	eor	r26, r26
    1138:	0e d0       	rcall	.+28     	; 0x1156 <__addsf3x>
    113a:	48 c1       	rjmp	.+656    	; 0x13cc <__fp_round>
    113c:	39 d1       	rcall	.+626    	; 0x13b0 <__fp_pscA>
    113e:	30 f0       	brcs	.+12     	; 0x114c <__addsf3+0x18>
    1140:	3e d1       	rcall	.+636    	; 0x13be <__fp_pscB>
    1142:	20 f0       	brcs	.+8      	; 0x114c <__addsf3+0x18>
    1144:	31 f4       	brne	.+12     	; 0x1152 <__addsf3+0x1e>
    1146:	9f 3f       	cpi	r25, 0xFF	; 255
    1148:	11 f4       	brne	.+4      	; 0x114e <__addsf3+0x1a>
    114a:	1e f4       	brtc	.+6      	; 0x1152 <__addsf3+0x1e>
    114c:	2e c1       	rjmp	.+604    	; 0x13aa <__fp_nan>
    114e:	0e f4       	brtc	.+2      	; 0x1152 <__addsf3+0x1e>
    1150:	e0 95       	com	r30
    1152:	e7 fb       	bst	r30, 7
    1154:	24 c1       	rjmp	.+584    	; 0x139e <__fp_inf>

00001156 <__addsf3x>:
    1156:	e9 2f       	mov	r30, r25
    1158:	4a d1       	rcall	.+660    	; 0x13ee <__fp_split3>
    115a:	80 f3       	brcs	.-32     	; 0x113c <__addsf3+0x8>
    115c:	ba 17       	cp	r27, r26
    115e:	62 07       	cpc	r22, r18
    1160:	73 07       	cpc	r23, r19
    1162:	84 07       	cpc	r24, r20
    1164:	95 07       	cpc	r25, r21
    1166:	18 f0       	brcs	.+6      	; 0x116e <__addsf3x+0x18>
    1168:	71 f4       	brne	.+28     	; 0x1186 <__addsf3x+0x30>
    116a:	9e f5       	brtc	.+102    	; 0x11d2 <__addsf3x+0x7c>
    116c:	62 c1       	rjmp	.+708    	; 0x1432 <__fp_zero>
    116e:	0e f4       	brtc	.+2      	; 0x1172 <__addsf3x+0x1c>
    1170:	e0 95       	com	r30
    1172:	0b 2e       	mov	r0, r27
    1174:	ba 2f       	mov	r27, r26
    1176:	a0 2d       	mov	r26, r0
    1178:	0b 01       	movw	r0, r22
    117a:	b9 01       	movw	r22, r18
    117c:	90 01       	movw	r18, r0
    117e:	0c 01       	movw	r0, r24
    1180:	ca 01       	movw	r24, r20
    1182:	a0 01       	movw	r20, r0
    1184:	11 24       	eor	r1, r1
    1186:	ff 27       	eor	r31, r31
    1188:	59 1b       	sub	r21, r25
    118a:	99 f0       	breq	.+38     	; 0x11b2 <__addsf3x+0x5c>
    118c:	59 3f       	cpi	r21, 0xF9	; 249
    118e:	50 f4       	brcc	.+20     	; 0x11a4 <__addsf3x+0x4e>
    1190:	50 3e       	cpi	r21, 0xE0	; 224
    1192:	68 f1       	brcs	.+90     	; 0x11ee <__addsf3x+0x98>
    1194:	1a 16       	cp	r1, r26
    1196:	f0 40       	sbci	r31, 0x00	; 0
    1198:	a2 2f       	mov	r26, r18
    119a:	23 2f       	mov	r18, r19
    119c:	34 2f       	mov	r19, r20
    119e:	44 27       	eor	r20, r20
    11a0:	58 5f       	subi	r21, 0xF8	; 248
    11a2:	f3 cf       	rjmp	.-26     	; 0x118a <__addsf3x+0x34>
    11a4:	46 95       	lsr	r20
    11a6:	37 95       	ror	r19
    11a8:	27 95       	ror	r18
    11aa:	a7 95       	ror	r26
    11ac:	f0 40       	sbci	r31, 0x00	; 0
    11ae:	53 95       	inc	r21
    11b0:	c9 f7       	brne	.-14     	; 0x11a4 <__addsf3x+0x4e>
    11b2:	7e f4       	brtc	.+30     	; 0x11d2 <__addsf3x+0x7c>
    11b4:	1f 16       	cp	r1, r31
    11b6:	ba 0b       	sbc	r27, r26
    11b8:	62 0b       	sbc	r22, r18
    11ba:	73 0b       	sbc	r23, r19
    11bc:	84 0b       	sbc	r24, r20
    11be:	ba f0       	brmi	.+46     	; 0x11ee <__addsf3x+0x98>
    11c0:	91 50       	subi	r25, 0x01	; 1
    11c2:	a1 f0       	breq	.+40     	; 0x11ec <__addsf3x+0x96>
    11c4:	ff 0f       	add	r31, r31
    11c6:	bb 1f       	adc	r27, r27
    11c8:	66 1f       	adc	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	c2 f7       	brpl	.-16     	; 0x11c0 <__addsf3x+0x6a>
    11d0:	0e c0       	rjmp	.+28     	; 0x11ee <__addsf3x+0x98>
    11d2:	ba 0f       	add	r27, r26
    11d4:	62 1f       	adc	r22, r18
    11d6:	73 1f       	adc	r23, r19
    11d8:	84 1f       	adc	r24, r20
    11da:	48 f4       	brcc	.+18     	; 0x11ee <__addsf3x+0x98>
    11dc:	87 95       	ror	r24
    11de:	77 95       	ror	r23
    11e0:	67 95       	ror	r22
    11e2:	b7 95       	ror	r27
    11e4:	f7 95       	ror	r31
    11e6:	9e 3f       	cpi	r25, 0xFE	; 254
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <__addsf3x+0x96>
    11ea:	b3 cf       	rjmp	.-154    	; 0x1152 <__addsf3+0x1e>
    11ec:	93 95       	inc	r25
    11ee:	88 0f       	add	r24, r24
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <__addsf3x+0x9e>
    11f2:	99 27       	eor	r25, r25
    11f4:	ee 0f       	add	r30, r30
    11f6:	97 95       	ror	r25
    11f8:	87 95       	ror	r24
    11fa:	08 95       	ret

000011fc <__divsf3>:
    11fc:	0c d0       	rcall	.+24     	; 0x1216 <__divsf3x>
    11fe:	e6 c0       	rjmp	.+460    	; 0x13cc <__fp_round>
    1200:	de d0       	rcall	.+444    	; 0x13be <__fp_pscB>
    1202:	40 f0       	brcs	.+16     	; 0x1214 <__divsf3+0x18>
    1204:	d5 d0       	rcall	.+426    	; 0x13b0 <__fp_pscA>
    1206:	30 f0       	brcs	.+12     	; 0x1214 <__divsf3+0x18>
    1208:	21 f4       	brne	.+8      	; 0x1212 <__divsf3+0x16>
    120a:	5f 3f       	cpi	r21, 0xFF	; 255
    120c:	19 f0       	breq	.+6      	; 0x1214 <__divsf3+0x18>
    120e:	c7 c0       	rjmp	.+398    	; 0x139e <__fp_inf>
    1210:	51 11       	cpse	r21, r1
    1212:	10 c1       	rjmp	.+544    	; 0x1434 <__fp_szero>
    1214:	ca c0       	rjmp	.+404    	; 0x13aa <__fp_nan>

00001216 <__divsf3x>:
    1216:	eb d0       	rcall	.+470    	; 0x13ee <__fp_split3>
    1218:	98 f3       	brcs	.-26     	; 0x1200 <__divsf3+0x4>

0000121a <__divsf3_pse>:
    121a:	99 23       	and	r25, r25
    121c:	c9 f3       	breq	.-14     	; 0x1210 <__divsf3+0x14>
    121e:	55 23       	and	r21, r21
    1220:	b1 f3       	breq	.-20     	; 0x120e <__divsf3+0x12>
    1222:	95 1b       	sub	r25, r21
    1224:	55 0b       	sbc	r21, r21
    1226:	bb 27       	eor	r27, r27
    1228:	aa 27       	eor	r26, r26
    122a:	62 17       	cp	r22, r18
    122c:	73 07       	cpc	r23, r19
    122e:	84 07       	cpc	r24, r20
    1230:	38 f0       	brcs	.+14     	; 0x1240 <__divsf3_pse+0x26>
    1232:	9f 5f       	subi	r25, 0xFF	; 255
    1234:	5f 4f       	sbci	r21, 0xFF	; 255
    1236:	22 0f       	add	r18, r18
    1238:	33 1f       	adc	r19, r19
    123a:	44 1f       	adc	r20, r20
    123c:	aa 1f       	adc	r26, r26
    123e:	a9 f3       	breq	.-22     	; 0x122a <__divsf3_pse+0x10>
    1240:	33 d0       	rcall	.+102    	; 0x12a8 <__divsf3_pse+0x8e>
    1242:	0e 2e       	mov	r0, r30
    1244:	3a f0       	brmi	.+14     	; 0x1254 <__divsf3_pse+0x3a>
    1246:	e0 e8       	ldi	r30, 0x80	; 128
    1248:	30 d0       	rcall	.+96     	; 0x12aa <__divsf3_pse+0x90>
    124a:	91 50       	subi	r25, 0x01	; 1
    124c:	50 40       	sbci	r21, 0x00	; 0
    124e:	e6 95       	lsr	r30
    1250:	00 1c       	adc	r0, r0
    1252:	ca f7       	brpl	.-14     	; 0x1246 <__divsf3_pse+0x2c>
    1254:	29 d0       	rcall	.+82     	; 0x12a8 <__divsf3_pse+0x8e>
    1256:	fe 2f       	mov	r31, r30
    1258:	27 d0       	rcall	.+78     	; 0x12a8 <__divsf3_pse+0x8e>
    125a:	66 0f       	add	r22, r22
    125c:	77 1f       	adc	r23, r23
    125e:	88 1f       	adc	r24, r24
    1260:	bb 1f       	adc	r27, r27
    1262:	26 17       	cp	r18, r22
    1264:	37 07       	cpc	r19, r23
    1266:	48 07       	cpc	r20, r24
    1268:	ab 07       	cpc	r26, r27
    126a:	b0 e8       	ldi	r27, 0x80	; 128
    126c:	09 f0       	breq	.+2      	; 0x1270 <__divsf3_pse+0x56>
    126e:	bb 0b       	sbc	r27, r27
    1270:	80 2d       	mov	r24, r0
    1272:	bf 01       	movw	r22, r30
    1274:	ff 27       	eor	r31, r31
    1276:	93 58       	subi	r25, 0x83	; 131
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	2a f0       	brmi	.+10     	; 0x1286 <__divsf3_pse+0x6c>
    127c:	9e 3f       	cpi	r25, 0xFE	; 254
    127e:	51 05       	cpc	r21, r1
    1280:	68 f0       	brcs	.+26     	; 0x129c <__divsf3_pse+0x82>
    1282:	8d c0       	rjmp	.+282    	; 0x139e <__fp_inf>
    1284:	d7 c0       	rjmp	.+430    	; 0x1434 <__fp_szero>
    1286:	5f 3f       	cpi	r21, 0xFF	; 255
    1288:	ec f3       	brlt	.-6      	; 0x1284 <__divsf3_pse+0x6a>
    128a:	98 3e       	cpi	r25, 0xE8	; 232
    128c:	dc f3       	brlt	.-10     	; 0x1284 <__divsf3_pse+0x6a>
    128e:	86 95       	lsr	r24
    1290:	77 95       	ror	r23
    1292:	67 95       	ror	r22
    1294:	b7 95       	ror	r27
    1296:	f7 95       	ror	r31
    1298:	9f 5f       	subi	r25, 0xFF	; 255
    129a:	c9 f7       	brne	.-14     	; 0x128e <__divsf3_pse+0x74>
    129c:	88 0f       	add	r24, r24
    129e:	91 1d       	adc	r25, r1
    12a0:	96 95       	lsr	r25
    12a2:	87 95       	ror	r24
    12a4:	97 f9       	bld	r25, 7
    12a6:	08 95       	ret
    12a8:	e1 e0       	ldi	r30, 0x01	; 1
    12aa:	66 0f       	add	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	88 1f       	adc	r24, r24
    12b0:	bb 1f       	adc	r27, r27
    12b2:	62 17       	cp	r22, r18
    12b4:	73 07       	cpc	r23, r19
    12b6:	84 07       	cpc	r24, r20
    12b8:	ba 07       	cpc	r27, r26
    12ba:	20 f0       	brcs	.+8      	; 0x12c4 <__divsf3_pse+0xaa>
    12bc:	62 1b       	sub	r22, r18
    12be:	73 0b       	sbc	r23, r19
    12c0:	84 0b       	sbc	r24, r20
    12c2:	ba 0b       	sbc	r27, r26
    12c4:	ee 1f       	adc	r30, r30
    12c6:	88 f7       	brcc	.-30     	; 0x12aa <__divsf3_pse+0x90>
    12c8:	e0 95       	com	r30
    12ca:	08 95       	ret

000012cc <__fixunssfsi>:
    12cc:	98 d0       	rcall	.+304    	; 0x13fe <__fp_splitA>
    12ce:	88 f0       	brcs	.+34     	; 0x12f2 <__fixunssfsi+0x26>
    12d0:	9f 57       	subi	r25, 0x7F	; 127
    12d2:	90 f0       	brcs	.+36     	; 0x12f8 <__fixunssfsi+0x2c>
    12d4:	b9 2f       	mov	r27, r25
    12d6:	99 27       	eor	r25, r25
    12d8:	b7 51       	subi	r27, 0x17	; 23
    12da:	a0 f0       	brcs	.+40     	; 0x1304 <__fixunssfsi+0x38>
    12dc:	d1 f0       	breq	.+52     	; 0x1312 <__fixunssfsi+0x46>
    12de:	66 0f       	add	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	1a f0       	brmi	.+6      	; 0x12ee <__fixunssfsi+0x22>
    12e8:	ba 95       	dec	r27
    12ea:	c9 f7       	brne	.-14     	; 0x12de <__fixunssfsi+0x12>
    12ec:	12 c0       	rjmp	.+36     	; 0x1312 <__fixunssfsi+0x46>
    12ee:	b1 30       	cpi	r27, 0x01	; 1
    12f0:	81 f0       	breq	.+32     	; 0x1312 <__fixunssfsi+0x46>
    12f2:	9f d0       	rcall	.+318    	; 0x1432 <__fp_zero>
    12f4:	b1 e0       	ldi	r27, 0x01	; 1
    12f6:	08 95       	ret
    12f8:	9c c0       	rjmp	.+312    	; 0x1432 <__fp_zero>
    12fa:	67 2f       	mov	r22, r23
    12fc:	78 2f       	mov	r23, r24
    12fe:	88 27       	eor	r24, r24
    1300:	b8 5f       	subi	r27, 0xF8	; 248
    1302:	39 f0       	breq	.+14     	; 0x1312 <__fixunssfsi+0x46>
    1304:	b9 3f       	cpi	r27, 0xF9	; 249
    1306:	cc f3       	brlt	.-14     	; 0x12fa <__fixunssfsi+0x2e>
    1308:	86 95       	lsr	r24
    130a:	77 95       	ror	r23
    130c:	67 95       	ror	r22
    130e:	b3 95       	inc	r27
    1310:	d9 f7       	brne	.-10     	; 0x1308 <__fixunssfsi+0x3c>
    1312:	3e f4       	brtc	.+14     	; 0x1322 <__fixunssfsi+0x56>
    1314:	90 95       	com	r25
    1316:	80 95       	com	r24
    1318:	70 95       	com	r23
    131a:	61 95       	neg	r22
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	8f 4f       	sbci	r24, 0xFF	; 255
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	08 95       	ret

00001324 <__floatunsisf>:
    1324:	e8 94       	clt
    1326:	09 c0       	rjmp	.+18     	; 0x133a <__floatsisf+0x12>

00001328 <__floatsisf>:
    1328:	97 fb       	bst	r25, 7
    132a:	3e f4       	brtc	.+14     	; 0x133a <__floatsisf+0x12>
    132c:	90 95       	com	r25
    132e:	80 95       	com	r24
    1330:	70 95       	com	r23
    1332:	61 95       	neg	r22
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	8f 4f       	sbci	r24, 0xFF	; 255
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
    133a:	99 23       	and	r25, r25
    133c:	a9 f0       	breq	.+42     	; 0x1368 <__floatsisf+0x40>
    133e:	f9 2f       	mov	r31, r25
    1340:	96 e9       	ldi	r25, 0x96	; 150
    1342:	bb 27       	eor	r27, r27
    1344:	93 95       	inc	r25
    1346:	f6 95       	lsr	r31
    1348:	87 95       	ror	r24
    134a:	77 95       	ror	r23
    134c:	67 95       	ror	r22
    134e:	b7 95       	ror	r27
    1350:	f1 11       	cpse	r31, r1
    1352:	f8 cf       	rjmp	.-16     	; 0x1344 <__floatsisf+0x1c>
    1354:	fa f4       	brpl	.+62     	; 0x1394 <__floatsisf+0x6c>
    1356:	bb 0f       	add	r27, r27
    1358:	11 f4       	brne	.+4      	; 0x135e <__floatsisf+0x36>
    135a:	60 ff       	sbrs	r22, 0
    135c:	1b c0       	rjmp	.+54     	; 0x1394 <__floatsisf+0x6c>
    135e:	6f 5f       	subi	r22, 0xFF	; 255
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	8f 4f       	sbci	r24, 0xFF	; 255
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	16 c0       	rjmp	.+44     	; 0x1394 <__floatsisf+0x6c>
    1368:	88 23       	and	r24, r24
    136a:	11 f0       	breq	.+4      	; 0x1370 <__floatsisf+0x48>
    136c:	96 e9       	ldi	r25, 0x96	; 150
    136e:	11 c0       	rjmp	.+34     	; 0x1392 <__floatsisf+0x6a>
    1370:	77 23       	and	r23, r23
    1372:	21 f0       	breq	.+8      	; 0x137c <__floatsisf+0x54>
    1374:	9e e8       	ldi	r25, 0x8E	; 142
    1376:	87 2f       	mov	r24, r23
    1378:	76 2f       	mov	r23, r22
    137a:	05 c0       	rjmp	.+10     	; 0x1386 <__floatsisf+0x5e>
    137c:	66 23       	and	r22, r22
    137e:	71 f0       	breq	.+28     	; 0x139c <__floatsisf+0x74>
    1380:	96 e8       	ldi	r25, 0x86	; 134
    1382:	86 2f       	mov	r24, r22
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	2a f0       	brmi	.+10     	; 0x1394 <__floatsisf+0x6c>
    138a:	9a 95       	dec	r25
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	da f7       	brpl	.-10     	; 0x138a <__floatsisf+0x62>
    1394:	88 0f       	add	r24, r24
    1396:	96 95       	lsr	r25
    1398:	87 95       	ror	r24
    139a:	97 f9       	bld	r25, 7
    139c:	08 95       	ret

0000139e <__fp_inf>:
    139e:	97 f9       	bld	r25, 7
    13a0:	9f 67       	ori	r25, 0x7F	; 127
    13a2:	80 e8       	ldi	r24, 0x80	; 128
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	08 95       	ret

000013aa <__fp_nan>:
    13aa:	9f ef       	ldi	r25, 0xFF	; 255
    13ac:	80 ec       	ldi	r24, 0xC0	; 192
    13ae:	08 95       	ret

000013b0 <__fp_pscA>:
    13b0:	00 24       	eor	r0, r0
    13b2:	0a 94       	dec	r0
    13b4:	16 16       	cp	r1, r22
    13b6:	17 06       	cpc	r1, r23
    13b8:	18 06       	cpc	r1, r24
    13ba:	09 06       	cpc	r0, r25
    13bc:	08 95       	ret

000013be <__fp_pscB>:
    13be:	00 24       	eor	r0, r0
    13c0:	0a 94       	dec	r0
    13c2:	12 16       	cp	r1, r18
    13c4:	13 06       	cpc	r1, r19
    13c6:	14 06       	cpc	r1, r20
    13c8:	05 06       	cpc	r0, r21
    13ca:	08 95       	ret

000013cc <__fp_round>:
    13cc:	09 2e       	mov	r0, r25
    13ce:	03 94       	inc	r0
    13d0:	00 0c       	add	r0, r0
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <__fp_round+0xc>
    13d4:	88 23       	and	r24, r24
    13d6:	52 f0       	brmi	.+20     	; 0x13ec <__fp_round+0x20>
    13d8:	bb 0f       	add	r27, r27
    13da:	40 f4       	brcc	.+16     	; 0x13ec <__fp_round+0x20>
    13dc:	bf 2b       	or	r27, r31
    13de:	11 f4       	brne	.+4      	; 0x13e4 <__fp_round+0x18>
    13e0:	60 ff       	sbrs	r22, 0
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <__fp_round+0x20>
    13e4:	6f 5f       	subi	r22, 0xFF	; 255
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	08 95       	ret

000013ee <__fp_split3>:
    13ee:	57 fd       	sbrc	r21, 7
    13f0:	90 58       	subi	r25, 0x80	; 128
    13f2:	44 0f       	add	r20, r20
    13f4:	55 1f       	adc	r21, r21
    13f6:	59 f0       	breq	.+22     	; 0x140e <__fp_splitA+0x10>
    13f8:	5f 3f       	cpi	r21, 0xFF	; 255
    13fa:	71 f0       	breq	.+28     	; 0x1418 <__fp_splitA+0x1a>
    13fc:	47 95       	ror	r20

000013fe <__fp_splitA>:
    13fe:	88 0f       	add	r24, r24
    1400:	97 fb       	bst	r25, 7
    1402:	99 1f       	adc	r25, r25
    1404:	61 f0       	breq	.+24     	; 0x141e <__fp_splitA+0x20>
    1406:	9f 3f       	cpi	r25, 0xFF	; 255
    1408:	79 f0       	breq	.+30     	; 0x1428 <__fp_splitA+0x2a>
    140a:	87 95       	ror	r24
    140c:	08 95       	ret
    140e:	12 16       	cp	r1, r18
    1410:	13 06       	cpc	r1, r19
    1412:	14 06       	cpc	r1, r20
    1414:	55 1f       	adc	r21, r21
    1416:	f2 cf       	rjmp	.-28     	; 0x13fc <__fp_split3+0xe>
    1418:	46 95       	lsr	r20
    141a:	f1 df       	rcall	.-30     	; 0x13fe <__fp_splitA>
    141c:	08 c0       	rjmp	.+16     	; 0x142e <__fp_splitA+0x30>
    141e:	16 16       	cp	r1, r22
    1420:	17 06       	cpc	r1, r23
    1422:	18 06       	cpc	r1, r24
    1424:	99 1f       	adc	r25, r25
    1426:	f1 cf       	rjmp	.-30     	; 0x140a <__fp_splitA+0xc>
    1428:	86 95       	lsr	r24
    142a:	71 05       	cpc	r23, r1
    142c:	61 05       	cpc	r22, r1
    142e:	08 94       	sec
    1430:	08 95       	ret

00001432 <__fp_zero>:
    1432:	e8 94       	clt

00001434 <__fp_szero>:
    1434:	bb 27       	eor	r27, r27
    1436:	66 27       	eor	r22, r22
    1438:	77 27       	eor	r23, r23
    143a:	cb 01       	movw	r24, r22
    143c:	97 f9       	bld	r25, 7
    143e:	08 95       	ret

00001440 <__mulsf3>:
    1440:	0b d0       	rcall	.+22     	; 0x1458 <__mulsf3x>
    1442:	c4 cf       	rjmp	.-120    	; 0x13cc <__fp_round>
    1444:	b5 df       	rcall	.-150    	; 0x13b0 <__fp_pscA>
    1446:	28 f0       	brcs	.+10     	; 0x1452 <__mulsf3+0x12>
    1448:	ba df       	rcall	.-140    	; 0x13be <__fp_pscB>
    144a:	18 f0       	brcs	.+6      	; 0x1452 <__mulsf3+0x12>
    144c:	95 23       	and	r25, r21
    144e:	09 f0       	breq	.+2      	; 0x1452 <__mulsf3+0x12>
    1450:	a6 cf       	rjmp	.-180    	; 0x139e <__fp_inf>
    1452:	ab cf       	rjmp	.-170    	; 0x13aa <__fp_nan>
    1454:	11 24       	eor	r1, r1
    1456:	ee cf       	rjmp	.-36     	; 0x1434 <__fp_szero>

00001458 <__mulsf3x>:
    1458:	ca df       	rcall	.-108    	; 0x13ee <__fp_split3>
    145a:	a0 f3       	brcs	.-24     	; 0x1444 <__mulsf3+0x4>

0000145c <__mulsf3_pse>:
    145c:	95 9f       	mul	r25, r21
    145e:	d1 f3       	breq	.-12     	; 0x1454 <__mulsf3+0x14>
    1460:	95 0f       	add	r25, r21
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	55 1f       	adc	r21, r21
    1466:	62 9f       	mul	r22, r18
    1468:	f0 01       	movw	r30, r0
    146a:	72 9f       	mul	r23, r18
    146c:	bb 27       	eor	r27, r27
    146e:	f0 0d       	add	r31, r0
    1470:	b1 1d       	adc	r27, r1
    1472:	63 9f       	mul	r22, r19
    1474:	aa 27       	eor	r26, r26
    1476:	f0 0d       	add	r31, r0
    1478:	b1 1d       	adc	r27, r1
    147a:	aa 1f       	adc	r26, r26
    147c:	64 9f       	mul	r22, r20
    147e:	66 27       	eor	r22, r22
    1480:	b0 0d       	add	r27, r0
    1482:	a1 1d       	adc	r26, r1
    1484:	66 1f       	adc	r22, r22
    1486:	82 9f       	mul	r24, r18
    1488:	22 27       	eor	r18, r18
    148a:	b0 0d       	add	r27, r0
    148c:	a1 1d       	adc	r26, r1
    148e:	62 1f       	adc	r22, r18
    1490:	73 9f       	mul	r23, r19
    1492:	b0 0d       	add	r27, r0
    1494:	a1 1d       	adc	r26, r1
    1496:	62 1f       	adc	r22, r18
    1498:	83 9f       	mul	r24, r19
    149a:	a0 0d       	add	r26, r0
    149c:	61 1d       	adc	r22, r1
    149e:	22 1f       	adc	r18, r18
    14a0:	74 9f       	mul	r23, r20
    14a2:	33 27       	eor	r19, r19
    14a4:	a0 0d       	add	r26, r0
    14a6:	61 1d       	adc	r22, r1
    14a8:	23 1f       	adc	r18, r19
    14aa:	84 9f       	mul	r24, r20
    14ac:	60 0d       	add	r22, r0
    14ae:	21 1d       	adc	r18, r1
    14b0:	82 2f       	mov	r24, r18
    14b2:	76 2f       	mov	r23, r22
    14b4:	6a 2f       	mov	r22, r26
    14b6:	11 24       	eor	r1, r1
    14b8:	9f 57       	subi	r25, 0x7F	; 127
    14ba:	50 40       	sbci	r21, 0x00	; 0
    14bc:	8a f0       	brmi	.+34     	; 0x14e0 <__mulsf3_pse+0x84>
    14be:	e1 f0       	breq	.+56     	; 0x14f8 <__mulsf3_pse+0x9c>
    14c0:	88 23       	and	r24, r24
    14c2:	4a f0       	brmi	.+18     	; 0x14d6 <__mulsf3_pse+0x7a>
    14c4:	ee 0f       	add	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	bb 1f       	adc	r27, r27
    14ca:	66 1f       	adc	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	91 50       	subi	r25, 0x01	; 1
    14d2:	50 40       	sbci	r21, 0x00	; 0
    14d4:	a9 f7       	brne	.-22     	; 0x14c0 <__mulsf3_pse+0x64>
    14d6:	9e 3f       	cpi	r25, 0xFE	; 254
    14d8:	51 05       	cpc	r21, r1
    14da:	70 f0       	brcs	.+28     	; 0x14f8 <__mulsf3_pse+0x9c>
    14dc:	60 cf       	rjmp	.-320    	; 0x139e <__fp_inf>
    14de:	aa cf       	rjmp	.-172    	; 0x1434 <__fp_szero>
    14e0:	5f 3f       	cpi	r21, 0xFF	; 255
    14e2:	ec f3       	brlt	.-6      	; 0x14de <__mulsf3_pse+0x82>
    14e4:	98 3e       	cpi	r25, 0xE8	; 232
    14e6:	dc f3       	brlt	.-10     	; 0x14de <__mulsf3_pse+0x82>
    14e8:	86 95       	lsr	r24
    14ea:	77 95       	ror	r23
    14ec:	67 95       	ror	r22
    14ee:	b7 95       	ror	r27
    14f0:	f7 95       	ror	r31
    14f2:	e7 95       	ror	r30
    14f4:	9f 5f       	subi	r25, 0xFF	; 255
    14f6:	c1 f7       	brne	.-16     	; 0x14e8 <__mulsf3_pse+0x8c>
    14f8:	fe 2b       	or	r31, r30
    14fa:	88 0f       	add	r24, r24
    14fc:	91 1d       	adc	r25, r1
    14fe:	96 95       	lsr	r25
    1500:	87 95       	ror	r24
    1502:	97 f9       	bld	r25, 7
    1504:	08 95       	ret

00001506 <round>:
    1506:	7b df       	rcall	.-266    	; 0x13fe <__fp_splitA>
    1508:	e0 f0       	brcs	.+56     	; 0x1542 <round+0x3c>
    150a:	9e 37       	cpi	r25, 0x7E	; 126
    150c:	d8 f0       	brcs	.+54     	; 0x1544 <round+0x3e>
    150e:	96 39       	cpi	r25, 0x96	; 150
    1510:	b8 f4       	brcc	.+46     	; 0x1540 <round+0x3a>
    1512:	9e 38       	cpi	r25, 0x8E	; 142
    1514:	48 f4       	brcc	.+18     	; 0x1528 <round+0x22>
    1516:	67 2f       	mov	r22, r23
    1518:	78 2f       	mov	r23, r24
    151a:	88 27       	eor	r24, r24
    151c:	98 5f       	subi	r25, 0xF8	; 248
    151e:	f9 cf       	rjmp	.-14     	; 0x1512 <round+0xc>
    1520:	86 95       	lsr	r24
    1522:	77 95       	ror	r23
    1524:	67 95       	ror	r22
    1526:	93 95       	inc	r25
    1528:	95 39       	cpi	r25, 0x95	; 149
    152a:	d0 f3       	brcs	.-12     	; 0x1520 <round+0x1a>
    152c:	b6 2f       	mov	r27, r22
    152e:	b1 70       	andi	r27, 0x01	; 1
    1530:	6b 0f       	add	r22, r27
    1532:	71 1d       	adc	r23, r1
    1534:	81 1d       	adc	r24, r1
    1536:	20 f4       	brcc	.+8      	; 0x1540 <round+0x3a>
    1538:	87 95       	ror	r24
    153a:	77 95       	ror	r23
    153c:	67 95       	ror	r22
    153e:	93 95       	inc	r25
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <__fp_mintl>
    1542:	1c c0       	rjmp	.+56     	; 0x157c <__fp_mpack>
    1544:	77 cf       	rjmp	.-274    	; 0x1434 <__fp_szero>

00001546 <__fp_mintl>:
    1546:	88 23       	and	r24, r24
    1548:	71 f4       	brne	.+28     	; 0x1566 <__fp_mintl+0x20>
    154a:	77 23       	and	r23, r23
    154c:	21 f0       	breq	.+8      	; 0x1556 <__fp_mintl+0x10>
    154e:	98 50       	subi	r25, 0x08	; 8
    1550:	87 2b       	or	r24, r23
    1552:	76 2f       	mov	r23, r22
    1554:	07 c0       	rjmp	.+14     	; 0x1564 <__fp_mintl+0x1e>
    1556:	66 23       	and	r22, r22
    1558:	11 f4       	brne	.+4      	; 0x155e <__fp_mintl+0x18>
    155a:	99 27       	eor	r25, r25
    155c:	0d c0       	rjmp	.+26     	; 0x1578 <__fp_mintl+0x32>
    155e:	90 51       	subi	r25, 0x10	; 16
    1560:	86 2b       	or	r24, r22
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	2a f0       	brmi	.+10     	; 0x1572 <__fp_mintl+0x2c>
    1568:	9a 95       	dec	r25
    156a:	66 0f       	add	r22, r22
    156c:	77 1f       	adc	r23, r23
    156e:	88 1f       	adc	r24, r24
    1570:	da f7       	brpl	.-10     	; 0x1568 <__fp_mintl+0x22>
    1572:	88 0f       	add	r24, r24
    1574:	96 95       	lsr	r25
    1576:	87 95       	ror	r24
    1578:	97 f9       	bld	r25, 7
    157a:	08 95       	ret

0000157c <__fp_mpack>:
    157c:	9f 3f       	cpi	r25, 0xFF	; 255
    157e:	31 f0       	breq	.+12     	; 0x158c <__fp_mpack_finite+0xc>

00001580 <__fp_mpack_finite>:
    1580:	91 50       	subi	r25, 0x01	; 1
    1582:	20 f4       	brcc	.+8      	; 0x158c <__fp_mpack_finite+0xc>
    1584:	87 95       	ror	r24
    1586:	77 95       	ror	r23
    1588:	67 95       	ror	r22
    158a:	b7 95       	ror	r27
    158c:	88 0f       	add	r24, r24
    158e:	91 1d       	adc	r25, r1
    1590:	96 95       	lsr	r25
    1592:	87 95       	ror	r24
    1594:	97 f9       	bld	r25, 7
    1596:	08 95       	ret

00001598 <__umulhisi3>:
    1598:	a2 9f       	mul	r26, r18
    159a:	b0 01       	movw	r22, r0
    159c:	b3 9f       	mul	r27, r19
    159e:	c0 01       	movw	r24, r0
    15a0:	a3 9f       	mul	r26, r19
    15a2:	01 d0       	rcall	.+2      	; 0x15a6 <__umulhisi3+0xe>
    15a4:	b2 9f       	mul	r27, r18
    15a6:	70 0d       	add	r23, r0
    15a8:	81 1d       	adc	r24, r1
    15aa:	11 24       	eor	r1, r1
    15ac:	91 1d       	adc	r25, r1
    15ae:	08 95       	ret

000015b0 <sprintf>:
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	2e 97       	sbiw	r28, 0x0e	; 14
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0e 89       	ldd	r16, Y+22	; 0x16
    15c4:	1f 89       	ldd	r17, Y+23	; 0x17
    15c6:	86 e0       	ldi	r24, 0x06	; 6
    15c8:	8c 83       	std	Y+4, r24	; 0x04
    15ca:	09 83       	std	Y+1, r16	; 0x01
    15cc:	1a 83       	std	Y+2, r17	; 0x02
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	9f e7       	ldi	r25, 0x7F	; 127
    15d2:	8d 83       	std	Y+5, r24	; 0x05
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	ce 01       	movw	r24, r28
    15d8:	4a 96       	adiw	r24, 0x1a	; 26
    15da:	ac 01       	movw	r20, r24
    15dc:	68 8d       	ldd	r22, Y+24	; 0x18
    15de:	79 8d       	ldd	r23, Y+25	; 0x19
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	0d d0       	rcall	.+26     	; 0x1600 <vfprintf>
    15e6:	ef 81       	ldd	r30, Y+7	; 0x07
    15e8:	f8 85       	ldd	r31, Y+8	; 0x08
    15ea:	e0 0f       	add	r30, r16
    15ec:	f1 1f       	adc	r31, r17
    15ee:	10 82       	st	Z, r1
    15f0:	2e 96       	adiw	r28, 0x0e	; 14
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	08 95       	ret

00001600 <vfprintf>:
    1600:	2f 92       	push	r2
    1602:	3f 92       	push	r3
    1604:	4f 92       	push	r4
    1606:	5f 92       	push	r5
    1608:	6f 92       	push	r6
    160a:	7f 92       	push	r7
    160c:	8f 92       	push	r8
    160e:	9f 92       	push	r9
    1610:	af 92       	push	r10
    1612:	bf 92       	push	r11
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	2c 97       	sbiw	r28, 0x0c	; 12
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	7c 01       	movw	r14, r24
    1630:	6b 01       	movw	r12, r22
    1632:	8a 01       	movw	r16, r20
    1634:	fc 01       	movw	r30, r24
    1636:	16 82       	std	Z+6, r1	; 0x06
    1638:	17 82       	std	Z+7, r1	; 0x07
    163a:	83 81       	ldd	r24, Z+3	; 0x03
    163c:	81 ff       	sbrs	r24, 1
    163e:	b9 c1       	rjmp	.+882    	; 0x19b2 <vfprintf+0x3b2>
    1640:	88 24       	eor	r8, r8
    1642:	83 94       	inc	r8
    1644:	91 2c       	mov	r9, r1
    1646:	8c 0e       	add	r8, r28
    1648:	9d 1e       	adc	r9, r29
    164a:	f7 01       	movw	r30, r14
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	f6 01       	movw	r30, r12
    1650:	93 fd       	sbrc	r25, 3
    1652:	85 91       	lpm	r24, Z+
    1654:	93 ff       	sbrs	r25, 3
    1656:	81 91       	ld	r24, Z+
    1658:	6f 01       	movw	r12, r30
    165a:	88 23       	and	r24, r24
    165c:	09 f4       	brne	.+2      	; 0x1660 <vfprintf+0x60>
    165e:	a5 c1       	rjmp	.+842    	; 0x19aa <vfprintf+0x3aa>
    1660:	85 32       	cpi	r24, 0x25	; 37
    1662:	39 f4       	brne	.+14     	; 0x1672 <vfprintf+0x72>
    1664:	93 fd       	sbrc	r25, 3
    1666:	85 91       	lpm	r24, Z+
    1668:	93 ff       	sbrs	r25, 3
    166a:	81 91       	ld	r24, Z+
    166c:	6f 01       	movw	r12, r30
    166e:	85 32       	cpi	r24, 0x25	; 37
    1670:	21 f4       	brne	.+8      	; 0x167a <vfprintf+0x7a>
    1672:	b7 01       	movw	r22, r14
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	cc d1       	rcall	.+920    	; 0x1a10 <fputc>
    1678:	e8 cf       	rjmp	.-48     	; 0x164a <vfprintf+0x4a>
    167a:	51 2c       	mov	r5, r1
    167c:	31 2c       	mov	r3, r1
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	20 32       	cpi	r18, 0x20	; 32
    1682:	a8 f4       	brcc	.+42     	; 0x16ae <vfprintf+0xae>
    1684:	8b 32       	cpi	r24, 0x2B	; 43
    1686:	61 f0       	breq	.+24     	; 0x16a0 <vfprintf+0xa0>
    1688:	28 f4       	brcc	.+10     	; 0x1694 <vfprintf+0x94>
    168a:	80 32       	cpi	r24, 0x20	; 32
    168c:	51 f0       	breq	.+20     	; 0x16a2 <vfprintf+0xa2>
    168e:	83 32       	cpi	r24, 0x23	; 35
    1690:	71 f4       	brne	.+28     	; 0x16ae <vfprintf+0xae>
    1692:	0b c0       	rjmp	.+22     	; 0x16aa <vfprintf+0xaa>
    1694:	8d 32       	cpi	r24, 0x2D	; 45
    1696:	39 f0       	breq	.+14     	; 0x16a6 <vfprintf+0xa6>
    1698:	80 33       	cpi	r24, 0x30	; 48
    169a:	49 f4       	brne	.+18     	; 0x16ae <vfprintf+0xae>
    169c:	21 60       	ori	r18, 0x01	; 1
    169e:	28 c0       	rjmp	.+80     	; 0x16f0 <vfprintf+0xf0>
    16a0:	22 60       	ori	r18, 0x02	; 2
    16a2:	24 60       	ori	r18, 0x04	; 4
    16a4:	25 c0       	rjmp	.+74     	; 0x16f0 <vfprintf+0xf0>
    16a6:	28 60       	ori	r18, 0x08	; 8
    16a8:	23 c0       	rjmp	.+70     	; 0x16f0 <vfprintf+0xf0>
    16aa:	20 61       	ori	r18, 0x10	; 16
    16ac:	21 c0       	rjmp	.+66     	; 0x16f0 <vfprintf+0xf0>
    16ae:	27 fd       	sbrc	r18, 7
    16b0:	27 c0       	rjmp	.+78     	; 0x1700 <vfprintf+0x100>
    16b2:	38 2f       	mov	r19, r24
    16b4:	30 53       	subi	r19, 0x30	; 48
    16b6:	3a 30       	cpi	r19, 0x0A	; 10
    16b8:	78 f4       	brcc	.+30     	; 0x16d8 <vfprintf+0xd8>
    16ba:	26 ff       	sbrs	r18, 6
    16bc:	06 c0       	rjmp	.+12     	; 0x16ca <vfprintf+0xca>
    16be:	fa e0       	ldi	r31, 0x0A	; 10
    16c0:	5f 9e       	mul	r5, r31
    16c2:	30 0d       	add	r19, r0
    16c4:	11 24       	eor	r1, r1
    16c6:	53 2e       	mov	r5, r19
    16c8:	13 c0       	rjmp	.+38     	; 0x16f0 <vfprintf+0xf0>
    16ca:	8a e0       	ldi	r24, 0x0A	; 10
    16cc:	38 9e       	mul	r3, r24
    16ce:	30 0d       	add	r19, r0
    16d0:	11 24       	eor	r1, r1
    16d2:	33 2e       	mov	r3, r19
    16d4:	20 62       	ori	r18, 0x20	; 32
    16d6:	0c c0       	rjmp	.+24     	; 0x16f0 <vfprintf+0xf0>
    16d8:	8e 32       	cpi	r24, 0x2E	; 46
    16da:	21 f4       	brne	.+8      	; 0x16e4 <vfprintf+0xe4>
    16dc:	26 fd       	sbrc	r18, 6
    16de:	65 c1       	rjmp	.+714    	; 0x19aa <vfprintf+0x3aa>
    16e0:	20 64       	ori	r18, 0x40	; 64
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <vfprintf+0xf0>
    16e4:	8c 36       	cpi	r24, 0x6C	; 108
    16e6:	11 f4       	brne	.+4      	; 0x16ec <vfprintf+0xec>
    16e8:	20 68       	ori	r18, 0x80	; 128
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <vfprintf+0xf0>
    16ec:	88 36       	cpi	r24, 0x68	; 104
    16ee:	41 f4       	brne	.+16     	; 0x1700 <vfprintf+0x100>
    16f0:	f6 01       	movw	r30, r12
    16f2:	93 fd       	sbrc	r25, 3
    16f4:	85 91       	lpm	r24, Z+
    16f6:	93 ff       	sbrs	r25, 3
    16f8:	81 91       	ld	r24, Z+
    16fa:	6f 01       	movw	r12, r30
    16fc:	81 11       	cpse	r24, r1
    16fe:	c0 cf       	rjmp	.-128    	; 0x1680 <vfprintf+0x80>
    1700:	98 2f       	mov	r25, r24
    1702:	95 54       	subi	r25, 0x45	; 69
    1704:	93 30       	cpi	r25, 0x03	; 3
    1706:	18 f0       	brcs	.+6      	; 0x170e <vfprintf+0x10e>
    1708:	90 52       	subi	r25, 0x20	; 32
    170a:	93 30       	cpi	r25, 0x03	; 3
    170c:	28 f4       	brcc	.+10     	; 0x1718 <vfprintf+0x118>
    170e:	0c 5f       	subi	r16, 0xFC	; 252
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
    1712:	ff e3       	ldi	r31, 0x3F	; 63
    1714:	f9 83       	std	Y+1, r31	; 0x01
    1716:	0d c0       	rjmp	.+26     	; 0x1732 <vfprintf+0x132>
    1718:	83 36       	cpi	r24, 0x63	; 99
    171a:	31 f0       	breq	.+12     	; 0x1728 <vfprintf+0x128>
    171c:	83 37       	cpi	r24, 0x73	; 115
    171e:	71 f0       	breq	.+28     	; 0x173c <vfprintf+0x13c>
    1720:	83 35       	cpi	r24, 0x53	; 83
    1722:	09 f0       	breq	.+2      	; 0x1726 <vfprintf+0x126>
    1724:	5a c0       	rjmp	.+180    	; 0x17da <vfprintf+0x1da>
    1726:	22 c0       	rjmp	.+68     	; 0x176c <vfprintf+0x16c>
    1728:	f8 01       	movw	r30, r16
    172a:	80 81       	ld	r24, Z
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	0e 5f       	subi	r16, 0xFE	; 254
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	44 24       	eor	r4, r4
    1734:	43 94       	inc	r4
    1736:	51 2c       	mov	r5, r1
    1738:	54 01       	movw	r10, r8
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <vfprintf+0x164>
    173c:	38 01       	movw	r6, r16
    173e:	f2 e0       	ldi	r31, 0x02	; 2
    1740:	6f 0e       	add	r6, r31
    1742:	71 1c       	adc	r7, r1
    1744:	f8 01       	movw	r30, r16
    1746:	a0 80       	ld	r10, Z
    1748:	b1 80       	ldd	r11, Z+1	; 0x01
    174a:	26 ff       	sbrs	r18, 6
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <vfprintf+0x154>
    174e:	65 2d       	mov	r22, r5
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x158>
    1754:	6f ef       	ldi	r22, 0xFF	; 255
    1756:	7f ef       	ldi	r23, 0xFF	; 255
    1758:	c5 01       	movw	r24, r10
    175a:	2c 87       	std	Y+12, r18	; 0x0c
    175c:	4e d1       	rcall	.+668    	; 0x19fa <strnlen>
    175e:	2c 01       	movw	r4, r24
    1760:	83 01       	movw	r16, r6
    1762:	2c 85       	ldd	r18, Y+12	; 0x0c
    1764:	6f e7       	ldi	r22, 0x7F	; 127
    1766:	26 2e       	mov	r2, r22
    1768:	22 22       	and	r2, r18
    176a:	17 c0       	rjmp	.+46     	; 0x179a <vfprintf+0x19a>
    176c:	38 01       	movw	r6, r16
    176e:	f2 e0       	ldi	r31, 0x02	; 2
    1770:	6f 0e       	add	r6, r31
    1772:	71 1c       	adc	r7, r1
    1774:	f8 01       	movw	r30, r16
    1776:	a0 80       	ld	r10, Z
    1778:	b1 80       	ldd	r11, Z+1	; 0x01
    177a:	26 ff       	sbrs	r18, 6
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <vfprintf+0x184>
    177e:	65 2d       	mov	r22, r5
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <vfprintf+0x188>
    1784:	6f ef       	ldi	r22, 0xFF	; 255
    1786:	7f ef       	ldi	r23, 0xFF	; 255
    1788:	c5 01       	movw	r24, r10
    178a:	2c 87       	std	Y+12, r18	; 0x0c
    178c:	2b d1       	rcall	.+598    	; 0x19e4 <strnlen_P>
    178e:	2c 01       	movw	r4, r24
    1790:	2c 85       	ldd	r18, Y+12	; 0x0c
    1792:	50 e8       	ldi	r21, 0x80	; 128
    1794:	25 2e       	mov	r2, r21
    1796:	22 2a       	or	r2, r18
    1798:	83 01       	movw	r16, r6
    179a:	23 fc       	sbrc	r2, 3
    179c:	1a c0       	rjmp	.+52     	; 0x17d2 <vfprintf+0x1d2>
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <vfprintf+0x1aa>
    17a0:	b7 01       	movw	r22, r14
    17a2:	80 e2       	ldi	r24, 0x20	; 32
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	34 d1       	rcall	.+616    	; 0x1a10 <fputc>
    17a8:	3a 94       	dec	r3
    17aa:	83 2d       	mov	r24, r3
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	48 16       	cp	r4, r24
    17b0:	59 06       	cpc	r5, r25
    17b2:	b0 f3       	brcs	.-20     	; 0x17a0 <vfprintf+0x1a0>
    17b4:	0e c0       	rjmp	.+28     	; 0x17d2 <vfprintf+0x1d2>
    17b6:	f5 01       	movw	r30, r10
    17b8:	27 fc       	sbrc	r2, 7
    17ba:	85 91       	lpm	r24, Z+
    17bc:	27 fe       	sbrs	r2, 7
    17be:	81 91       	ld	r24, Z+
    17c0:	5f 01       	movw	r10, r30
    17c2:	b7 01       	movw	r22, r14
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	24 d1       	rcall	.+584    	; 0x1a10 <fputc>
    17c8:	31 10       	cpse	r3, r1
    17ca:	3a 94       	dec	r3
    17cc:	f1 e0       	ldi	r31, 0x01	; 1
    17ce:	4f 1a       	sub	r4, r31
    17d0:	51 08       	sbc	r5, r1
    17d2:	41 14       	cp	r4, r1
    17d4:	51 04       	cpc	r5, r1
    17d6:	79 f7       	brne	.-34     	; 0x17b6 <vfprintf+0x1b6>
    17d8:	e5 c0       	rjmp	.+458    	; 0x19a4 <vfprintf+0x3a4>
    17da:	84 36       	cpi	r24, 0x64	; 100
    17dc:	11 f0       	breq	.+4      	; 0x17e2 <vfprintf+0x1e2>
    17de:	89 36       	cpi	r24, 0x69	; 105
    17e0:	39 f5       	brne	.+78     	; 0x1830 <vfprintf+0x230>
    17e2:	f8 01       	movw	r30, r16
    17e4:	27 ff       	sbrs	r18, 7
    17e6:	07 c0       	rjmp	.+14     	; 0x17f6 <vfprintf+0x1f6>
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	0c 5f       	subi	r16, 0xFC	; 252
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	08 c0       	rjmp	.+16     	; 0x1806 <vfprintf+0x206>
    17f6:	60 81       	ld	r22, Z
    17f8:	71 81       	ldd	r23, Z+1	; 0x01
    17fa:	88 27       	eor	r24, r24
    17fc:	77 fd       	sbrc	r23, 7
    17fe:	80 95       	com	r24
    1800:	98 2f       	mov	r25, r24
    1802:	0e 5f       	subi	r16, 0xFE	; 254
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	4f e6       	ldi	r20, 0x6F	; 111
    1808:	b4 2e       	mov	r11, r20
    180a:	b2 22       	and	r11, r18
    180c:	97 ff       	sbrs	r25, 7
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <vfprintf+0x222>
    1810:	90 95       	com	r25
    1812:	80 95       	com	r24
    1814:	70 95       	com	r23
    1816:	61 95       	neg	r22
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	8f 4f       	sbci	r24, 0xFF	; 255
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	f0 e8       	ldi	r31, 0x80	; 128
    1820:	bf 2a       	or	r11, r31
    1822:	2a e0       	ldi	r18, 0x0A	; 10
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	a4 01       	movw	r20, r8
    1828:	1f d1       	rcall	.+574    	; 0x1a68 <__ultoa_invert>
    182a:	a8 2e       	mov	r10, r24
    182c:	a8 18       	sub	r10, r8
    182e:	42 c0       	rjmp	.+132    	; 0x18b4 <vfprintf+0x2b4>
    1830:	85 37       	cpi	r24, 0x75	; 117
    1832:	31 f4       	brne	.+12     	; 0x1840 <vfprintf+0x240>
    1834:	3f ee       	ldi	r19, 0xEF	; 239
    1836:	b3 2e       	mov	r11, r19
    1838:	b2 22       	and	r11, r18
    183a:	2a e0       	ldi	r18, 0x0A	; 10
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	24 c0       	rjmp	.+72     	; 0x1888 <vfprintf+0x288>
    1840:	99 ef       	ldi	r25, 0xF9	; 249
    1842:	b9 2e       	mov	r11, r25
    1844:	b2 22       	and	r11, r18
    1846:	8f 36       	cpi	r24, 0x6F	; 111
    1848:	b9 f0       	breq	.+46     	; 0x1878 <vfprintf+0x278>
    184a:	20 f4       	brcc	.+8      	; 0x1854 <vfprintf+0x254>
    184c:	88 35       	cpi	r24, 0x58	; 88
    184e:	09 f0       	breq	.+2      	; 0x1852 <vfprintf+0x252>
    1850:	ac c0       	rjmp	.+344    	; 0x19aa <vfprintf+0x3aa>
    1852:	0d c0       	rjmp	.+26     	; 0x186e <vfprintf+0x26e>
    1854:	80 37       	cpi	r24, 0x70	; 112
    1856:	21 f0       	breq	.+8      	; 0x1860 <vfprintf+0x260>
    1858:	88 37       	cpi	r24, 0x78	; 120
    185a:	09 f0       	breq	.+2      	; 0x185e <vfprintf+0x25e>
    185c:	a6 c0       	rjmp	.+332    	; 0x19aa <vfprintf+0x3aa>
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <vfprintf+0x264>
    1860:	20 e1       	ldi	r18, 0x10	; 16
    1862:	b2 2a       	or	r11, r18
    1864:	b4 fe       	sbrs	r11, 4
    1866:	0b c0       	rjmp	.+22     	; 0x187e <vfprintf+0x27e>
    1868:	84 e0       	ldi	r24, 0x04	; 4
    186a:	b8 2a       	or	r11, r24
    186c:	08 c0       	rjmp	.+16     	; 0x187e <vfprintf+0x27e>
    186e:	24 ff       	sbrs	r18, 4
    1870:	09 c0       	rjmp	.+18     	; 0x1884 <vfprintf+0x284>
    1872:	e6 e0       	ldi	r30, 0x06	; 6
    1874:	be 2a       	or	r11, r30
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <vfprintf+0x284>
    1878:	28 e0       	ldi	r18, 0x08	; 8
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	05 c0       	rjmp	.+10     	; 0x1888 <vfprintf+0x288>
    187e:	20 e1       	ldi	r18, 0x10	; 16
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <vfprintf+0x288>
    1884:	20 e1       	ldi	r18, 0x10	; 16
    1886:	32 e0       	ldi	r19, 0x02	; 2
    1888:	f8 01       	movw	r30, r16
    188a:	b7 fe       	sbrs	r11, 7
    188c:	07 c0       	rjmp	.+14     	; 0x189c <vfprintf+0x29c>
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	93 81       	ldd	r25, Z+3	; 0x03
    1896:	0c 5f       	subi	r16, 0xFC	; 252
    1898:	1f 4f       	sbci	r17, 0xFF	; 255
    189a:	06 c0       	rjmp	.+12     	; 0x18a8 <vfprintf+0x2a8>
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 5f       	subi	r16, 0xFE	; 254
    18a6:	1f 4f       	sbci	r17, 0xFF	; 255
    18a8:	a4 01       	movw	r20, r8
    18aa:	de d0       	rcall	.+444    	; 0x1a68 <__ultoa_invert>
    18ac:	a8 2e       	mov	r10, r24
    18ae:	a8 18       	sub	r10, r8
    18b0:	ff e7       	ldi	r31, 0x7F	; 127
    18b2:	bf 22       	and	r11, r31
    18b4:	b6 fe       	sbrs	r11, 6
    18b6:	0b c0       	rjmp	.+22     	; 0x18ce <vfprintf+0x2ce>
    18b8:	2b 2d       	mov	r18, r11
    18ba:	2e 7f       	andi	r18, 0xFE	; 254
    18bc:	a5 14       	cp	r10, r5
    18be:	50 f4       	brcc	.+20     	; 0x18d4 <vfprintf+0x2d4>
    18c0:	b4 fe       	sbrs	r11, 4
    18c2:	0a c0       	rjmp	.+20     	; 0x18d8 <vfprintf+0x2d8>
    18c4:	b2 fc       	sbrc	r11, 2
    18c6:	08 c0       	rjmp	.+16     	; 0x18d8 <vfprintf+0x2d8>
    18c8:	2b 2d       	mov	r18, r11
    18ca:	2e 7e       	andi	r18, 0xEE	; 238
    18cc:	05 c0       	rjmp	.+10     	; 0x18d8 <vfprintf+0x2d8>
    18ce:	7a 2c       	mov	r7, r10
    18d0:	2b 2d       	mov	r18, r11
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <vfprintf+0x2da>
    18d4:	7a 2c       	mov	r7, r10
    18d6:	01 c0       	rjmp	.+2      	; 0x18da <vfprintf+0x2da>
    18d8:	75 2c       	mov	r7, r5
    18da:	24 ff       	sbrs	r18, 4
    18dc:	0d c0       	rjmp	.+26     	; 0x18f8 <vfprintf+0x2f8>
    18de:	fe 01       	movw	r30, r28
    18e0:	ea 0d       	add	r30, r10
    18e2:	f1 1d       	adc	r31, r1
    18e4:	80 81       	ld	r24, Z
    18e6:	80 33       	cpi	r24, 0x30	; 48
    18e8:	11 f4       	brne	.+4      	; 0x18ee <vfprintf+0x2ee>
    18ea:	29 7e       	andi	r18, 0xE9	; 233
    18ec:	09 c0       	rjmp	.+18     	; 0x1900 <vfprintf+0x300>
    18ee:	22 ff       	sbrs	r18, 2
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <vfprintf+0x2fe>
    18f2:	73 94       	inc	r7
    18f4:	73 94       	inc	r7
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <vfprintf+0x300>
    18f8:	82 2f       	mov	r24, r18
    18fa:	86 78       	andi	r24, 0x86	; 134
    18fc:	09 f0       	breq	.+2      	; 0x1900 <vfprintf+0x300>
    18fe:	73 94       	inc	r7
    1900:	23 fd       	sbrc	r18, 3
    1902:	13 c0       	rjmp	.+38     	; 0x192a <vfprintf+0x32a>
    1904:	20 ff       	sbrs	r18, 0
    1906:	0e c0       	rjmp	.+28     	; 0x1924 <vfprintf+0x324>
    1908:	5a 2c       	mov	r5, r10
    190a:	73 14       	cp	r7, r3
    190c:	58 f4       	brcc	.+22     	; 0x1924 <vfprintf+0x324>
    190e:	53 0c       	add	r5, r3
    1910:	57 18       	sub	r5, r7
    1912:	73 2c       	mov	r7, r3
    1914:	07 c0       	rjmp	.+14     	; 0x1924 <vfprintf+0x324>
    1916:	b7 01       	movw	r22, r14
    1918:	80 e2       	ldi	r24, 0x20	; 32
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	2c 87       	std	Y+12, r18	; 0x0c
    191e:	78 d0       	rcall	.+240    	; 0x1a10 <fputc>
    1920:	73 94       	inc	r7
    1922:	2c 85       	ldd	r18, Y+12	; 0x0c
    1924:	73 14       	cp	r7, r3
    1926:	b8 f3       	brcs	.-18     	; 0x1916 <vfprintf+0x316>
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <vfprintf+0x332>
    192a:	73 14       	cp	r7, r3
    192c:	10 f4       	brcc	.+4      	; 0x1932 <vfprintf+0x332>
    192e:	37 18       	sub	r3, r7
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <vfprintf+0x334>
    1932:	31 2c       	mov	r3, r1
    1934:	24 ff       	sbrs	r18, 4
    1936:	11 c0       	rjmp	.+34     	; 0x195a <vfprintf+0x35a>
    1938:	b7 01       	movw	r22, r14
    193a:	80 e3       	ldi	r24, 0x30	; 48
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	2c 87       	std	Y+12, r18	; 0x0c
    1940:	67 d0       	rcall	.+206    	; 0x1a10 <fputc>
    1942:	2c 85       	ldd	r18, Y+12	; 0x0c
    1944:	22 ff       	sbrs	r18, 2
    1946:	1c c0       	rjmp	.+56     	; 0x1980 <vfprintf+0x380>
    1948:	21 ff       	sbrs	r18, 1
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <vfprintf+0x352>
    194c:	88 e5       	ldi	r24, 0x58	; 88
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <vfprintf+0x356>
    1952:	88 e7       	ldi	r24, 0x78	; 120
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	b7 01       	movw	r22, r14
    1958:	0c c0       	rjmp	.+24     	; 0x1972 <vfprintf+0x372>
    195a:	82 2f       	mov	r24, r18
    195c:	86 78       	andi	r24, 0x86	; 134
    195e:	81 f0       	breq	.+32     	; 0x1980 <vfprintf+0x380>
    1960:	21 fd       	sbrc	r18, 1
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <vfprintf+0x368>
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	01 c0       	rjmp	.+2      	; 0x196a <vfprintf+0x36a>
    1968:	8b e2       	ldi	r24, 0x2B	; 43
    196a:	27 fd       	sbrc	r18, 7
    196c:	8d e2       	ldi	r24, 0x2D	; 45
    196e:	b7 01       	movw	r22, r14
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	4e d0       	rcall	.+156    	; 0x1a10 <fputc>
    1974:	05 c0       	rjmp	.+10     	; 0x1980 <vfprintf+0x380>
    1976:	b7 01       	movw	r22, r14
    1978:	80 e3       	ldi	r24, 0x30	; 48
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	49 d0       	rcall	.+146    	; 0x1a10 <fputc>
    197e:	5a 94       	dec	r5
    1980:	a5 14       	cp	r10, r5
    1982:	c8 f3       	brcs	.-14     	; 0x1976 <vfprintf+0x376>
    1984:	aa 94       	dec	r10
    1986:	f4 01       	movw	r30, r8
    1988:	ea 0d       	add	r30, r10
    198a:	f1 1d       	adc	r31, r1
    198c:	b7 01       	movw	r22, r14
    198e:	80 81       	ld	r24, Z
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	3e d0       	rcall	.+124    	; 0x1a10 <fputc>
    1994:	a1 10       	cpse	r10, r1
    1996:	f6 cf       	rjmp	.-20     	; 0x1984 <vfprintf+0x384>
    1998:	05 c0       	rjmp	.+10     	; 0x19a4 <vfprintf+0x3a4>
    199a:	b7 01       	movw	r22, r14
    199c:	80 e2       	ldi	r24, 0x20	; 32
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	37 d0       	rcall	.+110    	; 0x1a10 <fputc>
    19a2:	3a 94       	dec	r3
    19a4:	31 10       	cpse	r3, r1
    19a6:	f9 cf       	rjmp	.-14     	; 0x199a <vfprintf+0x39a>
    19a8:	50 ce       	rjmp	.-864    	; 0x164a <vfprintf+0x4a>
    19aa:	f7 01       	movw	r30, r14
    19ac:	26 81       	ldd	r18, Z+6	; 0x06
    19ae:	37 81       	ldd	r19, Z+7	; 0x07
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <vfprintf+0x3b6>
    19b2:	2f ef       	ldi	r18, 0xFF	; 255
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	c9 01       	movw	r24, r18
    19b8:	2c 96       	adiw	r28, 0x0c	; 12
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	9f 90       	pop	r9
    19d4:	8f 90       	pop	r8
    19d6:	7f 90       	pop	r7
    19d8:	6f 90       	pop	r6
    19da:	5f 90       	pop	r5
    19dc:	4f 90       	pop	r4
    19de:	3f 90       	pop	r3
    19e0:	2f 90       	pop	r2
    19e2:	08 95       	ret

000019e4 <strnlen_P>:
    19e4:	fc 01       	movw	r30, r24
    19e6:	05 90       	lpm	r0, Z+
    19e8:	61 50       	subi	r22, 0x01	; 1
    19ea:	70 40       	sbci	r23, 0x00	; 0
    19ec:	01 10       	cpse	r0, r1
    19ee:	d8 f7       	brcc	.-10     	; 0x19e6 <strnlen_P+0x2>
    19f0:	80 95       	com	r24
    19f2:	90 95       	com	r25
    19f4:	8e 0f       	add	r24, r30
    19f6:	9f 1f       	adc	r25, r31
    19f8:	08 95       	ret

000019fa <strnlen>:
    19fa:	fc 01       	movw	r30, r24
    19fc:	61 50       	subi	r22, 0x01	; 1
    19fe:	70 40       	sbci	r23, 0x00	; 0
    1a00:	01 90       	ld	r0, Z+
    1a02:	01 10       	cpse	r0, r1
    1a04:	d8 f7       	brcc	.-10     	; 0x19fc <strnlen+0x2>
    1a06:	80 95       	com	r24
    1a08:	90 95       	com	r25
    1a0a:	8e 0f       	add	r24, r30
    1a0c:	9f 1f       	adc	r25, r31
    1a0e:	08 95       	ret

00001a10 <fputc>:
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	8c 01       	movw	r16, r24
    1a1a:	eb 01       	movw	r28, r22
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	81 fd       	sbrc	r24, 1
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <fputc+0x18>
    1a22:	0f ef       	ldi	r16, 0xFF	; 255
    1a24:	1f ef       	ldi	r17, 0xFF	; 255
    1a26:	1a c0       	rjmp	.+52     	; 0x1a5c <fputc+0x4c>
    1a28:	82 ff       	sbrs	r24, 2
    1a2a:	0d c0       	rjmp	.+26     	; 0x1a46 <fputc+0x36>
    1a2c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a2e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	28 17       	cp	r18, r24
    1a36:	39 07       	cpc	r19, r25
    1a38:	64 f4       	brge	.+24     	; 0x1a52 <fputc+0x42>
    1a3a:	e8 81       	ld	r30, Y
    1a3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a3e:	01 93       	st	Z+, r16
    1a40:	e8 83       	st	Y, r30
    1a42:	f9 83       	std	Y+1, r31	; 0x01
    1a44:	06 c0       	rjmp	.+12     	; 0x1a52 <fputc+0x42>
    1a46:	e8 85       	ldd	r30, Y+8	; 0x08
    1a48:	f9 85       	ldd	r31, Y+9	; 0x09
    1a4a:	80 2f       	mov	r24, r16
    1a4c:	19 95       	eicall
    1a4e:	89 2b       	or	r24, r25
    1a50:	41 f7       	brne	.-48     	; 0x1a22 <fputc+0x12>
    1a52:	8e 81       	ldd	r24, Y+6	; 0x06
    1a54:	9f 81       	ldd	r25, Y+7	; 0x07
    1a56:	01 96       	adiw	r24, 0x01	; 1
    1a58:	8e 83       	std	Y+6, r24	; 0x06
    1a5a:	9f 83       	std	Y+7, r25	; 0x07
    1a5c:	c8 01       	movw	r24, r16
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <__ultoa_invert>:
    1a68:	fa 01       	movw	r30, r20
    1a6a:	aa 27       	eor	r26, r26
    1a6c:	28 30       	cpi	r18, 0x08	; 8
    1a6e:	51 f1       	breq	.+84     	; 0x1ac4 <__ultoa_invert+0x5c>
    1a70:	20 31       	cpi	r18, 0x10	; 16
    1a72:	81 f1       	breq	.+96     	; 0x1ad4 <__ultoa_invert+0x6c>
    1a74:	e8 94       	clt
    1a76:	6f 93       	push	r22
    1a78:	6e 7f       	andi	r22, 0xFE	; 254
    1a7a:	6e 5f       	subi	r22, 0xFE	; 254
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	af 4f       	sbci	r26, 0xFF	; 255
    1a84:	b1 e0       	ldi	r27, 0x01	; 1
    1a86:	3e d0       	rcall	.+124    	; 0x1b04 <__ultoa_invert+0x9c>
    1a88:	b4 e0       	ldi	r27, 0x04	; 4
    1a8a:	3c d0       	rcall	.+120    	; 0x1b04 <__ultoa_invert+0x9c>
    1a8c:	67 0f       	add	r22, r23
    1a8e:	78 1f       	adc	r23, r24
    1a90:	89 1f       	adc	r24, r25
    1a92:	9a 1f       	adc	r25, r26
    1a94:	a1 1d       	adc	r26, r1
    1a96:	68 0f       	add	r22, r24
    1a98:	79 1f       	adc	r23, r25
    1a9a:	8a 1f       	adc	r24, r26
    1a9c:	91 1d       	adc	r25, r1
    1a9e:	a1 1d       	adc	r26, r1
    1aa0:	6a 0f       	add	r22, r26
    1aa2:	71 1d       	adc	r23, r1
    1aa4:	81 1d       	adc	r24, r1
    1aa6:	91 1d       	adc	r25, r1
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	20 d0       	rcall	.+64     	; 0x1aec <__ultoa_invert+0x84>
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <__ultoa_invert+0x48>
    1aae:	68 94       	set
    1ab0:	3f 91       	pop	r19
    1ab2:	2a e0       	ldi	r18, 0x0A	; 10
    1ab4:	26 9f       	mul	r18, r22
    1ab6:	11 24       	eor	r1, r1
    1ab8:	30 19       	sub	r19, r0
    1aba:	30 5d       	subi	r19, 0xD0	; 208
    1abc:	31 93       	st	Z+, r19
    1abe:	de f6       	brtc	.-74     	; 0x1a76 <__ultoa_invert+0xe>
    1ac0:	cf 01       	movw	r24, r30
    1ac2:	08 95       	ret
    1ac4:	46 2f       	mov	r20, r22
    1ac6:	47 70       	andi	r20, 0x07	; 7
    1ac8:	40 5d       	subi	r20, 0xD0	; 208
    1aca:	41 93       	st	Z+, r20
    1acc:	b3 e0       	ldi	r27, 0x03	; 3
    1ace:	0f d0       	rcall	.+30     	; 0x1aee <__ultoa_invert+0x86>
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <__ultoa_invert+0x5c>
    1ad2:	f6 cf       	rjmp	.-20     	; 0x1ac0 <__ultoa_invert+0x58>
    1ad4:	46 2f       	mov	r20, r22
    1ad6:	4f 70       	andi	r20, 0x0F	; 15
    1ad8:	40 5d       	subi	r20, 0xD0	; 208
    1ada:	4a 33       	cpi	r20, 0x3A	; 58
    1adc:	18 f0       	brcs	.+6      	; 0x1ae4 <__ultoa_invert+0x7c>
    1ade:	49 5d       	subi	r20, 0xD9	; 217
    1ae0:	31 fd       	sbrc	r19, 1
    1ae2:	40 52       	subi	r20, 0x20	; 32
    1ae4:	41 93       	st	Z+, r20
    1ae6:	02 d0       	rcall	.+4      	; 0x1aec <__ultoa_invert+0x84>
    1ae8:	a9 f7       	brne	.-22     	; 0x1ad4 <__ultoa_invert+0x6c>
    1aea:	ea cf       	rjmp	.-44     	; 0x1ac0 <__ultoa_invert+0x58>
    1aec:	b4 e0       	ldi	r27, 0x04	; 4
    1aee:	a6 95       	lsr	r26
    1af0:	97 95       	ror	r25
    1af2:	87 95       	ror	r24
    1af4:	77 95       	ror	r23
    1af6:	67 95       	ror	r22
    1af8:	ba 95       	dec	r27
    1afa:	c9 f7       	brne	.-14     	; 0x1aee <__ultoa_invert+0x86>
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	61 05       	cpc	r22, r1
    1b00:	71 05       	cpc	r23, r1
    1b02:	08 95       	ret
    1b04:	9b 01       	movw	r18, r22
    1b06:	ac 01       	movw	r20, r24
    1b08:	0a 2e       	mov	r0, r26
    1b0a:	06 94       	lsr	r0
    1b0c:	57 95       	ror	r21
    1b0e:	47 95       	ror	r20
    1b10:	37 95       	ror	r19
    1b12:	27 95       	ror	r18
    1b14:	ba 95       	dec	r27
    1b16:	c9 f7       	brne	.-14     	; 0x1b0a <__ultoa_invert+0xa2>
    1b18:	62 0f       	add	r22, r18
    1b1a:	73 1f       	adc	r23, r19
    1b1c:	84 1f       	adc	r24, r20
    1b1e:	95 1f       	adc	r25, r21
    1b20:	a0 1d       	adc	r26, r0
    1b22:	08 95       	ret

00001b24 <_exit>:
    1b24:	f8 94       	cli

00001b26 <__stop_program>:
    1b26:	ff cf       	rjmp	.-2      	; 0x1b26 <__stop_program>
