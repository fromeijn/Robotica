
Xmega_NXT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ae8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00802000  00001ae8  00001b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004a8  0080204a  0080204a  00001bc6  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a29  00000000  00000000  000046d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000050f9  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000200  00000000  00000000  00005128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003da7  00000000  00000000  00005328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d27  00000000  00000000  000090cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001768  00000000  00000000  00009df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000870  00000000  00000000  0000b560  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000220f  00000000  00000000  0000bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002449  00000000  00000000  0000dfdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000190  00000000  00000000  00010428  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	3b c2       	rjmp	.+1142   	; 0x480 <__vector_2>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f3 c1       	rjmp	.+998    	; 0x418 <__vector_12>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	2b c2       	rjmp	.+1110   	; 0x4a8 <__vector_20>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
      66:	00 00       	nop
      68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	03 c1       	rjmp	.+518    	; 0x278 <__vector_28>
      72:	00 00       	nop
      74:	35 c1       	rjmp	.+618    	; 0x2e0 <__vector_29>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5d c3       	rjmp	.+1722   	; 0x778 <__vector_47>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	2b c2       	rjmp	.+1110   	; 0x594 <__vector_79>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	98 c2       	rjmp	.+1328   	; 0x686 <__vector_85>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	f3 c0       	rjmp	.+486    	; 0x348 <__vector_88>
     162:	00 00       	nop
     164:	25 c1       	rjmp	.+586    	; 0x3b0 <__vector_89>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e3       	ldi	r29, 0x3F	; 63
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 ee       	ldi	r30, 0xE8	; 232
     21c:	fa e1       	ldi	r31, 0x1A	; 26
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	aa 34       	cpi	r26, 0x4A	; 74
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	24 e2       	ldi	r18, 0x24	; 36
     232:	aa e4       	ldi	r26, 0x4A	; 74
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a2 3f       	cpi	r26, 0xF2	; 242
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	61 d3       	rcall	.+1730   	; 0x904 <main>
     242:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <TWIC_SlaveProcessData>:
	}
}

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
     248:	e0 91 66 22 	lds	r30, 0x2266
	for(uint8_t i = 0; i < NUM_BYTES; i++)
	{
		twiSlave.sendData[i] = transmitArray[i+askbyte];
     24c:	f0 e0       	ldi	r31, 0x00	; 0
		PORTC.OUTCLR = PIN3_bm;
		switchy = 1;
	}
}

void TWIC_SlaveProcessData(void)
     24e:	e6 5b       	subi	r30, 0xB6	; 182
     250:	ff 4d       	sbci	r31, 0xDF	; 223
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t askbyte = twiSlave.receivedData[0];
	for(uint8_t i = 0; i < NUM_BYTES; i++)
	{
		twiSlave.sendData[i] = transmitArray[i+askbyte];
     256:	21 91       	ld	r18, Z+
     258:	dc 01       	movw	r26, r24
     25a:	aa 55       	subi	r26, 0x5A	; 90
     25c:	bd 4d       	sbci	r27, 0xDD	; 221
     25e:	2c 93       	st	X, r18
     260:	01 96       	adiw	r24, 0x01	; 1
}

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
	for(uint8_t i = 0; i < NUM_BYTES; i++)
     262:	80 31       	cpi	r24, 0x10	; 16
     264:	91 05       	cpc	r25, r1
     266:	b9 f7       	brne	.-18     	; 0x256 <TWIC_SlaveProcessData+0xe>
	{
		twiSlave.sendData[i] = transmitArray[i+askbyte];
	}
	if(twiSlave.receivedData[0] == 0x01) transmitArray[5] = '_';
     268:	80 91 66 22 	lds	r24, 0x2266
     26c:	81 30       	cpi	r24, 0x01	; 1
     26e:	19 f4       	brne	.+6      	; 0x276 <TWIC_SlaveProcessData+0x2e>
     270:	8f e5       	ldi	r24, 0x5F	; 95
     272:	80 93 4f 20 	sts	0x204F, r24
     276:	08 95       	ret

00000278 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     278:	1f 92       	push	r1
     27a:	0f 92       	push	r0
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	0f 92       	push	r0
     280:	11 24       	eor	r1, r1
     282:	08 b6       	in	r0, 0x38	; 56
     284:	0f 92       	push	r0
     286:	18 be       	out	0x38, r1	; 56
     288:	09 b6       	in	r0, 0x39	; 57
     28a:	0f 92       	push	r0
     28c:	19 be       	out	0x39, r1	; 57
     28e:	0b b6       	in	r0, 0x3b	; 59
     290:	0f 92       	push	r0
     292:	1b be       	out	0x3b, r1	; 59
     294:	2f 93       	push	r18
     296:	3f 93       	push	r19
     298:	4f 93       	push	r20
     29a:	5f 93       	push	r21
     29c:	6f 93       	push	r22
     29e:	7f 93       	push	r23
     2a0:	8f 93       	push	r24
     2a2:	9f 93       	push	r25
     2a4:	af 93       	push	r26
     2a6:	bf 93       	push	r27
     2a8:	ef 93       	push	r30
     2aa:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     2ac:	8b ee       	ldi	r24, 0xEB	; 235
     2ae:	92 e2       	ldi	r25, 0x22	; 34
     2b0:	da d6       	rcall	.+3508   	; 0x1066 <USART_RXComplete>
}
     2b2:	ff 91       	pop	r31
     2b4:	ef 91       	pop	r30
     2b6:	bf 91       	pop	r27
     2b8:	af 91       	pop	r26
     2ba:	9f 91       	pop	r25
     2bc:	8f 91       	pop	r24
     2be:	7f 91       	pop	r23
     2c0:	6f 91       	pop	r22
     2c2:	5f 91       	pop	r21
     2c4:	4f 91       	pop	r20
     2c6:	3f 91       	pop	r19
     2c8:	2f 91       	pop	r18
     2ca:	0f 90       	pop	r0
     2cc:	0b be       	out	0x3b, r0	; 59
     2ce:	0f 90       	pop	r0
     2d0:	09 be       	out	0x39, r0	; 57
     2d2:	0f 90       	pop	r0
     2d4:	08 be       	out	0x38, r0	; 56
     2d6:	0f 90       	pop	r0
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	0f 90       	pop	r0
     2dc:	1f 90       	pop	r1
     2de:	18 95       	reti

000002e0 <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	08 b6       	in	r0, 0x38	; 56
     2ec:	0f 92       	push	r0
     2ee:	18 be       	out	0x38, r1	; 56
     2f0:	09 b6       	in	r0, 0x39	; 57
     2f2:	0f 92       	push	r0
     2f4:	19 be       	out	0x39, r1	; 57
     2f6:	0b b6       	in	r0, 0x3b	; 59
     2f8:	0f 92       	push	r0
     2fa:	1b be       	out	0x3b, r1	; 59
     2fc:	2f 93       	push	r18
     2fe:	3f 93       	push	r19
     300:	4f 93       	push	r20
     302:	5f 93       	push	r21
     304:	6f 93       	push	r22
     306:	7f 93       	push	r23
     308:	8f 93       	push	r24
     30a:	9f 93       	push	r25
     30c:	af 93       	push	r26
     30e:	bf 93       	push	r27
     310:	ef 93       	push	r30
     312:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     314:	8b ee       	ldi	r24, 0xEB	; 235
     316:	92 e2       	ldi	r25, 0x22	; 34
     318:	c4 d6       	rcall	.+3464   	; 0x10a2 <USART_DataRegEmpty>
}
     31a:	ff 91       	pop	r31
     31c:	ef 91       	pop	r30
     31e:	bf 91       	pop	r27
     320:	af 91       	pop	r26
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	7f 91       	pop	r23
     328:	6f 91       	pop	r22
     32a:	5f 91       	pop	r21
     32c:	4f 91       	pop	r20
     32e:	3f 91       	pop	r19
     330:	2f 91       	pop	r18
     332:	0f 90       	pop	r0
     334:	0b be       	out	0x3b, r0	; 59
     336:	0f 90       	pop	r0
     338:	09 be       	out	0x39, r0	; 57
     33a:	0f 90       	pop	r0
     33c:	08 be       	out	0x38, r0	; 56
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <__vector_88>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_RXC_vect)
{
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	0f 92       	push	r0
     350:	11 24       	eor	r1, r1
     352:	08 b6       	in	r0, 0x38	; 56
     354:	0f 92       	push	r0
     356:	18 be       	out	0x38, r1	; 56
     358:	09 b6       	in	r0, 0x39	; 57
     35a:	0f 92       	push	r0
     35c:	19 be       	out	0x39, r1	; 57
     35e:	0b b6       	in	r0, 0x3b	; 59
     360:	0f 92       	push	r0
     362:	1b be       	out	0x3b, r1	; 59
     364:	2f 93       	push	r18
     366:	3f 93       	push	r19
     368:	4f 93       	push	r20
     36a:	5f 93       	push	r21
     36c:	6f 93       	push	r22
     36e:	7f 93       	push	r23
     370:	8f 93       	push	r24
     372:	9f 93       	push	r25
     374:	af 93       	push	r26
     376:	bf 93       	push	r27
     378:	ef 93       	push	r30
     37a:	ff 93       	push	r31
  USART_RXComplete(&uartD0);
     37c:	8a e4       	ldi	r24, 0x4A	; 74
     37e:	91 e2       	ldi	r25, 0x21	; 33
     380:	72 d6       	rcall	.+3300   	; 0x1066 <USART_RXComplete>
}
     382:	ff 91       	pop	r31
     384:	ef 91       	pop	r30
     386:	bf 91       	pop	r27
     388:	af 91       	pop	r26
     38a:	9f 91       	pop	r25
     38c:	8f 91       	pop	r24
     38e:	7f 91       	pop	r23
     390:	6f 91       	pop	r22
     392:	5f 91       	pop	r21
     394:	4f 91       	pop	r20
     396:	3f 91       	pop	r19
     398:	2f 91       	pop	r18
     39a:	0f 90       	pop	r0
     39c:	0b be       	out	0x3b, r0	; 59
     39e:	0f 90       	pop	r0
     3a0:	09 be       	out	0x39, r0	; 57
     3a2:	0f 90       	pop	r0
     3a4:	08 be       	out	0x38, r0	; 56
     3a6:	0f 90       	pop	r0
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	0f 90       	pop	r0
     3ac:	1f 90       	pop	r1
     3ae:	18 95       	reti

000003b0 <__vector_89>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_DRE_vect)
{
     3b0:	1f 92       	push	r1
     3b2:	0f 92       	push	r0
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	0f 92       	push	r0
     3b8:	11 24       	eor	r1, r1
     3ba:	08 b6       	in	r0, 0x38	; 56
     3bc:	0f 92       	push	r0
     3be:	18 be       	out	0x38, r1	; 56
     3c0:	09 b6       	in	r0, 0x39	; 57
     3c2:	0f 92       	push	r0
     3c4:	19 be       	out	0x39, r1	; 57
     3c6:	0b b6       	in	r0, 0x3b	; 59
     3c8:	0f 92       	push	r0
     3ca:	1b be       	out	0x3b, r1	; 59
     3cc:	2f 93       	push	r18
     3ce:	3f 93       	push	r19
     3d0:	4f 93       	push	r20
     3d2:	5f 93       	push	r21
     3d4:	6f 93       	push	r22
     3d6:	7f 93       	push	r23
     3d8:	8f 93       	push	r24
     3da:	9f 93       	push	r25
     3dc:	af 93       	push	r26
     3de:	bf 93       	push	r27
     3e0:	ef 93       	push	r30
     3e2:	ff 93       	push	r31
  USART_DataRegEmpty(&uartD0);
     3e4:	8a e4       	ldi	r24, 0x4A	; 74
     3e6:	91 e2       	ldi	r25, 0x21	; 33
     3e8:	5c d6       	rcall	.+3256   	; 0x10a2 <USART_DataRegEmpty>
}
     3ea:	ff 91       	pop	r31
     3ec:	ef 91       	pop	r30
     3ee:	bf 91       	pop	r27
     3f0:	af 91       	pop	r26
     3f2:	9f 91       	pop	r25
     3f4:	8f 91       	pop	r24
     3f6:	7f 91       	pop	r23
     3f8:	6f 91       	pop	r22
     3fa:	5f 91       	pop	r21
     3fc:	4f 91       	pop	r20
     3fe:	3f 91       	pop	r19
     400:	2f 91       	pop	r18
     402:	0f 90       	pop	r0
     404:	0b be       	out	0x3b, r0	; 59
     406:	0f 90       	pop	r0
     408:	09 be       	out	0x39, r0	; 57
     40a:	0f 90       	pop	r0
     40c:	08 be       	out	0x38, r0	; 56
     40e:	0f 90       	pop	r0
     410:	0f be       	out	0x3f, r0	; 63
     412:	0f 90       	pop	r0
     414:	1f 90       	pop	r1
     416:	18 95       	reti

00000418 <__vector_12>:
		_delay_ms(1000);
	}
}

ISR(TWIC_TWIS_vect)
{
     418:	1f 92       	push	r1
     41a:	0f 92       	push	r0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	0f 92       	push	r0
     420:	11 24       	eor	r1, r1
     422:	08 b6       	in	r0, 0x38	; 56
     424:	0f 92       	push	r0
     426:	18 be       	out	0x38, r1	; 56
     428:	09 b6       	in	r0, 0x39	; 57
     42a:	0f 92       	push	r0
     42c:	19 be       	out	0x39, r1	; 57
     42e:	0b b6       	in	r0, 0x3b	; 59
     430:	0f 92       	push	r0
     432:	1b be       	out	0x3b, r1	; 59
     434:	2f 93       	push	r18
     436:	3f 93       	push	r19
     438:	4f 93       	push	r20
     43a:	5f 93       	push	r21
     43c:	6f 93       	push	r22
     43e:	7f 93       	push	r23
     440:	8f 93       	push	r24
     442:	9f 93       	push	r25
     444:	af 93       	push	r26
     446:	bf 93       	push	r27
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twiSlave);
     44c:	82 e6       	ldi	r24, 0x62	; 98
     44e:	92 e2       	ldi	r25, 0x22	; 34
     450:	f3 d3       	rcall	.+2022   	; 0xc38 <TWI_SlaveInterruptHandler>
}
     452:	ff 91       	pop	r31
     454:	ef 91       	pop	r30
     456:	bf 91       	pop	r27
     458:	af 91       	pop	r26
     45a:	9f 91       	pop	r25
     45c:	8f 91       	pop	r24
     45e:	7f 91       	pop	r23
     460:	6f 91       	pop	r22
     462:	5f 91       	pop	r21
     464:	4f 91       	pop	r20
     466:	3f 91       	pop	r19
     468:	2f 91       	pop	r18
     46a:	0f 90       	pop	r0
     46c:	0b be       	out	0x3b, r0	; 59
     46e:	0f 90       	pop	r0
     470:	09 be       	out	0x39, r0	; 57
     472:	0f 90       	pop	r0
     474:	08 be       	out	0x38, r0	; 56
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <__vector_2>:

ISR(PORTC_INT0_vect)//start uart delay
{
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	08 b6       	in	r0, 0x38	; 56
     48c:	0f 92       	push	r0
     48e:	18 be       	out	0x38, r1	; 56
     490:	8f 93       	push	r24
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
     492:	87 e0       	ldi	r24, 0x07	; 7
     494:	80 93 40 08 	sts	0x0840, r24
}
     498:	8f 91       	pop	r24
     49a:	0f 90       	pop	r0
     49c:	08 be       	out	0x38, r0	; 56
     49e:	0f 90       	pop	r0
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	0f 90       	pop	r0
     4a4:	1f 90       	pop	r1
     4a6:	18 95       	reti

000004a8 <__vector_20>:

ISR(TCC1_OVF_vect)//uart delay
{
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	08 b6       	in	r0, 0x38	; 56
     4b4:	0f 92       	push	r0
     4b6:	18 be       	out	0x38, r1	; 56
     4b8:	09 b6       	in	r0, 0x39	; 57
     4ba:	0f 92       	push	r0
     4bc:	19 be       	out	0x39, r1	; 57
     4be:	0a b6       	in	r0, 0x3a	; 58
     4c0:	0f 92       	push	r0
     4c2:	1a be       	out	0x3a, r1	; 58
     4c4:	0b b6       	in	r0, 0x3b	; 59
     4c6:	0f 92       	push	r0
     4c8:	1b be       	out	0x3b, r1	; 59
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	2f 93       	push	r18
     4d6:	3f 93       	push	r19
     4d8:	4f 93       	push	r20
     4da:	5f 93       	push	r21
     4dc:	6f 93       	push	r22
     4de:	7f 93       	push	r23
     4e0:	8f 93       	push	r24
     4e2:	9f 93       	push	r25
     4e4:	af 93       	push	r26
     4e6:	bf 93       	push	r27
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     4f0:	10 92 40 08 	sts	0x0840, r1
     4f4:	01 e5       	ldi	r16, 0x51	; 81
     4f6:	12 e2       	ldi	r17, 0x22	; 34
ISR(PORTC_INT0_vect)//start uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
}

ISR(TCC1_OVF_vect)//uart delay
     4f8:	0f 2e       	mov	r0, r31
     4fa:	f1 e6       	ldi	r31, 0x61	; 97
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f2 e2       	ldi	r31, 0x22	; 34
     500:	ff 2e       	mov	r15, r31
     502:	f0 2d       	mov	r31, r0
     504:	e8 01       	movw	r28, r16
	{
		if (USART_RXBufferData_Available(&uartC1))
		{
			receiveArray[i] = USART_RXBuffer_GetByte(&uartC1);
		}else{
			receiveArray[i] = '_';
     506:	0f 2e       	mov	r0, r31
     508:	ff e5       	ldi	r31, 0x5F	; 95
     50a:	df 2e       	mov	r13, r31
     50c:	f0 2d       	mov	r31, r0
{
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
	int i = 0;
	while (i < NUM_BYTES)
	{
		if (USART_RXBufferData_Available(&uartC1))
     50e:	8b ee       	ldi	r24, 0xEB	; 235
     510:	92 e2       	ldi	r25, 0x22	; 34
     512:	8e d5       	rcall	.+2844   	; 0x1030 <USART_RXBufferData_Available>
     514:	88 23       	and	r24, r24
     516:	29 f0       	breq	.+10     	; 0x522 <__vector_20+0x7a>
		{
			receiveArray[i] = USART_RXBuffer_GetByte(&uartC1);
     518:	8b ee       	ldi	r24, 0xEB	; 235
     51a:	92 e2       	ldi	r25, 0x22	; 34
     51c:	96 d5       	rcall	.+2860   	; 0x104a <USART_RXBuffer_GetByte>
     51e:	88 83       	st	Y, r24
     520:	01 c0       	rjmp	.+2      	; 0x524 <__vector_20+0x7c>
		}else{
			receiveArray[i] = '_';
     522:	d8 82       	st	Y, r13
     524:	21 96       	adiw	r28, 0x01	; 1

ISR(TCC1_OVF_vect)//uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
	int i = 0;
	while (i < NUM_BYTES)
     526:	ce 15       	cp	r28, r14
     528:	df 05       	cpc	r29, r15
     52a:	89 f7       	brne	.-30     	; 0x50e <__vector_20+0x66>
		}
		i++;
	}
	
	i = 0;
	uart_puts(&uartD0, "ID: ");
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	70 e2       	ldi	r23, 0x20	; 32
     530:	8a e4       	ldi	r24, 0x4A	; 74
     532:	91 e2       	ldi	r25, 0x21	; 33
     534:	cb d3       	rcall	.+1942   	; 0xccc <uart_puts>
     536:	c9 e5       	ldi	r28, 0x59	; 89
     538:	d0 e2       	ldi	r29, 0x20	; 32
	while (i < NUM_BYTES)
	{
		transmitArray[i+0x0F] = receiveArray[i];
     53a:	f8 01       	movw	r30, r16
     53c:	61 91       	ld	r22, Z+
     53e:	8f 01       	movw	r16, r30
     540:	69 93       	st	Y+, r22
		uart_putc(&uartD0, receiveArray[i]);
     542:	8a e4       	ldi	r24, 0x4A	; 74
     544:	91 e2       	ldi	r25, 0x21	; 33
     546:	b3 d3       	rcall	.+1894   	; 0xcae <uart_putc>
		i++;
	}
	
	i = 0;
	uart_puts(&uartD0, "ID: ");
	while (i < NUM_BYTES)
     548:	e0 16       	cp	r14, r16
     54a:	f1 06       	cpc	r15, r17
     54c:	b1 f7       	brne	.-20     	; 0x53a <__vector_20+0x92>
	{
		transmitArray[i+0x0F] = receiveArray[i];
		uart_putc(&uartD0, receiveArray[i]);
		i++;
	}
	transmitArray[5] = 'B'; //beep -> NXT
     54e:	82 e4       	ldi	r24, 0x42	; 66
     550:	80 93 4f 20 	sts	0x204F, r24
}
     554:	ff 91       	pop	r31
     556:	ef 91       	pop	r30
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	bf 91       	pop	r27
     55e:	af 91       	pop	r26
     560:	9f 91       	pop	r25
     562:	8f 91       	pop	r24
     564:	7f 91       	pop	r23
     566:	6f 91       	pop	r22
     568:	5f 91       	pop	r21
     56a:	4f 91       	pop	r20
     56c:	3f 91       	pop	r19
     56e:	2f 91       	pop	r18
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	df 90       	pop	r13
     57a:	0f 90       	pop	r0
     57c:	0b be       	out	0x3b, r0	; 59
     57e:	0f 90       	pop	r0
     580:	0a be       	out	0x3a, r0	; 58
     582:	0f 90       	pop	r0
     584:	09 be       	out	0x39, r0	; 57
     586:	0f 90       	pop	r0
     588:	08 be       	out	0x38, r0	; 56
     58a:	0f 90       	pop	r0
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	0f 90       	pop	r0
     590:	1f 90       	pop	r1
     592:	18 95       	reti

00000594 <__vector_79>:

ISR(TCD0_CCA_vect) //sonar A
{
     594:	1f 92       	push	r1
     596:	0f 92       	push	r0
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	0f 92       	push	r0
     59c:	11 24       	eor	r1, r1
     59e:	08 b6       	in	r0, 0x38	; 56
     5a0:	0f 92       	push	r0
     5a2:	18 be       	out	0x38, r1	; 56
     5a4:	09 b6       	in	r0, 0x39	; 57
     5a6:	0f 92       	push	r0
     5a8:	19 be       	out	0x39, r1	; 57
     5aa:	0b b6       	in	r0, 0x3b	; 59
     5ac:	0f 92       	push	r0
     5ae:	1b be       	out	0x3b, r1	; 59
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	4f 93       	push	r20
     5b6:	6f 93       	push	r22
     5b8:	7f 93       	push	r23
     5ba:	8f 93       	push	r24
     5bc:	9f 93       	push	r25
     5be:	af 93       	push	r26
     5c0:	bf 93       	push	r27
     5c2:	ef 93       	push	r30
     5c4:	ff 93       	push	r31
	uint16_t time = TCD0.CCA;
     5c6:	e0 e0       	ldi	r30, 0x00	; 0
     5c8:	f9 e0       	ldi	r31, 0x09	; 9
     5ca:	20 a5       	ldd	r18, Z+40	; 0x28
     5cc:	31 a5       	ldd	r19, Z+41	; 0x29
	uint16_t cm = time/116;
     5ce:	af e9       	ldi	r26, 0x9F	; 159
     5d0:	b6 e4       	ldi	r27, 0x46	; 70
     5d2:	c2 d7       	rcall	.+3972   	; 0x1558 <__umulhisi3>
     5d4:	96 95       	lsr	r25
     5d6:	87 95       	ror	r24
     5d8:	92 95       	swap	r25
     5da:	82 95       	swap	r24
     5dc:	8f 70       	andi	r24, 0x0F	; 15
     5de:	89 27       	eor	r24, r25
     5e0:	9f 70       	andi	r25, 0x0F	; 15
     5e2:	89 27       	eor	r24, r25
	transmitArray[0x25] = cm & 0x00FF;	//LSB
     5e4:	80 93 6f 20 	sts	0x206F, r24
	transmitArray[0x24] = cm>>8;		//MSB
     5e8:	90 93 6e 20 	sts	0x206E, r25
	transmitArray[0x23] = '0';
     5ec:	20 e3       	ldi	r18, 0x30	; 48
     5ee:	20 93 6d 20 	sts	0x206D, r18
	transmitArray[0x22] = '0';
     5f2:	20 93 6c 20 	sts	0x206C, r18
	transmitArray[0x21] = '0';
     5f6:	20 93 6b 20 	sts	0x206B, r18
	transmitArray[0x20] = '0';
     5fa:	20 93 6a 20 	sts	0x206A, r18
	while(cm>=1000)
	{
		transmitArray[0x20]++;
		cm-=1000;
	}
	while(cm>=100)
     5fe:	84 36       	cpi	r24, 0x64	; 100
     600:	91 05       	cpc	r25, r1
     602:	60 f0       	brcs	.+24     	; 0x61c <__vector_79+0x88>
     604:	2f 5f       	subi	r18, 0xFF	; 255
     606:	01 c0       	rjmp	.+2      	; 0x60a <__vector_79+0x76>
     608:	23 2f       	mov	r18, r19
	{
		transmitArray[0x21]++;
		cm-=100;
     60a:	84 56       	subi	r24, 0x64	; 100
     60c:	91 09       	sbc	r25, r1
     60e:	32 2f       	mov	r19, r18
     610:	3f 5f       	subi	r19, 0xFF	; 255
	while(cm>=1000)
	{
		transmitArray[0x20]++;
		cm-=1000;
	}
	while(cm>=100)
     612:	84 36       	cpi	r24, 0x64	; 100
     614:	91 05       	cpc	r25, r1
     616:	c0 f7       	brcc	.-16     	; 0x608 <__vector_79+0x74>
     618:	20 93 6b 20 	sts	0x206B, r18
	{
		transmitArray[0x21]++;
		cm-=100;
	}
	while(cm>=10)
     61c:	8a 30       	cpi	r24, 0x0A	; 10
     61e:	91 05       	cpc	r25, r1
     620:	68 f0       	brcs	.+26     	; 0x63c <__vector_79+0xa8>
     622:	20 91 6c 20 	lds	r18, 0x206C
     626:	2f 5f       	subi	r18, 0xFF	; 255
     628:	01 c0       	rjmp	.+2      	; 0x62c <__vector_79+0x98>
     62a:	23 2f       	mov	r18, r19
	{
		transmitArray[0x22]++;
		cm-=10;
     62c:	0a 97       	sbiw	r24, 0x0a	; 10
     62e:	32 2f       	mov	r19, r18
     630:	3f 5f       	subi	r19, 0xFF	; 255
	while(cm>=100)
	{
		transmitArray[0x21]++;
		cm-=100;
	}
	while(cm>=10)
     632:	8a 30       	cpi	r24, 0x0A	; 10
     634:	91 05       	cpc	r25, r1
     636:	c8 f7       	brcc	.-14     	; 0x62a <__vector_79+0x96>
     638:	20 93 6c 20 	sts	0x206C, r18
	{
		transmitArray[0x22]++;
		cm-=10;
	}
	while(cm>=1)
     63c:	00 97       	sbiw	r24, 0x00	; 0
     63e:	49 f0       	breq	.+18     	; 0x652 <__vector_79+0xbe>
     640:	40 91 6d 20 	lds	r20, 0x206D
     644:	9c 01       	movw	r18, r24
	{
		transmitArray[0x23]++;
		cm-=1;
     646:	21 50       	subi	r18, 0x01	; 1
     648:	31 09       	sbc	r19, r1
	while(cm>=10)
	{
		transmitArray[0x22]++;
		cm-=10;
	}
	while(cm>=1)
     64a:	e9 f7       	brne	.-6      	; 0x646 <__vector_79+0xb2>
     64c:	84 0f       	add	r24, r20
     64e:	80 93 6d 20 	sts	0x206D, r24
	{
		transmitArray[0x23]++;
		cm-=1;
	}
	TCD0.CTRLFSET = TC_CMD_RESTART_gc;
     652:	88 e0       	ldi	r24, 0x08	; 8
     654:	e0 e0       	ldi	r30, 0x00	; 0
     656:	f9 e0       	ldi	r31, 0x09	; 9
     658:	81 87       	std	Z+9, r24	; 0x09
}
     65a:	ff 91       	pop	r31
     65c:	ef 91       	pop	r30
     65e:	bf 91       	pop	r27
     660:	af 91       	pop	r26
     662:	9f 91       	pop	r25
     664:	8f 91       	pop	r24
     666:	7f 91       	pop	r23
     668:	6f 91       	pop	r22
     66a:	4f 91       	pop	r20
     66c:	3f 91       	pop	r19
     66e:	2f 91       	pop	r18
     670:	0f 90       	pop	r0
     672:	0b be       	out	0x3b, r0	; 59
     674:	0f 90       	pop	r0
     676:	09 be       	out	0x39, r0	; 57
     678:	0f 90       	pop	r0
     67a:	08 be       	out	0x38, r0	; 56
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <__vector_85>:

ISR(TCD1_CCA_vect) //Sonar B
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	08 b6       	in	r0, 0x38	; 56
     692:	0f 92       	push	r0
     694:	18 be       	out	0x38, r1	; 56
     696:	09 b6       	in	r0, 0x39	; 57
     698:	0f 92       	push	r0
     69a:	19 be       	out	0x39, r1	; 57
     69c:	0b b6       	in	r0, 0x3b	; 59
     69e:	0f 92       	push	r0
     6a0:	1b be       	out	0x3b, r1	; 59
     6a2:	2f 93       	push	r18
     6a4:	3f 93       	push	r19
     6a6:	4f 93       	push	r20
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
	uint16_t time = TCD1.CCA;
     6b8:	e0 e4       	ldi	r30, 0x40	; 64
     6ba:	f9 e0       	ldi	r31, 0x09	; 9
     6bc:	20 a5       	ldd	r18, Z+40	; 0x28
     6be:	31 a5       	ldd	r19, Z+41	; 0x29
	uint16_t cm = time/116;
     6c0:	af e9       	ldi	r26, 0x9F	; 159
     6c2:	b6 e4       	ldi	r27, 0x46	; 70
     6c4:	49 d7       	rcall	.+3730   	; 0x1558 <__umulhisi3>
     6c6:	96 95       	lsr	r25
     6c8:	87 95       	ror	r24
     6ca:	92 95       	swap	r25
     6cc:	82 95       	swap	r24
     6ce:	8f 70       	andi	r24, 0x0F	; 15
     6d0:	89 27       	eor	r24, r25
     6d2:	9f 70       	andi	r25, 0x0F	; 15
     6d4:	89 27       	eor	r24, r25
	transmitArray[0x35] = cm & 0x00FF;	//LSB
     6d6:	80 93 7f 20 	sts	0x207F, r24
	transmitArray[0x34] = cm>>8;		//MSB
     6da:	90 93 7e 20 	sts	0x207E, r25
	transmitArray[0x33] = '0';
     6de:	20 e3       	ldi	r18, 0x30	; 48
     6e0:	20 93 7d 20 	sts	0x207D, r18
	transmitArray[0x32] = '0';
     6e4:	20 93 7c 20 	sts	0x207C, r18
	transmitArray[0x31] = '0';
     6e8:	20 93 7b 20 	sts	0x207B, r18
	transmitArray[0x30] = '0';
     6ec:	20 93 7a 20 	sts	0x207A, r18
	while(cm>=1000)
	{
		transmitArray[0x30]++;
		cm-=1000;
	}
	while(cm>=100)
     6f0:	84 36       	cpi	r24, 0x64	; 100
     6f2:	91 05       	cpc	r25, r1
     6f4:	60 f0       	brcs	.+24     	; 0x70e <__vector_85+0x88>
     6f6:	2f 5f       	subi	r18, 0xFF	; 255
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <__vector_85+0x76>
     6fa:	23 2f       	mov	r18, r19
	{
		transmitArray[0x31]++;
		cm-=100;
     6fc:	84 56       	subi	r24, 0x64	; 100
     6fe:	91 09       	sbc	r25, r1
     700:	32 2f       	mov	r19, r18
     702:	3f 5f       	subi	r19, 0xFF	; 255
	while(cm>=1000)
	{
		transmitArray[0x30]++;
		cm-=1000;
	}
	while(cm>=100)
     704:	84 36       	cpi	r24, 0x64	; 100
     706:	91 05       	cpc	r25, r1
     708:	c0 f7       	brcc	.-16     	; 0x6fa <__vector_85+0x74>
     70a:	20 93 7b 20 	sts	0x207B, r18
	{
		transmitArray[0x31]++;
		cm-=100;
	}
	while(cm>=10)
     70e:	8a 30       	cpi	r24, 0x0A	; 10
     710:	91 05       	cpc	r25, r1
     712:	68 f0       	brcs	.+26     	; 0x72e <__vector_85+0xa8>
     714:	20 91 7c 20 	lds	r18, 0x207C
     718:	2f 5f       	subi	r18, 0xFF	; 255
     71a:	01 c0       	rjmp	.+2      	; 0x71e <__vector_85+0x98>
     71c:	23 2f       	mov	r18, r19
	{
		transmitArray[0x32]++;
		cm-=10;
     71e:	0a 97       	sbiw	r24, 0x0a	; 10
     720:	32 2f       	mov	r19, r18
     722:	3f 5f       	subi	r19, 0xFF	; 255
	while(cm>=100)
	{
		transmitArray[0x31]++;
		cm-=100;
	}
	while(cm>=10)
     724:	8a 30       	cpi	r24, 0x0A	; 10
     726:	91 05       	cpc	r25, r1
     728:	c8 f7       	brcc	.-14     	; 0x71c <__vector_85+0x96>
     72a:	20 93 7c 20 	sts	0x207C, r18
	{
		transmitArray[0x32]++;
		cm-=10;
	}
	while(cm>=1)
     72e:	00 97       	sbiw	r24, 0x00	; 0
     730:	49 f0       	breq	.+18     	; 0x744 <__vector_85+0xbe>
     732:	40 91 7d 20 	lds	r20, 0x207D
     736:	9c 01       	movw	r18, r24
	{
		transmitArray[0x33]++;
		cm-=1;
     738:	21 50       	subi	r18, 0x01	; 1
     73a:	31 09       	sbc	r19, r1
	while(cm>=10)
	{
		transmitArray[0x32]++;
		cm-=10;
	}
	while(cm>=1)
     73c:	e9 f7       	brne	.-6      	; 0x738 <__vector_85+0xb2>
     73e:	84 0f       	add	r24, r20
     740:	80 93 7d 20 	sts	0x207D, r24
	{
		transmitArray[0x33]++;
		cm-=1;
	}
	TCD1.CTRLFSET = TC_CMD_RESTART_gc;
     744:	88 e0       	ldi	r24, 0x08	; 8
     746:	e0 e4       	ldi	r30, 0x40	; 64
     748:	f9 e0       	ldi	r31, 0x09	; 9
     74a:	81 87       	std	Z+9, r24	; 0x09
}
     74c:	ff 91       	pop	r31
     74e:	ef 91       	pop	r30
     750:	bf 91       	pop	r27
     752:	af 91       	pop	r26
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	7f 91       	pop	r23
     75a:	6f 91       	pop	r22
     75c:	4f 91       	pop	r20
     75e:	3f 91       	pop	r19
     760:	2f 91       	pop	r18
     762:	0f 90       	pop	r0
     764:	0b be       	out	0x3b, r0	; 59
     766:	0f 90       	pop	r0
     768:	09 be       	out	0x39, r0	; 57
     76a:	0f 90       	pop	r0
     76c:	08 be       	out	0x38, r0	; 56
     76e:	0f 90       	pop	r0
     770:	0f be       	out	0x3f, r0	; 63
     772:	0f 90       	pop	r0
     774:	1f 90       	pop	r1
     776:	18 95       	reti

00000778 <__vector_47>:

ISR(TCE0_OVF_vect) //trigger sonar, cascading
{
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	08 b6       	in	r0, 0x38	; 56
     784:	0f 92       	push	r0
     786:	18 be       	out	0x38, r1	; 56
     788:	0b b6       	in	r0, 0x3b	; 59
     78a:	0f 92       	push	r0
     78c:	1b be       	out	0x3b, r1	; 59
     78e:	8f 93       	push	r24
     790:	9f 93       	push	r25
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
	if (switchy)
     796:	80 91 61 22 	lds	r24, 0x2261
     79a:	88 23       	and	r24, r24
     79c:	61 f0       	breq	.+24     	; 0x7b6 <__vector_47+0x3e>
	{
		PORTC.OUTSET = PIN2_bm;
     79e:	e0 e4       	ldi	r30, 0x40	; 64
     7a0:	f6 e0       	ldi	r31, 0x06	; 6
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a6:	96 e0       	ldi	r25, 0x06	; 6
     7a8:	9a 95       	dec	r25
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <__vector_47+0x30>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <__vector_47+0x36>
		_delay_us(10);
		PORTC.OUTCLR = PIN2_bm;
     7ae:	86 83       	std	Z+6, r24	; 0x06
		switchy = 0;
     7b0:	10 92 61 22 	sts	0x2261, r1
     7b4:	0c c0       	rjmp	.+24     	; 0x7ce <__vector_47+0x56>
	} 
	else
	{
		PORTC.OUTSET = PIN3_bm;
     7b6:	e0 e4       	ldi	r30, 0x40	; 64
     7b8:	f6 e0       	ldi	r31, 0x06	; 6
     7ba:	88 e0       	ldi	r24, 0x08	; 8
     7bc:	85 83       	std	Z+5, r24	; 0x05
     7be:	96 e0       	ldi	r25, 0x06	; 6
     7c0:	9a 95       	dec	r25
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <__vector_47+0x48>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <__vector_47+0x4e>
		_delay_us(10);
		PORTC.OUTCLR = PIN3_bm;
     7c6:	86 83       	std	Z+6, r24	; 0x06
		switchy = 1;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	80 93 61 22 	sts	0x2261, r24
	}
}
     7ce:	ff 91       	pop	r31
     7d0:	ef 91       	pop	r30
     7d2:	9f 91       	pop	r25
     7d4:	8f 91       	pop	r24
     7d6:	0f 90       	pop	r0
     7d8:	0b be       	out	0x3b, r0	; 59
     7da:	0f 90       	pop	r0
     7dc:	08 be       	out	0x38, r0	; 56
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <init_all>:
	}
	if(twiSlave.receivedData[0] == 0x01) transmitArray[5] = '_';
}

void init_all(void)
{
     7e8:	cf 92       	push	r12
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
	// set port direction //
	PORTE.DIRSET = PIN0_bm; //debug led
     7f6:	21 e0       	ldi	r18, 0x01	; 1
     7f8:	e0 e8       	ldi	r30, 0x80	; 128
     7fa:	f6 e0       	ldi	r31, 0x06	; 6
     7fc:	21 83       	std	Z+1, r18	; 0x01
	PORTC.DIRSET = PIN2_bm|PIN3_bm; //sonar trigger
     7fe:	e0 e4       	ldi	r30, 0x40	; 64
     800:	f6 e0       	ldi	r31, 0x06	; 6
     802:	8c e0       	ldi	r24, 0x0C	; 12
     804:	81 83       	std	Z+1, r24	; 0x01

	// set timers //
	//delay for uart read need other solution
	PORTC.INT0MASK = PIN6_bm;
     806:	80 e4       	ldi	r24, 0x40	; 64
     808:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.PIN6CTRL = PORT_ISC_RISING_gc;
     80a:	26 8b       	std	Z+22, r18	; 0x16
	PORTC.INTCTRL  = PORT_INT0LVL_LO_gc;
     80c:	21 87       	std	Z+9, r18	; 0x09
	TCC1.CTRLB     = TC_WGMODE_NORMAL_gc;
     80e:	a0 e4       	ldi	r26, 0x40	; 64
     810:	b8 e0       	ldi	r27, 0x08	; 8
     812:	11 96       	adiw	r26, 0x01	; 1
     814:	1c 92       	st	X, r1
     816:	11 97       	sbiw	r26, 0x01	; 1
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     818:	1c 92       	st	X, r1
	TCC1.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     81a:	16 96       	adiw	r26, 0x06	; 6
     81c:	2c 93       	st	X, r18
     81e:	16 97       	sbiw	r26, 0x06	; 6
	TCC1.PER       = 400;
     820:	80 e9       	ldi	r24, 0x90	; 144
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	96 96       	adiw	r26, 0x26	; 38
     826:	8d 93       	st	X+, r24
     828:	9c 93       	st	X, r25
     82a:	97 97       	sbiw	r26, 0x27	; 39
	//sonar request
	TCE0.CTRLB     = TC_WGMODE_NORMAL_gc;
     82c:	a0 e0       	ldi	r26, 0x00	; 0
     82e:	ba e0       	ldi	r27, 0x0A	; 10
     830:	11 96       	adiw	r26, 0x01	; 1
     832:	1c 92       	st	X, r1
     834:	11 97       	sbiw	r26, 0x01	; 1
	TCE0.CTRLA     = TC_CLKSEL_DIV1024_gc;
     836:	87 e0       	ldi	r24, 0x07	; 7
     838:	8c 93       	st	X, r24
	TCE0.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     83a:	16 96       	adiw	r26, 0x06	; 6
     83c:	2c 93       	st	X, r18
     83e:	16 97       	sbiw	r26, 0x06	; 6
	TCE0.PER       = 195;//~10Hz so 5Hz each
     840:	83 ec       	ldi	r24, 0xC3	; 195
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	96 96       	adiw	r26, 0x26	; 38
     846:	8d 93       	st	X+, r24
     848:	9c 93       	st	X, r25
     84a:	97 97       	sbiw	r26, 0x27	; 39
	//timer for sonar A
	PORTC.PIN4CTRL = PORT_ISC_BOTHEDGES_gc;
     84c:	14 8a       	std	Z+20, r1	; 0x14
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
     84e:	c0 e8       	ldi	r28, 0x80	; 128
     850:	d1 e0       	ldi	r29, 0x01	; 1
     852:	84 e6       	ldi	r24, 0x64	; 100
     854:	88 83       	st	Y, r24
	TCD0.CTRLD = TC_EVACT_PW_gc | TC_EVSEL_CH0_gc;
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b9 e0       	ldi	r27, 0x09	; 9
     85a:	88 ec       	ldi	r24, 0xC8	; 200
     85c:	13 96       	adiw	r26, 0x03	; 3
     85e:	8c 93       	st	X, r24
     860:	13 97       	sbiw	r26, 0x03	; 3
	TCD0.CTRLB = TC0_CCAEN_bm | TC_WGMODE_NORMAL_gc;
     862:	30 e1       	ldi	r19, 0x10	; 16
     864:	11 96       	adiw	r26, 0x01	; 1
     866:	3c 93       	st	X, r19
     868:	11 97       	sbiw	r26, 0x01	; 1
	TCD0.CTRLA = TC_CLKSEL_DIV1_gc;
     86a:	2c 93       	st	X, r18
	TCD0.INTCTRLB = TC_CCAINTLVL_LO_gc;
     86c:	17 96       	adiw	r26, 0x07	; 7
     86e:	2c 93       	st	X, r18
     870:	17 97       	sbiw	r26, 0x07	; 7
	TCD0.PER = 0xFFFF;
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	9f ef       	ldi	r25, 0xFF	; 255
     876:	96 96       	adiw	r26, 0x26	; 38
     878:	8d 93       	st	X+, r24
     87a:	9c 93       	st	X, r25
     87c:	97 97       	sbiw	r26, 0x27	; 39
	//timer for sonar B
	PORTC.PIN5CTRL = PORT_ISC_BOTHEDGES_gc;
     87e:	15 8a       	std	Z+21, r1	; 0x15
	EVSYS.CH1MUX = EVSYS_CHMUX_PORTC_PIN5_gc;
     880:	45 e6       	ldi	r20, 0x65	; 101
     882:	49 83       	std	Y+1, r20	; 0x01
	TCD1.CTRLD = TC_EVACT_PW_gc | TC_EVSEL_CH1_gc;
     884:	e0 e4       	ldi	r30, 0x40	; 64
     886:	f9 e0       	ldi	r31, 0x09	; 9
     888:	49 ec       	ldi	r20, 0xC9	; 201
     88a:	43 83       	std	Z+3, r20	; 0x03
	TCD1.CTRLB = TC1_CCAEN_bm | TC_WGMODE_NORMAL_gc;
     88c:	31 83       	std	Z+1, r19	; 0x01
	TCD1.CTRLA = TC_CLKSEL_DIV1_gc;
     88e:	20 83       	st	Z, r18
	TCD1.INTCTRLB = TC_CCAINTLVL_LO_gc;
     890:	27 83       	std	Z+7, r18	; 0x07
	TCD1.PER = 0xFFFF;
     892:	86 a3       	std	Z+38, r24	; 0x26
     894:	97 a3       	std	Z+39, r25	; 0x27
	
	// set uart's //
	init_uart(&uartD0, &USARTD0, F_CPU, D0_BAUD, D0_CLK2X); //debug
     896:	c1 2c       	mov	r12, r1
     898:	e1 2c       	mov	r14, r1
     89a:	12 ec       	ldi	r17, 0xC2	; 194
     89c:	f1 2e       	mov	r15, r17
     89e:	01 e0       	ldi	r16, 0x01	; 1
     8a0:	10 e0       	ldi	r17, 0x00	; 0
     8a2:	20 e8       	ldi	r18, 0x80	; 128
     8a4:	34 e8       	ldi	r19, 0x84	; 132
     8a6:	4e e1       	ldi	r20, 0x1E	; 30
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	60 ea       	ldi	r22, 0xA0	; 160
     8ac:	79 e0       	ldi	r23, 0x09	; 9
     8ae:	8a e4       	ldi	r24, 0x4A	; 74
     8b0:	91 e2       	ldi	r25, 0x21	; 33
     8b2:	1e d3       	rcall	.+1596   	; 0xef0 <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); //RFID reader
     8b4:	10 e8       	ldi	r17, 0x80	; 128
     8b6:	e1 2e       	mov	r14, r17
     8b8:	15 e2       	ldi	r17, 0x25	; 37
     8ba:	f1 2e       	mov	r15, r17
     8bc:	00 e0       	ldi	r16, 0x00	; 0
     8be:	10 e0       	ldi	r17, 0x00	; 0
     8c0:	20 e8       	ldi	r18, 0x80	; 128
     8c2:	34 e8       	ldi	r19, 0x84	; 132
     8c4:	4e e1       	ldi	r20, 0x1E	; 30
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 eb       	ldi	r22, 0xB0	; 176
     8ca:	78 e0       	ldi	r23, 0x08	; 8
     8cc:	8b ee       	ldi	r24, 0xEB	; 235
     8ce:	92 e2       	ldi	r25, 0x22	; 34
     8d0:	0f d3       	rcall	.+1566   	; 0xef0 <init_uart>
	
	// set TWI as slave for NXT //
	TWI_SlaveInitializeDriver(&twiSlave, &TWIC, TWIC_SlaveProcessData);
     8d2:	44 e2       	ldi	r20, 0x24	; 36
     8d4:	51 e0       	ldi	r21, 0x01	; 1
     8d6:	60 e8       	ldi	r22, 0x80	; 128
     8d8:	74 e0       	ldi	r23, 0x04	; 4
     8da:	82 e6       	ldi	r24, 0x62	; 98
     8dc:	92 e2       	ldi	r25, 0x22	; 34
     8de:	b9 d0       	rcall	.+370    	; 0xa52 <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twiSlave, SLAVE_ADDRESS, TWI_SLAVE_INTLVL_MED_gc);
     8e0:	40 e8       	ldi	r20, 0x80	; 128
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	82 e6       	ldi	r24, 0x62	; 98
     8e6:	92 e2       	ldi	r25, 0x22	; 34
     8e8:	cd d0       	rcall	.+410    	; 0xa84 <TWI_SlaveInitializeModule>
	
	// Turnon interrupts //
	PMIC.CTRL = PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm;
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	e0 ea       	ldi	r30, 0xA0	; 160
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	82 83       	std	Z+2, r24	; 0x02
	sei();
     8f2:	78 94       	sei
}
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	cf 90       	pop	r12
     902:	08 95       	ret

00000904 <main>:
void TWIC_SlaveProcessData(void);
void init_all(void);

int main(void)
{
	init_all();
     904:	71 df       	rcall	.-286    	; 0x7e8 <init_all>
	
	sprintf(str, "UART Connected!!!\n\r");
     906:	84 e1       	ldi	r24, 0x14	; 20
     908:	e5 e0       	ldi	r30, 0x05	; 5
     90a:	f0 e2       	ldi	r31, 0x20	; 32
     90c:	a2 ef       	ldi	r26, 0xF2	; 242
     90e:	b3 e2       	ldi	r27, 0x23	; 35
     910:	01 90       	ld	r0, Z+
     912:	0d 92       	st	X+, r0
     914:	8a 95       	dec	r24
     916:	e1 f7       	brne	.-8      	; 0x910 <main+0xc>
	uart_puts(&uartD0, str);
     918:	62 ef       	ldi	r22, 0xF2	; 242
     91a:	73 e2       	ldi	r23, 0x23	; 35
     91c:	8a e4       	ldi	r24, 0x4A	; 74
     91e:	91 e2       	ldi	r25, 0x21	; 33
     920:	d5 d1       	rcall	.+938    	; 0xccc <uart_puts>
	transmitArray[0x00] = 'T';
     922:	84 e5       	ldi	r24, 0x54	; 84
     924:	80 93 4a 20 	sts	0x204A, r24
	transmitArray[0x01] = 'W';
     928:	87 e5       	ldi	r24, 0x57	; 87
     92a:	80 93 4b 20 	sts	0x204B, r24
	transmitArray[0x02] = 'I';
     92e:	89 e4       	ldi	r24, 0x49	; 73
     930:	80 93 4c 20 	sts	0x204C, r24
	transmitArray[0x03] = ' ';
     934:	80 e2       	ldi	r24, 0x20	; 32
     936:	80 93 4d 20 	sts	0x204D, r24
	transmitArray[0x23] = '0';
     93a:	80 e3       	ldi	r24, 0x30	; 48
     93c:	80 93 6d 20 	sts	0x206D, r24
	transmitArray[0x22] = '0';
     940:	80 93 6c 20 	sts	0x206C, r24
	transmitArray[0x21] = '0';
     944:	80 93 6b 20 	sts	0x206B, r24
	transmitArray[0x20] = '0';
     948:	80 93 6a 20 	sts	0x206A, r24
	transmitArray[0x33] = '0';
     94c:	80 93 7d 20 	sts	0x207D, r24
	transmitArray[0x32] = '0';
     950:	80 93 7c 20 	sts	0x207C, r24
	transmitArray[0x31] = '0';
     954:	80 93 7b 20 	sts	0x207B, r24
	transmitArray[0x30] = '0';
     958:	80 93 7a 20 	sts	0x207A, r24
	
	uint8_t x = 0;
     95c:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		transmitArray[4] = '0'+x;
     95e:	0f 2e       	mov	r0, r31
     960:	fe e4       	ldi	r31, 0x4E	; 78
     962:	af 2e       	mov	r10, r31
     964:	f0 e2       	ldi	r31, 0x20	; 32
     966:	bf 2e       	mov	r11, r31
     968:	f0 2d       	mov	r31, r0
		sprintf(str, "Sonar A = %c%c%c%c cm\n\r", transmitArray[0x20], transmitArray[0x21], transmitArray[0x22], transmitArray[0x23]);
     96a:	0f 2e       	mov	r0, r31
     96c:	fd e6       	ldi	r31, 0x6D	; 109
     96e:	cf 2e       	mov	r12, r31
     970:	f0 e2       	ldi	r31, 0x20	; 32
     972:	df 2e       	mov	r13, r31
     974:	f0 2d       	mov	r31, r0
     976:	0f 2e       	mov	r0, r31
     978:	fc e6       	ldi	r31, 0x6C	; 108
     97a:	ef 2e       	mov	r14, r31
     97c:	f0 e2       	ldi	r31, 0x20	; 32
     97e:	ff 2e       	mov	r15, r31
     980:	f0 2d       	mov	r31, r0
     982:	0f 2e       	mov	r0, r31
     984:	fa e6       	ldi	r31, 0x6A	; 106
     986:	8f 2e       	mov	r8, r31
     988:	f0 e2       	ldi	r31, 0x20	; 32
     98a:	9f 2e       	mov	r9, r31
     98c:	f0 2d       	mov	r31, r0
     98e:	0f 2e       	mov	r0, r31
     990:	f9 e1       	ldi	r31, 0x19	; 25
     992:	6f 2e       	mov	r6, r31
     994:	f0 e2       	ldi	r31, 0x20	; 32
     996:	7f 2e       	mov	r7, r31
     998:	f0 2d       	mov	r31, r0
     99a:	c2 ef       	ldi	r28, 0xF2	; 242
     99c:	d3 e2       	ldi	r29, 0x23	; 35
		uart_puts(&uartD0, str);
		sprintf(str, "Sonar B = %c%c%c%c cm\n\r", transmitArray[0x30], transmitArray[0x31], transmitArray[0x32], transmitArray[0x33]);
     99e:	0f 2e       	mov	r0, r31
     9a0:	fd e7       	ldi	r31, 0x7D	; 125
     9a2:	4f 2e       	mov	r4, r31
     9a4:	f0 e2       	ldi	r31, 0x20	; 32
     9a6:	5f 2e       	mov	r5, r31
     9a8:	f0 2d       	mov	r31, r0
     9aa:	0f 2e       	mov	r0, r31
     9ac:	fc e7       	ldi	r31, 0x7C	; 124
     9ae:	2f 2e       	mov	r2, r31
     9b0:	f0 e2       	ldi	r31, 0x20	; 32
     9b2:	3f 2e       	mov	r3, r31
     9b4:	f0 2d       	mov	r31, r0
	transmitArray[0x30] = '0';
	
	uint8_t x = 0;
	while(1)
	{
		transmitArray[4] = '0'+x;
     9b6:	81 2f       	mov	r24, r17
     9b8:	80 5d       	subi	r24, 0xD0	; 208
     9ba:	f5 01       	movw	r30, r10
     9bc:	80 83       	st	Z, r24
		sprintf(str, "Sonar A = %c%c%c%c cm\n\r", transmitArray[0x20], transmitArray[0x21], transmitArray[0x22], transmitArray[0x23]);
     9be:	f6 01       	movw	r30, r12
     9c0:	80 81       	ld	r24, Z
     9c2:	1f 92       	push	r1
     9c4:	8f 93       	push	r24
     9c6:	f7 01       	movw	r30, r14
     9c8:	80 81       	ld	r24, Z
     9ca:	1f 92       	push	r1
     9cc:	8f 93       	push	r24
     9ce:	eb e6       	ldi	r30, 0x6B	; 107
     9d0:	f0 e2       	ldi	r31, 0x20	; 32
     9d2:	80 81       	ld	r24, Z
     9d4:	1f 92       	push	r1
     9d6:	8f 93       	push	r24
     9d8:	f4 01       	movw	r30, r8
     9da:	80 81       	ld	r24, Z
     9dc:	1f 92       	push	r1
     9de:	8f 93       	push	r24
     9e0:	7f 92       	push	r7
     9e2:	6f 92       	push	r6
     9e4:	df 93       	push	r29
     9e6:	cf 93       	push	r28
     9e8:	c3 d5       	rcall	.+2950   	; 0x1570 <sprintf>
		uart_puts(&uartD0, str);
     9ea:	be 01       	movw	r22, r28
     9ec:	8a e4       	ldi	r24, 0x4A	; 74
     9ee:	91 e2       	ldi	r25, 0x21	; 33
     9f0:	6d d1       	rcall	.+730    	; 0xccc <uart_puts>
		sprintf(str, "Sonar B = %c%c%c%c cm\n\r", transmitArray[0x30], transmitArray[0x31], transmitArray[0x32], transmitArray[0x33]);
     9f2:	f2 01       	movw	r30, r4
     9f4:	80 81       	ld	r24, Z
     9f6:	1f 92       	push	r1
     9f8:	8f 93       	push	r24
     9fa:	f1 01       	movw	r30, r2
     9fc:	80 81       	ld	r24, Z
     9fe:	1f 92       	push	r1
     a00:	8f 93       	push	r24
     a02:	eb e7       	ldi	r30, 0x7B	; 123
     a04:	f0 e2       	ldi	r31, 0x20	; 32
     a06:	80 81       	ld	r24, Z
     a08:	1f 92       	push	r1
     a0a:	8f 93       	push	r24
     a0c:	ea e7       	ldi	r30, 0x7A	; 122
     a0e:	f0 e2       	ldi	r31, 0x20	; 32
     a10:	80 81       	ld	r24, Z
     a12:	1f 92       	push	r1
     a14:	8f 93       	push	r24
     a16:	81 e3       	ldi	r24, 0x31	; 49
     a18:	90 e2       	ldi	r25, 0x20	; 32
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	df 93       	push	r29
     a20:	cf 93       	push	r28
     a22:	a6 d5       	rcall	.+2892   	; 0x1570 <sprintf>
		uart_puts(&uartD0, str);
     a24:	be 01       	movw	r22, r28
     a26:	8a e4       	ldi	r24, 0x4A	; 74
     a28:	91 e2       	ldi	r25, 0x21	; 33
     a2a:	50 d1       	rcall	.+672    	; 0xccc <uart_puts>
		x++;
     a2c:	1f 5f       	subi	r17, 0xFF	; 255
		if (x>=10)
     a2e:	8d b7       	in	r24, 0x3d	; 61
     a30:	9e b7       	in	r25, 0x3e	; 62
     a32:	48 96       	adiw	r24, 0x18	; 24
     a34:	8d bf       	out	0x3d, r24	; 61
     a36:	9e bf       	out	0x3e, r25	; 62
     a38:	1a 30       	cpi	r17, 0x0A	; 10
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <main+0x13a>
		{
			x = 0;
     a3c:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a3e:	9f e7       	ldi	r25, 0x7F	; 127
     a40:	ea e1       	ldi	r30, 0x1A	; 26
     a42:	f6 e0       	ldi	r31, 0x06	; 6
     a44:	91 50       	subi	r25, 0x01	; 1
     a46:	e0 40       	sbci	r30, 0x00	; 0
     a48:	f0 40       	sbci	r31, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <main+0x140>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <main+0x14a>
     a4e:	00 00       	nop
     a50:	b2 cf       	rjmp	.-156    	; 0x9b6 <main+0xb2>

00000a52 <TWI_SlaveInitializeDriver>:
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
	twi->interface = module;
     a52:	fc 01       	movw	r30, r24
     a54:	60 83       	st	Z, r22
     a56:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
     a58:	42 83       	std	Z+2, r20	; 0x02
     a5a:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
     a5c:	ec 57       	subi	r30, 0x7C	; 124
     a5e:	ff 4f       	sbci	r31, 0xFF	; 255
     a60:	10 82       	st	Z, r1
	twi->bytesSent = 0;
     a62:	fc 01       	movw	r30, r24
     a64:	eb 57       	subi	r30, 0x7B	; 123
     a66:	ff 4f       	sbci	r31, 0xFF	; 255
     a68:	10 82       	st	Z, r1
	twi->status = TWIS_STATUS_READY;
     a6a:	fc 01       	movw	r30, r24
     a6c:	ea 57       	subi	r30, 0x7A	; 122
     a6e:	ff 4f       	sbci	r31, 0xFF	; 255
     a70:	10 82       	st	Z, r1
	twi->result = TWIS_RESULT_UNKNOWN;
     a72:	fc 01       	movw	r30, r24
     a74:	e9 57       	subi	r30, 0x79	; 121
     a76:	ff 4f       	sbci	r31, 0xFF	; 255
     a78:	10 82       	st	Z, r1
	twi->abort = false;
     a7a:	fc 01       	movw	r30, r24
     a7c:	e8 57       	subi	r30, 0x78	; 120
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	10 82       	st	Z, r1
     a82:	08 95       	ret

00000a84 <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
     a84:	dc 01       	movw	r26, r24
     a86:	ed 91       	ld	r30, X+
     a88:	fc 91       	ld	r31, X
     a8a:	11 97       	sbiw	r26, 0x01	; 1
     a8c:	48 63       	ori	r20, 0x38	; 56
     a8e:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
     a90:	ed 91       	ld	r30, X+
     a92:	fc 91       	ld	r31, X
     a94:	66 0f       	add	r22, r22
     a96:	63 87       	std	Z+11, r22	; 0x0b
     a98:	08 95       	ret

00000a9a <TWI_SlaveTransactionFinished>:
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     a9a:	fc 01       	movw	r30, r24
     a9c:	e9 57       	subi	r30, 0x79	; 121
     a9e:	ff 4f       	sbci	r31, 0xFF	; 255
     aa0:	60 83       	st	Z, r22
	twi->status = TWIS_STATUS_READY;
     aa2:	fc 01       	movw	r30, r24
     aa4:	ea 57       	subi	r30, 0x7A	; 122
     aa6:	ff 4f       	sbci	r31, 0xFF	; 255
     aa8:	10 82       	st	Z, r1
     aaa:	08 95       	ret

00000aac <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
     ab0:	fc 01       	movw	r30, r24
     ab2:	eb 57       	subi	r30, 0x7B	; 123
     ab4:	ff 4f       	sbci	r31, 0xFF	; 255
     ab6:	20 81       	ld	r18, Z
     ab8:	22 23       	and	r18, r18
     aba:	59 f0       	breq	.+22     	; 0xad2 <TWI_SlaveWriteHandler+0x26>
     abc:	dc 01       	movw	r26, r24
     abe:	ed 91       	ld	r30, X+
     ac0:	fc 91       	ld	r31, X
     ac2:	22 85       	ldd	r18, Z+10	; 0x0a
     ac4:	24 ff       	sbrs	r18, 4
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <TWI_SlaveWriteHandler+0x26>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     ac8:	22 e0       	ldi	r18, 0x02	; 2
     aca:	21 87       	std	Z+9, r18	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     acc:	61 e0       	ldi	r22, 0x01	; 1
     ace:	e5 df       	rcall	.-54     	; 0xa9a <TWI_SlaveTransactionFinished>
     ad0:	24 c0       	rjmp	.+72     	; 0xb1a <TWI_SlaveWriteHandler+0x6e>
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
     ad2:	fc 01       	movw	r30, r24
     ad4:	eb 57       	subi	r30, 0x7B	; 123
     ad6:	ff 4f       	sbci	r31, 0xFF	; 255
     ad8:	20 81       	ld	r18, Z
     ada:	20 34       	cpi	r18, 0x40	; 64
     adc:	b8 f4       	brcc	.+46     	; 0xb0c <TWI_SlaveWriteHandler+0x60>
			uint8_t data = twi->sendData[twi->bytesSent];
     ade:	fc 01       	movw	r30, r24
     ae0:	eb 57       	subi	r30, 0x7B	; 123
     ae2:	ff 4f       	sbci	r31, 0xFF	; 255
     ae4:	20 81       	ld	r18, Z
     ae6:	dc 01       	movw	r26, r24
     ae8:	a2 0f       	add	r26, r18
     aea:	b1 1d       	adc	r27, r1
     aec:	ac 5b       	subi	r26, 0xBC	; 188
     aee:	bf 4f       	sbci	r27, 0xFF	; 255
     af0:	2c 91       	ld	r18, X
			twi->interface->SLAVE.DATA = data;
     af2:	ec 01       	movw	r28, r24
     af4:	a8 81       	ld	r26, Y
     af6:	b9 81       	ldd	r27, Y+1	; 0x01
     af8:	1c 96       	adiw	r26, 0x0c	; 12
     afa:	2c 93       	st	X, r18
			twi->bytesSent++;
     afc:	20 81       	ld	r18, Z
     afe:	2f 5f       	subi	r18, 0xFF	; 255
     b00:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     b02:	e8 81       	ld	r30, Y
     b04:	f9 81       	ldd	r31, Y+1	; 0x01
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	81 87       	std	Z+9, r24	; 0x09
     b0a:	07 c0       	rjmp	.+14     	; 0xb1a <TWI_SlaveWriteHandler+0x6e>
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     b0c:	dc 01       	movw	r26, r24
     b0e:	ed 91       	ld	r30, X+
     b10:	fc 91       	ld	r31, X
     b12:	22 e0       	ldi	r18, 0x02	; 2
     b14:	21 87       	std	Z+9, r18	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     b16:	62 e0       	ldi	r22, 0x02	; 2
     b18:	c0 df       	rcall	.-128    	; 0xa9a <TWI_SlaveTransactionFinished>
		}
	}
}
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	ec 01       	movw	r28, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     b2a:	e8 81       	ld	r30, Y
     b2c:	f9 81       	ldd	r31, Y+1	; 0x01
     b2e:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
     b30:	84 60       	ori	r24, 0x04	; 4
     b32:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
     b34:	fe 01       	movw	r30, r28
     b36:	ec 57       	subi	r30, 0x7C	; 124
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	80 81       	ld	r24, Z
     b3c:	80 34       	cpi	r24, 0x40	; 64
     b3e:	48 f5       	brcc	.+82     	; 0xb92 <TWI_SlaveReadHandler+0x72>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
     b40:	e8 81       	ld	r30, Y
     b42:	f9 81       	ldd	r31, Y+1	; 0x01
     b44:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
     b46:	8e 01       	movw	r16, r28
     b48:	0c 57       	subi	r16, 0x7C	; 124
     b4a:	1f 4f       	sbci	r17, 0xFF	; 255
     b4c:	f8 01       	movw	r30, r16
     b4e:	90 81       	ld	r25, Z
     b50:	fe 01       	movw	r30, r28
     b52:	e9 0f       	add	r30, r25
     b54:	f1 1d       	adc	r31, r1
     b56:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
     b58:	ea 81       	ldd	r30, Y+2	; 0x02
     b5a:	fb 81       	ldd	r31, Y+3	; 0x03
     b5c:	19 95       	eicall

		twi->bytesReceived++;
     b5e:	f8 01       	movw	r30, r16
     b60:	80 81       	ld	r24, Z
     b62:	8f 5f       	subi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
     b66:	fe 01       	movw	r30, r28
     b68:	e8 57       	subi	r30, 0x78	; 120
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	80 81       	ld	r24, Z
     b6e:	88 23       	and	r24, r24
     b70:	59 f0       	breq	.+22     	; 0xb88 <TWI_SlaveReadHandler+0x68>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     b72:	e8 81       	ld	r30, Y
     b74:	f9 81       	ldd	r31, Y+1	; 0x01
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	81 87       	std	Z+9, r24	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     b7a:	66 e0       	ldi	r22, 0x06	; 6
     b7c:	ce 01       	movw	r24, r28
     b7e:	8d df       	rcall	.-230    	; 0xa9a <TWI_SlaveTransactionFinished>
			twi->abort = false;
     b80:	c8 57       	subi	r28, 0x78	; 120
     b82:	df 4f       	sbci	r29, 0xFF	; 255
     b84:	18 82       	st	Y, r1
     b86:	0c c0       	rjmp	.+24     	; 0xba0 <TWI_SlaveReadHandler+0x80>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     b88:	e8 81       	ld	r30, Y
     b8a:	f9 81       	ldd	r31, Y+1	; 0x01
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	81 87       	std	Z+9, r24	; 0x09
     b90:	07 c0       	rjmp	.+14     	; 0xba0 <TWI_SlaveReadHandler+0x80>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
     b92:	e8 81       	ld	r30, Y
     b94:	f9 81       	ldd	r31, Y+1	; 0x01
     b96:	86 e0       	ldi	r24, 0x06	; 6
     b98:	81 87       	std	Z+9, r24	; 0x09
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     b9a:	62 e0       	ldi	r22, 0x02	; 2
     b9c:	ce 01       	movw	r24, r28
     b9e:	7d df       	rcall	.-262    	; 0xa9a <TWI_SlaveTransactionFinished>
	}
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
     baa:	dc 01       	movw	r26, r24
     bac:	ed 91       	ld	r30, X+
     bae:	fc 91       	ld	r31, X
     bb0:	22 85       	ldd	r18, Z+10	; 0x0a
     bb2:	21 ff       	sbrs	r18, 1
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <TWI_SlaveDataHandler+0xe>
		TWI_SlaveWriteHandler(twi);
     bb6:	7a cf       	rjmp	.-268    	; 0xaac <TWI_SlaveWriteHandler>
	} else {
		TWI_SlaveReadHandler(twi);
     bb8:	b3 cf       	rjmp	.-154    	; 0xb20 <TWI_SlaveReadHandler>

00000bba <TWI_SlaveStopHandler>:
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     bba:	dc 01       	movw	r26, r24
     bbc:	ed 91       	ld	r30, X+
     bbe:	fc 91       	ld	r31, X
     bc0:	11 97       	sbiw	r26, 0x01	; 1
     bc2:	20 85       	ldd	r18, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     bc4:	2b 7f       	andi	r18, 0xFB	; 251
     bc6:	20 87       	std	Z+8, r18	; 0x08
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     bc8:	ed 91       	ld	r30, X+
     bca:	fc 91       	ld	r31, X
     bcc:	22 85       	ldd	r18, Z+10	; 0x0a
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
     bce:	20 64       	ori	r18, 0x40	; 64
     bd0:	22 87       	std	Z+10, r18	; 0x0a

	TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	62 cf       	rjmp	.-316    	; 0xa9a <TWI_SlaveTransactionFinished>

00000bd6 <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	ec 01       	movw	r28, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
     bdc:	fc 01       	movw	r30, r24
     bde:	e8 57       	subi	r30, 0x78	; 120
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
     be2:	80 81       	ld	r24, Z
     be4:	88 23       	and	r24, r24
     be6:	59 f0       	breq	.+22     	; 0xbfe <TWI_SlaveAddressMatchHandler+0x28>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     be8:	e8 81       	ld	r30, Y
     bea:	f9 81       	ldd	r31, Y+1	; 0x01
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	81 87       	std	Z+9, r24	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     bf0:	66 e0       	ldi	r22, 0x06	; 6
     bf2:	ce 01       	movw	r24, r28
     bf4:	52 df       	rcall	.-348    	; 0xa9a <TWI_SlaveTransactionFinished>
		twi->abort = false;
     bf6:	c8 57       	subi	r28, 0x78	; 120
     bf8:	df 4f       	sbci	r29, 0xFF	; 255
     bfa:	18 82       	st	Y, r1
     bfc:	1a c0       	rjmp	.+52     	; 0xc32 <TWI_SlaveAddressMatchHandler+0x5c>
	} else {
		twi->status = TWIS_STATUS_BUSY;
     bfe:	fe 01       	movw	r30, r28
     c00:	ea 57       	subi	r30, 0x7A	; 122
     c02:	ff 4f       	sbci	r31, 0xFF	; 255
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 83       	st	Z, r24
		twi->result = TWIS_RESULT_UNKNOWN;
     c08:	fe 01       	movw	r30, r28
     c0a:	e9 57       	subi	r30, 0x79	; 121
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	10 82       	st	Z, r1

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     c10:	e8 81       	ld	r30, Y
     c12:	f9 81       	ldd	r31, Y+1	; 0x01
     c14:	80 85       	ldd	r24, Z+8	; 0x08
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     c16:	8b 7f       	andi	r24, 0xFB	; 251
     c18:	80 87       	std	Z+8, r24	; 0x08

		twi->bytesReceived = 0;
     c1a:	fe 01       	movw	r30, r28
     c1c:	ec 57       	subi	r30, 0x7C	; 124
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     c22:	fe 01       	movw	r30, r28
     c24:	eb 57       	subi	r30, 0x7B	; 123
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	10 82       	st	Z, r1

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     c2a:	e8 81       	ld	r30, Y
     c2c:	f9 81       	ldd	r31, Y+1	; 0x01
     c2e:	83 e0       	ldi	r24, 0x03	; 3
     c30:	81 87       	std	Z+9, r24	; 0x09
	}
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <TWI_SlaveInterruptHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     c38:	dc 01       	movw	r26, r24
     c3a:	ed 91       	ld	r30, X+
     c3c:	fc 91       	ld	r31, X
     c3e:	22 85       	ldd	r18, Z+10	; 0x0a

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
     c40:	22 ff       	sbrs	r18, 2
     c42:	12 c0       	rjmp	.+36     	; 0xc68 <TWI_SlaveInterruptHandler+0x30>
		twi->bytesReceived = 0;
     c44:	fc 01       	movw	r30, r24
     c46:	ec 57       	subi	r30, 0x7C	; 124
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     c4c:	fc 01       	movw	r30, r24
     c4e:	eb 57       	subi	r30, 0x7B	; 123
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_BUS_ERROR;
     c54:	fc 01       	movw	r30, r24
     c56:	e9 57       	subi	r30, 0x79	; 121
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	24 e0       	ldi	r18, 0x04	; 4
     c5c:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     c5e:	fc 01       	movw	r30, r24
     c60:	ea 57       	subi	r30, 0x7A	; 122
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	10 82       	st	Z, r1
     c66:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
     c68:	23 ff       	sbrs	r18, 3
     c6a:	12 c0       	rjmp	.+36     	; 0xc90 <TWI_SlaveInterruptHandler+0x58>
		twi->bytesReceived = 0;
     c6c:	fc 01       	movw	r30, r24
     c6e:	ec 57       	subi	r30, 0x7C	; 124
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     c74:	fc 01       	movw	r30, r24
     c76:	eb 57       	subi	r30, 0x7B	; 123
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
     c7c:	fc 01       	movw	r30, r24
     c7e:	e9 57       	subi	r30, 0x79	; 121
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	23 e0       	ldi	r18, 0x03	; 3
     c84:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     c86:	fc 01       	movw	r30, r24
     c88:	ea 57       	subi	r30, 0x7A	; 122
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	10 82       	st	Z, r1
     c8e:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     c90:	42 2f       	mov	r20, r18
     c92:	40 74       	andi	r20, 0x40	; 64
 *  Handles all TWI transactions and responses to address match, data reception,
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
     c94:	32 2f       	mov	r19, r18
     c96:	31 74       	andi	r19, 0x41	; 65
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
		twi->status = TWIS_STATUS_READY;
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     c98:	31 34       	cpi	r19, 0x41	; 65
     c9a:	09 f4       	brne	.+2      	; 0xc9e <TWI_SlaveInterruptHandler+0x66>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
     c9c:	9c cf       	rjmp	.-200    	; 0xbd6 <TWI_SlaveAddressMatchHandler>
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
     c9e:	44 23       	and	r20, r20
     ca0:	09 f0       	breq	.+2      	; 0xca4 <TWI_SlaveInterruptHandler+0x6c>
		TWI_SlaveStopHandler(twi);
     ca2:	8b cf       	rjmp	.-234    	; 0xbba <TWI_SlaveStopHandler>
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
     ca4:	22 23       	and	r18, r18
     ca6:	0c f4       	brge	.+2      	; 0xcaa <TWI_SlaveInterruptHandler+0x72>
		TWI_SlaveDataHandler(twi);
     ca8:	80 cf       	rjmp	.-256    	; 0xbaa <TWI_SlaveDataHandler>
	}

	/* If unexpected state. */
	else {
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_FAIL);
     caa:	65 e0       	ldi	r22, 0x05	; 5
     cac:	f6 ce       	rjmp	.-532    	; 0xa9a <TWI_SlaveTransactionFinished>

00000cae <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	ec 01       	movw	r28, r24
     cb6:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     cb8:	8c d1       	rcall	.+792    	; 0xfd2 <USART_TXBuffer_FreeSpace>
     cba:	88 23       	and	r24, r24
     cbc:	19 f0       	breq	.+6      	; 0xcc4 <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     cbe:	61 2f       	mov	r22, r17
     cc0:	ce 01       	movw	r24, r28
     cc2:	96 d1       	rcall	.+812    	; 0xff0 <USART_TXBuffer_PutByte>
  }
}
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	08 95       	ret

00000ccc <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
     cd6:	c6 2f       	mov	r28, r22
     cd8:	d7 2f       	mov	r29, r23
     cda:	69 91       	ld	r22, Y+
     cdc:	66 23       	and	r22, r22
     cde:	29 f0       	breq	.+10     	; 0xcea <uart_puts+0x1e>
    uart_putc(uart, c);
     ce0:	c8 01       	movw	r24, r16
     ce2:	e5 df       	rcall	.-54     	; 0xcae <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     ce4:	69 91       	ld	r22, Y+
     ce6:	61 11       	cpse	r22, r1
     ce8:	fb cf       	rjmp	.-10     	; 0xce0 <uart_puts+0x14>
    uart_putc(uart, c);
  }
}
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	08 95       	ret

00000cf4 <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     cf4:	80 3a       	cpi	r24, 0xA0	; 160
     cf6:	28 e0       	ldi	r18, 0x08	; 8
     cf8:	92 07       	cpc	r25, r18
     cfa:	39 f4       	brne	.+14     	; 0xd0a <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     cfc:	e0 e4       	ldi	r30, 0x40	; 64
     cfe:	f6 e0       	ldi	r31, 0x06	; 6
     d00:	88 e0       	ldi	r24, 0x08	; 8
     d02:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	82 83       	std	Z+2, r24	; 0x02
     return;
     d08:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     d0a:	80 3b       	cpi	r24, 0xB0	; 176
     d0c:	28 e0       	ldi	r18, 0x08	; 8
     d0e:	92 07       	cpc	r25, r18
     d10:	39 f4       	brne	.+14     	; 0xd20 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     d12:	e0 e4       	ldi	r30, 0x40	; 64
     d14:	f6 e0       	ldi	r31, 0x06	; 6
     d16:	80 e8       	ldi	r24, 0x80	; 128
     d18:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     d1a:	80 e4       	ldi	r24, 0x40	; 64
     d1c:	82 83       	std	Z+2, r24	; 0x02
     return;
     d1e:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     d20:	80 3a       	cpi	r24, 0xA0	; 160
     d22:	29 e0       	ldi	r18, 0x09	; 9
     d24:	92 07       	cpc	r25, r18
     d26:	39 f4       	brne	.+14     	; 0xd36 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     d28:	e0 e6       	ldi	r30, 0x60	; 96
     d2a:	f6 e0       	ldi	r31, 0x06	; 6
     d2c:	88 e0       	ldi	r24, 0x08	; 8
     d2e:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     d30:	84 e0       	ldi	r24, 0x04	; 4
     d32:	82 83       	std	Z+2, r24	; 0x02
     return;
     d34:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     d36:	80 3b       	cpi	r24, 0xB0	; 176
     d38:	29 e0       	ldi	r18, 0x09	; 9
     d3a:	92 07       	cpc	r25, r18
     d3c:	39 f4       	brne	.+14     	; 0xd4c <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     d3e:	e0 e6       	ldi	r30, 0x60	; 96
     d40:	f6 e0       	ldi	r31, 0x06	; 6
     d42:	80 e8       	ldi	r24, 0x80	; 128
     d44:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     d46:	80 e4       	ldi	r24, 0x40	; 64
     d48:	82 83       	std	Z+2, r24	; 0x02
     return;
     d4a:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     d4c:	80 3a       	cpi	r24, 0xA0	; 160
     d4e:	9a 40       	sbci	r25, 0x0A	; 10
     d50:	31 f4       	brne	.+12     	; 0xd5e <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     d52:	e0 e8       	ldi	r30, 0x80	; 128
     d54:	f6 e0       	ldi	r31, 0x06	; 6
     d56:	88 e0       	ldi	r24, 0x08	; 8
     d58:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	82 83       	std	Z+2, r24	; 0x02
     d5e:	08 95       	ret

00000d60 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     d60:	4f 92       	push	r4
     d62:	5f 92       	push	r5
     d64:	6f 92       	push	r6
     d66:	7f 92       	push	r7
     d68:	8f 92       	push	r8
     d6a:	9f 92       	push	r9
     d6c:	af 92       	push	r10
     d6e:	bf 92       	push	r11
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	49 01       	movw	r8, r18
     d7e:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     d80:	4e 2d       	mov	r20, r14
     d82:	41 70       	andi	r20, 0x01	; 1
     d84:	20 e1       	ldi	r18, 0x10	; 16
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	79 01       	movw	r14, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <calc_bsel+0x30>
     d8c:	f5 94       	asr	r15
     d8e:	e7 94       	ror	r14
     d90:	4a 95       	dec	r20
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <calc_bsel+0x2c>
  if ( scale < 0 ) {
     d94:	00 23       	and	r16, r16
     d96:	0c f0       	brlt	.+2      	; 0xd9a <calc_bsel+0x3a>
     d98:	3a c0       	rjmp	.+116    	; 0xe0e <calc_bsel+0xae>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     d9a:	a4 d2       	rcall	.+1352   	; 0x12e4 <__floatunsisf>
     d9c:	2b 01       	movw	r4, r22
     d9e:	3c 01       	movw	r6, r24
     da0:	b7 01       	movw	r22, r14
     da2:	77 27       	eor	r23, r23
     da4:	88 27       	eor	r24, r24
     da6:	77 fd       	sbrc	r23, 7
     da8:	80 95       	com	r24
     daa:	98 2f       	mov	r25, r24
     dac:	9d d2       	rcall	.+1338   	; 0x12e8 <__floatsisf>
     dae:	6b 01       	movw	r12, r22
     db0:	7c 01       	movw	r14, r24
     db2:	c5 01       	movw	r24, r10
     db4:	b4 01       	movw	r22, r8
     db6:	96 d2       	rcall	.+1324   	; 0x12e4 <__floatunsisf>
     db8:	9b 01       	movw	r18, r22
     dba:	ac 01       	movw	r20, r24
     dbc:	c7 01       	movw	r24, r14
     dbe:	b6 01       	movw	r22, r12
     dc0:	1f d3       	rcall	.+1598   	; 0x1400 <__mulsf3>
     dc2:	9b 01       	movw	r18, r22
     dc4:	ac 01       	movw	r20, r24
     dc6:	c3 01       	movw	r24, r6
     dc8:	b2 01       	movw	r22, r4
     dca:	f8 d1       	rcall	.+1008   	; 0x11bc <__divsf3>
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e8       	ldi	r20, 0x80	; 128
     dd2:	5f e3       	ldi	r21, 0x3F	; 63
     dd4:	8e d1       	rcall	.+796    	; 0x10f2 <__subsf3>
     dd6:	6b 01       	movw	r12, r22
     dd8:	7c 01       	movw	r14, r24
     dda:	11 27       	eor	r17, r17
     ddc:	01 95       	neg	r16
     dde:	0c f4       	brge	.+2      	; 0xde2 <calc_bsel+0x82>
     de0:	10 95       	com	r17
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <calc_bsel+0x8c>
     de8:	66 0f       	add	r22, r22
     dea:	77 1f       	adc	r23, r23
     dec:	0a 95       	dec	r16
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <calc_bsel+0x88>
     df0:	88 27       	eor	r24, r24
     df2:	77 fd       	sbrc	r23, 7
     df4:	80 95       	com	r24
     df6:	98 2f       	mov	r25, r24
     df8:	77 d2       	rcall	.+1262   	; 0x12e8 <__floatsisf>
     dfa:	9b 01       	movw	r18, r22
     dfc:	ac 01       	movw	r20, r24
     dfe:	c7 01       	movw	r24, r14
     e00:	b6 01       	movw	r22, r12
     e02:	fe d2       	rcall	.+1532   	; 0x1400 <__mulsf3>
     e04:	60 d3       	rcall	.+1728   	; 0x14c6 <round>
     e06:	42 d2       	rcall	.+1156   	; 0x128c <__fixunssfsi>
     e08:	86 2f       	mov	r24, r22
     e0a:	97 2f       	mov	r25, r23
     e0c:	35 c0       	rjmp	.+106    	; 0xe78 <calc_bsel+0x118>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     e0e:	6a d2       	rcall	.+1236   	; 0x12e4 <__floatunsisf>
     e10:	2b 01       	movw	r4, r22
     e12:	3c 01       	movw	r6, r24
     e14:	b7 01       	movw	r22, r14
     e16:	77 27       	eor	r23, r23
     e18:	88 27       	eor	r24, r24
     e1a:	77 fd       	sbrc	r23, 7
     e1c:	80 95       	com	r24
     e1e:	98 2f       	mov	r25, r24
     e20:	63 d2       	rcall	.+1222   	; 0x12e8 <__floatsisf>
     e22:	6b 01       	movw	r12, r22
     e24:	7c 01       	movw	r14, r24
     e26:	c5 01       	movw	r24, r10
     e28:	b4 01       	movw	r22, r8
     e2a:	5c d2       	rcall	.+1208   	; 0x12e4 <__floatunsisf>
     e2c:	9b 01       	movw	r18, r22
     e2e:	ac 01       	movw	r20, r24
     e30:	c7 01       	movw	r24, r14
     e32:	b6 01       	movw	r22, r12
     e34:	e5 d2       	rcall	.+1482   	; 0x1400 <__mulsf3>
     e36:	9b 01       	movw	r18, r22
     e38:	ac 01       	movw	r20, r24
     e3a:	c3 01       	movw	r24, r6
     e3c:	b2 01       	movw	r22, r4
     e3e:	be d1       	rcall	.+892    	; 0x11bc <__divsf3>
     e40:	4b 01       	movw	r8, r22
     e42:	5c 01       	movw	r10, r24
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <calc_bsel+0xee>
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	0a 95       	dec	r16
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <calc_bsel+0xea>
     e52:	88 27       	eor	r24, r24
     e54:	77 fd       	sbrc	r23, 7
     e56:	80 95       	com	r24
     e58:	98 2f       	mov	r25, r24
     e5a:	46 d2       	rcall	.+1164   	; 0x12e8 <__floatsisf>
     e5c:	9b 01       	movw	r18, r22
     e5e:	ac 01       	movw	r20, r24
     e60:	c5 01       	movw	r24, r10
     e62:	b4 01       	movw	r22, r8
     e64:	ab d1       	rcall	.+854    	; 0x11bc <__divsf3>
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	41 d1       	rcall	.+642    	; 0x10f2 <__subsf3>
     e70:	2a d3       	rcall	.+1620   	; 0x14c6 <round>
     e72:	0c d2       	rcall	.+1048   	; 0x128c <__fixunssfsi>
     e74:	86 2f       	mov	r24, r22
     e76:	97 2f       	mov	r25, r23
  }
}
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	bf 90       	pop	r11
     e86:	af 90       	pop	r10
     e88:	9f 90       	pop	r9
     e8a:	8f 90       	pop	r8
     e8c:	7f 90       	pop	r7
     e8e:	6f 90       	pop	r6
     e90:	5f 90       	pop	r5
     e92:	4f 90       	pop	r4
     e94:	08 95       	ret

00000e96 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     e96:	4f 92       	push	r4
     e98:	5f 92       	push	r5
     e9a:	6f 92       	push	r6
     e9c:	7f 92       	push	r7
     e9e:	8f 92       	push	r8
     ea0:	9f 92       	push	r9
     ea2:	af 92       	push	r10
     ea4:	bf 92       	push	r11
     ea6:	ef 92       	push	r14
     ea8:	0f 93       	push	r16
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	2b 01       	movw	r4, r22
     eb0:	3c 01       	movw	r6, r24
     eb2:	49 01       	movw	r8, r18
     eb4:	5a 01       	movw	r10, r20
     eb6:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     eb8:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     eba:	ed 2e       	mov	r14, r29
     ebc:	0c 2f       	mov	r16, r28
     ebe:	a5 01       	movw	r20, r10
     ec0:	94 01       	movw	r18, r8
     ec2:	c3 01       	movw	r24, r6
     ec4:	b2 01       	movw	r22, r4
     ec6:	4c df       	rcall	.-360    	; 0xd60 <calc_bsel>
     ec8:	81 15       	cp	r24, r1
     eca:	90 41       	sbci	r25, 0x10	; 16
     ecc:	18 f0       	brcs	.+6      	; 0xed4 <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     ece:	cf 5f       	subi	r28, 0xFF	; 255
     ed0:	c8 30       	cpi	r28, 0x08	; 8
     ed2:	99 f7       	brne	.-26     	; 0xeba <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     ed4:	8c 2f       	mov	r24, r28
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	0f 91       	pop	r16
     edc:	ef 90       	pop	r14
     ede:	bf 90       	pop	r11
     ee0:	af 90       	pop	r10
     ee2:	9f 90       	pop	r9
     ee4:	8f 90       	pop	r8
     ee6:	7f 90       	pop	r7
     ee8:	6f 90       	pop	r6
     eea:	5f 90       	pop	r5
     eec:	4f 90       	pop	r4
     eee:	08 95       	ret

00000ef0 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     ef0:	2f 92       	push	r2
     ef2:	3f 92       	push	r3
     ef4:	4f 92       	push	r4
     ef6:	5f 92       	push	r5
     ef8:	6f 92       	push	r6
     efa:	7f 92       	push	r7
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
     f14:	3b 01       	movw	r6, r22
     f16:	49 01       	movw	r8, r18
     f18:	5a 01       	movw	r10, r20
     f1a:	17 01       	movw	r2, r14
     f1c:	28 01       	movw	r4, r16
     f1e:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     f20:	0c 2d       	mov	r16, r12
     f22:	a2 01       	movw	r20, r4
     f24:	91 01       	movw	r18, r2
     f26:	c5 01       	movw	r24, r10
     f28:	b4 01       	movw	r22, r8
     f2a:	b5 df       	rcall	.-150    	; 0xe96 <calc_bscale>
     f2c:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     f2e:	08 2f       	mov	r16, r24
     f30:	a2 01       	movw	r20, r4
     f32:	91 01       	movw	r18, r2
     f34:	c5 01       	movw	r24, r10
     f36:	b4 01       	movw	r22, r8
     f38:	13 df       	rcall	.-474    	; 0xd60 <calc_bsel>
     f3a:	b8 2e       	mov	r11, r24
     f3c:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	b3 01       	movw	r22, r6
     f42:	ce 01       	movw	r24, r28
     f44:	32 d0       	rcall	.+100    	; 0xfaa <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     f46:	e8 81       	ld	r30, Y
     f48:	f9 81       	ldd	r31, Y+1	; 0x01
     f4a:	83 e0       	ldi	r24, 0x03	; 3
     f4c:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     f4e:	e8 81       	ld	r30, Y
     f50:	f9 81       	ldd	r31, Y+1	; 0x01
     f52:	84 81       	ldd	r24, Z+4	; 0x04
     f54:	80 61       	ori	r24, 0x10	; 16
     f56:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     f58:	e8 81       	ld	r30, Y
     f5a:	f9 81       	ldd	r31, Y+1	; 0x01
     f5c:	84 81       	ldd	r24, Z+4	; 0x04
     f5e:	88 60       	ori	r24, 0x08	; 8
     f60:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     f62:	e8 81       	ld	r30, Y
     f64:	f9 81       	ldd	r31, Y+1	; 0x01
     f66:	83 81       	ldd	r24, Z+3	; 0x03
     f68:	8f 7c       	andi	r24, 0xCF	; 207
     f6a:	80 61       	ori	r24, 0x10	; 16
     f6c:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     f6e:	e8 81       	ld	r30, Y
     f70:	f9 81       	ldd	r31, Y+1	; 0x01
     f72:	b6 82       	std	Z+6, r11	; 0x06
     f74:	e8 81       	ld	r30, Y
     f76:	f9 81       	ldd	r31, Y+1	; 0x01
     f78:	12 95       	swap	r17
     f7a:	10 7f       	andi	r17, 0xF0	; 240
     f7c:	e1 2a       	or	r14, r17
     f7e:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
     f80:	88 81       	ld	r24, Y
     f82:	99 81       	ldd	r25, Y+1	; 0x01
     f84:	b7 de       	rcall	.-658    	; 0xcf4 <set_usart_txrx_direction>
}
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	cf 90       	pop	r12
     f94:	bf 90       	pop	r11
     f96:	af 90       	pop	r10
     f98:	9f 90       	pop	r9
     f9a:	8f 90       	pop	r8
     f9c:	7f 90       	pop	r7
     f9e:	6f 90       	pop	r6
     fa0:	5f 90       	pop	r5
     fa2:	4f 90       	pop	r4
     fa4:	3f 90       	pop	r3
     fa6:	2f 90       	pop	r2
     fa8:	08 95       	ret

00000faa <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     faa:	fc 01       	movw	r30, r24
     fac:	60 83       	st	Z, r22
     fae:	71 83       	std	Z+1, r23	; 0x01
     fb0:	42 83       	std	Z+2, r20	; 0x02
     fb2:	ec 5f       	subi	r30, 0xFC	; 252
     fb4:	fe 4f       	sbci	r31, 0xFE	; 254
     fb6:	10 82       	st	Z, r1
     fb8:	fc 01       	movw	r30, r24
     fba:	ed 5f       	subi	r30, 0xFD	; 253
     fbc:	fe 4f       	sbci	r31, 0xFE	; 254
     fbe:	10 82       	st	Z, r1
     fc0:	fc 01       	movw	r30, r24
     fc2:	ea 5f       	subi	r30, 0xFA	; 250
     fc4:	fe 4f       	sbci	r31, 0xFE	; 254
     fc6:	10 82       	st	Z, r1
     fc8:	fc 01       	movw	r30, r24
     fca:	eb 5f       	subi	r30, 0xFB	; 251
     fcc:	fe 4f       	sbci	r31, 0xFE	; 254
     fce:	10 82       	st	Z, r1
     fd0:	08 95       	ret

00000fd2 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     fd2:	fc 01       	movw	r30, r24
     fd4:	eb 5f       	subi	r30, 0xFB	; 251
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     fda:	fc 01       	movw	r30, r24
     fdc:	ea 5f       	subi	r30, 0xFA	; 250
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     fe2:	2f 5f       	subi	r18, 0xFF	; 255
     fe4:	2f 77       	andi	r18, 0x7F	; 127
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	29 13       	cpse	r18, r25
     fea:	01 c0       	rjmp	.+2      	; 0xfee <USART_TXBuffer_FreeSpace+0x1c>
     fec:	80 e0       	ldi	r24, 0x00	; 0
}
     fee:	08 95       	ret

00000ff0 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	ec 01       	movw	r28, r24
     ff8:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
     ffa:	eb df       	rcall	.-42     	; 0xfd2 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
     ffc:	88 23       	and	r24, r24
     ffe:	a1 f0       	breq	.+40     	; 0x1028 <USART_TXBuffer_PutByte+0x38>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
    1000:	fe 01       	movw	r30, r28
    1002:	eb 5f       	subi	r30, 0xFB	; 251
    1004:	fe 4f       	sbci	r31, 0xFE	; 254
    1006:	90 81       	ld	r25, Z
	  	TXbufPtr->TX[tempTX_Head]= data;
    1008:	de 01       	movw	r26, r28
    100a:	a9 0f       	add	r26, r25
    100c:	b1 1d       	adc	r27, r1
    100e:	ad 57       	subi	r26, 0x7D	; 125
    1010:	bf 4f       	sbci	r27, 0xFF	; 255
    1012:	1c 93       	st	X, r17
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
    1014:	9f 5f       	subi	r25, 0xFF	; 255
    1016:	9f 77       	andi	r25, 0x7F	; 127
    1018:	90 83       	st	Z, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
    101a:	e8 81       	ld	r30, Y
    101c:	f9 81       	ldd	r31, Y+1	; 0x01
    101e:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
    1020:	9c 7f       	andi	r25, 0xFC	; 252
    1022:	2a 81       	ldd	r18, Y+2	; 0x02
    1024:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
    1026:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	08 95       	ret

00001030 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1030:	fc 01       	movw	r30, r24
    1032:	ed 5f       	subi	r30, 0xFD	; 253
    1034:	fe 4f       	sbci	r31, 0xFE	; 254
    1036:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    1038:	fc 01       	movw	r30, r24
    103a:	ec 5f       	subi	r30, 0xFC	; 252
    103c:	fe 4f       	sbci	r31, 0xFE	; 254
    103e:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	29 13       	cpse	r18, r25
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <USART_RXBufferData_Available+0x18>
    1046:	80 e0       	ldi	r24, 0x00	; 0
}
    1048:	08 95       	ret

0000104a <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    104a:	fc 01       	movw	r30, r24
    104c:	ec 5f       	subi	r30, 0xFC	; 252
    104e:	fe 4f       	sbci	r31, 0xFE	; 254
    1050:	20 81       	ld	r18, Z
    1052:	dc 01       	movw	r26, r24
    1054:	a2 0f       	add	r26, r18
    1056:	b1 1d       	adc	r27, r1
    1058:	13 96       	adiw	r26, 0x03	; 3
    105a:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    105c:	90 81       	ld	r25, Z
    105e:	9f 5f       	subi	r25, 0xFF	; 255
    1060:	9f 77       	andi	r25, 0x7F	; 127
    1062:	90 83       	st	Z, r25

	return ans;
}
    1064:	08 95       	ret

00001066 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    1066:	fc 01       	movw	r30, r24
    1068:	ed 5f       	subi	r30, 0xFD	; 253
    106a:	fe 4f       	sbci	r31, 0xFE	; 254
    106c:	20 81       	ld	r18, Z
    106e:	2f 5f       	subi	r18, 0xFF	; 255
    1070:	2f 77       	andi	r18, 0x7F	; 127

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    1072:	fc 01       	movw	r30, r24
    1074:	ec 5f       	subi	r30, 0xFC	; 252
    1076:	fe 4f       	sbci	r31, 0xFE	; 254
    1078:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    107a:	dc 01       	movw	r26, r24
    107c:	ed 91       	ld	r30, X+
    107e:	fc 91       	ld	r31, X
    1080:	11 97       	sbiw	r26, 0x01	; 1
    1082:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    1084:	23 17       	cp	r18, r19
    1086:	59 f0       	breq	.+22     	; 0x109e <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    1088:	fc 01       	movw	r30, r24
    108a:	ed 5f       	subi	r30, 0xFD	; 253
    108c:	fe 4f       	sbci	r31, 0xFE	; 254
    108e:	30 81       	ld	r19, Z
    1090:	a3 0f       	add	r26, r19
    1092:	b1 1d       	adc	r27, r1
    1094:	13 96       	adiw	r26, 0x03	; 3
    1096:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    1098:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    109e:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    10a0:	08 95       	ret

000010a2 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    10a6:	fc 01       	movw	r30, r24
    10a8:	ea 5f       	subi	r30, 0xFA	; 250
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
    10ac:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    10ae:	fc 01       	movw	r30, r24
    10b0:	eb 5f       	subi	r30, 0xFB	; 251
    10b2:	fe 4f       	sbci	r31, 0xFE	; 254
    10b4:	30 81       	ld	r19, Z
    10b6:	32 13       	cpse	r19, r18
    10b8:	07 c0       	rjmp	.+14     	; 0x10c8 <USART_DataRegEmpty+0x26>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    10ba:	dc 01       	movw	r26, r24
    10bc:	ed 91       	ld	r30, X+
    10be:	fc 91       	ld	r31, X
    10c0:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    10c2:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    10c4:	83 83       	std	Z+3, r24	; 0x03
    10c6:	12 c0       	rjmp	.+36     	; 0x10ec <USART_DataRegEmpty+0x4a>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    10c8:	fc 01       	movw	r30, r24
    10ca:	ea 5f       	subi	r30, 0xFA	; 250
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	20 81       	ld	r18, Z
    10d0:	dc 01       	movw	r26, r24
    10d2:	a2 0f       	add	r26, r18
    10d4:	b1 1d       	adc	r27, r1
    10d6:	ad 57       	subi	r26, 0x7D	; 125
    10d8:	bf 4f       	sbci	r27, 0xFF	; 255
    10da:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    10dc:	ec 01       	movw	r28, r24
    10de:	a8 81       	ld	r26, Y
    10e0:	b9 81       	ldd	r27, Y+1	; 0x01
    10e2:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    10e4:	80 81       	ld	r24, Z
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	8f 77       	andi	r24, 0x7F	; 127
    10ea:	80 83       	st	Z, r24
	}
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <__subsf3>:
    10f2:	50 58       	subi	r21, 0x80	; 128

000010f4 <__addsf3>:
    10f4:	bb 27       	eor	r27, r27
    10f6:	aa 27       	eor	r26, r26
    10f8:	0e d0       	rcall	.+28     	; 0x1116 <__addsf3x>
    10fa:	48 c1       	rjmp	.+656    	; 0x138c <__fp_round>
    10fc:	39 d1       	rcall	.+626    	; 0x1370 <__fp_pscA>
    10fe:	30 f0       	brcs	.+12     	; 0x110c <__addsf3+0x18>
    1100:	3e d1       	rcall	.+636    	; 0x137e <__fp_pscB>
    1102:	20 f0       	brcs	.+8      	; 0x110c <__addsf3+0x18>
    1104:	31 f4       	brne	.+12     	; 0x1112 <__addsf3+0x1e>
    1106:	9f 3f       	cpi	r25, 0xFF	; 255
    1108:	11 f4       	brne	.+4      	; 0x110e <__addsf3+0x1a>
    110a:	1e f4       	brtc	.+6      	; 0x1112 <__addsf3+0x1e>
    110c:	2e c1       	rjmp	.+604    	; 0x136a <__fp_nan>
    110e:	0e f4       	brtc	.+2      	; 0x1112 <__addsf3+0x1e>
    1110:	e0 95       	com	r30
    1112:	e7 fb       	bst	r30, 7
    1114:	24 c1       	rjmp	.+584    	; 0x135e <__fp_inf>

00001116 <__addsf3x>:
    1116:	e9 2f       	mov	r30, r25
    1118:	4a d1       	rcall	.+660    	; 0x13ae <__fp_split3>
    111a:	80 f3       	brcs	.-32     	; 0x10fc <__addsf3+0x8>
    111c:	ba 17       	cp	r27, r26
    111e:	62 07       	cpc	r22, r18
    1120:	73 07       	cpc	r23, r19
    1122:	84 07       	cpc	r24, r20
    1124:	95 07       	cpc	r25, r21
    1126:	18 f0       	brcs	.+6      	; 0x112e <__addsf3x+0x18>
    1128:	71 f4       	brne	.+28     	; 0x1146 <__addsf3x+0x30>
    112a:	9e f5       	brtc	.+102    	; 0x1192 <__addsf3x+0x7c>
    112c:	62 c1       	rjmp	.+708    	; 0x13f2 <__fp_zero>
    112e:	0e f4       	brtc	.+2      	; 0x1132 <__addsf3x+0x1c>
    1130:	e0 95       	com	r30
    1132:	0b 2e       	mov	r0, r27
    1134:	ba 2f       	mov	r27, r26
    1136:	a0 2d       	mov	r26, r0
    1138:	0b 01       	movw	r0, r22
    113a:	b9 01       	movw	r22, r18
    113c:	90 01       	movw	r18, r0
    113e:	0c 01       	movw	r0, r24
    1140:	ca 01       	movw	r24, r20
    1142:	a0 01       	movw	r20, r0
    1144:	11 24       	eor	r1, r1
    1146:	ff 27       	eor	r31, r31
    1148:	59 1b       	sub	r21, r25
    114a:	99 f0       	breq	.+38     	; 0x1172 <__addsf3x+0x5c>
    114c:	59 3f       	cpi	r21, 0xF9	; 249
    114e:	50 f4       	brcc	.+20     	; 0x1164 <__addsf3x+0x4e>
    1150:	50 3e       	cpi	r21, 0xE0	; 224
    1152:	68 f1       	brcs	.+90     	; 0x11ae <__addsf3x+0x98>
    1154:	1a 16       	cp	r1, r26
    1156:	f0 40       	sbci	r31, 0x00	; 0
    1158:	a2 2f       	mov	r26, r18
    115a:	23 2f       	mov	r18, r19
    115c:	34 2f       	mov	r19, r20
    115e:	44 27       	eor	r20, r20
    1160:	58 5f       	subi	r21, 0xF8	; 248
    1162:	f3 cf       	rjmp	.-26     	; 0x114a <__addsf3x+0x34>
    1164:	46 95       	lsr	r20
    1166:	37 95       	ror	r19
    1168:	27 95       	ror	r18
    116a:	a7 95       	ror	r26
    116c:	f0 40       	sbci	r31, 0x00	; 0
    116e:	53 95       	inc	r21
    1170:	c9 f7       	brne	.-14     	; 0x1164 <__addsf3x+0x4e>
    1172:	7e f4       	brtc	.+30     	; 0x1192 <__addsf3x+0x7c>
    1174:	1f 16       	cp	r1, r31
    1176:	ba 0b       	sbc	r27, r26
    1178:	62 0b       	sbc	r22, r18
    117a:	73 0b       	sbc	r23, r19
    117c:	84 0b       	sbc	r24, r20
    117e:	ba f0       	brmi	.+46     	; 0x11ae <__addsf3x+0x98>
    1180:	91 50       	subi	r25, 0x01	; 1
    1182:	a1 f0       	breq	.+40     	; 0x11ac <__addsf3x+0x96>
    1184:	ff 0f       	add	r31, r31
    1186:	bb 1f       	adc	r27, r27
    1188:	66 1f       	adc	r22, r22
    118a:	77 1f       	adc	r23, r23
    118c:	88 1f       	adc	r24, r24
    118e:	c2 f7       	brpl	.-16     	; 0x1180 <__addsf3x+0x6a>
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <__addsf3x+0x98>
    1192:	ba 0f       	add	r27, r26
    1194:	62 1f       	adc	r22, r18
    1196:	73 1f       	adc	r23, r19
    1198:	84 1f       	adc	r24, r20
    119a:	48 f4       	brcc	.+18     	; 0x11ae <__addsf3x+0x98>
    119c:	87 95       	ror	r24
    119e:	77 95       	ror	r23
    11a0:	67 95       	ror	r22
    11a2:	b7 95       	ror	r27
    11a4:	f7 95       	ror	r31
    11a6:	9e 3f       	cpi	r25, 0xFE	; 254
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <__addsf3x+0x96>
    11aa:	b3 cf       	rjmp	.-154    	; 0x1112 <__addsf3+0x1e>
    11ac:	93 95       	inc	r25
    11ae:	88 0f       	add	r24, r24
    11b0:	08 f0       	brcs	.+2      	; 0x11b4 <__addsf3x+0x9e>
    11b2:	99 27       	eor	r25, r25
    11b4:	ee 0f       	add	r30, r30
    11b6:	97 95       	ror	r25
    11b8:	87 95       	ror	r24
    11ba:	08 95       	ret

000011bc <__divsf3>:
    11bc:	0c d0       	rcall	.+24     	; 0x11d6 <__divsf3x>
    11be:	e6 c0       	rjmp	.+460    	; 0x138c <__fp_round>
    11c0:	de d0       	rcall	.+444    	; 0x137e <__fp_pscB>
    11c2:	40 f0       	brcs	.+16     	; 0x11d4 <__divsf3+0x18>
    11c4:	d5 d0       	rcall	.+426    	; 0x1370 <__fp_pscA>
    11c6:	30 f0       	brcs	.+12     	; 0x11d4 <__divsf3+0x18>
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <__divsf3+0x16>
    11ca:	5f 3f       	cpi	r21, 0xFF	; 255
    11cc:	19 f0       	breq	.+6      	; 0x11d4 <__divsf3+0x18>
    11ce:	c7 c0       	rjmp	.+398    	; 0x135e <__fp_inf>
    11d0:	51 11       	cpse	r21, r1
    11d2:	10 c1       	rjmp	.+544    	; 0x13f4 <__fp_szero>
    11d4:	ca c0       	rjmp	.+404    	; 0x136a <__fp_nan>

000011d6 <__divsf3x>:
    11d6:	eb d0       	rcall	.+470    	; 0x13ae <__fp_split3>
    11d8:	98 f3       	brcs	.-26     	; 0x11c0 <__divsf3+0x4>

000011da <__divsf3_pse>:
    11da:	99 23       	and	r25, r25
    11dc:	c9 f3       	breq	.-14     	; 0x11d0 <__divsf3+0x14>
    11de:	55 23       	and	r21, r21
    11e0:	b1 f3       	breq	.-20     	; 0x11ce <__divsf3+0x12>
    11e2:	95 1b       	sub	r25, r21
    11e4:	55 0b       	sbc	r21, r21
    11e6:	bb 27       	eor	r27, r27
    11e8:	aa 27       	eor	r26, r26
    11ea:	62 17       	cp	r22, r18
    11ec:	73 07       	cpc	r23, r19
    11ee:	84 07       	cpc	r24, r20
    11f0:	38 f0       	brcs	.+14     	; 0x1200 <__divsf3_pse+0x26>
    11f2:	9f 5f       	subi	r25, 0xFF	; 255
    11f4:	5f 4f       	sbci	r21, 0xFF	; 255
    11f6:	22 0f       	add	r18, r18
    11f8:	33 1f       	adc	r19, r19
    11fa:	44 1f       	adc	r20, r20
    11fc:	aa 1f       	adc	r26, r26
    11fe:	a9 f3       	breq	.-22     	; 0x11ea <__divsf3_pse+0x10>
    1200:	33 d0       	rcall	.+102    	; 0x1268 <__divsf3_pse+0x8e>
    1202:	0e 2e       	mov	r0, r30
    1204:	3a f0       	brmi	.+14     	; 0x1214 <__divsf3_pse+0x3a>
    1206:	e0 e8       	ldi	r30, 0x80	; 128
    1208:	30 d0       	rcall	.+96     	; 0x126a <__divsf3_pse+0x90>
    120a:	91 50       	subi	r25, 0x01	; 1
    120c:	50 40       	sbci	r21, 0x00	; 0
    120e:	e6 95       	lsr	r30
    1210:	00 1c       	adc	r0, r0
    1212:	ca f7       	brpl	.-14     	; 0x1206 <__divsf3_pse+0x2c>
    1214:	29 d0       	rcall	.+82     	; 0x1268 <__divsf3_pse+0x8e>
    1216:	fe 2f       	mov	r31, r30
    1218:	27 d0       	rcall	.+78     	; 0x1268 <__divsf3_pse+0x8e>
    121a:	66 0f       	add	r22, r22
    121c:	77 1f       	adc	r23, r23
    121e:	88 1f       	adc	r24, r24
    1220:	bb 1f       	adc	r27, r27
    1222:	26 17       	cp	r18, r22
    1224:	37 07       	cpc	r19, r23
    1226:	48 07       	cpc	r20, r24
    1228:	ab 07       	cpc	r26, r27
    122a:	b0 e8       	ldi	r27, 0x80	; 128
    122c:	09 f0       	breq	.+2      	; 0x1230 <__divsf3_pse+0x56>
    122e:	bb 0b       	sbc	r27, r27
    1230:	80 2d       	mov	r24, r0
    1232:	bf 01       	movw	r22, r30
    1234:	ff 27       	eor	r31, r31
    1236:	93 58       	subi	r25, 0x83	; 131
    1238:	5f 4f       	sbci	r21, 0xFF	; 255
    123a:	2a f0       	brmi	.+10     	; 0x1246 <__divsf3_pse+0x6c>
    123c:	9e 3f       	cpi	r25, 0xFE	; 254
    123e:	51 05       	cpc	r21, r1
    1240:	68 f0       	brcs	.+26     	; 0x125c <__divsf3_pse+0x82>
    1242:	8d c0       	rjmp	.+282    	; 0x135e <__fp_inf>
    1244:	d7 c0       	rjmp	.+430    	; 0x13f4 <__fp_szero>
    1246:	5f 3f       	cpi	r21, 0xFF	; 255
    1248:	ec f3       	brlt	.-6      	; 0x1244 <__divsf3_pse+0x6a>
    124a:	98 3e       	cpi	r25, 0xE8	; 232
    124c:	dc f3       	brlt	.-10     	; 0x1244 <__divsf3_pse+0x6a>
    124e:	86 95       	lsr	r24
    1250:	77 95       	ror	r23
    1252:	67 95       	ror	r22
    1254:	b7 95       	ror	r27
    1256:	f7 95       	ror	r31
    1258:	9f 5f       	subi	r25, 0xFF	; 255
    125a:	c9 f7       	brne	.-14     	; 0x124e <__divsf3_pse+0x74>
    125c:	88 0f       	add	r24, r24
    125e:	91 1d       	adc	r25, r1
    1260:	96 95       	lsr	r25
    1262:	87 95       	ror	r24
    1264:	97 f9       	bld	r25, 7
    1266:	08 95       	ret
    1268:	e1 e0       	ldi	r30, 0x01	; 1
    126a:	66 0f       	add	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	88 1f       	adc	r24, r24
    1270:	bb 1f       	adc	r27, r27
    1272:	62 17       	cp	r22, r18
    1274:	73 07       	cpc	r23, r19
    1276:	84 07       	cpc	r24, r20
    1278:	ba 07       	cpc	r27, r26
    127a:	20 f0       	brcs	.+8      	; 0x1284 <__divsf3_pse+0xaa>
    127c:	62 1b       	sub	r22, r18
    127e:	73 0b       	sbc	r23, r19
    1280:	84 0b       	sbc	r24, r20
    1282:	ba 0b       	sbc	r27, r26
    1284:	ee 1f       	adc	r30, r30
    1286:	88 f7       	brcc	.-30     	; 0x126a <__divsf3_pse+0x90>
    1288:	e0 95       	com	r30
    128a:	08 95       	ret

0000128c <__fixunssfsi>:
    128c:	98 d0       	rcall	.+304    	; 0x13be <__fp_splitA>
    128e:	88 f0       	brcs	.+34     	; 0x12b2 <__fixunssfsi+0x26>
    1290:	9f 57       	subi	r25, 0x7F	; 127
    1292:	90 f0       	brcs	.+36     	; 0x12b8 <__fixunssfsi+0x2c>
    1294:	b9 2f       	mov	r27, r25
    1296:	99 27       	eor	r25, r25
    1298:	b7 51       	subi	r27, 0x17	; 23
    129a:	a0 f0       	brcs	.+40     	; 0x12c4 <__fixunssfsi+0x38>
    129c:	d1 f0       	breq	.+52     	; 0x12d2 <__fixunssfsi+0x46>
    129e:	66 0f       	add	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	88 1f       	adc	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	1a f0       	brmi	.+6      	; 0x12ae <__fixunssfsi+0x22>
    12a8:	ba 95       	dec	r27
    12aa:	c9 f7       	brne	.-14     	; 0x129e <__fixunssfsi+0x12>
    12ac:	12 c0       	rjmp	.+36     	; 0x12d2 <__fixunssfsi+0x46>
    12ae:	b1 30       	cpi	r27, 0x01	; 1
    12b0:	81 f0       	breq	.+32     	; 0x12d2 <__fixunssfsi+0x46>
    12b2:	9f d0       	rcall	.+318    	; 0x13f2 <__fp_zero>
    12b4:	b1 e0       	ldi	r27, 0x01	; 1
    12b6:	08 95       	ret
    12b8:	9c c0       	rjmp	.+312    	; 0x13f2 <__fp_zero>
    12ba:	67 2f       	mov	r22, r23
    12bc:	78 2f       	mov	r23, r24
    12be:	88 27       	eor	r24, r24
    12c0:	b8 5f       	subi	r27, 0xF8	; 248
    12c2:	39 f0       	breq	.+14     	; 0x12d2 <__fixunssfsi+0x46>
    12c4:	b9 3f       	cpi	r27, 0xF9	; 249
    12c6:	cc f3       	brlt	.-14     	; 0x12ba <__fixunssfsi+0x2e>
    12c8:	86 95       	lsr	r24
    12ca:	77 95       	ror	r23
    12cc:	67 95       	ror	r22
    12ce:	b3 95       	inc	r27
    12d0:	d9 f7       	brne	.-10     	; 0x12c8 <__fixunssfsi+0x3c>
    12d2:	3e f4       	brtc	.+14     	; 0x12e2 <__fixunssfsi+0x56>
    12d4:	90 95       	com	r25
    12d6:	80 95       	com	r24
    12d8:	70 95       	com	r23
    12da:	61 95       	neg	r22
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	08 95       	ret

000012e4 <__floatunsisf>:
    12e4:	e8 94       	clt
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <__floatsisf+0x12>

000012e8 <__floatsisf>:
    12e8:	97 fb       	bst	r25, 7
    12ea:	3e f4       	brtc	.+14     	; 0x12fa <__floatsisf+0x12>
    12ec:	90 95       	com	r25
    12ee:	80 95       	com	r24
    12f0:	70 95       	com	r23
    12f2:	61 95       	neg	r22
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	8f 4f       	sbci	r24, 0xFF	; 255
    12f8:	9f 4f       	sbci	r25, 0xFF	; 255
    12fa:	99 23       	and	r25, r25
    12fc:	a9 f0       	breq	.+42     	; 0x1328 <__floatsisf+0x40>
    12fe:	f9 2f       	mov	r31, r25
    1300:	96 e9       	ldi	r25, 0x96	; 150
    1302:	bb 27       	eor	r27, r27
    1304:	93 95       	inc	r25
    1306:	f6 95       	lsr	r31
    1308:	87 95       	ror	r24
    130a:	77 95       	ror	r23
    130c:	67 95       	ror	r22
    130e:	b7 95       	ror	r27
    1310:	f1 11       	cpse	r31, r1
    1312:	f8 cf       	rjmp	.-16     	; 0x1304 <__floatsisf+0x1c>
    1314:	fa f4       	brpl	.+62     	; 0x1354 <__floatsisf+0x6c>
    1316:	bb 0f       	add	r27, r27
    1318:	11 f4       	brne	.+4      	; 0x131e <__floatsisf+0x36>
    131a:	60 ff       	sbrs	r22, 0
    131c:	1b c0       	rjmp	.+54     	; 0x1354 <__floatsisf+0x6c>
    131e:	6f 5f       	subi	r22, 0xFF	; 255
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	8f 4f       	sbci	r24, 0xFF	; 255
    1324:	9f 4f       	sbci	r25, 0xFF	; 255
    1326:	16 c0       	rjmp	.+44     	; 0x1354 <__floatsisf+0x6c>
    1328:	88 23       	and	r24, r24
    132a:	11 f0       	breq	.+4      	; 0x1330 <__floatsisf+0x48>
    132c:	96 e9       	ldi	r25, 0x96	; 150
    132e:	11 c0       	rjmp	.+34     	; 0x1352 <__floatsisf+0x6a>
    1330:	77 23       	and	r23, r23
    1332:	21 f0       	breq	.+8      	; 0x133c <__floatsisf+0x54>
    1334:	9e e8       	ldi	r25, 0x8E	; 142
    1336:	87 2f       	mov	r24, r23
    1338:	76 2f       	mov	r23, r22
    133a:	05 c0       	rjmp	.+10     	; 0x1346 <__floatsisf+0x5e>
    133c:	66 23       	and	r22, r22
    133e:	71 f0       	breq	.+28     	; 0x135c <__floatsisf+0x74>
    1340:	96 e8       	ldi	r25, 0x86	; 134
    1342:	86 2f       	mov	r24, r22
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	2a f0       	brmi	.+10     	; 0x1354 <__floatsisf+0x6c>
    134a:	9a 95       	dec	r25
    134c:	66 0f       	add	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	da f7       	brpl	.-10     	; 0x134a <__floatsisf+0x62>
    1354:	88 0f       	add	r24, r24
    1356:	96 95       	lsr	r25
    1358:	87 95       	ror	r24
    135a:	97 f9       	bld	r25, 7
    135c:	08 95       	ret

0000135e <__fp_inf>:
    135e:	97 f9       	bld	r25, 7
    1360:	9f 67       	ori	r25, 0x7F	; 127
    1362:	80 e8       	ldi	r24, 0x80	; 128
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	08 95       	ret

0000136a <__fp_nan>:
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	80 ec       	ldi	r24, 0xC0	; 192
    136e:	08 95       	ret

00001370 <__fp_pscA>:
    1370:	00 24       	eor	r0, r0
    1372:	0a 94       	dec	r0
    1374:	16 16       	cp	r1, r22
    1376:	17 06       	cpc	r1, r23
    1378:	18 06       	cpc	r1, r24
    137a:	09 06       	cpc	r0, r25
    137c:	08 95       	ret

0000137e <__fp_pscB>:
    137e:	00 24       	eor	r0, r0
    1380:	0a 94       	dec	r0
    1382:	12 16       	cp	r1, r18
    1384:	13 06       	cpc	r1, r19
    1386:	14 06       	cpc	r1, r20
    1388:	05 06       	cpc	r0, r21
    138a:	08 95       	ret

0000138c <__fp_round>:
    138c:	09 2e       	mov	r0, r25
    138e:	03 94       	inc	r0
    1390:	00 0c       	add	r0, r0
    1392:	11 f4       	brne	.+4      	; 0x1398 <__fp_round+0xc>
    1394:	88 23       	and	r24, r24
    1396:	52 f0       	brmi	.+20     	; 0x13ac <__fp_round+0x20>
    1398:	bb 0f       	add	r27, r27
    139a:	40 f4       	brcc	.+16     	; 0x13ac <__fp_round+0x20>
    139c:	bf 2b       	or	r27, r31
    139e:	11 f4       	brne	.+4      	; 0x13a4 <__fp_round+0x18>
    13a0:	60 ff       	sbrs	r22, 0
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <__fp_round+0x20>
    13a4:	6f 5f       	subi	r22, 0xFF	; 255
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	08 95       	ret

000013ae <__fp_split3>:
    13ae:	57 fd       	sbrc	r21, 7
    13b0:	90 58       	subi	r25, 0x80	; 128
    13b2:	44 0f       	add	r20, r20
    13b4:	55 1f       	adc	r21, r21
    13b6:	59 f0       	breq	.+22     	; 0x13ce <__fp_splitA+0x10>
    13b8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ba:	71 f0       	breq	.+28     	; 0x13d8 <__fp_splitA+0x1a>
    13bc:	47 95       	ror	r20

000013be <__fp_splitA>:
    13be:	88 0f       	add	r24, r24
    13c0:	97 fb       	bst	r25, 7
    13c2:	99 1f       	adc	r25, r25
    13c4:	61 f0       	breq	.+24     	; 0x13de <__fp_splitA+0x20>
    13c6:	9f 3f       	cpi	r25, 0xFF	; 255
    13c8:	79 f0       	breq	.+30     	; 0x13e8 <__fp_splitA+0x2a>
    13ca:	87 95       	ror	r24
    13cc:	08 95       	ret
    13ce:	12 16       	cp	r1, r18
    13d0:	13 06       	cpc	r1, r19
    13d2:	14 06       	cpc	r1, r20
    13d4:	55 1f       	adc	r21, r21
    13d6:	f2 cf       	rjmp	.-28     	; 0x13bc <__fp_split3+0xe>
    13d8:	46 95       	lsr	r20
    13da:	f1 df       	rcall	.-30     	; 0x13be <__fp_splitA>
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <__fp_splitA+0x30>
    13de:	16 16       	cp	r1, r22
    13e0:	17 06       	cpc	r1, r23
    13e2:	18 06       	cpc	r1, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	f1 cf       	rjmp	.-30     	; 0x13ca <__fp_splitA+0xc>
    13e8:	86 95       	lsr	r24
    13ea:	71 05       	cpc	r23, r1
    13ec:	61 05       	cpc	r22, r1
    13ee:	08 94       	sec
    13f0:	08 95       	ret

000013f2 <__fp_zero>:
    13f2:	e8 94       	clt

000013f4 <__fp_szero>:
    13f4:	bb 27       	eor	r27, r27
    13f6:	66 27       	eor	r22, r22
    13f8:	77 27       	eor	r23, r23
    13fa:	cb 01       	movw	r24, r22
    13fc:	97 f9       	bld	r25, 7
    13fe:	08 95       	ret

00001400 <__mulsf3>:
    1400:	0b d0       	rcall	.+22     	; 0x1418 <__mulsf3x>
    1402:	c4 cf       	rjmp	.-120    	; 0x138c <__fp_round>
    1404:	b5 df       	rcall	.-150    	; 0x1370 <__fp_pscA>
    1406:	28 f0       	brcs	.+10     	; 0x1412 <__mulsf3+0x12>
    1408:	ba df       	rcall	.-140    	; 0x137e <__fp_pscB>
    140a:	18 f0       	brcs	.+6      	; 0x1412 <__mulsf3+0x12>
    140c:	95 23       	and	r25, r21
    140e:	09 f0       	breq	.+2      	; 0x1412 <__mulsf3+0x12>
    1410:	a6 cf       	rjmp	.-180    	; 0x135e <__fp_inf>
    1412:	ab cf       	rjmp	.-170    	; 0x136a <__fp_nan>
    1414:	11 24       	eor	r1, r1
    1416:	ee cf       	rjmp	.-36     	; 0x13f4 <__fp_szero>

00001418 <__mulsf3x>:
    1418:	ca df       	rcall	.-108    	; 0x13ae <__fp_split3>
    141a:	a0 f3       	brcs	.-24     	; 0x1404 <__mulsf3+0x4>

0000141c <__mulsf3_pse>:
    141c:	95 9f       	mul	r25, r21
    141e:	d1 f3       	breq	.-12     	; 0x1414 <__mulsf3+0x14>
    1420:	95 0f       	add	r25, r21
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	55 1f       	adc	r21, r21
    1426:	62 9f       	mul	r22, r18
    1428:	f0 01       	movw	r30, r0
    142a:	72 9f       	mul	r23, r18
    142c:	bb 27       	eor	r27, r27
    142e:	f0 0d       	add	r31, r0
    1430:	b1 1d       	adc	r27, r1
    1432:	63 9f       	mul	r22, r19
    1434:	aa 27       	eor	r26, r26
    1436:	f0 0d       	add	r31, r0
    1438:	b1 1d       	adc	r27, r1
    143a:	aa 1f       	adc	r26, r26
    143c:	64 9f       	mul	r22, r20
    143e:	66 27       	eor	r22, r22
    1440:	b0 0d       	add	r27, r0
    1442:	a1 1d       	adc	r26, r1
    1444:	66 1f       	adc	r22, r22
    1446:	82 9f       	mul	r24, r18
    1448:	22 27       	eor	r18, r18
    144a:	b0 0d       	add	r27, r0
    144c:	a1 1d       	adc	r26, r1
    144e:	62 1f       	adc	r22, r18
    1450:	73 9f       	mul	r23, r19
    1452:	b0 0d       	add	r27, r0
    1454:	a1 1d       	adc	r26, r1
    1456:	62 1f       	adc	r22, r18
    1458:	83 9f       	mul	r24, r19
    145a:	a0 0d       	add	r26, r0
    145c:	61 1d       	adc	r22, r1
    145e:	22 1f       	adc	r18, r18
    1460:	74 9f       	mul	r23, r20
    1462:	33 27       	eor	r19, r19
    1464:	a0 0d       	add	r26, r0
    1466:	61 1d       	adc	r22, r1
    1468:	23 1f       	adc	r18, r19
    146a:	84 9f       	mul	r24, r20
    146c:	60 0d       	add	r22, r0
    146e:	21 1d       	adc	r18, r1
    1470:	82 2f       	mov	r24, r18
    1472:	76 2f       	mov	r23, r22
    1474:	6a 2f       	mov	r22, r26
    1476:	11 24       	eor	r1, r1
    1478:	9f 57       	subi	r25, 0x7F	; 127
    147a:	50 40       	sbci	r21, 0x00	; 0
    147c:	8a f0       	brmi	.+34     	; 0x14a0 <__mulsf3_pse+0x84>
    147e:	e1 f0       	breq	.+56     	; 0x14b8 <__mulsf3_pse+0x9c>
    1480:	88 23       	and	r24, r24
    1482:	4a f0       	brmi	.+18     	; 0x1496 <__mulsf3_pse+0x7a>
    1484:	ee 0f       	add	r30, r30
    1486:	ff 1f       	adc	r31, r31
    1488:	bb 1f       	adc	r27, r27
    148a:	66 1f       	adc	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	88 1f       	adc	r24, r24
    1490:	91 50       	subi	r25, 0x01	; 1
    1492:	50 40       	sbci	r21, 0x00	; 0
    1494:	a9 f7       	brne	.-22     	; 0x1480 <__mulsf3_pse+0x64>
    1496:	9e 3f       	cpi	r25, 0xFE	; 254
    1498:	51 05       	cpc	r21, r1
    149a:	70 f0       	brcs	.+28     	; 0x14b8 <__mulsf3_pse+0x9c>
    149c:	60 cf       	rjmp	.-320    	; 0x135e <__fp_inf>
    149e:	aa cf       	rjmp	.-172    	; 0x13f4 <__fp_szero>
    14a0:	5f 3f       	cpi	r21, 0xFF	; 255
    14a2:	ec f3       	brlt	.-6      	; 0x149e <__mulsf3_pse+0x82>
    14a4:	98 3e       	cpi	r25, 0xE8	; 232
    14a6:	dc f3       	brlt	.-10     	; 0x149e <__mulsf3_pse+0x82>
    14a8:	86 95       	lsr	r24
    14aa:	77 95       	ror	r23
    14ac:	67 95       	ror	r22
    14ae:	b7 95       	ror	r27
    14b0:	f7 95       	ror	r31
    14b2:	e7 95       	ror	r30
    14b4:	9f 5f       	subi	r25, 0xFF	; 255
    14b6:	c1 f7       	brne	.-16     	; 0x14a8 <__mulsf3_pse+0x8c>
    14b8:	fe 2b       	or	r31, r30
    14ba:	88 0f       	add	r24, r24
    14bc:	91 1d       	adc	r25, r1
    14be:	96 95       	lsr	r25
    14c0:	87 95       	ror	r24
    14c2:	97 f9       	bld	r25, 7
    14c4:	08 95       	ret

000014c6 <round>:
    14c6:	7b df       	rcall	.-266    	; 0x13be <__fp_splitA>
    14c8:	e0 f0       	brcs	.+56     	; 0x1502 <round+0x3c>
    14ca:	9e 37       	cpi	r25, 0x7E	; 126
    14cc:	d8 f0       	brcs	.+54     	; 0x1504 <round+0x3e>
    14ce:	96 39       	cpi	r25, 0x96	; 150
    14d0:	b8 f4       	brcc	.+46     	; 0x1500 <round+0x3a>
    14d2:	9e 38       	cpi	r25, 0x8E	; 142
    14d4:	48 f4       	brcc	.+18     	; 0x14e8 <round+0x22>
    14d6:	67 2f       	mov	r22, r23
    14d8:	78 2f       	mov	r23, r24
    14da:	88 27       	eor	r24, r24
    14dc:	98 5f       	subi	r25, 0xF8	; 248
    14de:	f9 cf       	rjmp	.-14     	; 0x14d2 <round+0xc>
    14e0:	86 95       	lsr	r24
    14e2:	77 95       	ror	r23
    14e4:	67 95       	ror	r22
    14e6:	93 95       	inc	r25
    14e8:	95 39       	cpi	r25, 0x95	; 149
    14ea:	d0 f3       	brcs	.-12     	; 0x14e0 <round+0x1a>
    14ec:	b6 2f       	mov	r27, r22
    14ee:	b1 70       	andi	r27, 0x01	; 1
    14f0:	6b 0f       	add	r22, r27
    14f2:	71 1d       	adc	r23, r1
    14f4:	81 1d       	adc	r24, r1
    14f6:	20 f4       	brcc	.+8      	; 0x1500 <round+0x3a>
    14f8:	87 95       	ror	r24
    14fa:	77 95       	ror	r23
    14fc:	67 95       	ror	r22
    14fe:	93 95       	inc	r25
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <__fp_mintl>
    1502:	1c c0       	rjmp	.+56     	; 0x153c <__fp_mpack>
    1504:	77 cf       	rjmp	.-274    	; 0x13f4 <__fp_szero>

00001506 <__fp_mintl>:
    1506:	88 23       	and	r24, r24
    1508:	71 f4       	brne	.+28     	; 0x1526 <__fp_mintl+0x20>
    150a:	77 23       	and	r23, r23
    150c:	21 f0       	breq	.+8      	; 0x1516 <__fp_mintl+0x10>
    150e:	98 50       	subi	r25, 0x08	; 8
    1510:	87 2b       	or	r24, r23
    1512:	76 2f       	mov	r23, r22
    1514:	07 c0       	rjmp	.+14     	; 0x1524 <__fp_mintl+0x1e>
    1516:	66 23       	and	r22, r22
    1518:	11 f4       	brne	.+4      	; 0x151e <__fp_mintl+0x18>
    151a:	99 27       	eor	r25, r25
    151c:	0d c0       	rjmp	.+26     	; 0x1538 <__fp_mintl+0x32>
    151e:	90 51       	subi	r25, 0x10	; 16
    1520:	86 2b       	or	r24, r22
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	2a f0       	brmi	.+10     	; 0x1532 <__fp_mintl+0x2c>
    1528:	9a 95       	dec	r25
    152a:	66 0f       	add	r22, r22
    152c:	77 1f       	adc	r23, r23
    152e:	88 1f       	adc	r24, r24
    1530:	da f7       	brpl	.-10     	; 0x1528 <__fp_mintl+0x22>
    1532:	88 0f       	add	r24, r24
    1534:	96 95       	lsr	r25
    1536:	87 95       	ror	r24
    1538:	97 f9       	bld	r25, 7
    153a:	08 95       	ret

0000153c <__fp_mpack>:
    153c:	9f 3f       	cpi	r25, 0xFF	; 255
    153e:	31 f0       	breq	.+12     	; 0x154c <__fp_mpack_finite+0xc>

00001540 <__fp_mpack_finite>:
    1540:	91 50       	subi	r25, 0x01	; 1
    1542:	20 f4       	brcc	.+8      	; 0x154c <__fp_mpack_finite+0xc>
    1544:	87 95       	ror	r24
    1546:	77 95       	ror	r23
    1548:	67 95       	ror	r22
    154a:	b7 95       	ror	r27
    154c:	88 0f       	add	r24, r24
    154e:	91 1d       	adc	r25, r1
    1550:	96 95       	lsr	r25
    1552:	87 95       	ror	r24
    1554:	97 f9       	bld	r25, 7
    1556:	08 95       	ret

00001558 <__umulhisi3>:
    1558:	a2 9f       	mul	r26, r18
    155a:	b0 01       	movw	r22, r0
    155c:	b3 9f       	mul	r27, r19
    155e:	c0 01       	movw	r24, r0
    1560:	a3 9f       	mul	r26, r19
    1562:	01 d0       	rcall	.+2      	; 0x1566 <__umulhisi3+0xe>
    1564:	b2 9f       	mul	r27, r18
    1566:	70 0d       	add	r23, r0
    1568:	81 1d       	adc	r24, r1
    156a:	11 24       	eor	r1, r1
    156c:	91 1d       	adc	r25, r1
    156e:	08 95       	ret

00001570 <sprintf>:
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	2e 97       	sbiw	r28, 0x0e	; 14
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0e 89       	ldd	r16, Y+22	; 0x16
    1584:	1f 89       	ldd	r17, Y+23	; 0x17
    1586:	86 e0       	ldi	r24, 0x06	; 6
    1588:	8c 83       	std	Y+4, r24	; 0x04
    158a:	09 83       	std	Y+1, r16	; 0x01
    158c:	1a 83       	std	Y+2, r17	; 0x02
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	9f e7       	ldi	r25, 0x7F	; 127
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	ce 01       	movw	r24, r28
    1598:	4a 96       	adiw	r24, 0x1a	; 26
    159a:	ac 01       	movw	r20, r24
    159c:	68 8d       	ldd	r22, Y+24	; 0x18
    159e:	79 8d       	ldd	r23, Y+25	; 0x19
    15a0:	ce 01       	movw	r24, r28
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	0d d0       	rcall	.+26     	; 0x15c0 <vfprintf>
    15a6:	ef 81       	ldd	r30, Y+7	; 0x07
    15a8:	f8 85       	ldd	r31, Y+8	; 0x08
    15aa:	e0 0f       	add	r30, r16
    15ac:	f1 1f       	adc	r31, r17
    15ae:	10 82       	st	Z, r1
    15b0:	2e 96       	adiw	r28, 0x0e	; 14
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	08 95       	ret

000015c0 <vfprintf>:
    15c0:	2f 92       	push	r2
    15c2:	3f 92       	push	r3
    15c4:	4f 92       	push	r4
    15c6:	5f 92       	push	r5
    15c8:	6f 92       	push	r6
    15ca:	7f 92       	push	r7
    15cc:	8f 92       	push	r8
    15ce:	9f 92       	push	r9
    15d0:	af 92       	push	r10
    15d2:	bf 92       	push	r11
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	2c 97       	sbiw	r28, 0x0c	; 12
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	7c 01       	movw	r14, r24
    15f0:	6b 01       	movw	r12, r22
    15f2:	8a 01       	movw	r16, r20
    15f4:	fc 01       	movw	r30, r24
    15f6:	16 82       	std	Z+6, r1	; 0x06
    15f8:	17 82       	std	Z+7, r1	; 0x07
    15fa:	83 81       	ldd	r24, Z+3	; 0x03
    15fc:	81 ff       	sbrs	r24, 1
    15fe:	b9 c1       	rjmp	.+882    	; 0x1972 <vfprintf+0x3b2>
    1600:	88 24       	eor	r8, r8
    1602:	83 94       	inc	r8
    1604:	91 2c       	mov	r9, r1
    1606:	8c 0e       	add	r8, r28
    1608:	9d 1e       	adc	r9, r29
    160a:	f7 01       	movw	r30, r14
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	f6 01       	movw	r30, r12
    1610:	93 fd       	sbrc	r25, 3
    1612:	85 91       	lpm	r24, Z+
    1614:	93 ff       	sbrs	r25, 3
    1616:	81 91       	ld	r24, Z+
    1618:	6f 01       	movw	r12, r30
    161a:	88 23       	and	r24, r24
    161c:	09 f4       	brne	.+2      	; 0x1620 <vfprintf+0x60>
    161e:	a5 c1       	rjmp	.+842    	; 0x196a <vfprintf+0x3aa>
    1620:	85 32       	cpi	r24, 0x25	; 37
    1622:	39 f4       	brne	.+14     	; 0x1632 <vfprintf+0x72>
    1624:	93 fd       	sbrc	r25, 3
    1626:	85 91       	lpm	r24, Z+
    1628:	93 ff       	sbrs	r25, 3
    162a:	81 91       	ld	r24, Z+
    162c:	6f 01       	movw	r12, r30
    162e:	85 32       	cpi	r24, 0x25	; 37
    1630:	21 f4       	brne	.+8      	; 0x163a <vfprintf+0x7a>
    1632:	b7 01       	movw	r22, r14
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	cc d1       	rcall	.+920    	; 0x19d0 <fputc>
    1638:	e8 cf       	rjmp	.-48     	; 0x160a <vfprintf+0x4a>
    163a:	51 2c       	mov	r5, r1
    163c:	31 2c       	mov	r3, r1
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	20 32       	cpi	r18, 0x20	; 32
    1642:	a8 f4       	brcc	.+42     	; 0x166e <vfprintf+0xae>
    1644:	8b 32       	cpi	r24, 0x2B	; 43
    1646:	61 f0       	breq	.+24     	; 0x1660 <vfprintf+0xa0>
    1648:	28 f4       	brcc	.+10     	; 0x1654 <vfprintf+0x94>
    164a:	80 32       	cpi	r24, 0x20	; 32
    164c:	51 f0       	breq	.+20     	; 0x1662 <vfprintf+0xa2>
    164e:	83 32       	cpi	r24, 0x23	; 35
    1650:	71 f4       	brne	.+28     	; 0x166e <vfprintf+0xae>
    1652:	0b c0       	rjmp	.+22     	; 0x166a <vfprintf+0xaa>
    1654:	8d 32       	cpi	r24, 0x2D	; 45
    1656:	39 f0       	breq	.+14     	; 0x1666 <vfprintf+0xa6>
    1658:	80 33       	cpi	r24, 0x30	; 48
    165a:	49 f4       	brne	.+18     	; 0x166e <vfprintf+0xae>
    165c:	21 60       	ori	r18, 0x01	; 1
    165e:	28 c0       	rjmp	.+80     	; 0x16b0 <vfprintf+0xf0>
    1660:	22 60       	ori	r18, 0x02	; 2
    1662:	24 60       	ori	r18, 0x04	; 4
    1664:	25 c0       	rjmp	.+74     	; 0x16b0 <vfprintf+0xf0>
    1666:	28 60       	ori	r18, 0x08	; 8
    1668:	23 c0       	rjmp	.+70     	; 0x16b0 <vfprintf+0xf0>
    166a:	20 61       	ori	r18, 0x10	; 16
    166c:	21 c0       	rjmp	.+66     	; 0x16b0 <vfprintf+0xf0>
    166e:	27 fd       	sbrc	r18, 7
    1670:	27 c0       	rjmp	.+78     	; 0x16c0 <vfprintf+0x100>
    1672:	38 2f       	mov	r19, r24
    1674:	30 53       	subi	r19, 0x30	; 48
    1676:	3a 30       	cpi	r19, 0x0A	; 10
    1678:	78 f4       	brcc	.+30     	; 0x1698 <vfprintf+0xd8>
    167a:	26 ff       	sbrs	r18, 6
    167c:	06 c0       	rjmp	.+12     	; 0x168a <vfprintf+0xca>
    167e:	fa e0       	ldi	r31, 0x0A	; 10
    1680:	5f 9e       	mul	r5, r31
    1682:	30 0d       	add	r19, r0
    1684:	11 24       	eor	r1, r1
    1686:	53 2e       	mov	r5, r19
    1688:	13 c0       	rjmp	.+38     	; 0x16b0 <vfprintf+0xf0>
    168a:	8a e0       	ldi	r24, 0x0A	; 10
    168c:	38 9e       	mul	r3, r24
    168e:	30 0d       	add	r19, r0
    1690:	11 24       	eor	r1, r1
    1692:	33 2e       	mov	r3, r19
    1694:	20 62       	ori	r18, 0x20	; 32
    1696:	0c c0       	rjmp	.+24     	; 0x16b0 <vfprintf+0xf0>
    1698:	8e 32       	cpi	r24, 0x2E	; 46
    169a:	21 f4       	brne	.+8      	; 0x16a4 <vfprintf+0xe4>
    169c:	26 fd       	sbrc	r18, 6
    169e:	65 c1       	rjmp	.+714    	; 0x196a <vfprintf+0x3aa>
    16a0:	20 64       	ori	r18, 0x40	; 64
    16a2:	06 c0       	rjmp	.+12     	; 0x16b0 <vfprintf+0xf0>
    16a4:	8c 36       	cpi	r24, 0x6C	; 108
    16a6:	11 f4       	brne	.+4      	; 0x16ac <vfprintf+0xec>
    16a8:	20 68       	ori	r18, 0x80	; 128
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <vfprintf+0xf0>
    16ac:	88 36       	cpi	r24, 0x68	; 104
    16ae:	41 f4       	brne	.+16     	; 0x16c0 <vfprintf+0x100>
    16b0:	f6 01       	movw	r30, r12
    16b2:	93 fd       	sbrc	r25, 3
    16b4:	85 91       	lpm	r24, Z+
    16b6:	93 ff       	sbrs	r25, 3
    16b8:	81 91       	ld	r24, Z+
    16ba:	6f 01       	movw	r12, r30
    16bc:	81 11       	cpse	r24, r1
    16be:	c0 cf       	rjmp	.-128    	; 0x1640 <vfprintf+0x80>
    16c0:	98 2f       	mov	r25, r24
    16c2:	95 54       	subi	r25, 0x45	; 69
    16c4:	93 30       	cpi	r25, 0x03	; 3
    16c6:	18 f0       	brcs	.+6      	; 0x16ce <vfprintf+0x10e>
    16c8:	90 52       	subi	r25, 0x20	; 32
    16ca:	93 30       	cpi	r25, 0x03	; 3
    16cc:	28 f4       	brcc	.+10     	; 0x16d8 <vfprintf+0x118>
    16ce:	0c 5f       	subi	r16, 0xFC	; 252
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	ff e3       	ldi	r31, 0x3F	; 63
    16d4:	f9 83       	std	Y+1, r31	; 0x01
    16d6:	0d c0       	rjmp	.+26     	; 0x16f2 <vfprintf+0x132>
    16d8:	83 36       	cpi	r24, 0x63	; 99
    16da:	31 f0       	breq	.+12     	; 0x16e8 <vfprintf+0x128>
    16dc:	83 37       	cpi	r24, 0x73	; 115
    16de:	71 f0       	breq	.+28     	; 0x16fc <vfprintf+0x13c>
    16e0:	83 35       	cpi	r24, 0x53	; 83
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <vfprintf+0x126>
    16e4:	5a c0       	rjmp	.+180    	; 0x179a <vfprintf+0x1da>
    16e6:	22 c0       	rjmp	.+68     	; 0x172c <vfprintf+0x16c>
    16e8:	f8 01       	movw	r30, r16
    16ea:	80 81       	ld	r24, Z
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	0e 5f       	subi	r16, 0xFE	; 254
    16f0:	1f 4f       	sbci	r17, 0xFF	; 255
    16f2:	44 24       	eor	r4, r4
    16f4:	43 94       	inc	r4
    16f6:	51 2c       	mov	r5, r1
    16f8:	54 01       	movw	r10, r8
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <vfprintf+0x164>
    16fc:	38 01       	movw	r6, r16
    16fe:	f2 e0       	ldi	r31, 0x02	; 2
    1700:	6f 0e       	add	r6, r31
    1702:	71 1c       	adc	r7, r1
    1704:	f8 01       	movw	r30, r16
    1706:	a0 80       	ld	r10, Z
    1708:	b1 80       	ldd	r11, Z+1	; 0x01
    170a:	26 ff       	sbrs	r18, 6
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <vfprintf+0x154>
    170e:	65 2d       	mov	r22, r5
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x158>
    1714:	6f ef       	ldi	r22, 0xFF	; 255
    1716:	7f ef       	ldi	r23, 0xFF	; 255
    1718:	c5 01       	movw	r24, r10
    171a:	2c 87       	std	Y+12, r18	; 0x0c
    171c:	4e d1       	rcall	.+668    	; 0x19ba <strnlen>
    171e:	2c 01       	movw	r4, r24
    1720:	83 01       	movw	r16, r6
    1722:	2c 85       	ldd	r18, Y+12	; 0x0c
    1724:	6f e7       	ldi	r22, 0x7F	; 127
    1726:	26 2e       	mov	r2, r22
    1728:	22 22       	and	r2, r18
    172a:	17 c0       	rjmp	.+46     	; 0x175a <vfprintf+0x19a>
    172c:	38 01       	movw	r6, r16
    172e:	f2 e0       	ldi	r31, 0x02	; 2
    1730:	6f 0e       	add	r6, r31
    1732:	71 1c       	adc	r7, r1
    1734:	f8 01       	movw	r30, r16
    1736:	a0 80       	ld	r10, Z
    1738:	b1 80       	ldd	r11, Z+1	; 0x01
    173a:	26 ff       	sbrs	r18, 6
    173c:	03 c0       	rjmp	.+6      	; 0x1744 <vfprintf+0x184>
    173e:	65 2d       	mov	r22, r5
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <vfprintf+0x188>
    1744:	6f ef       	ldi	r22, 0xFF	; 255
    1746:	7f ef       	ldi	r23, 0xFF	; 255
    1748:	c5 01       	movw	r24, r10
    174a:	2c 87       	std	Y+12, r18	; 0x0c
    174c:	2b d1       	rcall	.+598    	; 0x19a4 <strnlen_P>
    174e:	2c 01       	movw	r4, r24
    1750:	2c 85       	ldd	r18, Y+12	; 0x0c
    1752:	50 e8       	ldi	r21, 0x80	; 128
    1754:	25 2e       	mov	r2, r21
    1756:	22 2a       	or	r2, r18
    1758:	83 01       	movw	r16, r6
    175a:	23 fc       	sbrc	r2, 3
    175c:	1a c0       	rjmp	.+52     	; 0x1792 <vfprintf+0x1d2>
    175e:	05 c0       	rjmp	.+10     	; 0x176a <vfprintf+0x1aa>
    1760:	b7 01       	movw	r22, r14
    1762:	80 e2       	ldi	r24, 0x20	; 32
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	34 d1       	rcall	.+616    	; 0x19d0 <fputc>
    1768:	3a 94       	dec	r3
    176a:	83 2d       	mov	r24, r3
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	48 16       	cp	r4, r24
    1770:	59 06       	cpc	r5, r25
    1772:	b0 f3       	brcs	.-20     	; 0x1760 <vfprintf+0x1a0>
    1774:	0e c0       	rjmp	.+28     	; 0x1792 <vfprintf+0x1d2>
    1776:	f5 01       	movw	r30, r10
    1778:	27 fc       	sbrc	r2, 7
    177a:	85 91       	lpm	r24, Z+
    177c:	27 fe       	sbrs	r2, 7
    177e:	81 91       	ld	r24, Z+
    1780:	5f 01       	movw	r10, r30
    1782:	b7 01       	movw	r22, r14
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	24 d1       	rcall	.+584    	; 0x19d0 <fputc>
    1788:	31 10       	cpse	r3, r1
    178a:	3a 94       	dec	r3
    178c:	f1 e0       	ldi	r31, 0x01	; 1
    178e:	4f 1a       	sub	r4, r31
    1790:	51 08       	sbc	r5, r1
    1792:	41 14       	cp	r4, r1
    1794:	51 04       	cpc	r5, r1
    1796:	79 f7       	brne	.-34     	; 0x1776 <vfprintf+0x1b6>
    1798:	e5 c0       	rjmp	.+458    	; 0x1964 <vfprintf+0x3a4>
    179a:	84 36       	cpi	r24, 0x64	; 100
    179c:	11 f0       	breq	.+4      	; 0x17a2 <vfprintf+0x1e2>
    179e:	89 36       	cpi	r24, 0x69	; 105
    17a0:	39 f5       	brne	.+78     	; 0x17f0 <vfprintf+0x230>
    17a2:	f8 01       	movw	r30, r16
    17a4:	27 ff       	sbrs	r18, 7
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <vfprintf+0x1f6>
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	0c 5f       	subi	r16, 0xFC	; 252
    17b2:	1f 4f       	sbci	r17, 0xFF	; 255
    17b4:	08 c0       	rjmp	.+16     	; 0x17c6 <vfprintf+0x206>
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	88 27       	eor	r24, r24
    17bc:	77 fd       	sbrc	r23, 7
    17be:	80 95       	com	r24
    17c0:	98 2f       	mov	r25, r24
    17c2:	0e 5f       	subi	r16, 0xFE	; 254
    17c4:	1f 4f       	sbci	r17, 0xFF	; 255
    17c6:	4f e6       	ldi	r20, 0x6F	; 111
    17c8:	b4 2e       	mov	r11, r20
    17ca:	b2 22       	and	r11, r18
    17cc:	97 ff       	sbrs	r25, 7
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <vfprintf+0x222>
    17d0:	90 95       	com	r25
    17d2:	80 95       	com	r24
    17d4:	70 95       	com	r23
    17d6:	61 95       	neg	r22
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	8f 4f       	sbci	r24, 0xFF	; 255
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	f0 e8       	ldi	r31, 0x80	; 128
    17e0:	bf 2a       	or	r11, r31
    17e2:	2a e0       	ldi	r18, 0x0A	; 10
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	a4 01       	movw	r20, r8
    17e8:	1f d1       	rcall	.+574    	; 0x1a28 <__ultoa_invert>
    17ea:	a8 2e       	mov	r10, r24
    17ec:	a8 18       	sub	r10, r8
    17ee:	42 c0       	rjmp	.+132    	; 0x1874 <vfprintf+0x2b4>
    17f0:	85 37       	cpi	r24, 0x75	; 117
    17f2:	31 f4       	brne	.+12     	; 0x1800 <vfprintf+0x240>
    17f4:	3f ee       	ldi	r19, 0xEF	; 239
    17f6:	b3 2e       	mov	r11, r19
    17f8:	b2 22       	and	r11, r18
    17fa:	2a e0       	ldi	r18, 0x0A	; 10
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	24 c0       	rjmp	.+72     	; 0x1848 <vfprintf+0x288>
    1800:	99 ef       	ldi	r25, 0xF9	; 249
    1802:	b9 2e       	mov	r11, r25
    1804:	b2 22       	and	r11, r18
    1806:	8f 36       	cpi	r24, 0x6F	; 111
    1808:	b9 f0       	breq	.+46     	; 0x1838 <vfprintf+0x278>
    180a:	20 f4       	brcc	.+8      	; 0x1814 <vfprintf+0x254>
    180c:	88 35       	cpi	r24, 0x58	; 88
    180e:	09 f0       	breq	.+2      	; 0x1812 <vfprintf+0x252>
    1810:	ac c0       	rjmp	.+344    	; 0x196a <vfprintf+0x3aa>
    1812:	0d c0       	rjmp	.+26     	; 0x182e <vfprintf+0x26e>
    1814:	80 37       	cpi	r24, 0x70	; 112
    1816:	21 f0       	breq	.+8      	; 0x1820 <vfprintf+0x260>
    1818:	88 37       	cpi	r24, 0x78	; 120
    181a:	09 f0       	breq	.+2      	; 0x181e <vfprintf+0x25e>
    181c:	a6 c0       	rjmp	.+332    	; 0x196a <vfprintf+0x3aa>
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <vfprintf+0x264>
    1820:	20 e1       	ldi	r18, 0x10	; 16
    1822:	b2 2a       	or	r11, r18
    1824:	b4 fe       	sbrs	r11, 4
    1826:	0b c0       	rjmp	.+22     	; 0x183e <vfprintf+0x27e>
    1828:	84 e0       	ldi	r24, 0x04	; 4
    182a:	b8 2a       	or	r11, r24
    182c:	08 c0       	rjmp	.+16     	; 0x183e <vfprintf+0x27e>
    182e:	24 ff       	sbrs	r18, 4
    1830:	09 c0       	rjmp	.+18     	; 0x1844 <vfprintf+0x284>
    1832:	e6 e0       	ldi	r30, 0x06	; 6
    1834:	be 2a       	or	r11, r30
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <vfprintf+0x284>
    1838:	28 e0       	ldi	r18, 0x08	; 8
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <vfprintf+0x288>
    183e:	20 e1       	ldi	r18, 0x10	; 16
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <vfprintf+0x288>
    1844:	20 e1       	ldi	r18, 0x10	; 16
    1846:	32 e0       	ldi	r19, 0x02	; 2
    1848:	f8 01       	movw	r30, r16
    184a:	b7 fe       	sbrs	r11, 7
    184c:	07 c0       	rjmp	.+14     	; 0x185c <vfprintf+0x29c>
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	0c 5f       	subi	r16, 0xFC	; 252
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <vfprintf+0x2a8>
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 5f       	subi	r16, 0xFE	; 254
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	a4 01       	movw	r20, r8
    186a:	de d0       	rcall	.+444    	; 0x1a28 <__ultoa_invert>
    186c:	a8 2e       	mov	r10, r24
    186e:	a8 18       	sub	r10, r8
    1870:	ff e7       	ldi	r31, 0x7F	; 127
    1872:	bf 22       	and	r11, r31
    1874:	b6 fe       	sbrs	r11, 6
    1876:	0b c0       	rjmp	.+22     	; 0x188e <vfprintf+0x2ce>
    1878:	2b 2d       	mov	r18, r11
    187a:	2e 7f       	andi	r18, 0xFE	; 254
    187c:	a5 14       	cp	r10, r5
    187e:	50 f4       	brcc	.+20     	; 0x1894 <vfprintf+0x2d4>
    1880:	b4 fe       	sbrs	r11, 4
    1882:	0a c0       	rjmp	.+20     	; 0x1898 <vfprintf+0x2d8>
    1884:	b2 fc       	sbrc	r11, 2
    1886:	08 c0       	rjmp	.+16     	; 0x1898 <vfprintf+0x2d8>
    1888:	2b 2d       	mov	r18, r11
    188a:	2e 7e       	andi	r18, 0xEE	; 238
    188c:	05 c0       	rjmp	.+10     	; 0x1898 <vfprintf+0x2d8>
    188e:	7a 2c       	mov	r7, r10
    1890:	2b 2d       	mov	r18, r11
    1892:	03 c0       	rjmp	.+6      	; 0x189a <vfprintf+0x2da>
    1894:	7a 2c       	mov	r7, r10
    1896:	01 c0       	rjmp	.+2      	; 0x189a <vfprintf+0x2da>
    1898:	75 2c       	mov	r7, r5
    189a:	24 ff       	sbrs	r18, 4
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <vfprintf+0x2f8>
    189e:	fe 01       	movw	r30, r28
    18a0:	ea 0d       	add	r30, r10
    18a2:	f1 1d       	adc	r31, r1
    18a4:	80 81       	ld	r24, Z
    18a6:	80 33       	cpi	r24, 0x30	; 48
    18a8:	11 f4       	brne	.+4      	; 0x18ae <vfprintf+0x2ee>
    18aa:	29 7e       	andi	r18, 0xE9	; 233
    18ac:	09 c0       	rjmp	.+18     	; 0x18c0 <vfprintf+0x300>
    18ae:	22 ff       	sbrs	r18, 2
    18b0:	06 c0       	rjmp	.+12     	; 0x18be <vfprintf+0x2fe>
    18b2:	73 94       	inc	r7
    18b4:	73 94       	inc	r7
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <vfprintf+0x300>
    18b8:	82 2f       	mov	r24, r18
    18ba:	86 78       	andi	r24, 0x86	; 134
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <vfprintf+0x300>
    18be:	73 94       	inc	r7
    18c0:	23 fd       	sbrc	r18, 3
    18c2:	13 c0       	rjmp	.+38     	; 0x18ea <vfprintf+0x32a>
    18c4:	20 ff       	sbrs	r18, 0
    18c6:	0e c0       	rjmp	.+28     	; 0x18e4 <vfprintf+0x324>
    18c8:	5a 2c       	mov	r5, r10
    18ca:	73 14       	cp	r7, r3
    18cc:	58 f4       	brcc	.+22     	; 0x18e4 <vfprintf+0x324>
    18ce:	53 0c       	add	r5, r3
    18d0:	57 18       	sub	r5, r7
    18d2:	73 2c       	mov	r7, r3
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <vfprintf+0x324>
    18d6:	b7 01       	movw	r22, r14
    18d8:	80 e2       	ldi	r24, 0x20	; 32
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	2c 87       	std	Y+12, r18	; 0x0c
    18de:	78 d0       	rcall	.+240    	; 0x19d0 <fputc>
    18e0:	73 94       	inc	r7
    18e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    18e4:	73 14       	cp	r7, r3
    18e6:	b8 f3       	brcs	.-18     	; 0x18d6 <vfprintf+0x316>
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <vfprintf+0x332>
    18ea:	73 14       	cp	r7, r3
    18ec:	10 f4       	brcc	.+4      	; 0x18f2 <vfprintf+0x332>
    18ee:	37 18       	sub	r3, r7
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <vfprintf+0x334>
    18f2:	31 2c       	mov	r3, r1
    18f4:	24 ff       	sbrs	r18, 4
    18f6:	11 c0       	rjmp	.+34     	; 0x191a <vfprintf+0x35a>
    18f8:	b7 01       	movw	r22, r14
    18fa:	80 e3       	ldi	r24, 0x30	; 48
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	2c 87       	std	Y+12, r18	; 0x0c
    1900:	67 d0       	rcall	.+206    	; 0x19d0 <fputc>
    1902:	2c 85       	ldd	r18, Y+12	; 0x0c
    1904:	22 ff       	sbrs	r18, 2
    1906:	1c c0       	rjmp	.+56     	; 0x1940 <vfprintf+0x380>
    1908:	21 ff       	sbrs	r18, 1
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <vfprintf+0x352>
    190c:	88 e5       	ldi	r24, 0x58	; 88
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <vfprintf+0x356>
    1912:	88 e7       	ldi	r24, 0x78	; 120
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	b7 01       	movw	r22, r14
    1918:	0c c0       	rjmp	.+24     	; 0x1932 <vfprintf+0x372>
    191a:	82 2f       	mov	r24, r18
    191c:	86 78       	andi	r24, 0x86	; 134
    191e:	81 f0       	breq	.+32     	; 0x1940 <vfprintf+0x380>
    1920:	21 fd       	sbrc	r18, 1
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <vfprintf+0x368>
    1924:	80 e2       	ldi	r24, 0x20	; 32
    1926:	01 c0       	rjmp	.+2      	; 0x192a <vfprintf+0x36a>
    1928:	8b e2       	ldi	r24, 0x2B	; 43
    192a:	27 fd       	sbrc	r18, 7
    192c:	8d e2       	ldi	r24, 0x2D	; 45
    192e:	b7 01       	movw	r22, r14
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	4e d0       	rcall	.+156    	; 0x19d0 <fputc>
    1934:	05 c0       	rjmp	.+10     	; 0x1940 <vfprintf+0x380>
    1936:	b7 01       	movw	r22, r14
    1938:	80 e3       	ldi	r24, 0x30	; 48
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	49 d0       	rcall	.+146    	; 0x19d0 <fputc>
    193e:	5a 94       	dec	r5
    1940:	a5 14       	cp	r10, r5
    1942:	c8 f3       	brcs	.-14     	; 0x1936 <vfprintf+0x376>
    1944:	aa 94       	dec	r10
    1946:	f4 01       	movw	r30, r8
    1948:	ea 0d       	add	r30, r10
    194a:	f1 1d       	adc	r31, r1
    194c:	b7 01       	movw	r22, r14
    194e:	80 81       	ld	r24, Z
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	3e d0       	rcall	.+124    	; 0x19d0 <fputc>
    1954:	a1 10       	cpse	r10, r1
    1956:	f6 cf       	rjmp	.-20     	; 0x1944 <vfprintf+0x384>
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <vfprintf+0x3a4>
    195a:	b7 01       	movw	r22, r14
    195c:	80 e2       	ldi	r24, 0x20	; 32
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	37 d0       	rcall	.+110    	; 0x19d0 <fputc>
    1962:	3a 94       	dec	r3
    1964:	31 10       	cpse	r3, r1
    1966:	f9 cf       	rjmp	.-14     	; 0x195a <vfprintf+0x39a>
    1968:	50 ce       	rjmp	.-864    	; 0x160a <vfprintf+0x4a>
    196a:	f7 01       	movw	r30, r14
    196c:	26 81       	ldd	r18, Z+6	; 0x06
    196e:	37 81       	ldd	r19, Z+7	; 0x07
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <vfprintf+0x3b6>
    1972:	2f ef       	ldi	r18, 0xFF	; 255
    1974:	3f ef       	ldi	r19, 0xFF	; 255
    1976:	c9 01       	movw	r24, r18
    1978:	2c 96       	adiw	r28, 0x0c	; 12
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	ff 90       	pop	r15
    1988:	ef 90       	pop	r14
    198a:	df 90       	pop	r13
    198c:	cf 90       	pop	r12
    198e:	bf 90       	pop	r11
    1990:	af 90       	pop	r10
    1992:	9f 90       	pop	r9
    1994:	8f 90       	pop	r8
    1996:	7f 90       	pop	r7
    1998:	6f 90       	pop	r6
    199a:	5f 90       	pop	r5
    199c:	4f 90       	pop	r4
    199e:	3f 90       	pop	r3
    19a0:	2f 90       	pop	r2
    19a2:	08 95       	ret

000019a4 <strnlen_P>:
    19a4:	fc 01       	movw	r30, r24
    19a6:	05 90       	lpm	r0, Z+
    19a8:	61 50       	subi	r22, 0x01	; 1
    19aa:	70 40       	sbci	r23, 0x00	; 0
    19ac:	01 10       	cpse	r0, r1
    19ae:	d8 f7       	brcc	.-10     	; 0x19a6 <strnlen_P+0x2>
    19b0:	80 95       	com	r24
    19b2:	90 95       	com	r25
    19b4:	8e 0f       	add	r24, r30
    19b6:	9f 1f       	adc	r25, r31
    19b8:	08 95       	ret

000019ba <strnlen>:
    19ba:	fc 01       	movw	r30, r24
    19bc:	61 50       	subi	r22, 0x01	; 1
    19be:	70 40       	sbci	r23, 0x00	; 0
    19c0:	01 90       	ld	r0, Z+
    19c2:	01 10       	cpse	r0, r1
    19c4:	d8 f7       	brcc	.-10     	; 0x19bc <strnlen+0x2>
    19c6:	80 95       	com	r24
    19c8:	90 95       	com	r25
    19ca:	8e 0f       	add	r24, r30
    19cc:	9f 1f       	adc	r25, r31
    19ce:	08 95       	ret

000019d0 <fputc>:
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	8c 01       	movw	r16, r24
    19da:	eb 01       	movw	r28, r22
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	81 fd       	sbrc	r24, 1
    19e0:	03 c0       	rjmp	.+6      	; 0x19e8 <fputc+0x18>
    19e2:	0f ef       	ldi	r16, 0xFF	; 255
    19e4:	1f ef       	ldi	r17, 0xFF	; 255
    19e6:	1a c0       	rjmp	.+52     	; 0x1a1c <fputc+0x4c>
    19e8:	82 ff       	sbrs	r24, 2
    19ea:	0d c0       	rjmp	.+26     	; 0x1a06 <fputc+0x36>
    19ec:	2e 81       	ldd	r18, Y+6	; 0x06
    19ee:	3f 81       	ldd	r19, Y+7	; 0x07
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	9d 81       	ldd	r25, Y+5	; 0x05
    19f4:	28 17       	cp	r18, r24
    19f6:	39 07       	cpc	r19, r25
    19f8:	64 f4       	brge	.+24     	; 0x1a12 <fputc+0x42>
    19fa:	e8 81       	ld	r30, Y
    19fc:	f9 81       	ldd	r31, Y+1	; 0x01
    19fe:	01 93       	st	Z+, r16
    1a00:	e8 83       	st	Y, r30
    1a02:	f9 83       	std	Y+1, r31	; 0x01
    1a04:	06 c0       	rjmp	.+12     	; 0x1a12 <fputc+0x42>
    1a06:	e8 85       	ldd	r30, Y+8	; 0x08
    1a08:	f9 85       	ldd	r31, Y+9	; 0x09
    1a0a:	80 2f       	mov	r24, r16
    1a0c:	19 95       	eicall
    1a0e:	89 2b       	or	r24, r25
    1a10:	41 f7       	brne	.-48     	; 0x19e2 <fputc+0x12>
    1a12:	8e 81       	ldd	r24, Y+6	; 0x06
    1a14:	9f 81       	ldd	r25, Y+7	; 0x07
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	8e 83       	std	Y+6, r24	; 0x06
    1a1a:	9f 83       	std	Y+7, r25	; 0x07
    1a1c:	c8 01       	movw	r24, r16
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	08 95       	ret

00001a28 <__ultoa_invert>:
    1a28:	fa 01       	movw	r30, r20
    1a2a:	aa 27       	eor	r26, r26
    1a2c:	28 30       	cpi	r18, 0x08	; 8
    1a2e:	51 f1       	breq	.+84     	; 0x1a84 <__ultoa_invert+0x5c>
    1a30:	20 31       	cpi	r18, 0x10	; 16
    1a32:	81 f1       	breq	.+96     	; 0x1a94 <__ultoa_invert+0x6c>
    1a34:	e8 94       	clt
    1a36:	6f 93       	push	r22
    1a38:	6e 7f       	andi	r22, 0xFE	; 254
    1a3a:	6e 5f       	subi	r22, 0xFE	; 254
    1a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a40:	9f 4f       	sbci	r25, 0xFF	; 255
    1a42:	af 4f       	sbci	r26, 0xFF	; 255
    1a44:	b1 e0       	ldi	r27, 0x01	; 1
    1a46:	3e d0       	rcall	.+124    	; 0x1ac4 <__ultoa_invert+0x9c>
    1a48:	b4 e0       	ldi	r27, 0x04	; 4
    1a4a:	3c d0       	rcall	.+120    	; 0x1ac4 <__ultoa_invert+0x9c>
    1a4c:	67 0f       	add	r22, r23
    1a4e:	78 1f       	adc	r23, r24
    1a50:	89 1f       	adc	r24, r25
    1a52:	9a 1f       	adc	r25, r26
    1a54:	a1 1d       	adc	r26, r1
    1a56:	68 0f       	add	r22, r24
    1a58:	79 1f       	adc	r23, r25
    1a5a:	8a 1f       	adc	r24, r26
    1a5c:	91 1d       	adc	r25, r1
    1a5e:	a1 1d       	adc	r26, r1
    1a60:	6a 0f       	add	r22, r26
    1a62:	71 1d       	adc	r23, r1
    1a64:	81 1d       	adc	r24, r1
    1a66:	91 1d       	adc	r25, r1
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	20 d0       	rcall	.+64     	; 0x1aac <__ultoa_invert+0x84>
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <__ultoa_invert+0x48>
    1a6e:	68 94       	set
    1a70:	3f 91       	pop	r19
    1a72:	2a e0       	ldi	r18, 0x0A	; 10
    1a74:	26 9f       	mul	r18, r22
    1a76:	11 24       	eor	r1, r1
    1a78:	30 19       	sub	r19, r0
    1a7a:	30 5d       	subi	r19, 0xD0	; 208
    1a7c:	31 93       	st	Z+, r19
    1a7e:	de f6       	brtc	.-74     	; 0x1a36 <__ultoa_invert+0xe>
    1a80:	cf 01       	movw	r24, r30
    1a82:	08 95       	ret
    1a84:	46 2f       	mov	r20, r22
    1a86:	47 70       	andi	r20, 0x07	; 7
    1a88:	40 5d       	subi	r20, 0xD0	; 208
    1a8a:	41 93       	st	Z+, r20
    1a8c:	b3 e0       	ldi	r27, 0x03	; 3
    1a8e:	0f d0       	rcall	.+30     	; 0x1aae <__ultoa_invert+0x86>
    1a90:	c9 f7       	brne	.-14     	; 0x1a84 <__ultoa_invert+0x5c>
    1a92:	f6 cf       	rjmp	.-20     	; 0x1a80 <__ultoa_invert+0x58>
    1a94:	46 2f       	mov	r20, r22
    1a96:	4f 70       	andi	r20, 0x0F	; 15
    1a98:	40 5d       	subi	r20, 0xD0	; 208
    1a9a:	4a 33       	cpi	r20, 0x3A	; 58
    1a9c:	18 f0       	brcs	.+6      	; 0x1aa4 <__ultoa_invert+0x7c>
    1a9e:	49 5d       	subi	r20, 0xD9	; 217
    1aa0:	31 fd       	sbrc	r19, 1
    1aa2:	40 52       	subi	r20, 0x20	; 32
    1aa4:	41 93       	st	Z+, r20
    1aa6:	02 d0       	rcall	.+4      	; 0x1aac <__ultoa_invert+0x84>
    1aa8:	a9 f7       	brne	.-22     	; 0x1a94 <__ultoa_invert+0x6c>
    1aaa:	ea cf       	rjmp	.-44     	; 0x1a80 <__ultoa_invert+0x58>
    1aac:	b4 e0       	ldi	r27, 0x04	; 4
    1aae:	a6 95       	lsr	r26
    1ab0:	97 95       	ror	r25
    1ab2:	87 95       	ror	r24
    1ab4:	77 95       	ror	r23
    1ab6:	67 95       	ror	r22
    1ab8:	ba 95       	dec	r27
    1aba:	c9 f7       	brne	.-14     	; 0x1aae <__ultoa_invert+0x86>
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	61 05       	cpc	r22, r1
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	08 95       	ret
    1ac4:	9b 01       	movw	r18, r22
    1ac6:	ac 01       	movw	r20, r24
    1ac8:	0a 2e       	mov	r0, r26
    1aca:	06 94       	lsr	r0
    1acc:	57 95       	ror	r21
    1ace:	47 95       	ror	r20
    1ad0:	37 95       	ror	r19
    1ad2:	27 95       	ror	r18
    1ad4:	ba 95       	dec	r27
    1ad6:	c9 f7       	brne	.-14     	; 0x1aca <__ultoa_invert+0xa2>
    1ad8:	62 0f       	add	r22, r18
    1ada:	73 1f       	adc	r23, r19
    1adc:	84 1f       	adc	r24, r20
    1ade:	95 1f       	adc	r25, r21
    1ae0:	a0 1d       	adc	r26, r0
    1ae2:	08 95       	ret

00001ae4 <_exit>:
    1ae4:	f8 94       	cli

00001ae6 <__stop_program>:
    1ae6:	ff cf       	rjmp	.-2      	; 0x1ae6 <__stop_program>
