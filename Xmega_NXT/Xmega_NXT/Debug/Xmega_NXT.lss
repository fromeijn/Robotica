
Xmega_NXT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00802000  00001d2a  00001dbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004a7  0080206e  0080206e  00001e2c  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a29  00000000  00000000  00004934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000535d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002a0  00000000  00000000  0000538c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004dbf  00000000  00000000  0000562c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f97  00000000  00000000  0000a3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b11  00000000  00000000  0000b382  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a64  00000000  00000000  0000ce94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002f8a  00000000  00000000  0000d8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000029e6  00000000  00000000  00010882  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000220  00000000  00000000  00013268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	6f c2       	rjmp	.+1246   	; 0x4e8 <__vector_2>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	27 c2       	rjmp	.+1102   	; 0x480 <__vector_12>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c2       	rjmp	.+1214   	; 0x510 <__vector_20>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
      66:	00 00       	nop
      68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c1       	rjmp	.+622    	; 0x2e0 <__vector_28>
      72:	00 00       	nop
      74:	69 c1       	rjmp	.+722    	; 0x348 <__vector_29>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	bf c3       	rjmp	.+1918   	; 0x83c <__vector_47>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ff c2       	rjmp	.+1534   	; 0x71c <__vector_71>
     11e:	00 00       	nop
     120:	21 c3       	rjmp	.+1602   	; 0x764 <__vector_72>
     122:	00 00       	nop
     124:	43 c3       	rjmp	.+1670   	; 0x7ac <__vector_73>
     126:	00 00       	nop
     128:	65 c3       	rjmp	.+1738   	; 0x7f4 <__vector_74>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	67 c2       	rjmp	.+1230   	; 0x60c <__vector_79>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	9f c2       	rjmp	.+1342   	; 0x694 <__vector_85>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	27 c1       	rjmp	.+590    	; 0x3b0 <__vector_88>
     162:	00 00       	nop
     164:	59 c1       	rjmp	.+690    	; 0x418 <__vector_89>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e3       	ldi	r29, 0x3F	; 63
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea e2       	ldi	r30, 0x2A	; 42
     21c:	fd e1       	ldi	r31, 0x1D	; 29
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ae 36       	cpi	r26, 0x6E	; 110
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	25 e2       	ldi	r18, 0x25	; 37
     232:	ae e6       	ldi	r26, 0x6E	; 110
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a5 31       	cpi	r26, 0x15	; 21
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	1f d4       	rcall	.+2110   	; 0xa80 <main>
     242:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     248:	0f 93       	push	r16
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	2f b7       	in	r18, 0x3f	; 63
     256:	29 83       	std	Y+1, r18	; 0x01
     258:	f8 94       	cli
     25a:	1b be       	out	0x3b, r1	; 59
     25c:	fc 01       	movw	r30, r24
     25e:	08 ed       	ldi	r16, 0xD8	; 216
     260:	04 bf       	out	0x34, r16	; 52
     262:	60 83       	st	Z, r22
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	8f bf       	out	0x3f, r24	; 63
     268:	0f 90       	pop	r0
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	0f 91       	pop	r16
     270:	08 95       	ret

00000272 <CLKSYS_Disable>:
     272:	e0 e5       	ldi	r30, 0x50	; 80
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	90 81       	ld	r25, Z
     278:	28 2f       	mov	r18, r24
     27a:	20 95       	com	r18
     27c:	92 23       	and	r25, r18
     27e:	90 83       	st	Z, r25
     280:	90 81       	ld	r25, Z
     282:	89 23       	and	r24, r25
     284:	08 95       	ret

00000286 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     28e:	c0 e4       	ldi	r28, 0x40	; 64
     290:	d0 e0       	ldi	r29, 0x00	; 0
     292:	68 81       	ld	r22, Y
     294:	68 7f       	andi	r22, 0xF8	; 248
     296:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     298:	80 e4       	ldi	r24, 0x40	; 64
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	d5 df       	rcall	.-86     	; 0x248 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     29e:	88 81       	ld	r24, Y
	return clkCtrl;
}
     2a0:	81 23       	and	r24, r17
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <TWIC_SlaveProcessData>:
	}
}

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
     2aa:	e0 91 7f 21 	lds	r30, 0x217F
	
	for(uint8_t i = 0; i < 16; i++) //give the right information back
	{
		twiSlave.sendData[i] = TWIOut[i+askbyte];
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
		PORTE.OUTCLR = PIN3_bm;
		sonarSwitch = 1;
	}
}

void TWIC_SlaveProcessData(void)
     2b0:	e5 5f       	subi	r30, 0xF5	; 245
     2b2:	fc 4d       	sbci	r31, 0xDC	; 220
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t askbyte = twiSlave.receivedData[0];
	
	for(uint8_t i = 0; i < 16; i++) //give the right information back
	{
		twiSlave.sendData[i] = TWIOut[i+askbyte];
     2b8:	21 91       	ld	r18, Z+
     2ba:	dc 01       	movw	r26, r24
     2bc:	a1 54       	subi	r26, 0x41	; 65
     2be:	be 4d       	sbci	r27, 0xDE	; 222
     2c0:	2c 93       	st	X, r18
     2c2:	01 96       	adiw	r24, 0x01	; 1

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
	
	for(uint8_t i = 0; i < 16; i++) //give the right information back
     2c4:	80 31       	cpi	r24, 0x10	; 16
     2c6:	91 05       	cpc	r25, r1
     2c8:	b9 f7       	brne	.-18     	; 0x2b8 <TWIC_SlaveProcessData+0xe>
	{
		twiSlave.sendData[i] = TWIOut[i+askbyte];
	}
	
	if(twiSlave.receivedData[0] == RFID_DETECT_RESET_ADDRES) TWIOut[RFID_DETECT_ADDRESS] = 0; //card has been read
     2ca:	80 91 7f 21 	lds	r24, 0x217F
     2ce:	80 31       	cpi	r24, 0x10	; 16
     2d0:	11 f4       	brne	.+4      	; 0x2d6 <TWIC_SlaveProcessData+0x2c>
     2d2:	10 92 0b 23 	sts	0x230B, r1
	
	PORTE.OUTTGL = PIN0_bm;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	e0 e8       	ldi	r30, 0x80	; 128
     2da:	f6 e0       	ldi	r31, 0x06	; 6
     2dc:	87 83       	std	Z+7, r24	; 0x07
     2de:	08 95       	ret

000002e0 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	08 b6       	in	r0, 0x38	; 56
     2ec:	0f 92       	push	r0
     2ee:	18 be       	out	0x38, r1	; 56
     2f0:	09 b6       	in	r0, 0x39	; 57
     2f2:	0f 92       	push	r0
     2f4:	19 be       	out	0x39, r1	; 57
     2f6:	0b b6       	in	r0, 0x3b	; 59
     2f8:	0f 92       	push	r0
     2fa:	1b be       	out	0x3b, r1	; 59
     2fc:	2f 93       	push	r18
     2fe:	3f 93       	push	r19
     300:	4f 93       	push	r20
     302:	5f 93       	push	r21
     304:	6f 93       	push	r22
     306:	7f 93       	push	r23
     308:	8f 93       	push	r24
     30a:	9f 93       	push	r25
     30c:	af 93       	push	r26
     30e:	bf 93       	push	r27
     310:	ef 93       	push	r30
     312:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     314:	84 e0       	ldi	r24, 0x04	; 4
     316:	92 e2       	ldi	r25, 0x22	; 34
     318:	c7 d7       	rcall	.+3982   	; 0x12a8 <USART_RXComplete>
}
     31a:	ff 91       	pop	r31
     31c:	ef 91       	pop	r30
     31e:	bf 91       	pop	r27
     320:	af 91       	pop	r26
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	7f 91       	pop	r23
     328:	6f 91       	pop	r22
     32a:	5f 91       	pop	r21
     32c:	4f 91       	pop	r20
     32e:	3f 91       	pop	r19
     330:	2f 91       	pop	r18
     332:	0f 90       	pop	r0
     334:	0b be       	out	0x3b, r0	; 59
     336:	0f 90       	pop	r0
     338:	09 be       	out	0x39, r0	; 57
     33a:	0f 90       	pop	r0
     33c:	08 be       	out	0x38, r0	; 56
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	0f 92       	push	r0
     350:	11 24       	eor	r1, r1
     352:	08 b6       	in	r0, 0x38	; 56
     354:	0f 92       	push	r0
     356:	18 be       	out	0x38, r1	; 56
     358:	09 b6       	in	r0, 0x39	; 57
     35a:	0f 92       	push	r0
     35c:	19 be       	out	0x39, r1	; 57
     35e:	0b b6       	in	r0, 0x3b	; 59
     360:	0f 92       	push	r0
     362:	1b be       	out	0x3b, r1	; 59
     364:	2f 93       	push	r18
     366:	3f 93       	push	r19
     368:	4f 93       	push	r20
     36a:	5f 93       	push	r21
     36c:	6f 93       	push	r22
     36e:	7f 93       	push	r23
     370:	8f 93       	push	r24
     372:	9f 93       	push	r25
     374:	af 93       	push	r26
     376:	bf 93       	push	r27
     378:	ef 93       	push	r30
     37a:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     37c:	84 e0       	ldi	r24, 0x04	; 4
     37e:	92 e2       	ldi	r25, 0x22	; 34
     380:	b1 d7       	rcall	.+3938   	; 0x12e4 <USART_DataRegEmpty>
}
     382:	ff 91       	pop	r31
     384:	ef 91       	pop	r30
     386:	bf 91       	pop	r27
     388:	af 91       	pop	r26
     38a:	9f 91       	pop	r25
     38c:	8f 91       	pop	r24
     38e:	7f 91       	pop	r23
     390:	6f 91       	pop	r22
     392:	5f 91       	pop	r21
     394:	4f 91       	pop	r20
     396:	3f 91       	pop	r19
     398:	2f 91       	pop	r18
     39a:	0f 90       	pop	r0
     39c:	0b be       	out	0x3b, r0	; 59
     39e:	0f 90       	pop	r0
     3a0:	09 be       	out	0x39, r0	; 57
     3a2:	0f 90       	pop	r0
     3a4:	08 be       	out	0x38, r0	; 56
     3a6:	0f 90       	pop	r0
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	0f 90       	pop	r0
     3ac:	1f 90       	pop	r1
     3ae:	18 95       	reti

000003b0 <__vector_88>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_RXC_vect)
{
     3b0:	1f 92       	push	r1
     3b2:	0f 92       	push	r0
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	0f 92       	push	r0
     3b8:	11 24       	eor	r1, r1
     3ba:	08 b6       	in	r0, 0x38	; 56
     3bc:	0f 92       	push	r0
     3be:	18 be       	out	0x38, r1	; 56
     3c0:	09 b6       	in	r0, 0x39	; 57
     3c2:	0f 92       	push	r0
     3c4:	19 be       	out	0x39, r1	; 57
     3c6:	0b b6       	in	r0, 0x3b	; 59
     3c8:	0f 92       	push	r0
     3ca:	1b be       	out	0x3b, r1	; 59
     3cc:	2f 93       	push	r18
     3ce:	3f 93       	push	r19
     3d0:	4f 93       	push	r20
     3d2:	5f 93       	push	r21
     3d4:	6f 93       	push	r22
     3d6:	7f 93       	push	r23
     3d8:	8f 93       	push	r24
     3da:	9f 93       	push	r25
     3dc:	af 93       	push	r26
     3de:	bf 93       	push	r27
     3e0:	ef 93       	push	r30
     3e2:	ff 93       	push	r31
  USART_RXComplete(&uartD0);
     3e4:	8e e6       	ldi	r24, 0x6E	; 110
     3e6:	90 e2       	ldi	r25, 0x20	; 32
     3e8:	5f d7       	rcall	.+3774   	; 0x12a8 <USART_RXComplete>
}
     3ea:	ff 91       	pop	r31
     3ec:	ef 91       	pop	r30
     3ee:	bf 91       	pop	r27
     3f0:	af 91       	pop	r26
     3f2:	9f 91       	pop	r25
     3f4:	8f 91       	pop	r24
     3f6:	7f 91       	pop	r23
     3f8:	6f 91       	pop	r22
     3fa:	5f 91       	pop	r21
     3fc:	4f 91       	pop	r20
     3fe:	3f 91       	pop	r19
     400:	2f 91       	pop	r18
     402:	0f 90       	pop	r0
     404:	0b be       	out	0x3b, r0	; 59
     406:	0f 90       	pop	r0
     408:	09 be       	out	0x39, r0	; 57
     40a:	0f 90       	pop	r0
     40c:	08 be       	out	0x38, r0	; 56
     40e:	0f 90       	pop	r0
     410:	0f be       	out	0x3f, r0	; 63
     412:	0f 90       	pop	r0
     414:	1f 90       	pop	r1
     416:	18 95       	reti

00000418 <__vector_89>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_DRE_vect)
{
     418:	1f 92       	push	r1
     41a:	0f 92       	push	r0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	0f 92       	push	r0
     420:	11 24       	eor	r1, r1
     422:	08 b6       	in	r0, 0x38	; 56
     424:	0f 92       	push	r0
     426:	18 be       	out	0x38, r1	; 56
     428:	09 b6       	in	r0, 0x39	; 57
     42a:	0f 92       	push	r0
     42c:	19 be       	out	0x39, r1	; 57
     42e:	0b b6       	in	r0, 0x3b	; 59
     430:	0f 92       	push	r0
     432:	1b be       	out	0x3b, r1	; 59
     434:	2f 93       	push	r18
     436:	3f 93       	push	r19
     438:	4f 93       	push	r20
     43a:	5f 93       	push	r21
     43c:	6f 93       	push	r22
     43e:	7f 93       	push	r23
     440:	8f 93       	push	r24
     442:	9f 93       	push	r25
     444:	af 93       	push	r26
     446:	bf 93       	push	r27
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
  USART_DataRegEmpty(&uartD0);
     44c:	8e e6       	ldi	r24, 0x6E	; 110
     44e:	90 e2       	ldi	r25, 0x20	; 32
     450:	49 d7       	rcall	.+3730   	; 0x12e4 <USART_DataRegEmpty>
}
     452:	ff 91       	pop	r31
     454:	ef 91       	pop	r30
     456:	bf 91       	pop	r27
     458:	af 91       	pop	r26
     45a:	9f 91       	pop	r25
     45c:	8f 91       	pop	r24
     45e:	7f 91       	pop	r23
     460:	6f 91       	pop	r22
     462:	5f 91       	pop	r21
     464:	4f 91       	pop	r20
     466:	3f 91       	pop	r19
     468:	2f 91       	pop	r18
     46a:	0f 90       	pop	r0
     46c:	0b be       	out	0x3b, r0	; 59
     46e:	0f 90       	pop	r0
     470:	09 be       	out	0x39, r0	; 57
     472:	0f 90       	pop	r0
     474:	08 be       	out	0x38, r0	; 56
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <__vector_12>:
		_delay_ms(250);
	}
}

ISR(TWIC_TWIS_vect) //TWI
{
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	08 b6       	in	r0, 0x38	; 56
     48c:	0f 92       	push	r0
     48e:	18 be       	out	0x38, r1	; 56
     490:	09 b6       	in	r0, 0x39	; 57
     492:	0f 92       	push	r0
     494:	19 be       	out	0x39, r1	; 57
     496:	0b b6       	in	r0, 0x3b	; 59
     498:	0f 92       	push	r0
     49a:	1b be       	out	0x3b, r1	; 59
     49c:	2f 93       	push	r18
     49e:	3f 93       	push	r19
     4a0:	4f 93       	push	r20
     4a2:	5f 93       	push	r21
     4a4:	6f 93       	push	r22
     4a6:	7f 93       	push	r23
     4a8:	8f 93       	push	r24
     4aa:	9f 93       	push	r25
     4ac:	af 93       	push	r26
     4ae:	bf 93       	push	r27
     4b0:	ef 93       	push	r30
     4b2:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twiSlave);
     4b4:	8b e7       	ldi	r24, 0x7B	; 123
     4b6:	91 e2       	ldi	r25, 0x21	; 33
     4b8:	e0 d4       	rcall	.+2496   	; 0xe7a <TWI_SlaveInterruptHandler>
}
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0b be       	out	0x3b, r0	; 59
     4d6:	0f 90       	pop	r0
     4d8:	09 be       	out	0x39, r0	; 57
     4da:	0f 90       	pop	r0
     4dc:	08 be       	out	0x38, r0	; 56
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <__vector_2>:

ISR(PORTC_INT0_vect) //start uart delay
{
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	08 b6       	in	r0, 0x38	; 56
     4f4:	0f 92       	push	r0
     4f6:	18 be       	out	0x38, r1	; 56
     4f8:	8f 93       	push	r24
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
     4fa:	87 e0       	ldi	r24, 0x07	; 7
     4fc:	80 93 40 08 	sts	0x0840, r24
}
     500:	8f 91       	pop	r24
     502:	0f 90       	pop	r0
     504:	08 be       	out	0x38, r0	; 56
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_20>:

ISR(TCC1_OVF_vect) //uart delay
{
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	08 b6       	in	r0, 0x38	; 56
     51c:	0f 92       	push	r0
     51e:	18 be       	out	0x38, r1	; 56
     520:	09 b6       	in	r0, 0x39	; 57
     522:	0f 92       	push	r0
     524:	19 be       	out	0x39, r1	; 57
     526:	0a b6       	in	r0, 0x3a	; 58
     528:	0f 92       	push	r0
     52a:	1a be       	out	0x3a, r1	; 58
     52c:	0b b6       	in	r0, 0x3b	; 59
     52e:	0f 92       	push	r0
     530:	1b be       	out	0x3b, r1	; 59
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	2f 93       	push	r18
     542:	3f 93       	push	r19
     544:	4f 93       	push	r20
     546:	5f 93       	push	r21
     548:	6f 93       	push	r22
     54a:	7f 93       	push	r23
     54c:	8f 93       	push	r24
     54e:	9f 93       	push	r25
     550:	af 93       	push	r26
     552:	bf 93       	push	r27
     554:	ef 93       	push	r30
     556:	ff 93       	push	r31
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	60 97       	sbiw	r28, 0x10	; 16
     562:	cd bf       	out	0x3d, r28	; 61
     564:	de bf       	out	0x3e, r29	; 62
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     566:	10 92 40 08 	sts	0x0840, r1
     56a:	8e 01       	movw	r16, r28
     56c:	0f 5f       	subi	r16, 0xFF	; 255
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(PORTC_INT0_vect) //start uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
}

ISR(TCC1_OVF_vect) //uart delay
     570:	68 01       	movw	r12, r16
     572:	7e 01       	movw	r14, r28
     574:	81 e1       	ldi	r24, 0x11	; 17
     576:	e8 0e       	add	r14, r24
     578:	f1 1c       	adc	r15, r1
	{
		if (USART_RXBufferData_Available(&uartC1))
		{
			RFIDDataIn[i] = USART_RXBuffer_GetByte(&uartC1);
		}else{
			RFIDDataIn[i] = '_';
     57a:	0f 2e       	mov	r0, r31
     57c:	ff e5       	ldi	r31, 0x5F	; 95
     57e:	bf 2e       	mov	r11, r31
     580:	f0 2d       	mov	r31, r0
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;

	uint8_t RFIDDataIn[RFID_UART_NUM_BYTES]; //RFID data
	for(int i=0; i<RFID_UART_NUM_BYTES; i++)
	{
		if (USART_RXBufferData_Available(&uartC1))
     582:	84 e0       	ldi	r24, 0x04	; 4
     584:	92 e2       	ldi	r25, 0x22	; 34
     586:	75 d6       	rcall	.+3306   	; 0x1272 <USART_RXBufferData_Available>
     588:	88 23       	and	r24, r24
     58a:	31 f0       	breq	.+12     	; 0x598 <__vector_20+0x88>
		{
			RFIDDataIn[i] = USART_RXBuffer_GetByte(&uartC1);
     58c:	84 e0       	ldi	r24, 0x04	; 4
     58e:	92 e2       	ldi	r25, 0x22	; 34
     590:	7d d6       	rcall	.+3322   	; 0x128c <USART_RXBuffer_GetByte>
     592:	f8 01       	movw	r30, r16
     594:	80 83       	st	Z, r24
     596:	02 c0       	rjmp	.+4      	; 0x59c <__vector_20+0x8c>
		}else{
			RFIDDataIn[i] = '_';
     598:	f8 01       	movw	r30, r16
     59a:	b0 82       	st	Z, r11
     59c:	0f 5f       	subi	r16, 0xFF	; 255
     59e:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(TCC1_OVF_vect) //uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;

	uint8_t RFIDDataIn[RFID_UART_NUM_BYTES]; //RFID data
	for(int i=0; i<RFID_UART_NUM_BYTES; i++)
     5a0:	0e 15       	cp	r16, r14
     5a2:	1f 05       	cpc	r17, r15
     5a4:	71 f7       	brne	.-36     	; 0x582 <__vector_20+0x72>
     5a6:	fe 01       	movw	r30, r28
     5a8:	32 96       	adiw	r30, 0x02	; 2
     5aa:	ac e0       	ldi	r26, 0x0C	; 12
     5ac:	b3 e2       	ldi	r27, 0x23	; 35
ISR(PORTC_INT0_vect) //start uart delay
{
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
}

ISR(TCC1_OVF_vect) //uart delay
     5ae:	c6 01       	movw	r24, r12
     5b0:	0b 96       	adiw	r24, 0x0b	; 11
		}
	}
	
	for(int i=0; i<RFID_NUMBER_BYTES; i++)
	{
		TWIOut[RFID_NUMBER_ADDRESS+i] = RFIDDataIn[i+1];;
     5b2:	21 91       	ld	r18, Z+
     5b4:	2d 93       	st	X+, r18
		}else{
			RFIDDataIn[i] = '_';
		}
	}
	
	for(int i=0; i<RFID_NUMBER_BYTES; i++)
     5b6:	e8 17       	cp	r30, r24
     5b8:	f9 07       	cpc	r31, r25
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <__vector_20+0xa2>
	{
		TWIOut[RFID_NUMBER_ADDRESS+i] = RFIDDataIn[i+1];;
	}

	TWIOut[RFID_DETECT_ADDRESS] = 1;
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	80 93 0b 23 	sts	0x230B, r24
}
     5c2:	60 96       	adiw	r28, 0x10	; 16
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	ff 91       	pop	r31
     5ce:	ef 91       	pop	r30
     5d0:	bf 91       	pop	r27
     5d2:	af 91       	pop	r26
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	7f 91       	pop	r23
     5da:	6f 91       	pop	r22
     5dc:	5f 91       	pop	r21
     5de:	4f 91       	pop	r20
     5e0:	3f 91       	pop	r19
     5e2:	2f 91       	pop	r18
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	cf 90       	pop	r12
     5f0:	bf 90       	pop	r11
     5f2:	0f 90       	pop	r0
     5f4:	0b be       	out	0x3b, r0	; 59
     5f6:	0f 90       	pop	r0
     5f8:	0a be       	out	0x3a, r0	; 58
     5fa:	0f 90       	pop	r0
     5fc:	09 be       	out	0x39, r0	; 57
     5fe:	0f 90       	pop	r0
     600:	08 be       	out	0x38, r0	; 56
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <__vector_79>:

ISR(TCD0_CCA_vect) //sonar A
{
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	08 b6       	in	r0, 0x38	; 56
     618:	0f 92       	push	r0
     61a:	18 be       	out	0x38, r1	; 56
     61c:	09 b6       	in	r0, 0x39	; 57
     61e:	0f 92       	push	r0
     620:	19 be       	out	0x39, r1	; 57
     622:	0b b6       	in	r0, 0x3b	; 59
     624:	0f 92       	push	r0
     626:	1b be       	out	0x3b, r1	; 59
     628:	2f 93       	push	r18
     62a:	3f 93       	push	r19
     62c:	6f 93       	push	r22
     62e:	7f 93       	push	r23
     630:	8f 93       	push	r24
     632:	9f 93       	push	r25
     634:	af 93       	push	r26
     636:	bf 93       	push	r27
     638:	ef 93       	push	r30
     63a:	ff 93       	push	r31
	uint16_t time = TCD0.CCA;
     63c:	e0 e0       	ldi	r30, 0x00	; 0
     63e:	f9 e0       	ldi	r31, 0x09	; 9
     640:	20 a5       	ldd	r18, Z+40	; 0x28
     642:	31 a5       	ldd	r19, Z+41	; 0x29
	uint16_t cm = time / SONAR_CONSTANT;
     644:	af e9       	ldi	r26, 0x9F	; 159
     646:	b6 e4       	ldi	r27, 0x46	; 70
     648:	0e 94 cd 0b 	call	0x179a	; 0x179a <__umulhisi3>
     64c:	00 24       	eor	r0, r0
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	00 1c       	adc	r0, r0
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	00 1c       	adc	r0, r0
     65a:	89 2f       	mov	r24, r25
     65c:	90 2d       	mov	r25, r0
	TWIOut[SONAR_A_ADDRESS] = cm & 0x00FF;	//LSB
     65e:	80 93 16 23 	sts	0x2316, r24
	TWIOut[SONAR_A_ADDRESS+1] = cm>>8;		//MSB
     662:	90 93 17 23 	sts	0x2317, r25
	TCD0.CTRLFSET = TC_CMD_RESTART_gc;
     666:	88 e0       	ldi	r24, 0x08	; 8
     668:	81 87       	std	Z+9, r24	; 0x09
}
     66a:	ff 91       	pop	r31
     66c:	ef 91       	pop	r30
     66e:	bf 91       	pop	r27
     670:	af 91       	pop	r26
     672:	9f 91       	pop	r25
     674:	8f 91       	pop	r24
     676:	7f 91       	pop	r23
     678:	6f 91       	pop	r22
     67a:	3f 91       	pop	r19
     67c:	2f 91       	pop	r18
     67e:	0f 90       	pop	r0
     680:	0b be       	out	0x3b, r0	; 59
     682:	0f 90       	pop	r0
     684:	09 be       	out	0x39, r0	; 57
     686:	0f 90       	pop	r0
     688:	08 be       	out	0x38, r0	; 56
     68a:	0f 90       	pop	r0
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	0f 90       	pop	r0
     690:	1f 90       	pop	r1
     692:	18 95       	reti

00000694 <__vector_85>:

ISR(TCD1_CCA_vect) //Sonar B
{
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	0f 92       	push	r0
     69c:	11 24       	eor	r1, r1
     69e:	08 b6       	in	r0, 0x38	; 56
     6a0:	0f 92       	push	r0
     6a2:	18 be       	out	0x38, r1	; 56
     6a4:	09 b6       	in	r0, 0x39	; 57
     6a6:	0f 92       	push	r0
     6a8:	19 be       	out	0x39, r1	; 57
     6aa:	0b b6       	in	r0, 0x3b	; 59
     6ac:	0f 92       	push	r0
     6ae:	1b be       	out	0x3b, r1	; 59
     6b0:	2f 93       	push	r18
     6b2:	3f 93       	push	r19
     6b4:	6f 93       	push	r22
     6b6:	7f 93       	push	r23
     6b8:	8f 93       	push	r24
     6ba:	9f 93       	push	r25
     6bc:	af 93       	push	r26
     6be:	bf 93       	push	r27
     6c0:	ef 93       	push	r30
     6c2:	ff 93       	push	r31
	uint16_t time = TCD1.CCA;
     6c4:	e0 e4       	ldi	r30, 0x40	; 64
     6c6:	f9 e0       	ldi	r31, 0x09	; 9
     6c8:	20 a5       	ldd	r18, Z+40	; 0x28
     6ca:	31 a5       	ldd	r19, Z+41	; 0x29
	uint16_t cm = time / SONAR_CONSTANT;
     6cc:	af e9       	ldi	r26, 0x9F	; 159
     6ce:	b6 e4       	ldi	r27, 0x46	; 70
     6d0:	0e 94 cd 0b 	call	0x179a	; 0x179a <__umulhisi3>
     6d4:	00 24       	eor	r0, r0
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	00 1c       	adc	r0, r0
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	00 1c       	adc	r0, r0
     6e2:	89 2f       	mov	r24, r25
     6e4:	90 2d       	mov	r25, r0
	TWIOut[SONAR_B_ADDRESS] = cm & 0x00FF;	//LSB
     6e6:	80 93 18 23 	sts	0x2318, r24
	TWIOut[SONAR_B_ADDRESS+1] = cm>>8;		//MSB
     6ea:	90 93 19 23 	sts	0x2319, r25
	TCD1.CTRLFSET = TC_CMD_RESTART_gc;
     6ee:	88 e0       	ldi	r24, 0x08	; 8
     6f0:	81 87       	std	Z+9, r24	; 0x09
}
     6f2:	ff 91       	pop	r31
     6f4:	ef 91       	pop	r30
     6f6:	bf 91       	pop	r27
     6f8:	af 91       	pop	r26
     6fa:	9f 91       	pop	r25
     6fc:	8f 91       	pop	r24
     6fe:	7f 91       	pop	r23
     700:	6f 91       	pop	r22
     702:	3f 91       	pop	r19
     704:	2f 91       	pop	r18
     706:	0f 90       	pop	r0
     708:	0b be       	out	0x3b, r0	; 59
     70a:	0f 90       	pop	r0
     70c:	09 be       	out	0x39, r0	; 57
     70e:	0f 90       	pop	r0
     710:	08 be       	out	0x38, r0	; 56
     712:	0f 90       	pop	r0
     714:	0f be       	out	0x3f, r0	; 63
     716:	0f 90       	pop	r0
     718:	1f 90       	pop	r1
     71a:	18 95       	reti

0000071c <__vector_71>:

ISR(ADCA_CH0_vect)
{
     71c:	1f 92       	push	r1
     71e:	0f 92       	push	r0
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	0f 92       	push	r0
     724:	11 24       	eor	r1, r1
     726:	08 b6       	in	r0, 0x38	; 56
     728:	0f 92       	push	r0
     72a:	18 be       	out	0x38, r1	; 56
     72c:	0b b6       	in	r0, 0x3b	; 59
     72e:	0f 92       	push	r0
     730:	1b be       	out	0x3b, r1	; 59
     732:	8f 93       	push	r24
     734:	9f 93       	push	r25
     736:	ef 93       	push	r30
     738:	ff 93       	push	r31
	uint16_t time = ADCA.CH0.RES;
     73a:	e0 e0       	ldi	r30, 0x00	; 0
     73c:	f2 e0       	ldi	r31, 0x02	; 2
     73e:	84 a1       	ldd	r24, Z+36	; 0x24
     740:	95 a1       	ldd	r25, Z+37	; 0x25
	TWIOut[LINE_ADDRESS_0] = time & 0x00FF;	//LSB
     742:	80 93 2b 23 	sts	0x232B, r24
	TWIOut[LINE_ADDRESS_0+1] = time>>8;		//MSB
     746:	90 93 2c 23 	sts	0x232C, r25
}
     74a:	ff 91       	pop	r31
     74c:	ef 91       	pop	r30
     74e:	9f 91       	pop	r25
     750:	8f 91       	pop	r24
     752:	0f 90       	pop	r0
     754:	0b be       	out	0x3b, r0	; 59
     756:	0f 90       	pop	r0
     758:	08 be       	out	0x38, r0	; 56
     75a:	0f 90       	pop	r0
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	0f 90       	pop	r0
     760:	1f 90       	pop	r1
     762:	18 95       	reti

00000764 <__vector_72>:

ISR(ADCA_CH1_vect)
{
     764:	1f 92       	push	r1
     766:	0f 92       	push	r0
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	0f 92       	push	r0
     76c:	11 24       	eor	r1, r1
     76e:	08 b6       	in	r0, 0x38	; 56
     770:	0f 92       	push	r0
     772:	18 be       	out	0x38, r1	; 56
     774:	0b b6       	in	r0, 0x3b	; 59
     776:	0f 92       	push	r0
     778:	1b be       	out	0x3b, r1	; 59
     77a:	8f 93       	push	r24
     77c:	9f 93       	push	r25
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
	uint16_t time = ADCA.CH1.RES;
     782:	e0 e0       	ldi	r30, 0x00	; 0
     784:	f2 e0       	ldi	r31, 0x02	; 2
     786:	84 a5       	ldd	r24, Z+44	; 0x2c
     788:	95 a5       	ldd	r25, Z+45	; 0x2d
	TWIOut[LINE_ADDRESS_1] = time & 0x00FF;	//LSB
     78a:	80 93 2d 23 	sts	0x232D, r24
	TWIOut[LINE_ADDRESS_1+1] = time>>8;		//MSB
     78e:	90 93 2e 23 	sts	0x232E, r25
}
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	9f 91       	pop	r25
     798:	8f 91       	pop	r24
     79a:	0f 90       	pop	r0
     79c:	0b be       	out	0x3b, r0	; 59
     79e:	0f 90       	pop	r0
     7a0:	08 be       	out	0x38, r0	; 56
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <__vector_73>:

ISR(ADCA_CH2_vect)
{
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	08 b6       	in	r0, 0x38	; 56
     7b8:	0f 92       	push	r0
     7ba:	18 be       	out	0x38, r1	; 56
     7bc:	0b b6       	in	r0, 0x3b	; 59
     7be:	0f 92       	push	r0
     7c0:	1b be       	out	0x3b, r1	; 59
     7c2:	8f 93       	push	r24
     7c4:	9f 93       	push	r25
     7c6:	ef 93       	push	r30
     7c8:	ff 93       	push	r31
	uint16_t time = ADCA.CH2.RES;
     7ca:	e0 e0       	ldi	r30, 0x00	; 0
     7cc:	f2 e0       	ldi	r31, 0x02	; 2
     7ce:	84 a9       	ldd	r24, Z+52	; 0x34
     7d0:	95 a9       	ldd	r25, Z+53	; 0x35
	TWIOut[LINE_ADDRESS_2] = time & 0x00FF;	//LSB
     7d2:	80 93 2f 23 	sts	0x232F, r24
	TWIOut[LINE_ADDRESS_2+1] = time>>8;		//MSB
     7d6:	90 93 30 23 	sts	0x2330, r25
}
     7da:	ff 91       	pop	r31
     7dc:	ef 91       	pop	r30
     7de:	9f 91       	pop	r25
     7e0:	8f 91       	pop	r24
     7e2:	0f 90       	pop	r0
     7e4:	0b be       	out	0x3b, r0	; 59
     7e6:	0f 90       	pop	r0
     7e8:	08 be       	out	0x38, r0	; 56
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	1f 90       	pop	r1
     7f2:	18 95       	reti

000007f4 <__vector_74>:

ISR(ADCA_CH3_vect)
{
     7f4:	1f 92       	push	r1
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	0f 92       	push	r0
     7fc:	11 24       	eor	r1, r1
     7fe:	08 b6       	in	r0, 0x38	; 56
     800:	0f 92       	push	r0
     802:	18 be       	out	0x38, r1	; 56
     804:	0b b6       	in	r0, 0x3b	; 59
     806:	0f 92       	push	r0
     808:	1b be       	out	0x3b, r1	; 59
     80a:	8f 93       	push	r24
     80c:	9f 93       	push	r25
     80e:	ef 93       	push	r30
     810:	ff 93       	push	r31
	uint16_t time = ADCA.CH3.RES;
     812:	e0 e0       	ldi	r30, 0x00	; 0
     814:	f2 e0       	ldi	r31, 0x02	; 2
     816:	84 ad       	ldd	r24, Z+60	; 0x3c
     818:	95 ad       	ldd	r25, Z+61	; 0x3d
	TWIOut[LINE_ADDRESS_3] = time & 0x00FF;	//LSB
     81a:	80 93 31 23 	sts	0x2331, r24
	TWIOut[LINE_ADDRESS_3+1] = time>>8;		//MSB
     81e:	90 93 32 23 	sts	0x2332, r25
}
     822:	ff 91       	pop	r31
     824:	ef 91       	pop	r30
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	0f 90       	pop	r0
     82c:	0b be       	out	0x3b, r0	; 59
     82e:	0f 90       	pop	r0
     830:	08 be       	out	0x38, r0	; 56
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	1f 90       	pop	r1
     83a:	18 95       	reti

0000083c <__vector_47>:

ISR(TCE0_OVF_vect) //trigger sonar, cascading
{
     83c:	1f 92       	push	r1
     83e:	0f 92       	push	r0
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	0f 92       	push	r0
     844:	11 24       	eor	r1, r1
     846:	08 b6       	in	r0, 0x38	; 56
     848:	0f 92       	push	r0
     84a:	18 be       	out	0x38, r1	; 56
     84c:	0b b6       	in	r0, 0x3b	; 59
     84e:	0f 92       	push	r0
     850:	1b be       	out	0x3b, r1	; 59
     852:	8f 93       	push	r24
     854:	9f 93       	push	r25
     856:	ef 93       	push	r30
     858:	ff 93       	push	r31
	if (sonarSwitch)
     85a:	80 91 14 24 	lds	r24, 0x2414
     85e:	88 23       	and	r24, r24
     860:	61 f0       	breq	.+24     	; 0x87a <__vector_47+0x3e>
	{
		PORTC.OUTSET = PIN2_bm;
     862:	e0 e4       	ldi	r30, 0x40	; 64
     864:	f6 e0       	ldi	r31, 0x06	; 6
     866:	84 e0       	ldi	r24, 0x04	; 4
     868:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     86a:	9a e6       	ldi	r25, 0x6A	; 106
     86c:	9a 95       	dec	r25
     86e:	f1 f7       	brne	.-4      	; 0x86c <__vector_47+0x30>
     870:	00 c0       	rjmp	.+0      	; 0x872 <__vector_47+0x36>
		_delay_us(10);
		PORTC.OUTCLR = PIN2_bm;
     872:	86 83       	std	Z+6, r24	; 0x06
		sonarSwitch = 0;
     874:	10 92 14 24 	sts	0x2414, r1
     878:	0c c0       	rjmp	.+24     	; 0x892 <__vector_47+0x56>
	} 
	else
	{
		PORTE.OUTSET = PIN3_bm;
     87a:	e0 e8       	ldi	r30, 0x80	; 128
     87c:	f6 e0       	ldi	r31, 0x06	; 6
     87e:	88 e0       	ldi	r24, 0x08	; 8
     880:	85 83       	std	Z+5, r24	; 0x05
     882:	9a e6       	ldi	r25, 0x6A	; 106
     884:	9a 95       	dec	r25
     886:	f1 f7       	brne	.-4      	; 0x884 <__vector_47+0x48>
     888:	00 c0       	rjmp	.+0      	; 0x88a <__vector_47+0x4e>
		_delay_us(10);
		PORTE.OUTCLR = PIN3_bm;
     88a:	86 83       	std	Z+6, r24	; 0x06
		sonarSwitch = 1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	80 93 14 24 	sts	0x2414, r24
	}
}
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	9f 91       	pop	r25
     898:	8f 91       	pop	r24
     89a:	0f 90       	pop	r0
     89c:	0b be       	out	0x3b, r0	; 59
     89e:	0f 90       	pop	r0
     8a0:	08 be       	out	0x38, r0	; 56
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <set_adcch_input>:
	PORTE.OUTTGL = PIN0_bm;

}

void set_adcch_input(ADC_CH_t *ch, uint8_t pos_pin_gc, uint8_t neg_pin_gc)
{
     8ac:	fc 01       	movw	r30, r24
	ch->MUXCTRL = pos_pin_gc | neg_pin_gc;
     8ae:	64 2b       	or	r22, r20
     8b0:	61 83       	std	Z+1, r22	; 0x01
	ch->CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 83       	st	Z, r24
	ch->INTCTRL = ADC_CH_INTLVL_LO_gc;
     8b6:	82 83       	std	Z+2, r24	; 0x02
     8b8:	08 95       	ret

000008ba <init_adc>:
	
}

   void init_adc(void)
   {
	   PORTA.DIRCLR = PIN4_bm|PIN5_bm|PIN6_bm|PIN7_bm; // PA4..7 are input
     8ba:	80 ef       	ldi	r24, 0xF0	; 240
     8bc:	e0 e0       	ldi	r30, 0x00	; 0
     8be:	f6 e0       	ldi	r31, 0x06	; 6
     8c0:	82 83       	std	Z+2, r24	; 0x02
	   
	   set_adcch_input(&ADCA.CH0, ADC_CH_MUXPOS_PIN4_gc, ADC_CH_MUXNEG_INTGND_gc);
     8c2:	47 e0       	ldi	r20, 0x07	; 7
     8c4:	60 e2       	ldi	r22, 0x20	; 32
     8c6:	80 e2       	ldi	r24, 0x20	; 32
     8c8:	92 e0       	ldi	r25, 0x02	; 2
     8ca:	f0 df       	rcall	.-32     	; 0x8ac <set_adcch_input>
	   set_adcch_input(&ADCA.CH1, ADC_CH_MUXPOS_PIN5_gc, ADC_CH_MUXNEG_INTGND_gc);
     8cc:	47 e0       	ldi	r20, 0x07	; 7
     8ce:	68 e2       	ldi	r22, 0x28	; 40
     8d0:	88 e2       	ldi	r24, 0x28	; 40
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	eb df       	rcall	.-42     	; 0x8ac <set_adcch_input>
	   set_adcch_input(&ADCA.CH2, ADC_CH_MUXPOS_PIN6_gc, ADC_CH_MUXNEG_INTGND_gc);
     8d6:	47 e0       	ldi	r20, 0x07	; 7
     8d8:	60 e3       	ldi	r22, 0x30	; 48
     8da:	80 e3       	ldi	r24, 0x30	; 48
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	e6 df       	rcall	.-52     	; 0x8ac <set_adcch_input>
	   set_adcch_input(&ADCA.CH3, ADC_CH_MUXPOS_PIN7_gc, ADC_CH_MUXNEG_INTGND_gc);
     8e0:	47 e0       	ldi	r20, 0x07	; 7
     8e2:	68 e3       	ldi	r22, 0x38	; 56
     8e4:	88 e3       	ldi	r24, 0x38	; 56
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	e1 df       	rcall	.-62     	; 0x8ac <set_adcch_input>
	   
	   ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc |
     8ea:	e0 e0       	ldi	r30, 0x00	; 0
     8ec:	f2 e0       	ldi	r31, 0x02	; 2
     8ee:	88 e0       	ldi	r24, 0x08	; 8
     8f0:	81 83       	std	Z+1, r24	; 0x01
	   (!ADC_CONMODE_bm) |
	   ADC_FREERUN_bm; // free running mode
	   ADCA.REFCTRL = ADC_REFSEL_VCCDIV2_gc;
     8f2:	80 e4       	ldi	r24, 0x40	; 64
     8f4:	82 83       	std	Z+2, r24	; 0x02
	   ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
     8f6:	87 e0       	ldi	r24, 0x07	; 7
     8f8:	84 83       	std	Z+4, r24	; 0x04
	   ADCA.CTRLA = ADC_ENABLE_bm;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 83       	st	Z, r24
	   ADCA.EVCTRL = ADC_SWEEP_0123_gc|ADC_EVSEL_0123_gc|ADC_EVACT_NONE_gc;
     8fe:	80 ec       	ldi	r24, 0xC0	; 192
     900:	83 83       	std	Z+3, r24	; 0x03
     902:	08 95       	ret

00000904 <clock_init32MCalibrate>:
   }
   
void clock_init32MCalibrate(void) {
	
	// Select 32 kHz crystal and low power mode
	OSC.XOSCCTRL = ( OSC.XOSCCTRL & ~OSC_XOSCSEL_gm) | OSC_XOSCSEL_32KHz_gc;
     904:	e0 e5       	ldi	r30, 0x50	; 80
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	82 81       	ldd	r24, Z+2	; 0x02
     90a:	80 7f       	andi	r24, 0xF0	; 240
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	82 83       	std	Z+2, r24	; 0x02

	// Switch to calibrated 32MHz oscillator and disable 2 MHz RC oscillator
	CLKSYS_Enable( OSC_XOSCEN_bm );
     910:	80 81       	ld	r24, Z
     912:	88 60       	ori	r24, 0x08	; 8
     914:	80 83       	st	Z, r24
	CLKSYS_Enable( OSC_RC32MEN_bm );
     916:	80 81       	ld	r24, Z
     918:	82 60       	ori	r24, 0x02	; 2
     91a:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     91c:	81 81       	ldd	r24, Z+1	; 0x01
     91e:	83 ff       	sbrs	r24, 3
     920:	fd cf       	rjmp	.-6      	; 0x91c <clock_init32MCalibrate+0x18>
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
     922:	e0 e5       	ldi	r30, 0x50	; 80
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	81 81       	ldd	r24, Z+1	; 0x01
     928:	81 ff       	sbrs	r24, 1
     92a:	fd cf       	rjmp	.-6      	; 0x926 <clock_init32MCalibrate+0x22>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	ab dc       	rcall	.-1706   	; 0x286 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	9f dc       	rcall	.-1730   	; 0x272 <CLKSYS_Disable>
	OSC.DFLLCTRL = (OSC.DFLLCTRL & ~OSC_RC32MCREF_gm) | OSC_RC32MCREF_XOSC32K_gc;
     934:	e0 e5       	ldi	r30, 0x50	; 80
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	86 81       	ldd	r24, Z+6	; 0x06
     93a:	89 7f       	andi	r24, 0xF9	; 249
     93c:	82 60       	ori	r24, 0x02	; 2
     93e:	86 83       	std	Z+6, r24	; 0x06
	DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     940:	e0 e6       	ldi	r30, 0x60	; 96
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	81 60       	ori	r24, 0x01	; 1
     948:	80 83       	st	Z, r24
     94a:	08 95       	ret

0000094c <init_all>:
}

void init_all(void)
{
     94c:	cf 92       	push	r12
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
	// set port direction //
	PORTE.DIRSET = PIN0_bm | PIN3_bm; //debug led and sonar trigger
     95a:	a0 e8       	ldi	r26, 0x80	; 128
     95c:	b6 e0       	ldi	r27, 0x06	; 6
     95e:	89 e0       	ldi	r24, 0x09	; 9
     960:	11 96       	adiw	r26, 0x01	; 1
     962:	8c 93       	st	X, r24
     964:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.DIRSET = PIN2_bm; //sonar trigger
     966:	e0 e4       	ldi	r30, 0x40	; 64
     968:	f6 e0       	ldi	r31, 0x06	; 6
     96a:	44 e0       	ldi	r20, 0x04	; 4
     96c:	41 83       	std	Z+1, r20	; 0x01
	PORTA.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm; //line sensor
     96e:	c0 e0       	ldi	r28, 0x00	; 0
     970:	d6 e0       	ldi	r29, 0x06	; 6
     972:	8f e0       	ldi	r24, 0x0F	; 15
     974:	89 83       	std	Y+1, r24	; 0x01
	PORTA.OUTSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm; //line sensor
     976:	8d 83       	std	Y+5, r24	; 0x05
	
	PORTE.OUTSET = PIN0_bm;
     978:	c1 e0       	ldi	r28, 0x01	; 1
     97a:	15 96       	adiw	r26, 0x05	; 5
     97c:	cc 93       	st	X, r28

	// set timers //
	//delay for uart read need other solution
	PORTC.INT0MASK = PIN6_bm;
     97e:	80 e4       	ldi	r24, 0x40	; 64
     980:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.PIN6CTRL = PORT_ISC_RISING_gc;
     982:	c6 8b       	std	Z+22, r28	; 0x16
	PORTC.INTCTRL  = PORT_INT0LVL_LO_gc;
     984:	c1 87       	std	Z+9, r28	; 0x09
	TCC1.CTRLB     = TC_WGMODE_NORMAL_gc;
     986:	a0 e4       	ldi	r26, 0x40	; 64
     988:	b8 e0       	ldi	r27, 0x08	; 8
     98a:	11 96       	adiw	r26, 0x01	; 1
     98c:	1c 92       	st	X, r1
     98e:	11 97       	sbiw	r26, 0x01	; 1
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     990:	1c 92       	st	X, r1
	TCC1.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     992:	16 96       	adiw	r26, 0x06	; 6
     994:	cc 93       	st	X, r28
     996:	16 97       	sbiw	r26, 0x06	; 6
	TCC1.PER       = 400 * 16;
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	99 e1       	ldi	r25, 0x19	; 25
     99c:	96 96       	adiw	r26, 0x26	; 38
     99e:	8d 93       	st	X+, r24
     9a0:	9c 93       	st	X, r25
     9a2:	97 97       	sbiw	r26, 0x27	; 39
	//sonar request
	TCE0.CTRLB     = TC_WGMODE_NORMAL_gc;
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	ba e0       	ldi	r27, 0x0A	; 10
     9a8:	11 96       	adiw	r26, 0x01	; 1
     9aa:	1c 92       	st	X, r1
     9ac:	11 97       	sbiw	r26, 0x01	; 1
	TCE0.CTRLA     = TC_CLKSEL_DIV1024_gc;
     9ae:	87 e0       	ldi	r24, 0x07	; 7
     9b0:	8c 93       	st	X, r24
	TCE0.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     9b2:	16 96       	adiw	r26, 0x06	; 6
     9b4:	cc 93       	st	X, r28
     9b6:	16 97       	sbiw	r26, 0x06	; 6
	TCE0.PER       = 195 * 16;//~10Hz so 5Hz each
     9b8:	80 e3       	ldi	r24, 0x30	; 48
     9ba:	9c e0       	ldi	r25, 0x0C	; 12
     9bc:	96 96       	adiw	r26, 0x26	; 38
     9be:	8d 93       	st	X+, r24
     9c0:	9c 93       	st	X, r25
     9c2:	97 97       	sbiw	r26, 0x27	; 39
	//timer for sonar A
	PORTC.PIN4CTRL = PORT_ISC_BOTHEDGES_gc;
     9c4:	14 8a       	std	Z+20, r1	; 0x14
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
     9c6:	20 e8       	ldi	r18, 0x80	; 128
     9c8:	31 e0       	ldi	r19, 0x01	; 1
     9ca:	84 e6       	ldi	r24, 0x64	; 100
     9cc:	d9 01       	movw	r26, r18
     9ce:	8c 93       	st	X, r24
	TCD0.CTRLD = TC_EVACT_PW_gc | TC_EVSEL_CH0_gc;
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b9 e0       	ldi	r27, 0x09	; 9
     9d4:	88 ec       	ldi	r24, 0xC8	; 200
     9d6:	13 96       	adiw	r26, 0x03	; 3
     9d8:	8c 93       	st	X, r24
     9da:	13 97       	sbiw	r26, 0x03	; 3
	TCD0.CTRLB = TC0_CCAEN_bm | TC_WGMODE_NORMAL_gc;
     9dc:	50 e1       	ldi	r21, 0x10	; 16
     9de:	11 96       	adiw	r26, 0x01	; 1
     9e0:	5c 93       	st	X, r21
     9e2:	11 97       	sbiw	r26, 0x01	; 1
	TCD0.CTRLA = TC_CLKSEL_DIV8_gc;
     9e4:	4c 93       	st	X, r20
	TCD0.INTCTRLB = TC_CCAINTLVL_LO_gc;
     9e6:	17 96       	adiw	r26, 0x07	; 7
     9e8:	cc 93       	st	X, r28
     9ea:	17 97       	sbiw	r26, 0x07	; 7
	TCD0.PER = 0xFFFF;
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	9f ef       	ldi	r25, 0xFF	; 255
     9f0:	96 96       	adiw	r26, 0x26	; 38
     9f2:	8d 93       	st	X+, r24
     9f4:	9c 93       	st	X, r25
     9f6:	97 97       	sbiw	r26, 0x27	; 39
	//timer for sonar B
	PORTC.PIN5CTRL = PORT_ISC_BOTHEDGES_gc;
     9f8:	15 8a       	std	Z+21, r1	; 0x15
	EVSYS.CH1MUX = EVSYS_CHMUX_PORTC_PIN5_gc;
     9fa:	65 e6       	ldi	r22, 0x65	; 101
     9fc:	f9 01       	movw	r30, r18
     9fe:	61 83       	std	Z+1, r22	; 0x01
	TCD1.CTRLD = TC_EVACT_PW_gc | TC_EVSEL_CH1_gc;
     a00:	e0 e4       	ldi	r30, 0x40	; 64
     a02:	f9 e0       	ldi	r31, 0x09	; 9
     a04:	29 ec       	ldi	r18, 0xC9	; 201
     a06:	23 83       	std	Z+3, r18	; 0x03
	TCD1.CTRLB = TC1_CCAEN_bm | TC_WGMODE_NORMAL_gc;
     a08:	51 83       	std	Z+1, r21	; 0x01
	TCD1.CTRLA = TC_CLKSEL_DIV8_gc;
     a0a:	40 83       	st	Z, r20
	TCD1.INTCTRLB = TC_CCAINTLVL_LO_gc;
     a0c:	c7 83       	std	Z+7, r28	; 0x07
	TCD1.PER = 0xFFFF;
     a0e:	86 a3       	std	Z+38, r24	; 0x26
     a10:	97 a3       	std	Z+39, r25	; 0x27
	
	init_adc();
     a12:	53 df       	rcall	.-346    	; 0x8ba <init_adc>
	
	// set uart's //
	init_uart(&uartD0, &USARTD0, F_CPU, D0_BAUD, D0_CLK2X); //debug
     a14:	c1 2c       	mov	r12, r1
     a16:	e1 2c       	mov	r14, r1
     a18:	12 ec       	ldi	r17, 0xC2	; 194
     a1a:	f1 2e       	mov	r15, r17
     a1c:	01 e0       	ldi	r16, 0x01	; 1
     a1e:	10 e0       	ldi	r17, 0x00	; 0
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	38 e4       	ldi	r19, 0x48	; 72
     a24:	48 ee       	ldi	r20, 0xE8	; 232
     a26:	51 e0       	ldi	r21, 0x01	; 1
     a28:	60 ea       	ldi	r22, 0xA0	; 160
     a2a:	79 e0       	ldi	r23, 0x09	; 9
     a2c:	8e e6       	ldi	r24, 0x6E	; 110
     a2e:	90 e2       	ldi	r25, 0x20	; 32
     a30:	80 d3       	rcall	.+1792   	; 0x1132 <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X); //RFID reader
     a32:	10 e8       	ldi	r17, 0x80	; 128
     a34:	e1 2e       	mov	r14, r17
     a36:	15 e2       	ldi	r17, 0x25	; 37
     a38:	f1 2e       	mov	r15, r17
     a3a:	00 e0       	ldi	r16, 0x00	; 0
     a3c:	10 e0       	ldi	r17, 0x00	; 0
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	38 e4       	ldi	r19, 0x48	; 72
     a42:	48 ee       	ldi	r20, 0xE8	; 232
     a44:	51 e0       	ldi	r21, 0x01	; 1
     a46:	60 eb       	ldi	r22, 0xB0	; 176
     a48:	78 e0       	ldi	r23, 0x08	; 8
     a4a:	84 e0       	ldi	r24, 0x04	; 4
     a4c:	92 e2       	ldi	r25, 0x22	; 34
     a4e:	71 d3       	rcall	.+1762   	; 0x1132 <init_uart>
	
	// set TWI as slave for NXT //
	TWI_SlaveInitializeDriver(&twiSlave, &TWIC, TWIC_SlaveProcessData);
     a50:	45 e5       	ldi	r20, 0x55	; 85
     a52:	51 e0       	ldi	r21, 0x01	; 1
     a54:	60 e8       	ldi	r22, 0x80	; 128
     a56:	74 e0       	ldi	r23, 0x04	; 4
     a58:	8b e7       	ldi	r24, 0x7B	; 123
     a5a:	91 e2       	ldi	r25, 0x21	; 33
     a5c:	1b d1       	rcall	.+566    	; 0xc94 <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twiSlave, SLAVE_ADDRESS, TWI_SLAVE_INTLVL_LO_gc);
     a5e:	40 e4       	ldi	r20, 0x40	; 64
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	8b e7       	ldi	r24, 0x7B	; 123
     a64:	91 e2       	ldi	r25, 0x21	; 33
     a66:	2f d1       	rcall	.+606    	; 0xcc6 <TWI_SlaveInitializeModule>
	
	// Turn on interrupts //
	PMIC.CTRL = PMIC_LOLVLEN_bm;
     a68:	e0 ea       	ldi	r30, 0xA0	; 160
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	c2 83       	std	Z+2, r28	; 0x02
	sei();
     a6e:	78 94       	sei
}	
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	cf 90       	pop	r12
     a7e:	08 95       	ret

00000a80 <main>:
void init_adc(void);
void clock_init32MCalibrate(void);

int main(void)
{
	clock_init32MCalibrate();
     a80:	41 df       	rcall	.-382    	; 0x904 <clock_init32MCalibrate>
	init_all();
     a82:	64 df       	rcall	.-312    	; 0x94c <init_all>
	TWIOut[RFID_NUMBER_ADDRESS] =	'N';
     a84:	8e e4       	ldi	r24, 0x4E	; 78
     a86:	80 93 0c 23 	sts	0x230C, r24
	TWIOut[RFID_NUMBER_ADDRESS+1] =	'o';
     a8a:	8f e6       	ldi	r24, 0x6F	; 111
     a8c:	80 93 0d 23 	sts	0x230D, r24
	TWIOut[RFID_NUMBER_ADDRESS+2] =	' ';
     a90:	80 e2       	ldi	r24, 0x20	; 32
     a92:	80 93 0e 23 	sts	0x230E, r24
	TWIOut[RFID_NUMBER_ADDRESS+3] =	'D';
     a96:	84 e4       	ldi	r24, 0x44	; 68
     a98:	80 93 0f 23 	sts	0x230F, r24
	TWIOut[RFID_NUMBER_ADDRESS+4] =	'a';
     a9c:	81 e6       	ldi	r24, 0x61	; 97
     a9e:	80 93 10 23 	sts	0x2310, r24
	TWIOut[RFID_NUMBER_ADDRESS+5] =	't';
     aa2:	94 e7       	ldi	r25, 0x74	; 116
     aa4:	90 93 11 23 	sts	0x2311, r25
	TWIOut[RFID_NUMBER_ADDRESS+6] =	'a';
     aa8:	80 93 12 23 	sts	0x2312, r24
	sprintf(str, "UART Connected.\n\r");	
     aac:	c5 e1       	ldi	r28, 0x15	; 21
     aae:	d4 e2       	ldi	r29, 0x24	; 36
     ab0:	82 e1       	ldi	r24, 0x12	; 18
     ab2:	e0 e0       	ldi	r30, 0x00	; 0
     ab4:	f0 e2       	ldi	r31, 0x20	; 32
     ab6:	de 01       	movw	r26, r28
     ab8:	01 90       	ld	r0, Z+
     aba:	0d 92       	st	X+, r0
     abc:	8a 95       	dec	r24
     abe:	e1 f7       	brne	.-8      	; 0xab8 <main+0x38>
	uart_puts(&uartD0, str);
     ac0:	be 01       	movw	r22, r28
     ac2:	8e e6       	ldi	r24, 0x6E	; 110
     ac4:	90 e2       	ldi	r25, 0x20	; 32
     ac6:	23 d2       	rcall	.+1094   	; 0xf0e <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ac8:	2f ef       	ldi	r18, 0xFF	; 255
     aca:	33 ed       	ldi	r19, 0xD3	; 211
     acc:	80 e3       	ldi	r24, 0x30	; 48
     ace:	21 50       	subi	r18, 0x01	; 1
     ad0:	30 40       	sbci	r19, 0x00	; 0
     ad2:	80 40       	sbci	r24, 0x00	; 0
     ad4:	e1 f7       	brne	.-8      	; 0xace <main+0x4e>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <main+0x58>
     ad8:	00 00       	nop
	_delay_ms(500);
	baseline_line_0 = ((TWIOut[LINE_ADDRESS_0+1]<<8)+TWIOut[LINE_ADDRESS_0]);
     ada:	90 91 2c 23 	lds	r25, 0x232C
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	20 91 2b 23 	lds	r18, 0x232B
     ae4:	82 0f       	add	r24, r18
     ae6:	91 1d       	adc	r25, r1
     ae8:	80 93 79 21 	sts	0x2179, r24
     aec:	90 93 7a 21 	sts	0x217A, r25
	baseline_line_1 = ((TWIOut[LINE_ADDRESS_1+1]<<8)+TWIOut[LINE_ADDRESS_1]);
     af0:	30 91 2e 23 	lds	r19, 0x232E
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	40 91 2d 23 	lds	r20, 0x232D
     afa:	24 0f       	add	r18, r20
     afc:	31 1d       	adc	r19, r1
     afe:	20 93 77 21 	sts	0x2177, r18
     b02:	30 93 78 21 	sts	0x2178, r19
	baseline_line_2 = ((TWIOut[LINE_ADDRESS_2+1]<<8)+TWIOut[LINE_ADDRESS_2]);
     b06:	50 91 30 23 	lds	r21, 0x2330
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	60 91 2f 23 	lds	r22, 0x232F
     b10:	46 0f       	add	r20, r22
     b12:	51 1d       	adc	r21, r1
     b14:	40 93 75 21 	sts	0x2175, r20
     b18:	50 93 76 21 	sts	0x2176, r21
	baseline_line_3 = ((TWIOut[LINE_ADDRESS_3+1]<<8)+TWIOut[LINE_ADDRESS_3]);
     b1c:	70 91 32 23 	lds	r23, 0x2332
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	e0 91 31 23 	lds	r30, 0x2331
     b26:	6e 0f       	add	r22, r30
     b28:	71 1d       	adc	r23, r1
     b2a:	60 93 12 24 	sts	0x2412, r22
     b2e:	70 93 13 24 	sts	0x2413, r23
	sprintf(str, "Line Base\t%d \t%d \t%d \t%d\n\r", baseline_line_0, baseline_line_1, baseline_line_2, baseline_line_3);
     b32:	7f 93       	push	r23
     b34:	6f 93       	push	r22
     b36:	5f 93       	push	r21
     b38:	4f 93       	push	r20
     b3a:	3f 93       	push	r19
     b3c:	2f 93       	push	r18
     b3e:	9f 93       	push	r25
     b40:	8f 93       	push	r24
     b42:	82 e1       	ldi	r24, 0x12	; 18
     b44:	90 e2       	ldi	r25, 0x20	; 32
     b46:	9f 93       	push	r25
     b48:	8f 93       	push	r24
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	31 d6       	rcall	.+3170   	; 0x17b2 <sprintf>
	uart_puts(&uartD0, str);
     b50:	be 01       	movw	r22, r28
     b52:	8e e6       	ldi	r24, 0x6E	; 110
     b54:	90 e2       	ldi	r25, 0x20	; 32
     b56:	db d1       	rcall	.+950    	; 0xf0e <uart_puts>
     b58:	2d b7       	in	r18, 0x3d	; 61
     b5a:	3e b7       	in	r19, 0x3e	; 62
     b5c:	24 5f       	subi	r18, 0xF4	; 244
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	2d bf       	out	0x3d, r18	; 61
     b62:	3e bf       	out	0x3e, r19	; 62
	while(1)
	{
		sprintf(str, "Sonar A = %d cm\n\r", ((TWIOut[SONAR_A_ADDRESS+1]<<8)+TWIOut[SONAR_A_ADDRESS]));
     b64:	0f 2e       	mov	r0, r31
     b66:	fd e2       	ldi	r31, 0x2D	; 45
     b68:	2f 2e       	mov	r2, r31
     b6a:	f0 e2       	ldi	r31, 0x20	; 32
     b6c:	3f 2e       	mov	r3, r31
     b6e:	f0 2d       	mov	r31, r0
		uart_puts(&uartD0, str);
		sprintf(str, "Sonar B = %d cm\n\r", ((TWIOut[SONAR_B_ADDRESS+1]<<8)+TWIOut[SONAR_B_ADDRESS]));
     b70:	0f 2e       	mov	r0, r31
     b72:	ff e3       	ldi	r31, 0x3F	; 63
     b74:	4f 2e       	mov	r4, r31
     b76:	f0 e2       	ldi	r31, 0x20	; 32
     b78:	5f 2e       	mov	r5, r31
     b7a:	f0 2d       	mov	r31, r0
	baseline_line_3 = ((TWIOut[LINE_ADDRESS_3+1]<<8)+TWIOut[LINE_ADDRESS_3]);
	sprintf(str, "Line Base\t%d \t%d \t%d \t%d\n\r", baseline_line_0, baseline_line_1, baseline_line_2, baseline_line_3);
	uart_puts(&uartD0, str);
	while(1)
	{
		sprintf(str, "Sonar A = %d cm\n\r", ((TWIOut[SONAR_A_ADDRESS+1]<<8)+TWIOut[SONAR_A_ADDRESS]));
     b7c:	e7 e1       	ldi	r30, 0x17	; 23
     b7e:	f3 e2       	ldi	r31, 0x23	; 35
     b80:	70 80       	ld	r7, Z
     b82:	61 2c       	mov	r6, r1
     b84:	e6 e1       	ldi	r30, 0x16	; 22
     b86:	f3 e2       	ldi	r31, 0x23	; 35
     b88:	80 81       	ld	r24, Z
     b8a:	93 01       	movw	r18, r6
     b8c:	28 0f       	add	r18, r24
     b8e:	31 1d       	adc	r19, r1
     b90:	c9 01       	movw	r24, r18
     b92:	9f 93       	push	r25
     b94:	2f 93       	push	r18
     b96:	3f 92       	push	r3
     b98:	2f 92       	push	r2
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	09 d6       	rcall	.+3090   	; 0x17b2 <sprintf>
		uart_puts(&uartD0, str);
     ba0:	be 01       	movw	r22, r28
     ba2:	8e e6       	ldi	r24, 0x6E	; 110
     ba4:	90 e2       	ldi	r25, 0x20	; 32
     ba6:	b3 d1       	rcall	.+870    	; 0xf0e <uart_puts>
		sprintf(str, "Sonar B = %d cm\n\r", ((TWIOut[SONAR_B_ADDRESS+1]<<8)+TWIOut[SONAR_B_ADDRESS]));
     ba8:	e9 e1       	ldi	r30, 0x19	; 25
     baa:	f3 e2       	ldi	r31, 0x23	; 35
     bac:	10 81       	ld	r17, Z
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	e8 e1       	ldi	r30, 0x18	; 24
     bb2:	f3 e2       	ldi	r31, 0x23	; 35
     bb4:	80 81       	ld	r24, Z
     bb6:	98 01       	movw	r18, r16
     bb8:	28 0f       	add	r18, r24
     bba:	31 1d       	adc	r19, r1
     bbc:	c9 01       	movw	r24, r18
     bbe:	9f 93       	push	r25
     bc0:	2f 93       	push	r18
     bc2:	5f 92       	push	r5
     bc4:	4f 92       	push	r4
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	f3 d5       	rcall	.+3046   	; 0x17b2 <sprintf>
		uart_puts(&uartD0, str);
     bcc:	be 01       	movw	r22, r28
     bce:	8e e6       	ldi	r24, 0x6E	; 110
     bd0:	90 e2       	ldi	r25, 0x20	; 32
     bd2:	9d d1       	rcall	.+826    	; 0xf0e <uart_puts>
		
		sprintf(str, "Line Sensor\t%d \t%d \t%d \t%d\n\r", baseline_line_0-((TWIOut[LINE_ADDRESS_0+1]<<8)+TWIOut[LINE_ADDRESS_0]), baseline_line_1-((TWIOut[LINE_ADDRESS_1+1]<<8)+TWIOut[LINE_ADDRESS_1]), baseline_line_2-((TWIOut[LINE_ADDRESS_2+1]<<8)+TWIOut[LINE_ADDRESS_2]), baseline_line_3-((TWIOut[LINE_ADDRESS_3+1]<<8)+TWIOut[LINE_ADDRESS_3]));
     bd4:	e2 e3       	ldi	r30, 0x32	; 50
     bd6:	f3 e2       	ldi	r31, 0x23	; 35
     bd8:	f0 80       	ld	r15, Z
     bda:	e1 2c       	mov	r14, r1
     bdc:	e1 e3       	ldi	r30, 0x31	; 49
     bde:	f3 e2       	ldi	r31, 0x23	; 35
     be0:	80 81       	ld	r24, Z
     be2:	97 01       	movw	r18, r14
     be4:	28 0f       	add	r18, r24
     be6:	31 1d       	adc	r19, r1
     be8:	80 91 12 24 	lds	r24, 0x2412
     bec:	90 91 13 24 	lds	r25, 0x2413
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	9f 93       	push	r25
     bf6:	8f 93       	push	r24
     bf8:	e0 e3       	ldi	r30, 0x30	; 48
     bfa:	f3 e2       	ldi	r31, 0x23	; 35
     bfc:	d0 80       	ld	r13, Z
     bfe:	c1 2c       	mov	r12, r1
     c00:	ef e2       	ldi	r30, 0x2F	; 47
     c02:	f3 e2       	ldi	r31, 0x23	; 35
     c04:	80 81       	ld	r24, Z
     c06:	96 01       	movw	r18, r12
     c08:	28 0f       	add	r18, r24
     c0a:	31 1d       	adc	r19, r1
     c0c:	80 91 75 21 	lds	r24, 0x2175
     c10:	90 91 76 21 	lds	r25, 0x2176
     c14:	82 1b       	sub	r24, r18
     c16:	93 0b       	sbc	r25, r19
     c18:	9f 93       	push	r25
     c1a:	8f 93       	push	r24
     c1c:	ee e2       	ldi	r30, 0x2E	; 46
     c1e:	f3 e2       	ldi	r31, 0x23	; 35
     c20:	b0 80       	ld	r11, Z
     c22:	a1 2c       	mov	r10, r1
     c24:	ed e2       	ldi	r30, 0x2D	; 45
     c26:	f3 e2       	ldi	r31, 0x23	; 35
     c28:	80 81       	ld	r24, Z
     c2a:	95 01       	movw	r18, r10
     c2c:	28 0f       	add	r18, r24
     c2e:	31 1d       	adc	r19, r1
     c30:	80 91 77 21 	lds	r24, 0x2177
     c34:	90 91 78 21 	lds	r25, 0x2178
     c38:	82 1b       	sub	r24, r18
     c3a:	93 0b       	sbc	r25, r19
     c3c:	9f 93       	push	r25
     c3e:	8f 93       	push	r24
     c40:	90 90 2c 23 	lds	r9, 0x232C
     c44:	81 2c       	mov	r8, r1
     c46:	80 91 2b 23 	lds	r24, 0x232B
     c4a:	94 01       	movw	r18, r8
     c4c:	28 0f       	add	r18, r24
     c4e:	31 1d       	adc	r19, r1
     c50:	80 91 79 21 	lds	r24, 0x2179
     c54:	90 91 7a 21 	lds	r25, 0x217A
     c58:	82 1b       	sub	r24, r18
     c5a:	93 0b       	sbc	r25, r19
     c5c:	9f 93       	push	r25
     c5e:	8f 93       	push	r24
     c60:	81 e5       	ldi	r24, 0x51	; 81
     c62:	90 e2       	ldi	r25, 0x20	; 32
     c64:	9f 93       	push	r25
     c66:	8f 93       	push	r24
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	a2 d5       	rcall	.+2884   	; 0x17b2 <sprintf>
		uart_puts(&uartD0, str);
     c6e:	be 01       	movw	r22, r28
     c70:	8e e6       	ldi	r24, 0x6E	; 110
     c72:	90 e2       	ldi	r25, 0x20	; 32
     c74:	4c d1       	rcall	.+664    	; 0xf0e <uart_puts>
     c76:	3f ef       	ldi	r19, 0xFF	; 255
     c78:	89 e6       	ldi	r24, 0x69	; 105
     c7a:	98 e1       	ldi	r25, 0x18	; 24
     c7c:	31 50       	subi	r19, 0x01	; 1
     c7e:	80 40       	sbci	r24, 0x00	; 0
     c80:	90 40       	sbci	r25, 0x00	; 0
     c82:	e1 f7       	brne	.-8      	; 0xc7c <main+0x1fc>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <main+0x206>
     c86:	00 00       	nop
     c88:	ed b7       	in	r30, 0x3d	; 61
     c8a:	fe b7       	in	r31, 0x3e	; 62
     c8c:	78 96       	adiw	r30, 0x18	; 24
     c8e:	ed bf       	out	0x3d, r30	; 61
     c90:	fe bf       	out	0x3e, r31	; 62
     c92:	74 cf       	rjmp	.-280    	; 0xb7c <main+0xfc>

00000c94 <TWI_SlaveInitializeDriver>:
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
	twi->interface = module;
     c94:	fc 01       	movw	r30, r24
     c96:	60 83       	st	Z, r22
     c98:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
     c9a:	42 83       	std	Z+2, r20	; 0x02
     c9c:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
     c9e:	ec 57       	subi	r30, 0x7C	; 124
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	10 82       	st	Z, r1
	twi->bytesSent = 0;
     ca4:	fc 01       	movw	r30, r24
     ca6:	eb 57       	subi	r30, 0x7B	; 123
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	10 82       	st	Z, r1
	twi->status = TWIS_STATUS_READY;
     cac:	fc 01       	movw	r30, r24
     cae:	ea 57       	subi	r30, 0x7A	; 122
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	10 82       	st	Z, r1
	twi->result = TWIS_RESULT_UNKNOWN;
     cb4:	fc 01       	movw	r30, r24
     cb6:	e9 57       	subi	r30, 0x79	; 121
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	10 82       	st	Z, r1
	twi->abort = false;
     cbc:	fc 01       	movw	r30, r24
     cbe:	e8 57       	subi	r30, 0x78	; 120
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	10 82       	st	Z, r1
     cc4:	08 95       	ret

00000cc6 <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
     cc6:	dc 01       	movw	r26, r24
     cc8:	ed 91       	ld	r30, X+
     cca:	fc 91       	ld	r31, X
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	48 63       	ori	r20, 0x38	; 56
     cd0:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
     cd2:	ed 91       	ld	r30, X+
     cd4:	fc 91       	ld	r31, X
     cd6:	66 0f       	add	r22, r22
     cd8:	63 87       	std	Z+11, r22	; 0x0b
     cda:	08 95       	ret

00000cdc <TWI_SlaveTransactionFinished>:
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     cdc:	fc 01       	movw	r30, r24
     cde:	e9 57       	subi	r30, 0x79	; 121
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	60 83       	st	Z, r22
	twi->status = TWIS_STATUS_READY;
     ce4:	fc 01       	movw	r30, r24
     ce6:	ea 57       	subi	r30, 0x7A	; 122
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	10 82       	st	Z, r1
     cec:	08 95       	ret

00000cee <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
     cf2:	fc 01       	movw	r30, r24
     cf4:	eb 57       	subi	r30, 0x7B	; 123
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	20 81       	ld	r18, Z
     cfa:	22 23       	and	r18, r18
     cfc:	59 f0       	breq	.+22     	; 0xd14 <TWI_SlaveWriteHandler+0x26>
     cfe:	dc 01       	movw	r26, r24
     d00:	ed 91       	ld	r30, X+
     d02:	fc 91       	ld	r31, X
     d04:	22 85       	ldd	r18, Z+10	; 0x0a
     d06:	24 ff       	sbrs	r18, 4
     d08:	05 c0       	rjmp	.+10     	; 0xd14 <TWI_SlaveWriteHandler+0x26>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     d0a:	22 e0       	ldi	r18, 0x02	; 2
     d0c:	21 87       	std	Z+9, r18	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     d0e:	61 e0       	ldi	r22, 0x01	; 1
     d10:	e5 df       	rcall	.-54     	; 0xcdc <TWI_SlaveTransactionFinished>
     d12:	24 c0       	rjmp	.+72     	; 0xd5c <TWI_SlaveWriteHandler+0x6e>
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
     d14:	fc 01       	movw	r30, r24
     d16:	eb 57       	subi	r30, 0x7B	; 123
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	20 81       	ld	r18, Z
     d1c:	20 34       	cpi	r18, 0x40	; 64
     d1e:	b8 f4       	brcc	.+46     	; 0xd4e <TWI_SlaveWriteHandler+0x60>
			uint8_t data = twi->sendData[twi->bytesSent];
     d20:	fc 01       	movw	r30, r24
     d22:	eb 57       	subi	r30, 0x7B	; 123
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	20 81       	ld	r18, Z
     d28:	dc 01       	movw	r26, r24
     d2a:	a2 0f       	add	r26, r18
     d2c:	b1 1d       	adc	r27, r1
     d2e:	ac 5b       	subi	r26, 0xBC	; 188
     d30:	bf 4f       	sbci	r27, 0xFF	; 255
     d32:	2c 91       	ld	r18, X
			twi->interface->SLAVE.DATA = data;
     d34:	ec 01       	movw	r28, r24
     d36:	a8 81       	ld	r26, Y
     d38:	b9 81       	ldd	r27, Y+1	; 0x01
     d3a:	1c 96       	adiw	r26, 0x0c	; 12
     d3c:	2c 93       	st	X, r18
			twi->bytesSent++;
     d3e:	20 81       	ld	r18, Z
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     d44:	e8 81       	ld	r30, Y
     d46:	f9 81       	ldd	r31, Y+1	; 0x01
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	81 87       	std	Z+9, r24	; 0x09
     d4c:	07 c0       	rjmp	.+14     	; 0xd5c <TWI_SlaveWriteHandler+0x6e>
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     d4e:	dc 01       	movw	r26, r24
     d50:	ed 91       	ld	r30, X+
     d52:	fc 91       	ld	r31, X
     d54:	22 e0       	ldi	r18, 0x02	; 2
     d56:	21 87       	std	Z+9, r18	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     d58:	62 e0       	ldi	r22, 0x02	; 2
     d5a:	c0 df       	rcall	.-128    	; 0xcdc <TWI_SlaveTransactionFinished>
		}
	}
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     d6c:	e8 81       	ld	r30, Y
     d6e:	f9 81       	ldd	r31, Y+1	; 0x01
     d70:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
     d72:	84 60       	ori	r24, 0x04	; 4
     d74:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
     d76:	fe 01       	movw	r30, r28
     d78:	ec 57       	subi	r30, 0x7C	; 124
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	80 81       	ld	r24, Z
     d7e:	80 34       	cpi	r24, 0x40	; 64
     d80:	48 f5       	brcc	.+82     	; 0xdd4 <TWI_SlaveReadHandler+0x72>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
     d82:	e8 81       	ld	r30, Y
     d84:	f9 81       	ldd	r31, Y+1	; 0x01
     d86:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
     d88:	8e 01       	movw	r16, r28
     d8a:	0c 57       	subi	r16, 0x7C	; 124
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	f8 01       	movw	r30, r16
     d90:	90 81       	ld	r25, Z
     d92:	fe 01       	movw	r30, r28
     d94:	e9 0f       	add	r30, r25
     d96:	f1 1d       	adc	r31, r1
     d98:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
     d9a:	ea 81       	ldd	r30, Y+2	; 0x02
     d9c:	fb 81       	ldd	r31, Y+3	; 0x03
     d9e:	19 95       	eicall

		twi->bytesReceived++;
     da0:	f8 01       	movw	r30, r16
     da2:	80 81       	ld	r24, Z
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	80 83       	st	Z, r24

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
     da8:	fe 01       	movw	r30, r28
     daa:	e8 57       	subi	r30, 0x78	; 120
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	80 81       	ld	r24, Z
     db0:	88 23       	and	r24, r24
     db2:	59 f0       	breq	.+22     	; 0xdca <TWI_SlaveReadHandler+0x68>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     db4:	e8 81       	ld	r30, Y
     db6:	f9 81       	ldd	r31, Y+1	; 0x01
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	81 87       	std	Z+9, r24	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     dbc:	66 e0       	ldi	r22, 0x06	; 6
     dbe:	ce 01       	movw	r24, r28
     dc0:	8d df       	rcall	.-230    	; 0xcdc <TWI_SlaveTransactionFinished>
			twi->abort = false;
     dc2:	c8 57       	subi	r28, 0x78	; 120
     dc4:	df 4f       	sbci	r29, 0xFF	; 255
     dc6:	18 82       	st	Y, r1
     dc8:	0c c0       	rjmp	.+24     	; 0xde2 <TWI_SlaveReadHandler+0x80>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     dca:	e8 81       	ld	r30, Y
     dcc:	f9 81       	ldd	r31, Y+1	; 0x01
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	81 87       	std	Z+9, r24	; 0x09
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <TWI_SlaveReadHandler+0x80>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
     dd4:	e8 81       	ld	r30, Y
     dd6:	f9 81       	ldd	r31, Y+1	; 0x01
     dd8:	86 e0       	ldi	r24, 0x06	; 6
     dda:	81 87       	std	Z+9, r24	; 0x09
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     ddc:	62 e0       	ldi	r22, 0x02	; 2
     dde:	ce 01       	movw	r24, r28
     de0:	7d df       	rcall	.-262    	; 0xcdc <TWI_SlaveTransactionFinished>
	}
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
     dec:	dc 01       	movw	r26, r24
     dee:	ed 91       	ld	r30, X+
     df0:	fc 91       	ld	r31, X
     df2:	22 85       	ldd	r18, Z+10	; 0x0a
     df4:	21 ff       	sbrs	r18, 1
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <TWI_SlaveDataHandler+0xe>
		TWI_SlaveWriteHandler(twi);
     df8:	7a cf       	rjmp	.-268    	; 0xcee <TWI_SlaveWriteHandler>
	} else {
		TWI_SlaveReadHandler(twi);
     dfa:	b3 cf       	rjmp	.-154    	; 0xd62 <TWI_SlaveReadHandler>

00000dfc <TWI_SlaveStopHandler>:
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     dfc:	dc 01       	movw	r26, r24
     dfe:	ed 91       	ld	r30, X+
     e00:	fc 91       	ld	r31, X
     e02:	11 97       	sbiw	r26, 0x01	; 1
     e04:	20 85       	ldd	r18, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     e06:	2b 7f       	andi	r18, 0xFB	; 251
     e08:	20 87       	std	Z+8, r18	; 0x08
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     e0a:	ed 91       	ld	r30, X+
     e0c:	fc 91       	ld	r31, X
     e0e:	22 85       	ldd	r18, Z+10	; 0x0a
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
     e10:	20 64       	ori	r18, 0x40	; 64
     e12:	22 87       	std	Z+10, r18	; 0x0a

	TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	62 cf       	rjmp	.-316    	; 0xcdc <TWI_SlaveTransactionFinished>

00000e18 <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	ec 01       	movw	r28, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
     e1e:	fc 01       	movw	r30, r24
     e20:	e8 57       	subi	r30, 0x78	; 120
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	80 81       	ld	r24, Z
     e26:	88 23       	and	r24, r24
     e28:	59 f0       	breq	.+22     	; 0xe40 <TWI_SlaveAddressMatchHandler+0x28>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     e2a:	e8 81       	ld	r30, Y
     e2c:	f9 81       	ldd	r31, Y+1	; 0x01
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	81 87       	std	Z+9, r24	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     e32:	66 e0       	ldi	r22, 0x06	; 6
     e34:	ce 01       	movw	r24, r28
     e36:	52 df       	rcall	.-348    	; 0xcdc <TWI_SlaveTransactionFinished>
		twi->abort = false;
     e38:	c8 57       	subi	r28, 0x78	; 120
     e3a:	df 4f       	sbci	r29, 0xFF	; 255
     e3c:	18 82       	st	Y, r1
     e3e:	1a c0       	rjmp	.+52     	; 0xe74 <TWI_SlaveAddressMatchHandler+0x5c>
	} else {
		twi->status = TWIS_STATUS_BUSY;
     e40:	fe 01       	movw	r30, r28
     e42:	ea 57       	subi	r30, 0x7A	; 122
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 83       	st	Z, r24
		twi->result = TWIS_RESULT_UNKNOWN;
     e4a:	fe 01       	movw	r30, r28
     e4c:	e9 57       	subi	r30, 0x79	; 121
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	10 82       	st	Z, r1

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     e52:	e8 81       	ld	r30, Y
     e54:	f9 81       	ldd	r31, Y+1	; 0x01
     e56:	80 85       	ldd	r24, Z+8	; 0x08
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     e58:	8b 7f       	andi	r24, 0xFB	; 251
     e5a:	80 87       	std	Z+8, r24	; 0x08

		twi->bytesReceived = 0;
     e5c:	fe 01       	movw	r30, r28
     e5e:	ec 57       	subi	r30, 0x7C	; 124
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     e64:	fe 01       	movw	r30, r28
     e66:	eb 57       	subi	r30, 0x7B	; 123
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	10 82       	st	Z, r1

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     e6c:	e8 81       	ld	r30, Y
     e6e:	f9 81       	ldd	r31, Y+1	; 0x01
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	81 87       	std	Z+9, r24	; 0x09
	}
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <TWI_SlaveInterruptHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     e7a:	dc 01       	movw	r26, r24
     e7c:	ed 91       	ld	r30, X+
     e7e:	fc 91       	ld	r31, X
     e80:	22 85       	ldd	r18, Z+10	; 0x0a

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
     e82:	22 ff       	sbrs	r18, 2
     e84:	12 c0       	rjmp	.+36     	; 0xeaa <TWI_SlaveInterruptHandler+0x30>
		twi->bytesReceived = 0;
     e86:	fc 01       	movw	r30, r24
     e88:	ec 57       	subi	r30, 0x7C	; 124
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     e8e:	fc 01       	movw	r30, r24
     e90:	eb 57       	subi	r30, 0x7B	; 123
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_BUS_ERROR;
     e96:	fc 01       	movw	r30, r24
     e98:	e9 57       	subi	r30, 0x79	; 121
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	24 e0       	ldi	r18, 0x04	; 4
     e9e:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     ea0:	fc 01       	movw	r30, r24
     ea2:	ea 57       	subi	r30, 0x7A	; 122
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	10 82       	st	Z, r1
     ea8:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
     eaa:	23 ff       	sbrs	r18, 3
     eac:	12 c0       	rjmp	.+36     	; 0xed2 <TWI_SlaveInterruptHandler+0x58>
		twi->bytesReceived = 0;
     eae:	fc 01       	movw	r30, r24
     eb0:	ec 57       	subi	r30, 0x7C	; 124
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     eb6:	fc 01       	movw	r30, r24
     eb8:	eb 57       	subi	r30, 0x7B	; 123
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
     ebe:	fc 01       	movw	r30, r24
     ec0:	e9 57       	subi	r30, 0x79	; 121
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	23 e0       	ldi	r18, 0x03	; 3
     ec6:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     ec8:	fc 01       	movw	r30, r24
     eca:	ea 57       	subi	r30, 0x7A	; 122
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	10 82       	st	Z, r1
     ed0:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     ed2:	42 2f       	mov	r20, r18
     ed4:	40 74       	andi	r20, 0x40	; 64
 *  Handles all TWI transactions and responses to address match, data reception,
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
     ed6:	32 2f       	mov	r19, r18
     ed8:	31 74       	andi	r19, 0x41	; 65
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
		twi->status = TWIS_STATUS_READY;
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     eda:	31 34       	cpi	r19, 0x41	; 65
     edc:	09 f4       	brne	.+2      	; 0xee0 <TWI_SlaveInterruptHandler+0x66>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
     ede:	9c cf       	rjmp	.-200    	; 0xe18 <TWI_SlaveAddressMatchHandler>
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
     ee0:	44 23       	and	r20, r20
     ee2:	09 f0       	breq	.+2      	; 0xee6 <TWI_SlaveInterruptHandler+0x6c>
		TWI_SlaveStopHandler(twi);
     ee4:	8b cf       	rjmp	.-234    	; 0xdfc <TWI_SlaveStopHandler>
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
     ee6:	22 23       	and	r18, r18
     ee8:	0c f4       	brge	.+2      	; 0xeec <TWI_SlaveInterruptHandler+0x72>
		TWI_SlaveDataHandler(twi);
     eea:	80 cf       	rjmp	.-256    	; 0xdec <TWI_SlaveDataHandler>
	}

	/* If unexpected state. */
	else {
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_FAIL);
     eec:	65 e0       	ldi	r22, 0x05	; 5
     eee:	f6 ce       	rjmp	.-532    	; 0xcdc <TWI_SlaveTransactionFinished>

00000ef0 <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	ec 01       	movw	r28, r24
     ef8:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     efa:	8c d1       	rcall	.+792    	; 0x1214 <USART_TXBuffer_FreeSpace>
     efc:	88 23       	and	r24, r24
     efe:	19 f0       	breq	.+6      	; 0xf06 <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     f00:	61 2f       	mov	r22, r17
     f02:	ce 01       	movw	r24, r28
     f04:	96 d1       	rcall	.+812    	; 0x1232 <USART_TXBuffer_PutByte>
  }
}
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	08 95       	ret

00000f0e <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
     f18:	c6 2f       	mov	r28, r22
     f1a:	d7 2f       	mov	r29, r23
     f1c:	69 91       	ld	r22, Y+
     f1e:	66 23       	and	r22, r22
     f20:	29 f0       	breq	.+10     	; 0xf2c <uart_puts+0x1e>
    uart_putc(uart, c);
     f22:	c8 01       	movw	r24, r16
     f24:	e5 df       	rcall	.-54     	; 0xef0 <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     f26:	69 91       	ld	r22, Y+
     f28:	61 11       	cpse	r22, r1
     f2a:	fb cf       	rjmp	.-10     	; 0xf22 <uart_puts+0x14>
    uart_putc(uart, c);
  }
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	08 95       	ret

00000f36 <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     f36:	80 3a       	cpi	r24, 0xA0	; 160
     f38:	28 e0       	ldi	r18, 0x08	; 8
     f3a:	92 07       	cpc	r25, r18
     f3c:	39 f4       	brne	.+14     	; 0xf4c <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     f3e:	e0 e4       	ldi	r30, 0x40	; 64
     f40:	f6 e0       	ldi	r31, 0x06	; 6
     f42:	88 e0       	ldi	r24, 0x08	; 8
     f44:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     f46:	84 e0       	ldi	r24, 0x04	; 4
     f48:	82 83       	std	Z+2, r24	; 0x02
     return;
     f4a:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     f4c:	80 3b       	cpi	r24, 0xB0	; 176
     f4e:	28 e0       	ldi	r18, 0x08	; 8
     f50:	92 07       	cpc	r25, r18
     f52:	39 f4       	brne	.+14     	; 0xf62 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     f54:	e0 e4       	ldi	r30, 0x40	; 64
     f56:	f6 e0       	ldi	r31, 0x06	; 6
     f58:	80 e8       	ldi	r24, 0x80	; 128
     f5a:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     f5c:	80 e4       	ldi	r24, 0x40	; 64
     f5e:	82 83       	std	Z+2, r24	; 0x02
     return;
     f60:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     f62:	80 3a       	cpi	r24, 0xA0	; 160
     f64:	29 e0       	ldi	r18, 0x09	; 9
     f66:	92 07       	cpc	r25, r18
     f68:	39 f4       	brne	.+14     	; 0xf78 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     f6a:	e0 e6       	ldi	r30, 0x60	; 96
     f6c:	f6 e0       	ldi	r31, 0x06	; 6
     f6e:	88 e0       	ldi	r24, 0x08	; 8
     f70:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     f72:	84 e0       	ldi	r24, 0x04	; 4
     f74:	82 83       	std	Z+2, r24	; 0x02
     return;
     f76:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     f78:	80 3b       	cpi	r24, 0xB0	; 176
     f7a:	29 e0       	ldi	r18, 0x09	; 9
     f7c:	92 07       	cpc	r25, r18
     f7e:	39 f4       	brne	.+14     	; 0xf8e <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     f80:	e0 e6       	ldi	r30, 0x60	; 96
     f82:	f6 e0       	ldi	r31, 0x06	; 6
     f84:	80 e8       	ldi	r24, 0x80	; 128
     f86:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     f88:	80 e4       	ldi	r24, 0x40	; 64
     f8a:	82 83       	std	Z+2, r24	; 0x02
     return;
     f8c:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     f8e:	80 3a       	cpi	r24, 0xA0	; 160
     f90:	9a 40       	sbci	r25, 0x0A	; 10
     f92:	31 f4       	brne	.+12     	; 0xfa0 <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     f94:	e0 e8       	ldi	r30, 0x80	; 128
     f96:	f6 e0       	ldi	r31, 0x06	; 6
     f98:	88 e0       	ldi	r24, 0x08	; 8
     f9a:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     f9c:	84 e0       	ldi	r24, 0x04	; 4
     f9e:	82 83       	std	Z+2, r24	; 0x02
     fa0:	08 95       	ret

00000fa2 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     fa2:	4f 92       	push	r4
     fa4:	5f 92       	push	r5
     fa6:	6f 92       	push	r6
     fa8:	7f 92       	push	r7
     faa:	8f 92       	push	r8
     fac:	9f 92       	push	r9
     fae:	af 92       	push	r10
     fb0:	bf 92       	push	r11
     fb2:	cf 92       	push	r12
     fb4:	df 92       	push	r13
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	49 01       	movw	r8, r18
     fc0:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     fc2:	4e 2d       	mov	r20, r14
     fc4:	41 70       	andi	r20, 0x01	; 1
     fc6:	20 e1       	ldi	r18, 0x10	; 16
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	79 01       	movw	r14, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <calc_bsel+0x30>
     fce:	f5 94       	asr	r15
     fd0:	e7 94       	ror	r14
     fd2:	4a 95       	dec	r20
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <calc_bsel+0x2c>
  if ( scale < 0 ) {
     fd6:	00 23       	and	r16, r16
     fd8:	0c f0       	brlt	.+2      	; 0xfdc <calc_bsel+0x3a>
     fda:	3a c0       	rjmp	.+116    	; 0x1050 <calc_bsel+0xae>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     fdc:	a4 d2       	rcall	.+1352   	; 0x1526 <__floatunsisf>
     fde:	2b 01       	movw	r4, r22
     fe0:	3c 01       	movw	r6, r24
     fe2:	b7 01       	movw	r22, r14
     fe4:	77 27       	eor	r23, r23
     fe6:	88 27       	eor	r24, r24
     fe8:	77 fd       	sbrc	r23, 7
     fea:	80 95       	com	r24
     fec:	98 2f       	mov	r25, r24
     fee:	9d d2       	rcall	.+1338   	; 0x152a <__floatsisf>
     ff0:	6b 01       	movw	r12, r22
     ff2:	7c 01       	movw	r14, r24
     ff4:	c5 01       	movw	r24, r10
     ff6:	b4 01       	movw	r22, r8
     ff8:	96 d2       	rcall	.+1324   	; 0x1526 <__floatunsisf>
     ffa:	9b 01       	movw	r18, r22
     ffc:	ac 01       	movw	r20, r24
     ffe:	c7 01       	movw	r24, r14
    1000:	b6 01       	movw	r22, r12
    1002:	1f d3       	rcall	.+1598   	; 0x1642 <__mulsf3>
    1004:	9b 01       	movw	r18, r22
    1006:	ac 01       	movw	r20, r24
    1008:	c3 01       	movw	r24, r6
    100a:	b2 01       	movw	r22, r4
    100c:	f8 d1       	rcall	.+1008   	; 0x13fe <__divsf3>
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	8e d1       	rcall	.+796    	; 0x1334 <__subsf3>
    1018:	6b 01       	movw	r12, r22
    101a:	7c 01       	movw	r14, r24
    101c:	11 27       	eor	r17, r17
    101e:	01 95       	neg	r16
    1020:	0c f4       	brge	.+2      	; 0x1024 <calc_bsel+0x82>
    1022:	10 95       	com	r17
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	02 c0       	rjmp	.+4      	; 0x102e <calc_bsel+0x8c>
    102a:	66 0f       	add	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	0a 95       	dec	r16
    1030:	e2 f7       	brpl	.-8      	; 0x102a <calc_bsel+0x88>
    1032:	88 27       	eor	r24, r24
    1034:	77 fd       	sbrc	r23, 7
    1036:	80 95       	com	r24
    1038:	98 2f       	mov	r25, r24
    103a:	77 d2       	rcall	.+1262   	; 0x152a <__floatsisf>
    103c:	9b 01       	movw	r18, r22
    103e:	ac 01       	movw	r20, r24
    1040:	c7 01       	movw	r24, r14
    1042:	b6 01       	movw	r22, r12
    1044:	fe d2       	rcall	.+1532   	; 0x1642 <__mulsf3>
    1046:	60 d3       	rcall	.+1728   	; 0x1708 <round>
    1048:	42 d2       	rcall	.+1156   	; 0x14ce <__fixunssfsi>
    104a:	86 2f       	mov	r24, r22
    104c:	97 2f       	mov	r25, r23
    104e:	35 c0       	rjmp	.+106    	; 0x10ba <calc_bsel+0x118>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
    1050:	6a d2       	rcall	.+1236   	; 0x1526 <__floatunsisf>
    1052:	2b 01       	movw	r4, r22
    1054:	3c 01       	movw	r6, r24
    1056:	b7 01       	movw	r22, r14
    1058:	77 27       	eor	r23, r23
    105a:	88 27       	eor	r24, r24
    105c:	77 fd       	sbrc	r23, 7
    105e:	80 95       	com	r24
    1060:	98 2f       	mov	r25, r24
    1062:	63 d2       	rcall	.+1222   	; 0x152a <__floatsisf>
    1064:	6b 01       	movw	r12, r22
    1066:	7c 01       	movw	r14, r24
    1068:	c5 01       	movw	r24, r10
    106a:	b4 01       	movw	r22, r8
    106c:	5c d2       	rcall	.+1208   	; 0x1526 <__floatunsisf>
    106e:	9b 01       	movw	r18, r22
    1070:	ac 01       	movw	r20, r24
    1072:	c7 01       	movw	r24, r14
    1074:	b6 01       	movw	r22, r12
    1076:	e5 d2       	rcall	.+1482   	; 0x1642 <__mulsf3>
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	c3 01       	movw	r24, r6
    107e:	b2 01       	movw	r22, r4
    1080:	be d1       	rcall	.+892    	; 0x13fe <__divsf3>
    1082:	4b 01       	movw	r8, r22
    1084:	5c 01       	movw	r10, r24
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <calc_bsel+0xee>
    108c:	66 0f       	add	r22, r22
    108e:	77 1f       	adc	r23, r23
    1090:	0a 95       	dec	r16
    1092:	e2 f7       	brpl	.-8      	; 0x108c <calc_bsel+0xea>
    1094:	88 27       	eor	r24, r24
    1096:	77 fd       	sbrc	r23, 7
    1098:	80 95       	com	r24
    109a:	98 2f       	mov	r25, r24
    109c:	46 d2       	rcall	.+1164   	; 0x152a <__floatsisf>
    109e:	9b 01       	movw	r18, r22
    10a0:	ac 01       	movw	r20, r24
    10a2:	c5 01       	movw	r24, r10
    10a4:	b4 01       	movw	r22, r8
    10a6:	ab d1       	rcall	.+854    	; 0x13fe <__divsf3>
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e8       	ldi	r20, 0x80	; 128
    10ae:	5f e3       	ldi	r21, 0x3F	; 63
    10b0:	41 d1       	rcall	.+642    	; 0x1334 <__subsf3>
    10b2:	2a d3       	rcall	.+1620   	; 0x1708 <round>
    10b4:	0c d2       	rcall	.+1048   	; 0x14ce <__fixunssfsi>
    10b6:	86 2f       	mov	r24, r22
    10b8:	97 2f       	mov	r25, r23
  }
}
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	df 90       	pop	r13
    10c4:	cf 90       	pop	r12
    10c6:	bf 90       	pop	r11
    10c8:	af 90       	pop	r10
    10ca:	9f 90       	pop	r9
    10cc:	8f 90       	pop	r8
    10ce:	7f 90       	pop	r7
    10d0:	6f 90       	pop	r6
    10d2:	5f 90       	pop	r5
    10d4:	4f 90       	pop	r4
    10d6:	08 95       	ret

000010d8 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
    10d8:	4f 92       	push	r4
    10da:	5f 92       	push	r5
    10dc:	6f 92       	push	r6
    10de:	7f 92       	push	r7
    10e0:	8f 92       	push	r8
    10e2:	9f 92       	push	r9
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	ef 92       	push	r14
    10ea:	0f 93       	push	r16
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	2b 01       	movw	r4, r22
    10f2:	3c 01       	movw	r6, r24
    10f4:	49 01       	movw	r8, r18
    10f6:	5a 01       	movw	r10, r20
    10f8:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    10fa:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
    10fc:	ed 2e       	mov	r14, r29
    10fe:	0c 2f       	mov	r16, r28
    1100:	a5 01       	movw	r20, r10
    1102:	94 01       	movw	r18, r8
    1104:	c3 01       	movw	r24, r6
    1106:	b2 01       	movw	r22, r4
    1108:	4c df       	rcall	.-360    	; 0xfa2 <calc_bsel>
    110a:	81 15       	cp	r24, r1
    110c:	90 41       	sbci	r25, 0x10	; 16
    110e:	18 f0       	brcs	.+6      	; 0x1116 <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    1110:	cf 5f       	subi	r28, 0xFF	; 255
    1112:	c8 30       	cpi	r28, 0x08	; 8
    1114:	99 f7       	brne	.-26     	; 0x10fc <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
    1116:	8c 2f       	mov	r24, r28
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	0f 91       	pop	r16
    111e:	ef 90       	pop	r14
    1120:	bf 90       	pop	r11
    1122:	af 90       	pop	r10
    1124:	9f 90       	pop	r9
    1126:	8f 90       	pop	r8
    1128:	7f 90       	pop	r7
    112a:	6f 90       	pop	r6
    112c:	5f 90       	pop	r5
    112e:	4f 90       	pop	r4
    1130:	08 95       	ret

00001132 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
    1132:	2f 92       	push	r2
    1134:	3f 92       	push	r3
    1136:	4f 92       	push	r4
    1138:	5f 92       	push	r5
    113a:	6f 92       	push	r6
    113c:	7f 92       	push	r7
    113e:	8f 92       	push	r8
    1140:	9f 92       	push	r9
    1142:	af 92       	push	r10
    1144:	bf 92       	push	r11
    1146:	cf 92       	push	r12
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	ec 01       	movw	r28, r24
    1156:	3b 01       	movw	r6, r22
    1158:	49 01       	movw	r8, r18
    115a:	5a 01       	movw	r10, r20
    115c:	17 01       	movw	r2, r14
    115e:	28 01       	movw	r4, r16
    1160:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
    1162:	0c 2d       	mov	r16, r12
    1164:	a2 01       	movw	r20, r4
    1166:	91 01       	movw	r18, r2
    1168:	c5 01       	movw	r24, r10
    116a:	b4 01       	movw	r22, r8
    116c:	b5 df       	rcall	.-150    	; 0x10d8 <calc_bscale>
    116e:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
    1170:	08 2f       	mov	r16, r24
    1172:	a2 01       	movw	r20, r4
    1174:	91 01       	movw	r18, r2
    1176:	c5 01       	movw	r24, r10
    1178:	b4 01       	movw	r22, r8
    117a:	13 df       	rcall	.-474    	; 0xfa2 <calc_bsel>
    117c:	b8 2e       	mov	r11, r24
    117e:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
    1180:	41 e0       	ldi	r20, 0x01	; 1
    1182:	b3 01       	movw	r22, r6
    1184:	ce 01       	movw	r24, r28
    1186:	32 d0       	rcall	.+100    	; 0x11ec <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
    1188:	e8 81       	ld	r30, Y
    118a:	f9 81       	ldd	r31, Y+1	; 0x01
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
    1190:	e8 81       	ld	r30, Y
    1192:	f9 81       	ldd	r31, Y+1	; 0x01
    1194:	84 81       	ldd	r24, Z+4	; 0x04
    1196:	80 61       	ori	r24, 0x10	; 16
    1198:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
    119a:	e8 81       	ld	r30, Y
    119c:	f9 81       	ldd	r31, Y+1	; 0x01
    119e:	84 81       	ldd	r24, Z+4	; 0x04
    11a0:	88 60       	ori	r24, 0x08	; 8
    11a2:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
    11a4:	e8 81       	ld	r30, Y
    11a6:	f9 81       	ldd	r31, Y+1	; 0x01
    11a8:	83 81       	ldd	r24, Z+3	; 0x03
    11aa:	8f 7c       	andi	r24, 0xCF	; 207
    11ac:	80 61       	ori	r24, 0x10	; 16
    11ae:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
    11b0:	e8 81       	ld	r30, Y
    11b2:	f9 81       	ldd	r31, Y+1	; 0x01
    11b4:	b6 82       	std	Z+6, r11	; 0x06
    11b6:	e8 81       	ld	r30, Y
    11b8:	f9 81       	ldd	r31, Y+1	; 0x01
    11ba:	12 95       	swap	r17
    11bc:	10 7f       	andi	r17, 0xF0	; 240
    11be:	e1 2a       	or	r14, r17
    11c0:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
    11c2:	88 81       	ld	r24, Y
    11c4:	99 81       	ldd	r25, Y+1	; 0x01
    11c6:	b7 de       	rcall	.-658    	; 0xf36 <set_usart_txrx_direction>
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	cf 90       	pop	r12
    11d6:	bf 90       	pop	r11
    11d8:	af 90       	pop	r10
    11da:	9f 90       	pop	r9
    11dc:	8f 90       	pop	r8
    11de:	7f 90       	pop	r7
    11e0:	6f 90       	pop	r6
    11e2:	5f 90       	pop	r5
    11e4:	4f 90       	pop	r4
    11e6:	3f 90       	pop	r3
    11e8:	2f 90       	pop	r2
    11ea:	08 95       	ret

000011ec <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
    11ec:	fc 01       	movw	r30, r24
    11ee:	60 83       	st	Z, r22
    11f0:	71 83       	std	Z+1, r23	; 0x01
    11f2:	42 83       	std	Z+2, r20	; 0x02
    11f4:	ec 5f       	subi	r30, 0xFC	; 252
    11f6:	fe 4f       	sbci	r31, 0xFE	; 254
    11f8:	10 82       	st	Z, r1
    11fa:	fc 01       	movw	r30, r24
    11fc:	ed 5f       	subi	r30, 0xFD	; 253
    11fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1200:	10 82       	st	Z, r1
    1202:	fc 01       	movw	r30, r24
    1204:	ea 5f       	subi	r30, 0xFA	; 250
    1206:	fe 4f       	sbci	r31, 0xFE	; 254
    1208:	10 82       	st	Z, r1
    120a:	fc 01       	movw	r30, r24
    120c:	eb 5f       	subi	r30, 0xFB	; 251
    120e:	fe 4f       	sbci	r31, 0xFE	; 254
    1210:	10 82       	st	Z, r1
    1212:	08 95       	ret

00001214 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    1214:	fc 01       	movw	r30, r24
    1216:	eb 5f       	subi	r30, 0xFB	; 251
    1218:	fe 4f       	sbci	r31, 0xFE	; 254
    121a:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    121c:	fc 01       	movw	r30, r24
    121e:	ea 5f       	subi	r30, 0xFA	; 250
    1220:	fe 4f       	sbci	r31, 0xFE	; 254
    1222:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    1224:	2f 5f       	subi	r18, 0xFF	; 255
    1226:	2f 77       	andi	r18, 0x7F	; 127
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	29 13       	cpse	r18, r25
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <USART_TXBuffer_FreeSpace+0x1c>
    122e:	80 e0       	ldi	r24, 0x00	; 0
}
    1230:	08 95       	ret

00001232 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	ec 01       	movw	r28, r24
    123a:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
    123c:	eb df       	rcall	.-42     	; 0x1214 <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
    123e:	88 23       	and	r24, r24
    1240:	a1 f0       	breq	.+40     	; 0x126a <USART_TXBuffer_PutByte+0x38>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
    1242:	fe 01       	movw	r30, r28
    1244:	eb 5f       	subi	r30, 0xFB	; 251
    1246:	fe 4f       	sbci	r31, 0xFE	; 254
    1248:	90 81       	ld	r25, Z
	  	TXbufPtr->TX[tempTX_Head]= data;
    124a:	de 01       	movw	r26, r28
    124c:	a9 0f       	add	r26, r25
    124e:	b1 1d       	adc	r27, r1
    1250:	ad 57       	subi	r26, 0x7D	; 125
    1252:	bf 4f       	sbci	r27, 0xFF	; 255
    1254:	1c 93       	st	X, r17
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
    1256:	9f 5f       	subi	r25, 0xFF	; 255
    1258:	9f 77       	andi	r25, 0x7F	; 127
    125a:	90 83       	st	Z, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
    125c:	e8 81       	ld	r30, Y
    125e:	f9 81       	ldd	r31, Y+1	; 0x01
    1260:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
    1262:	9c 7f       	andi	r25, 0xFC	; 252
    1264:	2a 81       	ldd	r18, Y+2	; 0x02
    1266:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
    1268:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	08 95       	ret

00001272 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1272:	fc 01       	movw	r30, r24
    1274:	ed 5f       	subi	r30, 0xFD	; 253
    1276:	fe 4f       	sbci	r31, 0xFE	; 254
    1278:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    127a:	fc 01       	movw	r30, r24
    127c:	ec 5f       	subi	r30, 0xFC	; 252
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	29 13       	cpse	r18, r25
    1286:	01 c0       	rjmp	.+2      	; 0x128a <USART_RXBufferData_Available+0x18>
    1288:	80 e0       	ldi	r24, 0x00	; 0
}
    128a:	08 95       	ret

0000128c <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    128c:	fc 01       	movw	r30, r24
    128e:	ec 5f       	subi	r30, 0xFC	; 252
    1290:	fe 4f       	sbci	r31, 0xFE	; 254
    1292:	20 81       	ld	r18, Z
    1294:	dc 01       	movw	r26, r24
    1296:	a2 0f       	add	r26, r18
    1298:	b1 1d       	adc	r27, r1
    129a:	13 96       	adiw	r26, 0x03	; 3
    129c:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    129e:	90 81       	ld	r25, Z
    12a0:	9f 5f       	subi	r25, 0xFF	; 255
    12a2:	9f 77       	andi	r25, 0x7F	; 127
    12a4:	90 83       	st	Z, r25

	return ans;
}
    12a6:	08 95       	ret

000012a8 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    12a8:	fc 01       	movw	r30, r24
    12aa:	ed 5f       	subi	r30, 0xFD	; 253
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	20 81       	ld	r18, Z
    12b0:	2f 5f       	subi	r18, 0xFF	; 255
    12b2:	2f 77       	andi	r18, 0x7F	; 127

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    12b4:	fc 01       	movw	r30, r24
    12b6:	ec 5f       	subi	r30, 0xFC	; 252
    12b8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ba:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    12bc:	dc 01       	movw	r26, r24
    12be:	ed 91       	ld	r30, X+
    12c0:	fc 91       	ld	r31, X
    12c2:	11 97       	sbiw	r26, 0x01	; 1
    12c4:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    12c6:	23 17       	cp	r18, r19
    12c8:	59 f0       	breq	.+22     	; 0x12e0 <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    12ca:	fc 01       	movw	r30, r24
    12cc:	ed 5f       	subi	r30, 0xFD	; 253
    12ce:	fe 4f       	sbci	r31, 0xFE	; 254
    12d0:	30 81       	ld	r19, Z
    12d2:	a3 0f       	add	r26, r19
    12d4:	b1 1d       	adc	r27, r1
    12d6:	13 96       	adiw	r26, 0x03	; 3
    12d8:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    12da:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    12e0:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    12e2:	08 95       	ret

000012e4 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    12e8:	fc 01       	movw	r30, r24
    12ea:	ea 5f       	subi	r30, 0xFA	; 250
    12ec:	fe 4f       	sbci	r31, 0xFE	; 254
    12ee:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    12f0:	fc 01       	movw	r30, r24
    12f2:	eb 5f       	subi	r30, 0xFB	; 251
    12f4:	fe 4f       	sbci	r31, 0xFE	; 254
    12f6:	30 81       	ld	r19, Z
    12f8:	32 13       	cpse	r19, r18
    12fa:	07 c0       	rjmp	.+14     	; 0x130a <USART_DataRegEmpty+0x26>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    12fc:	dc 01       	movw	r26, r24
    12fe:	ed 91       	ld	r30, X+
    1300:	fc 91       	ld	r31, X
    1302:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    1304:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    1306:	83 83       	std	Z+3, r24	; 0x03
    1308:	12 c0       	rjmp	.+36     	; 0x132e <USART_DataRegEmpty+0x4a>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    130a:	fc 01       	movw	r30, r24
    130c:	ea 5f       	subi	r30, 0xFA	; 250
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	20 81       	ld	r18, Z
    1312:	dc 01       	movw	r26, r24
    1314:	a2 0f       	add	r26, r18
    1316:	b1 1d       	adc	r27, r1
    1318:	ad 57       	subi	r26, 0x7D	; 125
    131a:	bf 4f       	sbci	r27, 0xFF	; 255
    131c:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    131e:	ec 01       	movw	r28, r24
    1320:	a8 81       	ld	r26, Y
    1322:	b9 81       	ldd	r27, Y+1	; 0x01
    1324:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    1326:	80 81       	ld	r24, Z
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	8f 77       	andi	r24, 0x7F	; 127
    132c:	80 83       	st	Z, r24
	}
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <__subsf3>:
    1334:	50 58       	subi	r21, 0x80	; 128

00001336 <__addsf3>:
    1336:	bb 27       	eor	r27, r27
    1338:	aa 27       	eor	r26, r26
    133a:	0e d0       	rcall	.+28     	; 0x1358 <__addsf3x>
    133c:	48 c1       	rjmp	.+656    	; 0x15ce <__fp_round>
    133e:	39 d1       	rcall	.+626    	; 0x15b2 <__fp_pscA>
    1340:	30 f0       	brcs	.+12     	; 0x134e <__addsf3+0x18>
    1342:	3e d1       	rcall	.+636    	; 0x15c0 <__fp_pscB>
    1344:	20 f0       	brcs	.+8      	; 0x134e <__addsf3+0x18>
    1346:	31 f4       	brne	.+12     	; 0x1354 <__addsf3+0x1e>
    1348:	9f 3f       	cpi	r25, 0xFF	; 255
    134a:	11 f4       	brne	.+4      	; 0x1350 <__addsf3+0x1a>
    134c:	1e f4       	brtc	.+6      	; 0x1354 <__addsf3+0x1e>
    134e:	2e c1       	rjmp	.+604    	; 0x15ac <__fp_nan>
    1350:	0e f4       	brtc	.+2      	; 0x1354 <__addsf3+0x1e>
    1352:	e0 95       	com	r30
    1354:	e7 fb       	bst	r30, 7
    1356:	24 c1       	rjmp	.+584    	; 0x15a0 <__fp_inf>

00001358 <__addsf3x>:
    1358:	e9 2f       	mov	r30, r25
    135a:	4a d1       	rcall	.+660    	; 0x15f0 <__fp_split3>
    135c:	80 f3       	brcs	.-32     	; 0x133e <__addsf3+0x8>
    135e:	ba 17       	cp	r27, r26
    1360:	62 07       	cpc	r22, r18
    1362:	73 07       	cpc	r23, r19
    1364:	84 07       	cpc	r24, r20
    1366:	95 07       	cpc	r25, r21
    1368:	18 f0       	brcs	.+6      	; 0x1370 <__addsf3x+0x18>
    136a:	71 f4       	brne	.+28     	; 0x1388 <__addsf3x+0x30>
    136c:	9e f5       	brtc	.+102    	; 0x13d4 <__addsf3x+0x7c>
    136e:	62 c1       	rjmp	.+708    	; 0x1634 <__fp_zero>
    1370:	0e f4       	brtc	.+2      	; 0x1374 <__addsf3x+0x1c>
    1372:	e0 95       	com	r30
    1374:	0b 2e       	mov	r0, r27
    1376:	ba 2f       	mov	r27, r26
    1378:	a0 2d       	mov	r26, r0
    137a:	0b 01       	movw	r0, r22
    137c:	b9 01       	movw	r22, r18
    137e:	90 01       	movw	r18, r0
    1380:	0c 01       	movw	r0, r24
    1382:	ca 01       	movw	r24, r20
    1384:	a0 01       	movw	r20, r0
    1386:	11 24       	eor	r1, r1
    1388:	ff 27       	eor	r31, r31
    138a:	59 1b       	sub	r21, r25
    138c:	99 f0       	breq	.+38     	; 0x13b4 <__addsf3x+0x5c>
    138e:	59 3f       	cpi	r21, 0xF9	; 249
    1390:	50 f4       	brcc	.+20     	; 0x13a6 <__addsf3x+0x4e>
    1392:	50 3e       	cpi	r21, 0xE0	; 224
    1394:	68 f1       	brcs	.+90     	; 0x13f0 <__addsf3x+0x98>
    1396:	1a 16       	cp	r1, r26
    1398:	f0 40       	sbci	r31, 0x00	; 0
    139a:	a2 2f       	mov	r26, r18
    139c:	23 2f       	mov	r18, r19
    139e:	34 2f       	mov	r19, r20
    13a0:	44 27       	eor	r20, r20
    13a2:	58 5f       	subi	r21, 0xF8	; 248
    13a4:	f3 cf       	rjmp	.-26     	; 0x138c <__addsf3x+0x34>
    13a6:	46 95       	lsr	r20
    13a8:	37 95       	ror	r19
    13aa:	27 95       	ror	r18
    13ac:	a7 95       	ror	r26
    13ae:	f0 40       	sbci	r31, 0x00	; 0
    13b0:	53 95       	inc	r21
    13b2:	c9 f7       	brne	.-14     	; 0x13a6 <__addsf3x+0x4e>
    13b4:	7e f4       	brtc	.+30     	; 0x13d4 <__addsf3x+0x7c>
    13b6:	1f 16       	cp	r1, r31
    13b8:	ba 0b       	sbc	r27, r26
    13ba:	62 0b       	sbc	r22, r18
    13bc:	73 0b       	sbc	r23, r19
    13be:	84 0b       	sbc	r24, r20
    13c0:	ba f0       	brmi	.+46     	; 0x13f0 <__addsf3x+0x98>
    13c2:	91 50       	subi	r25, 0x01	; 1
    13c4:	a1 f0       	breq	.+40     	; 0x13ee <__addsf3x+0x96>
    13c6:	ff 0f       	add	r31, r31
    13c8:	bb 1f       	adc	r27, r27
    13ca:	66 1f       	adc	r22, r22
    13cc:	77 1f       	adc	r23, r23
    13ce:	88 1f       	adc	r24, r24
    13d0:	c2 f7       	brpl	.-16     	; 0x13c2 <__addsf3x+0x6a>
    13d2:	0e c0       	rjmp	.+28     	; 0x13f0 <__addsf3x+0x98>
    13d4:	ba 0f       	add	r27, r26
    13d6:	62 1f       	adc	r22, r18
    13d8:	73 1f       	adc	r23, r19
    13da:	84 1f       	adc	r24, r20
    13dc:	48 f4       	brcc	.+18     	; 0x13f0 <__addsf3x+0x98>
    13de:	87 95       	ror	r24
    13e0:	77 95       	ror	r23
    13e2:	67 95       	ror	r22
    13e4:	b7 95       	ror	r27
    13e6:	f7 95       	ror	r31
    13e8:	9e 3f       	cpi	r25, 0xFE	; 254
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <__addsf3x+0x96>
    13ec:	b3 cf       	rjmp	.-154    	; 0x1354 <__addsf3+0x1e>
    13ee:	93 95       	inc	r25
    13f0:	88 0f       	add	r24, r24
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <__addsf3x+0x9e>
    13f4:	99 27       	eor	r25, r25
    13f6:	ee 0f       	add	r30, r30
    13f8:	97 95       	ror	r25
    13fa:	87 95       	ror	r24
    13fc:	08 95       	ret

000013fe <__divsf3>:
    13fe:	0c d0       	rcall	.+24     	; 0x1418 <__divsf3x>
    1400:	e6 c0       	rjmp	.+460    	; 0x15ce <__fp_round>
    1402:	de d0       	rcall	.+444    	; 0x15c0 <__fp_pscB>
    1404:	40 f0       	brcs	.+16     	; 0x1416 <__divsf3+0x18>
    1406:	d5 d0       	rcall	.+426    	; 0x15b2 <__fp_pscA>
    1408:	30 f0       	brcs	.+12     	; 0x1416 <__divsf3+0x18>
    140a:	21 f4       	brne	.+8      	; 0x1414 <__divsf3+0x16>
    140c:	5f 3f       	cpi	r21, 0xFF	; 255
    140e:	19 f0       	breq	.+6      	; 0x1416 <__divsf3+0x18>
    1410:	c7 c0       	rjmp	.+398    	; 0x15a0 <__fp_inf>
    1412:	51 11       	cpse	r21, r1
    1414:	10 c1       	rjmp	.+544    	; 0x1636 <__fp_szero>
    1416:	ca c0       	rjmp	.+404    	; 0x15ac <__fp_nan>

00001418 <__divsf3x>:
    1418:	eb d0       	rcall	.+470    	; 0x15f0 <__fp_split3>
    141a:	98 f3       	brcs	.-26     	; 0x1402 <__divsf3+0x4>

0000141c <__divsf3_pse>:
    141c:	99 23       	and	r25, r25
    141e:	c9 f3       	breq	.-14     	; 0x1412 <__divsf3+0x14>
    1420:	55 23       	and	r21, r21
    1422:	b1 f3       	breq	.-20     	; 0x1410 <__divsf3+0x12>
    1424:	95 1b       	sub	r25, r21
    1426:	55 0b       	sbc	r21, r21
    1428:	bb 27       	eor	r27, r27
    142a:	aa 27       	eor	r26, r26
    142c:	62 17       	cp	r22, r18
    142e:	73 07       	cpc	r23, r19
    1430:	84 07       	cpc	r24, r20
    1432:	38 f0       	brcs	.+14     	; 0x1442 <__divsf3_pse+0x26>
    1434:	9f 5f       	subi	r25, 0xFF	; 255
    1436:	5f 4f       	sbci	r21, 0xFF	; 255
    1438:	22 0f       	add	r18, r18
    143a:	33 1f       	adc	r19, r19
    143c:	44 1f       	adc	r20, r20
    143e:	aa 1f       	adc	r26, r26
    1440:	a9 f3       	breq	.-22     	; 0x142c <__divsf3_pse+0x10>
    1442:	33 d0       	rcall	.+102    	; 0x14aa <__divsf3_pse+0x8e>
    1444:	0e 2e       	mov	r0, r30
    1446:	3a f0       	brmi	.+14     	; 0x1456 <__divsf3_pse+0x3a>
    1448:	e0 e8       	ldi	r30, 0x80	; 128
    144a:	30 d0       	rcall	.+96     	; 0x14ac <__divsf3_pse+0x90>
    144c:	91 50       	subi	r25, 0x01	; 1
    144e:	50 40       	sbci	r21, 0x00	; 0
    1450:	e6 95       	lsr	r30
    1452:	00 1c       	adc	r0, r0
    1454:	ca f7       	brpl	.-14     	; 0x1448 <__divsf3_pse+0x2c>
    1456:	29 d0       	rcall	.+82     	; 0x14aa <__divsf3_pse+0x8e>
    1458:	fe 2f       	mov	r31, r30
    145a:	27 d0       	rcall	.+78     	; 0x14aa <__divsf3_pse+0x8e>
    145c:	66 0f       	add	r22, r22
    145e:	77 1f       	adc	r23, r23
    1460:	88 1f       	adc	r24, r24
    1462:	bb 1f       	adc	r27, r27
    1464:	26 17       	cp	r18, r22
    1466:	37 07       	cpc	r19, r23
    1468:	48 07       	cpc	r20, r24
    146a:	ab 07       	cpc	r26, r27
    146c:	b0 e8       	ldi	r27, 0x80	; 128
    146e:	09 f0       	breq	.+2      	; 0x1472 <__divsf3_pse+0x56>
    1470:	bb 0b       	sbc	r27, r27
    1472:	80 2d       	mov	r24, r0
    1474:	bf 01       	movw	r22, r30
    1476:	ff 27       	eor	r31, r31
    1478:	93 58       	subi	r25, 0x83	; 131
    147a:	5f 4f       	sbci	r21, 0xFF	; 255
    147c:	2a f0       	brmi	.+10     	; 0x1488 <__divsf3_pse+0x6c>
    147e:	9e 3f       	cpi	r25, 0xFE	; 254
    1480:	51 05       	cpc	r21, r1
    1482:	68 f0       	brcs	.+26     	; 0x149e <__divsf3_pse+0x82>
    1484:	8d c0       	rjmp	.+282    	; 0x15a0 <__fp_inf>
    1486:	d7 c0       	rjmp	.+430    	; 0x1636 <__fp_szero>
    1488:	5f 3f       	cpi	r21, 0xFF	; 255
    148a:	ec f3       	brlt	.-6      	; 0x1486 <__divsf3_pse+0x6a>
    148c:	98 3e       	cpi	r25, 0xE8	; 232
    148e:	dc f3       	brlt	.-10     	; 0x1486 <__divsf3_pse+0x6a>
    1490:	86 95       	lsr	r24
    1492:	77 95       	ror	r23
    1494:	67 95       	ror	r22
    1496:	b7 95       	ror	r27
    1498:	f7 95       	ror	r31
    149a:	9f 5f       	subi	r25, 0xFF	; 255
    149c:	c9 f7       	brne	.-14     	; 0x1490 <__divsf3_pse+0x74>
    149e:	88 0f       	add	r24, r24
    14a0:	91 1d       	adc	r25, r1
    14a2:	96 95       	lsr	r25
    14a4:	87 95       	ror	r24
    14a6:	97 f9       	bld	r25, 7
    14a8:	08 95       	ret
    14aa:	e1 e0       	ldi	r30, 0x01	; 1
    14ac:	66 0f       	add	r22, r22
    14ae:	77 1f       	adc	r23, r23
    14b0:	88 1f       	adc	r24, r24
    14b2:	bb 1f       	adc	r27, r27
    14b4:	62 17       	cp	r22, r18
    14b6:	73 07       	cpc	r23, r19
    14b8:	84 07       	cpc	r24, r20
    14ba:	ba 07       	cpc	r27, r26
    14bc:	20 f0       	brcs	.+8      	; 0x14c6 <__divsf3_pse+0xaa>
    14be:	62 1b       	sub	r22, r18
    14c0:	73 0b       	sbc	r23, r19
    14c2:	84 0b       	sbc	r24, r20
    14c4:	ba 0b       	sbc	r27, r26
    14c6:	ee 1f       	adc	r30, r30
    14c8:	88 f7       	brcc	.-30     	; 0x14ac <__divsf3_pse+0x90>
    14ca:	e0 95       	com	r30
    14cc:	08 95       	ret

000014ce <__fixunssfsi>:
    14ce:	98 d0       	rcall	.+304    	; 0x1600 <__fp_splitA>
    14d0:	88 f0       	brcs	.+34     	; 0x14f4 <__fixunssfsi+0x26>
    14d2:	9f 57       	subi	r25, 0x7F	; 127
    14d4:	90 f0       	brcs	.+36     	; 0x14fa <__fixunssfsi+0x2c>
    14d6:	b9 2f       	mov	r27, r25
    14d8:	99 27       	eor	r25, r25
    14da:	b7 51       	subi	r27, 0x17	; 23
    14dc:	a0 f0       	brcs	.+40     	; 0x1506 <__fixunssfsi+0x38>
    14de:	d1 f0       	breq	.+52     	; 0x1514 <__fixunssfsi+0x46>
    14e0:	66 0f       	add	r22, r22
    14e2:	77 1f       	adc	r23, r23
    14e4:	88 1f       	adc	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	1a f0       	brmi	.+6      	; 0x14f0 <__fixunssfsi+0x22>
    14ea:	ba 95       	dec	r27
    14ec:	c9 f7       	brne	.-14     	; 0x14e0 <__fixunssfsi+0x12>
    14ee:	12 c0       	rjmp	.+36     	; 0x1514 <__fixunssfsi+0x46>
    14f0:	b1 30       	cpi	r27, 0x01	; 1
    14f2:	81 f0       	breq	.+32     	; 0x1514 <__fixunssfsi+0x46>
    14f4:	9f d0       	rcall	.+318    	; 0x1634 <__fp_zero>
    14f6:	b1 e0       	ldi	r27, 0x01	; 1
    14f8:	08 95       	ret
    14fa:	9c c0       	rjmp	.+312    	; 0x1634 <__fp_zero>
    14fc:	67 2f       	mov	r22, r23
    14fe:	78 2f       	mov	r23, r24
    1500:	88 27       	eor	r24, r24
    1502:	b8 5f       	subi	r27, 0xF8	; 248
    1504:	39 f0       	breq	.+14     	; 0x1514 <__fixunssfsi+0x46>
    1506:	b9 3f       	cpi	r27, 0xF9	; 249
    1508:	cc f3       	brlt	.-14     	; 0x14fc <__fixunssfsi+0x2e>
    150a:	86 95       	lsr	r24
    150c:	77 95       	ror	r23
    150e:	67 95       	ror	r22
    1510:	b3 95       	inc	r27
    1512:	d9 f7       	brne	.-10     	; 0x150a <__fixunssfsi+0x3c>
    1514:	3e f4       	brtc	.+14     	; 0x1524 <__fixunssfsi+0x56>
    1516:	90 95       	com	r25
    1518:	80 95       	com	r24
    151a:	70 95       	com	r23
    151c:	61 95       	neg	r22
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	8f 4f       	sbci	r24, 0xFF	; 255
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	08 95       	ret

00001526 <__floatunsisf>:
    1526:	e8 94       	clt
    1528:	09 c0       	rjmp	.+18     	; 0x153c <__floatsisf+0x12>

0000152a <__floatsisf>:
    152a:	97 fb       	bst	r25, 7
    152c:	3e f4       	brtc	.+14     	; 0x153c <__floatsisf+0x12>
    152e:	90 95       	com	r25
    1530:	80 95       	com	r24
    1532:	70 95       	com	r23
    1534:	61 95       	neg	r22
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	8f 4f       	sbci	r24, 0xFF	; 255
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	99 23       	and	r25, r25
    153e:	a9 f0       	breq	.+42     	; 0x156a <__floatsisf+0x40>
    1540:	f9 2f       	mov	r31, r25
    1542:	96 e9       	ldi	r25, 0x96	; 150
    1544:	bb 27       	eor	r27, r27
    1546:	93 95       	inc	r25
    1548:	f6 95       	lsr	r31
    154a:	87 95       	ror	r24
    154c:	77 95       	ror	r23
    154e:	67 95       	ror	r22
    1550:	b7 95       	ror	r27
    1552:	f1 11       	cpse	r31, r1
    1554:	f8 cf       	rjmp	.-16     	; 0x1546 <__floatsisf+0x1c>
    1556:	fa f4       	brpl	.+62     	; 0x1596 <__floatsisf+0x6c>
    1558:	bb 0f       	add	r27, r27
    155a:	11 f4       	brne	.+4      	; 0x1560 <__floatsisf+0x36>
    155c:	60 ff       	sbrs	r22, 0
    155e:	1b c0       	rjmp	.+54     	; 0x1596 <__floatsisf+0x6c>
    1560:	6f 5f       	subi	r22, 0xFF	; 255
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	8f 4f       	sbci	r24, 0xFF	; 255
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	16 c0       	rjmp	.+44     	; 0x1596 <__floatsisf+0x6c>
    156a:	88 23       	and	r24, r24
    156c:	11 f0       	breq	.+4      	; 0x1572 <__floatsisf+0x48>
    156e:	96 e9       	ldi	r25, 0x96	; 150
    1570:	11 c0       	rjmp	.+34     	; 0x1594 <__floatsisf+0x6a>
    1572:	77 23       	and	r23, r23
    1574:	21 f0       	breq	.+8      	; 0x157e <__floatsisf+0x54>
    1576:	9e e8       	ldi	r25, 0x8E	; 142
    1578:	87 2f       	mov	r24, r23
    157a:	76 2f       	mov	r23, r22
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <__floatsisf+0x5e>
    157e:	66 23       	and	r22, r22
    1580:	71 f0       	breq	.+28     	; 0x159e <__floatsisf+0x74>
    1582:	96 e8       	ldi	r25, 0x86	; 134
    1584:	86 2f       	mov	r24, r22
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	2a f0       	brmi	.+10     	; 0x1596 <__floatsisf+0x6c>
    158c:	9a 95       	dec	r25
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	88 1f       	adc	r24, r24
    1594:	da f7       	brpl	.-10     	; 0x158c <__floatsisf+0x62>
    1596:	88 0f       	add	r24, r24
    1598:	96 95       	lsr	r25
    159a:	87 95       	ror	r24
    159c:	97 f9       	bld	r25, 7
    159e:	08 95       	ret

000015a0 <__fp_inf>:
    15a0:	97 f9       	bld	r25, 7
    15a2:	9f 67       	ori	r25, 0x7F	; 127
    15a4:	80 e8       	ldi	r24, 0x80	; 128
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	08 95       	ret

000015ac <__fp_nan>:
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	80 ec       	ldi	r24, 0xC0	; 192
    15b0:	08 95       	ret

000015b2 <__fp_pscA>:
    15b2:	00 24       	eor	r0, r0
    15b4:	0a 94       	dec	r0
    15b6:	16 16       	cp	r1, r22
    15b8:	17 06       	cpc	r1, r23
    15ba:	18 06       	cpc	r1, r24
    15bc:	09 06       	cpc	r0, r25
    15be:	08 95       	ret

000015c0 <__fp_pscB>:
    15c0:	00 24       	eor	r0, r0
    15c2:	0a 94       	dec	r0
    15c4:	12 16       	cp	r1, r18
    15c6:	13 06       	cpc	r1, r19
    15c8:	14 06       	cpc	r1, r20
    15ca:	05 06       	cpc	r0, r21
    15cc:	08 95       	ret

000015ce <__fp_round>:
    15ce:	09 2e       	mov	r0, r25
    15d0:	03 94       	inc	r0
    15d2:	00 0c       	add	r0, r0
    15d4:	11 f4       	brne	.+4      	; 0x15da <__fp_round+0xc>
    15d6:	88 23       	and	r24, r24
    15d8:	52 f0       	brmi	.+20     	; 0x15ee <__fp_round+0x20>
    15da:	bb 0f       	add	r27, r27
    15dc:	40 f4       	brcc	.+16     	; 0x15ee <__fp_round+0x20>
    15de:	bf 2b       	or	r27, r31
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <__fp_round+0x18>
    15e2:	60 ff       	sbrs	r22, 0
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <__fp_round+0x20>
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	8f 4f       	sbci	r24, 0xFF	; 255
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	08 95       	ret

000015f0 <__fp_split3>:
    15f0:	57 fd       	sbrc	r21, 7
    15f2:	90 58       	subi	r25, 0x80	; 128
    15f4:	44 0f       	add	r20, r20
    15f6:	55 1f       	adc	r21, r21
    15f8:	59 f0       	breq	.+22     	; 0x1610 <__fp_splitA+0x10>
    15fa:	5f 3f       	cpi	r21, 0xFF	; 255
    15fc:	71 f0       	breq	.+28     	; 0x161a <__fp_splitA+0x1a>
    15fe:	47 95       	ror	r20

00001600 <__fp_splitA>:
    1600:	88 0f       	add	r24, r24
    1602:	97 fb       	bst	r25, 7
    1604:	99 1f       	adc	r25, r25
    1606:	61 f0       	breq	.+24     	; 0x1620 <__fp_splitA+0x20>
    1608:	9f 3f       	cpi	r25, 0xFF	; 255
    160a:	79 f0       	breq	.+30     	; 0x162a <__fp_splitA+0x2a>
    160c:	87 95       	ror	r24
    160e:	08 95       	ret
    1610:	12 16       	cp	r1, r18
    1612:	13 06       	cpc	r1, r19
    1614:	14 06       	cpc	r1, r20
    1616:	55 1f       	adc	r21, r21
    1618:	f2 cf       	rjmp	.-28     	; 0x15fe <__fp_split3+0xe>
    161a:	46 95       	lsr	r20
    161c:	f1 df       	rcall	.-30     	; 0x1600 <__fp_splitA>
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <__fp_splitA+0x30>
    1620:	16 16       	cp	r1, r22
    1622:	17 06       	cpc	r1, r23
    1624:	18 06       	cpc	r1, r24
    1626:	99 1f       	adc	r25, r25
    1628:	f1 cf       	rjmp	.-30     	; 0x160c <__fp_splitA+0xc>
    162a:	86 95       	lsr	r24
    162c:	71 05       	cpc	r23, r1
    162e:	61 05       	cpc	r22, r1
    1630:	08 94       	sec
    1632:	08 95       	ret

00001634 <__fp_zero>:
    1634:	e8 94       	clt

00001636 <__fp_szero>:
    1636:	bb 27       	eor	r27, r27
    1638:	66 27       	eor	r22, r22
    163a:	77 27       	eor	r23, r23
    163c:	cb 01       	movw	r24, r22
    163e:	97 f9       	bld	r25, 7
    1640:	08 95       	ret

00001642 <__mulsf3>:
    1642:	0b d0       	rcall	.+22     	; 0x165a <__mulsf3x>
    1644:	c4 cf       	rjmp	.-120    	; 0x15ce <__fp_round>
    1646:	b5 df       	rcall	.-150    	; 0x15b2 <__fp_pscA>
    1648:	28 f0       	brcs	.+10     	; 0x1654 <__mulsf3+0x12>
    164a:	ba df       	rcall	.-140    	; 0x15c0 <__fp_pscB>
    164c:	18 f0       	brcs	.+6      	; 0x1654 <__mulsf3+0x12>
    164e:	95 23       	and	r25, r21
    1650:	09 f0       	breq	.+2      	; 0x1654 <__mulsf3+0x12>
    1652:	a6 cf       	rjmp	.-180    	; 0x15a0 <__fp_inf>
    1654:	ab cf       	rjmp	.-170    	; 0x15ac <__fp_nan>
    1656:	11 24       	eor	r1, r1
    1658:	ee cf       	rjmp	.-36     	; 0x1636 <__fp_szero>

0000165a <__mulsf3x>:
    165a:	ca df       	rcall	.-108    	; 0x15f0 <__fp_split3>
    165c:	a0 f3       	brcs	.-24     	; 0x1646 <__mulsf3+0x4>

0000165e <__mulsf3_pse>:
    165e:	95 9f       	mul	r25, r21
    1660:	d1 f3       	breq	.-12     	; 0x1656 <__mulsf3+0x14>
    1662:	95 0f       	add	r25, r21
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	55 1f       	adc	r21, r21
    1668:	62 9f       	mul	r22, r18
    166a:	f0 01       	movw	r30, r0
    166c:	72 9f       	mul	r23, r18
    166e:	bb 27       	eor	r27, r27
    1670:	f0 0d       	add	r31, r0
    1672:	b1 1d       	adc	r27, r1
    1674:	63 9f       	mul	r22, r19
    1676:	aa 27       	eor	r26, r26
    1678:	f0 0d       	add	r31, r0
    167a:	b1 1d       	adc	r27, r1
    167c:	aa 1f       	adc	r26, r26
    167e:	64 9f       	mul	r22, r20
    1680:	66 27       	eor	r22, r22
    1682:	b0 0d       	add	r27, r0
    1684:	a1 1d       	adc	r26, r1
    1686:	66 1f       	adc	r22, r22
    1688:	82 9f       	mul	r24, r18
    168a:	22 27       	eor	r18, r18
    168c:	b0 0d       	add	r27, r0
    168e:	a1 1d       	adc	r26, r1
    1690:	62 1f       	adc	r22, r18
    1692:	73 9f       	mul	r23, r19
    1694:	b0 0d       	add	r27, r0
    1696:	a1 1d       	adc	r26, r1
    1698:	62 1f       	adc	r22, r18
    169a:	83 9f       	mul	r24, r19
    169c:	a0 0d       	add	r26, r0
    169e:	61 1d       	adc	r22, r1
    16a0:	22 1f       	adc	r18, r18
    16a2:	74 9f       	mul	r23, r20
    16a4:	33 27       	eor	r19, r19
    16a6:	a0 0d       	add	r26, r0
    16a8:	61 1d       	adc	r22, r1
    16aa:	23 1f       	adc	r18, r19
    16ac:	84 9f       	mul	r24, r20
    16ae:	60 0d       	add	r22, r0
    16b0:	21 1d       	adc	r18, r1
    16b2:	82 2f       	mov	r24, r18
    16b4:	76 2f       	mov	r23, r22
    16b6:	6a 2f       	mov	r22, r26
    16b8:	11 24       	eor	r1, r1
    16ba:	9f 57       	subi	r25, 0x7F	; 127
    16bc:	50 40       	sbci	r21, 0x00	; 0
    16be:	8a f0       	brmi	.+34     	; 0x16e2 <__mulsf3_pse+0x84>
    16c0:	e1 f0       	breq	.+56     	; 0x16fa <__mulsf3_pse+0x9c>
    16c2:	88 23       	and	r24, r24
    16c4:	4a f0       	brmi	.+18     	; 0x16d8 <__mulsf3_pse+0x7a>
    16c6:	ee 0f       	add	r30, r30
    16c8:	ff 1f       	adc	r31, r31
    16ca:	bb 1f       	adc	r27, r27
    16cc:	66 1f       	adc	r22, r22
    16ce:	77 1f       	adc	r23, r23
    16d0:	88 1f       	adc	r24, r24
    16d2:	91 50       	subi	r25, 0x01	; 1
    16d4:	50 40       	sbci	r21, 0x00	; 0
    16d6:	a9 f7       	brne	.-22     	; 0x16c2 <__mulsf3_pse+0x64>
    16d8:	9e 3f       	cpi	r25, 0xFE	; 254
    16da:	51 05       	cpc	r21, r1
    16dc:	70 f0       	brcs	.+28     	; 0x16fa <__mulsf3_pse+0x9c>
    16de:	60 cf       	rjmp	.-320    	; 0x15a0 <__fp_inf>
    16e0:	aa cf       	rjmp	.-172    	; 0x1636 <__fp_szero>
    16e2:	5f 3f       	cpi	r21, 0xFF	; 255
    16e4:	ec f3       	brlt	.-6      	; 0x16e0 <__mulsf3_pse+0x82>
    16e6:	98 3e       	cpi	r25, 0xE8	; 232
    16e8:	dc f3       	brlt	.-10     	; 0x16e0 <__mulsf3_pse+0x82>
    16ea:	86 95       	lsr	r24
    16ec:	77 95       	ror	r23
    16ee:	67 95       	ror	r22
    16f0:	b7 95       	ror	r27
    16f2:	f7 95       	ror	r31
    16f4:	e7 95       	ror	r30
    16f6:	9f 5f       	subi	r25, 0xFF	; 255
    16f8:	c1 f7       	brne	.-16     	; 0x16ea <__mulsf3_pse+0x8c>
    16fa:	fe 2b       	or	r31, r30
    16fc:	88 0f       	add	r24, r24
    16fe:	91 1d       	adc	r25, r1
    1700:	96 95       	lsr	r25
    1702:	87 95       	ror	r24
    1704:	97 f9       	bld	r25, 7
    1706:	08 95       	ret

00001708 <round>:
    1708:	7b df       	rcall	.-266    	; 0x1600 <__fp_splitA>
    170a:	e0 f0       	brcs	.+56     	; 0x1744 <round+0x3c>
    170c:	9e 37       	cpi	r25, 0x7E	; 126
    170e:	d8 f0       	brcs	.+54     	; 0x1746 <round+0x3e>
    1710:	96 39       	cpi	r25, 0x96	; 150
    1712:	b8 f4       	brcc	.+46     	; 0x1742 <round+0x3a>
    1714:	9e 38       	cpi	r25, 0x8E	; 142
    1716:	48 f4       	brcc	.+18     	; 0x172a <round+0x22>
    1718:	67 2f       	mov	r22, r23
    171a:	78 2f       	mov	r23, r24
    171c:	88 27       	eor	r24, r24
    171e:	98 5f       	subi	r25, 0xF8	; 248
    1720:	f9 cf       	rjmp	.-14     	; 0x1714 <round+0xc>
    1722:	86 95       	lsr	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	93 95       	inc	r25
    172a:	95 39       	cpi	r25, 0x95	; 149
    172c:	d0 f3       	brcs	.-12     	; 0x1722 <round+0x1a>
    172e:	b6 2f       	mov	r27, r22
    1730:	b1 70       	andi	r27, 0x01	; 1
    1732:	6b 0f       	add	r22, r27
    1734:	71 1d       	adc	r23, r1
    1736:	81 1d       	adc	r24, r1
    1738:	20 f4       	brcc	.+8      	; 0x1742 <round+0x3a>
    173a:	87 95       	ror	r24
    173c:	77 95       	ror	r23
    173e:	67 95       	ror	r22
    1740:	93 95       	inc	r25
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <__fp_mintl>
    1744:	1c c0       	rjmp	.+56     	; 0x177e <__fp_mpack>
    1746:	77 cf       	rjmp	.-274    	; 0x1636 <__fp_szero>

00001748 <__fp_mintl>:
    1748:	88 23       	and	r24, r24
    174a:	71 f4       	brne	.+28     	; 0x1768 <__fp_mintl+0x20>
    174c:	77 23       	and	r23, r23
    174e:	21 f0       	breq	.+8      	; 0x1758 <__fp_mintl+0x10>
    1750:	98 50       	subi	r25, 0x08	; 8
    1752:	87 2b       	or	r24, r23
    1754:	76 2f       	mov	r23, r22
    1756:	07 c0       	rjmp	.+14     	; 0x1766 <__fp_mintl+0x1e>
    1758:	66 23       	and	r22, r22
    175a:	11 f4       	brne	.+4      	; 0x1760 <__fp_mintl+0x18>
    175c:	99 27       	eor	r25, r25
    175e:	0d c0       	rjmp	.+26     	; 0x177a <__fp_mintl+0x32>
    1760:	90 51       	subi	r25, 0x10	; 16
    1762:	86 2b       	or	r24, r22
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	2a f0       	brmi	.+10     	; 0x1774 <__fp_mintl+0x2c>
    176a:	9a 95       	dec	r25
    176c:	66 0f       	add	r22, r22
    176e:	77 1f       	adc	r23, r23
    1770:	88 1f       	adc	r24, r24
    1772:	da f7       	brpl	.-10     	; 0x176a <__fp_mintl+0x22>
    1774:	88 0f       	add	r24, r24
    1776:	96 95       	lsr	r25
    1778:	87 95       	ror	r24
    177a:	97 f9       	bld	r25, 7
    177c:	08 95       	ret

0000177e <__fp_mpack>:
    177e:	9f 3f       	cpi	r25, 0xFF	; 255
    1780:	31 f0       	breq	.+12     	; 0x178e <__fp_mpack_finite+0xc>

00001782 <__fp_mpack_finite>:
    1782:	91 50       	subi	r25, 0x01	; 1
    1784:	20 f4       	brcc	.+8      	; 0x178e <__fp_mpack_finite+0xc>
    1786:	87 95       	ror	r24
    1788:	77 95       	ror	r23
    178a:	67 95       	ror	r22
    178c:	b7 95       	ror	r27
    178e:	88 0f       	add	r24, r24
    1790:	91 1d       	adc	r25, r1
    1792:	96 95       	lsr	r25
    1794:	87 95       	ror	r24
    1796:	97 f9       	bld	r25, 7
    1798:	08 95       	ret

0000179a <__umulhisi3>:
    179a:	a2 9f       	mul	r26, r18
    179c:	b0 01       	movw	r22, r0
    179e:	b3 9f       	mul	r27, r19
    17a0:	c0 01       	movw	r24, r0
    17a2:	a3 9f       	mul	r26, r19
    17a4:	01 d0       	rcall	.+2      	; 0x17a8 <__umulhisi3+0xe>
    17a6:	b2 9f       	mul	r27, r18
    17a8:	70 0d       	add	r23, r0
    17aa:	81 1d       	adc	r24, r1
    17ac:	11 24       	eor	r1, r1
    17ae:	91 1d       	adc	r25, r1
    17b0:	08 95       	ret

000017b2 <sprintf>:
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	2e 97       	sbiw	r28, 0x0e	; 14
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0e 89       	ldd	r16, Y+22	; 0x16
    17c6:	1f 89       	ldd	r17, Y+23	; 0x17
    17c8:	86 e0       	ldi	r24, 0x06	; 6
    17ca:	8c 83       	std	Y+4, r24	; 0x04
    17cc:	09 83       	std	Y+1, r16	; 0x01
    17ce:	1a 83       	std	Y+2, r17	; 0x02
    17d0:	8f ef       	ldi	r24, 0xFF	; 255
    17d2:	9f e7       	ldi	r25, 0x7F	; 127
    17d4:	8d 83       	std	Y+5, r24	; 0x05
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	ce 01       	movw	r24, r28
    17da:	4a 96       	adiw	r24, 0x1a	; 26
    17dc:	ac 01       	movw	r20, r24
    17de:	68 8d       	ldd	r22, Y+24	; 0x18
    17e0:	79 8d       	ldd	r23, Y+25	; 0x19
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	0d d0       	rcall	.+26     	; 0x1802 <vfprintf>
    17e8:	ef 81       	ldd	r30, Y+7	; 0x07
    17ea:	f8 85       	ldd	r31, Y+8	; 0x08
    17ec:	e0 0f       	add	r30, r16
    17ee:	f1 1f       	adc	r31, r17
    17f0:	10 82       	st	Z, r1
    17f2:	2e 96       	adiw	r28, 0x0e	; 14
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	08 95       	ret

00001802 <vfprintf>:
    1802:	2f 92       	push	r2
    1804:	3f 92       	push	r3
    1806:	4f 92       	push	r4
    1808:	5f 92       	push	r5
    180a:	6f 92       	push	r6
    180c:	7f 92       	push	r7
    180e:	8f 92       	push	r8
    1810:	9f 92       	push	r9
    1812:	af 92       	push	r10
    1814:	bf 92       	push	r11
    1816:	cf 92       	push	r12
    1818:	df 92       	push	r13
    181a:	ef 92       	push	r14
    181c:	ff 92       	push	r15
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	2c 97       	sbiw	r28, 0x0c	; 12
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	7c 01       	movw	r14, r24
    1832:	6b 01       	movw	r12, r22
    1834:	8a 01       	movw	r16, r20
    1836:	fc 01       	movw	r30, r24
    1838:	16 82       	std	Z+6, r1	; 0x06
    183a:	17 82       	std	Z+7, r1	; 0x07
    183c:	83 81       	ldd	r24, Z+3	; 0x03
    183e:	81 ff       	sbrs	r24, 1
    1840:	b9 c1       	rjmp	.+882    	; 0x1bb4 <vfprintf+0x3b2>
    1842:	88 24       	eor	r8, r8
    1844:	83 94       	inc	r8
    1846:	91 2c       	mov	r9, r1
    1848:	8c 0e       	add	r8, r28
    184a:	9d 1e       	adc	r9, r29
    184c:	f7 01       	movw	r30, r14
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	f6 01       	movw	r30, r12
    1852:	93 fd       	sbrc	r25, 3
    1854:	85 91       	lpm	r24, Z+
    1856:	93 ff       	sbrs	r25, 3
    1858:	81 91       	ld	r24, Z+
    185a:	6f 01       	movw	r12, r30
    185c:	88 23       	and	r24, r24
    185e:	09 f4       	brne	.+2      	; 0x1862 <vfprintf+0x60>
    1860:	a5 c1       	rjmp	.+842    	; 0x1bac <vfprintf+0x3aa>
    1862:	85 32       	cpi	r24, 0x25	; 37
    1864:	39 f4       	brne	.+14     	; 0x1874 <vfprintf+0x72>
    1866:	93 fd       	sbrc	r25, 3
    1868:	85 91       	lpm	r24, Z+
    186a:	93 ff       	sbrs	r25, 3
    186c:	81 91       	ld	r24, Z+
    186e:	6f 01       	movw	r12, r30
    1870:	85 32       	cpi	r24, 0x25	; 37
    1872:	21 f4       	brne	.+8      	; 0x187c <vfprintf+0x7a>
    1874:	b7 01       	movw	r22, r14
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	cc d1       	rcall	.+920    	; 0x1c12 <fputc>
    187a:	e8 cf       	rjmp	.-48     	; 0x184c <vfprintf+0x4a>
    187c:	51 2c       	mov	r5, r1
    187e:	31 2c       	mov	r3, r1
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	20 32       	cpi	r18, 0x20	; 32
    1884:	a8 f4       	brcc	.+42     	; 0x18b0 <vfprintf+0xae>
    1886:	8b 32       	cpi	r24, 0x2B	; 43
    1888:	61 f0       	breq	.+24     	; 0x18a2 <vfprintf+0xa0>
    188a:	28 f4       	brcc	.+10     	; 0x1896 <vfprintf+0x94>
    188c:	80 32       	cpi	r24, 0x20	; 32
    188e:	51 f0       	breq	.+20     	; 0x18a4 <vfprintf+0xa2>
    1890:	83 32       	cpi	r24, 0x23	; 35
    1892:	71 f4       	brne	.+28     	; 0x18b0 <vfprintf+0xae>
    1894:	0b c0       	rjmp	.+22     	; 0x18ac <vfprintf+0xaa>
    1896:	8d 32       	cpi	r24, 0x2D	; 45
    1898:	39 f0       	breq	.+14     	; 0x18a8 <vfprintf+0xa6>
    189a:	80 33       	cpi	r24, 0x30	; 48
    189c:	49 f4       	brne	.+18     	; 0x18b0 <vfprintf+0xae>
    189e:	21 60       	ori	r18, 0x01	; 1
    18a0:	28 c0       	rjmp	.+80     	; 0x18f2 <vfprintf+0xf0>
    18a2:	22 60       	ori	r18, 0x02	; 2
    18a4:	24 60       	ori	r18, 0x04	; 4
    18a6:	25 c0       	rjmp	.+74     	; 0x18f2 <vfprintf+0xf0>
    18a8:	28 60       	ori	r18, 0x08	; 8
    18aa:	23 c0       	rjmp	.+70     	; 0x18f2 <vfprintf+0xf0>
    18ac:	20 61       	ori	r18, 0x10	; 16
    18ae:	21 c0       	rjmp	.+66     	; 0x18f2 <vfprintf+0xf0>
    18b0:	27 fd       	sbrc	r18, 7
    18b2:	27 c0       	rjmp	.+78     	; 0x1902 <vfprintf+0x100>
    18b4:	38 2f       	mov	r19, r24
    18b6:	30 53       	subi	r19, 0x30	; 48
    18b8:	3a 30       	cpi	r19, 0x0A	; 10
    18ba:	78 f4       	brcc	.+30     	; 0x18da <vfprintf+0xd8>
    18bc:	26 ff       	sbrs	r18, 6
    18be:	06 c0       	rjmp	.+12     	; 0x18cc <vfprintf+0xca>
    18c0:	fa e0       	ldi	r31, 0x0A	; 10
    18c2:	5f 9e       	mul	r5, r31
    18c4:	30 0d       	add	r19, r0
    18c6:	11 24       	eor	r1, r1
    18c8:	53 2e       	mov	r5, r19
    18ca:	13 c0       	rjmp	.+38     	; 0x18f2 <vfprintf+0xf0>
    18cc:	8a e0       	ldi	r24, 0x0A	; 10
    18ce:	38 9e       	mul	r3, r24
    18d0:	30 0d       	add	r19, r0
    18d2:	11 24       	eor	r1, r1
    18d4:	33 2e       	mov	r3, r19
    18d6:	20 62       	ori	r18, 0x20	; 32
    18d8:	0c c0       	rjmp	.+24     	; 0x18f2 <vfprintf+0xf0>
    18da:	8e 32       	cpi	r24, 0x2E	; 46
    18dc:	21 f4       	brne	.+8      	; 0x18e6 <vfprintf+0xe4>
    18de:	26 fd       	sbrc	r18, 6
    18e0:	65 c1       	rjmp	.+714    	; 0x1bac <vfprintf+0x3aa>
    18e2:	20 64       	ori	r18, 0x40	; 64
    18e4:	06 c0       	rjmp	.+12     	; 0x18f2 <vfprintf+0xf0>
    18e6:	8c 36       	cpi	r24, 0x6C	; 108
    18e8:	11 f4       	brne	.+4      	; 0x18ee <vfprintf+0xec>
    18ea:	20 68       	ori	r18, 0x80	; 128
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <vfprintf+0xf0>
    18ee:	88 36       	cpi	r24, 0x68	; 104
    18f0:	41 f4       	brne	.+16     	; 0x1902 <vfprintf+0x100>
    18f2:	f6 01       	movw	r30, r12
    18f4:	93 fd       	sbrc	r25, 3
    18f6:	85 91       	lpm	r24, Z+
    18f8:	93 ff       	sbrs	r25, 3
    18fa:	81 91       	ld	r24, Z+
    18fc:	6f 01       	movw	r12, r30
    18fe:	81 11       	cpse	r24, r1
    1900:	c0 cf       	rjmp	.-128    	; 0x1882 <vfprintf+0x80>
    1902:	98 2f       	mov	r25, r24
    1904:	95 54       	subi	r25, 0x45	; 69
    1906:	93 30       	cpi	r25, 0x03	; 3
    1908:	18 f0       	brcs	.+6      	; 0x1910 <vfprintf+0x10e>
    190a:	90 52       	subi	r25, 0x20	; 32
    190c:	93 30       	cpi	r25, 0x03	; 3
    190e:	28 f4       	brcc	.+10     	; 0x191a <vfprintf+0x118>
    1910:	0c 5f       	subi	r16, 0xFC	; 252
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	ff e3       	ldi	r31, 0x3F	; 63
    1916:	f9 83       	std	Y+1, r31	; 0x01
    1918:	0d c0       	rjmp	.+26     	; 0x1934 <vfprintf+0x132>
    191a:	83 36       	cpi	r24, 0x63	; 99
    191c:	31 f0       	breq	.+12     	; 0x192a <vfprintf+0x128>
    191e:	83 37       	cpi	r24, 0x73	; 115
    1920:	71 f0       	breq	.+28     	; 0x193e <vfprintf+0x13c>
    1922:	83 35       	cpi	r24, 0x53	; 83
    1924:	09 f0       	breq	.+2      	; 0x1928 <vfprintf+0x126>
    1926:	5a c0       	rjmp	.+180    	; 0x19dc <vfprintf+0x1da>
    1928:	22 c0       	rjmp	.+68     	; 0x196e <vfprintf+0x16c>
    192a:	f8 01       	movw	r30, r16
    192c:	80 81       	ld	r24, Z
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	0e 5f       	subi	r16, 0xFE	; 254
    1932:	1f 4f       	sbci	r17, 0xFF	; 255
    1934:	44 24       	eor	r4, r4
    1936:	43 94       	inc	r4
    1938:	51 2c       	mov	r5, r1
    193a:	54 01       	movw	r10, r8
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <vfprintf+0x164>
    193e:	38 01       	movw	r6, r16
    1940:	f2 e0       	ldi	r31, 0x02	; 2
    1942:	6f 0e       	add	r6, r31
    1944:	71 1c       	adc	r7, r1
    1946:	f8 01       	movw	r30, r16
    1948:	a0 80       	ld	r10, Z
    194a:	b1 80       	ldd	r11, Z+1	; 0x01
    194c:	26 ff       	sbrs	r18, 6
    194e:	03 c0       	rjmp	.+6      	; 0x1956 <vfprintf+0x154>
    1950:	65 2d       	mov	r22, r5
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	02 c0       	rjmp	.+4      	; 0x195a <vfprintf+0x158>
    1956:	6f ef       	ldi	r22, 0xFF	; 255
    1958:	7f ef       	ldi	r23, 0xFF	; 255
    195a:	c5 01       	movw	r24, r10
    195c:	2c 87       	std	Y+12, r18	; 0x0c
    195e:	4e d1       	rcall	.+668    	; 0x1bfc <strnlen>
    1960:	2c 01       	movw	r4, r24
    1962:	83 01       	movw	r16, r6
    1964:	2c 85       	ldd	r18, Y+12	; 0x0c
    1966:	6f e7       	ldi	r22, 0x7F	; 127
    1968:	26 2e       	mov	r2, r22
    196a:	22 22       	and	r2, r18
    196c:	17 c0       	rjmp	.+46     	; 0x199c <vfprintf+0x19a>
    196e:	38 01       	movw	r6, r16
    1970:	f2 e0       	ldi	r31, 0x02	; 2
    1972:	6f 0e       	add	r6, r31
    1974:	71 1c       	adc	r7, r1
    1976:	f8 01       	movw	r30, r16
    1978:	a0 80       	ld	r10, Z
    197a:	b1 80       	ldd	r11, Z+1	; 0x01
    197c:	26 ff       	sbrs	r18, 6
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <vfprintf+0x184>
    1980:	65 2d       	mov	r22, r5
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	02 c0       	rjmp	.+4      	; 0x198a <vfprintf+0x188>
    1986:	6f ef       	ldi	r22, 0xFF	; 255
    1988:	7f ef       	ldi	r23, 0xFF	; 255
    198a:	c5 01       	movw	r24, r10
    198c:	2c 87       	std	Y+12, r18	; 0x0c
    198e:	2b d1       	rcall	.+598    	; 0x1be6 <strnlen_P>
    1990:	2c 01       	movw	r4, r24
    1992:	2c 85       	ldd	r18, Y+12	; 0x0c
    1994:	50 e8       	ldi	r21, 0x80	; 128
    1996:	25 2e       	mov	r2, r21
    1998:	22 2a       	or	r2, r18
    199a:	83 01       	movw	r16, r6
    199c:	23 fc       	sbrc	r2, 3
    199e:	1a c0       	rjmp	.+52     	; 0x19d4 <vfprintf+0x1d2>
    19a0:	05 c0       	rjmp	.+10     	; 0x19ac <vfprintf+0x1aa>
    19a2:	b7 01       	movw	r22, r14
    19a4:	80 e2       	ldi	r24, 0x20	; 32
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	34 d1       	rcall	.+616    	; 0x1c12 <fputc>
    19aa:	3a 94       	dec	r3
    19ac:	83 2d       	mov	r24, r3
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	48 16       	cp	r4, r24
    19b2:	59 06       	cpc	r5, r25
    19b4:	b0 f3       	brcs	.-20     	; 0x19a2 <vfprintf+0x1a0>
    19b6:	0e c0       	rjmp	.+28     	; 0x19d4 <vfprintf+0x1d2>
    19b8:	f5 01       	movw	r30, r10
    19ba:	27 fc       	sbrc	r2, 7
    19bc:	85 91       	lpm	r24, Z+
    19be:	27 fe       	sbrs	r2, 7
    19c0:	81 91       	ld	r24, Z+
    19c2:	5f 01       	movw	r10, r30
    19c4:	b7 01       	movw	r22, r14
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	24 d1       	rcall	.+584    	; 0x1c12 <fputc>
    19ca:	31 10       	cpse	r3, r1
    19cc:	3a 94       	dec	r3
    19ce:	f1 e0       	ldi	r31, 0x01	; 1
    19d0:	4f 1a       	sub	r4, r31
    19d2:	51 08       	sbc	r5, r1
    19d4:	41 14       	cp	r4, r1
    19d6:	51 04       	cpc	r5, r1
    19d8:	79 f7       	brne	.-34     	; 0x19b8 <vfprintf+0x1b6>
    19da:	e5 c0       	rjmp	.+458    	; 0x1ba6 <vfprintf+0x3a4>
    19dc:	84 36       	cpi	r24, 0x64	; 100
    19de:	11 f0       	breq	.+4      	; 0x19e4 <vfprintf+0x1e2>
    19e0:	89 36       	cpi	r24, 0x69	; 105
    19e2:	39 f5       	brne	.+78     	; 0x1a32 <vfprintf+0x230>
    19e4:	f8 01       	movw	r30, r16
    19e6:	27 ff       	sbrs	r18, 7
    19e8:	07 c0       	rjmp	.+14     	; 0x19f8 <vfprintf+0x1f6>
    19ea:	60 81       	ld	r22, Z
    19ec:	71 81       	ldd	r23, Z+1	; 0x01
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
    19f2:	0c 5f       	subi	r16, 0xFC	; 252
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	08 c0       	rjmp	.+16     	; 0x1a08 <vfprintf+0x206>
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	88 27       	eor	r24, r24
    19fe:	77 fd       	sbrc	r23, 7
    1a00:	80 95       	com	r24
    1a02:	98 2f       	mov	r25, r24
    1a04:	0e 5f       	subi	r16, 0xFE	; 254
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	4f e6       	ldi	r20, 0x6F	; 111
    1a0a:	b4 2e       	mov	r11, r20
    1a0c:	b2 22       	and	r11, r18
    1a0e:	97 ff       	sbrs	r25, 7
    1a10:	09 c0       	rjmp	.+18     	; 0x1a24 <vfprintf+0x222>
    1a12:	90 95       	com	r25
    1a14:	80 95       	com	r24
    1a16:	70 95       	com	r23
    1a18:	61 95       	neg	r22
    1a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a20:	f0 e8       	ldi	r31, 0x80	; 128
    1a22:	bf 2a       	or	r11, r31
    1a24:	2a e0       	ldi	r18, 0x0A	; 10
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	a4 01       	movw	r20, r8
    1a2a:	1f d1       	rcall	.+574    	; 0x1c6a <__ultoa_invert>
    1a2c:	a8 2e       	mov	r10, r24
    1a2e:	a8 18       	sub	r10, r8
    1a30:	42 c0       	rjmp	.+132    	; 0x1ab6 <vfprintf+0x2b4>
    1a32:	85 37       	cpi	r24, 0x75	; 117
    1a34:	31 f4       	brne	.+12     	; 0x1a42 <vfprintf+0x240>
    1a36:	3f ee       	ldi	r19, 0xEF	; 239
    1a38:	b3 2e       	mov	r11, r19
    1a3a:	b2 22       	and	r11, r18
    1a3c:	2a e0       	ldi	r18, 0x0A	; 10
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	24 c0       	rjmp	.+72     	; 0x1a8a <vfprintf+0x288>
    1a42:	99 ef       	ldi	r25, 0xF9	; 249
    1a44:	b9 2e       	mov	r11, r25
    1a46:	b2 22       	and	r11, r18
    1a48:	8f 36       	cpi	r24, 0x6F	; 111
    1a4a:	b9 f0       	breq	.+46     	; 0x1a7a <vfprintf+0x278>
    1a4c:	20 f4       	brcc	.+8      	; 0x1a56 <vfprintf+0x254>
    1a4e:	88 35       	cpi	r24, 0x58	; 88
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <vfprintf+0x252>
    1a52:	ac c0       	rjmp	.+344    	; 0x1bac <vfprintf+0x3aa>
    1a54:	0d c0       	rjmp	.+26     	; 0x1a70 <vfprintf+0x26e>
    1a56:	80 37       	cpi	r24, 0x70	; 112
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <vfprintf+0x260>
    1a5a:	88 37       	cpi	r24, 0x78	; 120
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <vfprintf+0x25e>
    1a5e:	a6 c0       	rjmp	.+332    	; 0x1bac <vfprintf+0x3aa>
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <vfprintf+0x264>
    1a62:	20 e1       	ldi	r18, 0x10	; 16
    1a64:	b2 2a       	or	r11, r18
    1a66:	b4 fe       	sbrs	r11, 4
    1a68:	0b c0       	rjmp	.+22     	; 0x1a80 <vfprintf+0x27e>
    1a6a:	84 e0       	ldi	r24, 0x04	; 4
    1a6c:	b8 2a       	or	r11, r24
    1a6e:	08 c0       	rjmp	.+16     	; 0x1a80 <vfprintf+0x27e>
    1a70:	24 ff       	sbrs	r18, 4
    1a72:	09 c0       	rjmp	.+18     	; 0x1a86 <vfprintf+0x284>
    1a74:	e6 e0       	ldi	r30, 0x06	; 6
    1a76:	be 2a       	or	r11, r30
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <vfprintf+0x284>
    1a7a:	28 e0       	ldi	r18, 0x08	; 8
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	05 c0       	rjmp	.+10     	; 0x1a8a <vfprintf+0x288>
    1a80:	20 e1       	ldi	r18, 0x10	; 16
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <vfprintf+0x288>
    1a86:	20 e1       	ldi	r18, 0x10	; 16
    1a88:	32 e0       	ldi	r19, 0x02	; 2
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	b7 fe       	sbrs	r11, 7
    1a8e:	07 c0       	rjmp	.+14     	; 0x1a9e <vfprintf+0x29c>
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	0c 5f       	subi	r16, 0xFC	; 252
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9c:	06 c0       	rjmp	.+12     	; 0x1aaa <vfprintf+0x2a8>
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 5f       	subi	r16, 0xFE	; 254
    1aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aaa:	a4 01       	movw	r20, r8
    1aac:	de d0       	rcall	.+444    	; 0x1c6a <__ultoa_invert>
    1aae:	a8 2e       	mov	r10, r24
    1ab0:	a8 18       	sub	r10, r8
    1ab2:	ff e7       	ldi	r31, 0x7F	; 127
    1ab4:	bf 22       	and	r11, r31
    1ab6:	b6 fe       	sbrs	r11, 6
    1ab8:	0b c0       	rjmp	.+22     	; 0x1ad0 <vfprintf+0x2ce>
    1aba:	2b 2d       	mov	r18, r11
    1abc:	2e 7f       	andi	r18, 0xFE	; 254
    1abe:	a5 14       	cp	r10, r5
    1ac0:	50 f4       	brcc	.+20     	; 0x1ad6 <vfprintf+0x2d4>
    1ac2:	b4 fe       	sbrs	r11, 4
    1ac4:	0a c0       	rjmp	.+20     	; 0x1ada <vfprintf+0x2d8>
    1ac6:	b2 fc       	sbrc	r11, 2
    1ac8:	08 c0       	rjmp	.+16     	; 0x1ada <vfprintf+0x2d8>
    1aca:	2b 2d       	mov	r18, r11
    1acc:	2e 7e       	andi	r18, 0xEE	; 238
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <vfprintf+0x2d8>
    1ad0:	7a 2c       	mov	r7, r10
    1ad2:	2b 2d       	mov	r18, r11
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <vfprintf+0x2da>
    1ad6:	7a 2c       	mov	r7, r10
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <vfprintf+0x2da>
    1ada:	75 2c       	mov	r7, r5
    1adc:	24 ff       	sbrs	r18, 4
    1ade:	0d c0       	rjmp	.+26     	; 0x1afa <vfprintf+0x2f8>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	ea 0d       	add	r30, r10
    1ae4:	f1 1d       	adc	r31, r1
    1ae6:	80 81       	ld	r24, Z
    1ae8:	80 33       	cpi	r24, 0x30	; 48
    1aea:	11 f4       	brne	.+4      	; 0x1af0 <vfprintf+0x2ee>
    1aec:	29 7e       	andi	r18, 0xE9	; 233
    1aee:	09 c0       	rjmp	.+18     	; 0x1b02 <vfprintf+0x300>
    1af0:	22 ff       	sbrs	r18, 2
    1af2:	06 c0       	rjmp	.+12     	; 0x1b00 <vfprintf+0x2fe>
    1af4:	73 94       	inc	r7
    1af6:	73 94       	inc	r7
    1af8:	04 c0       	rjmp	.+8      	; 0x1b02 <vfprintf+0x300>
    1afa:	82 2f       	mov	r24, r18
    1afc:	86 78       	andi	r24, 0x86	; 134
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <vfprintf+0x300>
    1b00:	73 94       	inc	r7
    1b02:	23 fd       	sbrc	r18, 3
    1b04:	13 c0       	rjmp	.+38     	; 0x1b2c <vfprintf+0x32a>
    1b06:	20 ff       	sbrs	r18, 0
    1b08:	0e c0       	rjmp	.+28     	; 0x1b26 <vfprintf+0x324>
    1b0a:	5a 2c       	mov	r5, r10
    1b0c:	73 14       	cp	r7, r3
    1b0e:	58 f4       	brcc	.+22     	; 0x1b26 <vfprintf+0x324>
    1b10:	53 0c       	add	r5, r3
    1b12:	57 18       	sub	r5, r7
    1b14:	73 2c       	mov	r7, r3
    1b16:	07 c0       	rjmp	.+14     	; 0x1b26 <vfprintf+0x324>
    1b18:	b7 01       	movw	r22, r14
    1b1a:	80 e2       	ldi	r24, 0x20	; 32
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	2c 87       	std	Y+12, r18	; 0x0c
    1b20:	78 d0       	rcall	.+240    	; 0x1c12 <fputc>
    1b22:	73 94       	inc	r7
    1b24:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b26:	73 14       	cp	r7, r3
    1b28:	b8 f3       	brcs	.-18     	; 0x1b18 <vfprintf+0x316>
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <vfprintf+0x332>
    1b2c:	73 14       	cp	r7, r3
    1b2e:	10 f4       	brcc	.+4      	; 0x1b34 <vfprintf+0x332>
    1b30:	37 18       	sub	r3, r7
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <vfprintf+0x334>
    1b34:	31 2c       	mov	r3, r1
    1b36:	24 ff       	sbrs	r18, 4
    1b38:	11 c0       	rjmp	.+34     	; 0x1b5c <vfprintf+0x35a>
    1b3a:	b7 01       	movw	r22, r14
    1b3c:	80 e3       	ldi	r24, 0x30	; 48
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	2c 87       	std	Y+12, r18	; 0x0c
    1b42:	67 d0       	rcall	.+206    	; 0x1c12 <fputc>
    1b44:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b46:	22 ff       	sbrs	r18, 2
    1b48:	1c c0       	rjmp	.+56     	; 0x1b82 <vfprintf+0x380>
    1b4a:	21 ff       	sbrs	r18, 1
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <vfprintf+0x352>
    1b4e:	88 e5       	ldi	r24, 0x58	; 88
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <vfprintf+0x356>
    1b54:	88 e7       	ldi	r24, 0x78	; 120
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	b7 01       	movw	r22, r14
    1b5a:	0c c0       	rjmp	.+24     	; 0x1b74 <vfprintf+0x372>
    1b5c:	82 2f       	mov	r24, r18
    1b5e:	86 78       	andi	r24, 0x86	; 134
    1b60:	81 f0       	breq	.+32     	; 0x1b82 <vfprintf+0x380>
    1b62:	21 fd       	sbrc	r18, 1
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <vfprintf+0x368>
    1b66:	80 e2       	ldi	r24, 0x20	; 32
    1b68:	01 c0       	rjmp	.+2      	; 0x1b6c <vfprintf+0x36a>
    1b6a:	8b e2       	ldi	r24, 0x2B	; 43
    1b6c:	27 fd       	sbrc	r18, 7
    1b6e:	8d e2       	ldi	r24, 0x2D	; 45
    1b70:	b7 01       	movw	r22, r14
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	4e d0       	rcall	.+156    	; 0x1c12 <fputc>
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <vfprintf+0x380>
    1b78:	b7 01       	movw	r22, r14
    1b7a:	80 e3       	ldi	r24, 0x30	; 48
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	49 d0       	rcall	.+146    	; 0x1c12 <fputc>
    1b80:	5a 94       	dec	r5
    1b82:	a5 14       	cp	r10, r5
    1b84:	c8 f3       	brcs	.-14     	; 0x1b78 <vfprintf+0x376>
    1b86:	aa 94       	dec	r10
    1b88:	f4 01       	movw	r30, r8
    1b8a:	ea 0d       	add	r30, r10
    1b8c:	f1 1d       	adc	r31, r1
    1b8e:	b7 01       	movw	r22, r14
    1b90:	80 81       	ld	r24, Z
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	3e d0       	rcall	.+124    	; 0x1c12 <fputc>
    1b96:	a1 10       	cpse	r10, r1
    1b98:	f6 cf       	rjmp	.-20     	; 0x1b86 <vfprintf+0x384>
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <vfprintf+0x3a4>
    1b9c:	b7 01       	movw	r22, r14
    1b9e:	80 e2       	ldi	r24, 0x20	; 32
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	37 d0       	rcall	.+110    	; 0x1c12 <fputc>
    1ba4:	3a 94       	dec	r3
    1ba6:	31 10       	cpse	r3, r1
    1ba8:	f9 cf       	rjmp	.-14     	; 0x1b9c <vfprintf+0x39a>
    1baa:	50 ce       	rjmp	.-864    	; 0x184c <vfprintf+0x4a>
    1bac:	f7 01       	movw	r30, r14
    1bae:	26 81       	ldd	r18, Z+6	; 0x06
    1bb0:	37 81       	ldd	r19, Z+7	; 0x07
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <vfprintf+0x3b6>
    1bb4:	2f ef       	ldi	r18, 0xFF	; 255
    1bb6:	3f ef       	ldi	r19, 0xFF	; 255
    1bb8:	c9 01       	movw	r24, r18
    1bba:	2c 96       	adiw	r28, 0x0c	; 12
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	ff 90       	pop	r15
    1bca:	ef 90       	pop	r14
    1bcc:	df 90       	pop	r13
    1bce:	cf 90       	pop	r12
    1bd0:	bf 90       	pop	r11
    1bd2:	af 90       	pop	r10
    1bd4:	9f 90       	pop	r9
    1bd6:	8f 90       	pop	r8
    1bd8:	7f 90       	pop	r7
    1bda:	6f 90       	pop	r6
    1bdc:	5f 90       	pop	r5
    1bde:	4f 90       	pop	r4
    1be0:	3f 90       	pop	r3
    1be2:	2f 90       	pop	r2
    1be4:	08 95       	ret

00001be6 <strnlen_P>:
    1be6:	fc 01       	movw	r30, r24
    1be8:	05 90       	lpm	r0, Z+
    1bea:	61 50       	subi	r22, 0x01	; 1
    1bec:	70 40       	sbci	r23, 0x00	; 0
    1bee:	01 10       	cpse	r0, r1
    1bf0:	d8 f7       	brcc	.-10     	; 0x1be8 <strnlen_P+0x2>
    1bf2:	80 95       	com	r24
    1bf4:	90 95       	com	r25
    1bf6:	8e 0f       	add	r24, r30
    1bf8:	9f 1f       	adc	r25, r31
    1bfa:	08 95       	ret

00001bfc <strnlen>:
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	61 50       	subi	r22, 0x01	; 1
    1c00:	70 40       	sbci	r23, 0x00	; 0
    1c02:	01 90       	ld	r0, Z+
    1c04:	01 10       	cpse	r0, r1
    1c06:	d8 f7       	brcc	.-10     	; 0x1bfe <strnlen+0x2>
    1c08:	80 95       	com	r24
    1c0a:	90 95       	com	r25
    1c0c:	8e 0f       	add	r24, r30
    1c0e:	9f 1f       	adc	r25, r31
    1c10:	08 95       	ret

00001c12 <fputc>:
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	8c 01       	movw	r16, r24
    1c1c:	eb 01       	movw	r28, r22
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	81 fd       	sbrc	r24, 1
    1c22:	03 c0       	rjmp	.+6      	; 0x1c2a <fputc+0x18>
    1c24:	0f ef       	ldi	r16, 0xFF	; 255
    1c26:	1f ef       	ldi	r17, 0xFF	; 255
    1c28:	1a c0       	rjmp	.+52     	; 0x1c5e <fputc+0x4c>
    1c2a:	82 ff       	sbrs	r24, 2
    1c2c:	0d c0       	rjmp	.+26     	; 0x1c48 <fputc+0x36>
    1c2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c30:	3f 81       	ldd	r19, Y+7	; 0x07
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	28 17       	cp	r18, r24
    1c38:	39 07       	cpc	r19, r25
    1c3a:	64 f4       	brge	.+24     	; 0x1c54 <fputc+0x42>
    1c3c:	e8 81       	ld	r30, Y
    1c3e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c40:	01 93       	st	Z+, r16
    1c42:	e8 83       	st	Y, r30
    1c44:	f9 83       	std	Y+1, r31	; 0x01
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <fputc+0x42>
    1c48:	e8 85       	ldd	r30, Y+8	; 0x08
    1c4a:	f9 85       	ldd	r31, Y+9	; 0x09
    1c4c:	80 2f       	mov	r24, r16
    1c4e:	19 95       	eicall
    1c50:	89 2b       	or	r24, r25
    1c52:	41 f7       	brne	.-48     	; 0x1c24 <fputc+0x12>
    1c54:	8e 81       	ldd	r24, Y+6	; 0x06
    1c56:	9f 81       	ldd	r25, Y+7	; 0x07
    1c58:	01 96       	adiw	r24, 0x01	; 1
    1c5a:	8e 83       	std	Y+6, r24	; 0x06
    1c5c:	9f 83       	std	Y+7, r25	; 0x07
    1c5e:	c8 01       	movw	r24, r16
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	1f 91       	pop	r17
    1c66:	0f 91       	pop	r16
    1c68:	08 95       	ret

00001c6a <__ultoa_invert>:
    1c6a:	fa 01       	movw	r30, r20
    1c6c:	aa 27       	eor	r26, r26
    1c6e:	28 30       	cpi	r18, 0x08	; 8
    1c70:	51 f1       	breq	.+84     	; 0x1cc6 <__ultoa_invert+0x5c>
    1c72:	20 31       	cpi	r18, 0x10	; 16
    1c74:	81 f1       	breq	.+96     	; 0x1cd6 <__ultoa_invert+0x6c>
    1c76:	e8 94       	clt
    1c78:	6f 93       	push	r22
    1c7a:	6e 7f       	andi	r22, 0xFE	; 254
    1c7c:	6e 5f       	subi	r22, 0xFE	; 254
    1c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c80:	8f 4f       	sbci	r24, 0xFF	; 255
    1c82:	9f 4f       	sbci	r25, 0xFF	; 255
    1c84:	af 4f       	sbci	r26, 0xFF	; 255
    1c86:	b1 e0       	ldi	r27, 0x01	; 1
    1c88:	3e d0       	rcall	.+124    	; 0x1d06 <__ultoa_invert+0x9c>
    1c8a:	b4 e0       	ldi	r27, 0x04	; 4
    1c8c:	3c d0       	rcall	.+120    	; 0x1d06 <__ultoa_invert+0x9c>
    1c8e:	67 0f       	add	r22, r23
    1c90:	78 1f       	adc	r23, r24
    1c92:	89 1f       	adc	r24, r25
    1c94:	9a 1f       	adc	r25, r26
    1c96:	a1 1d       	adc	r26, r1
    1c98:	68 0f       	add	r22, r24
    1c9a:	79 1f       	adc	r23, r25
    1c9c:	8a 1f       	adc	r24, r26
    1c9e:	91 1d       	adc	r25, r1
    1ca0:	a1 1d       	adc	r26, r1
    1ca2:	6a 0f       	add	r22, r26
    1ca4:	71 1d       	adc	r23, r1
    1ca6:	81 1d       	adc	r24, r1
    1ca8:	91 1d       	adc	r25, r1
    1caa:	a1 1d       	adc	r26, r1
    1cac:	20 d0       	rcall	.+64     	; 0x1cee <__ultoa_invert+0x84>
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <__ultoa_invert+0x48>
    1cb0:	68 94       	set
    1cb2:	3f 91       	pop	r19
    1cb4:	2a e0       	ldi	r18, 0x0A	; 10
    1cb6:	26 9f       	mul	r18, r22
    1cb8:	11 24       	eor	r1, r1
    1cba:	30 19       	sub	r19, r0
    1cbc:	30 5d       	subi	r19, 0xD0	; 208
    1cbe:	31 93       	st	Z+, r19
    1cc0:	de f6       	brtc	.-74     	; 0x1c78 <__ultoa_invert+0xe>
    1cc2:	cf 01       	movw	r24, r30
    1cc4:	08 95       	ret
    1cc6:	46 2f       	mov	r20, r22
    1cc8:	47 70       	andi	r20, 0x07	; 7
    1cca:	40 5d       	subi	r20, 0xD0	; 208
    1ccc:	41 93       	st	Z+, r20
    1cce:	b3 e0       	ldi	r27, 0x03	; 3
    1cd0:	0f d0       	rcall	.+30     	; 0x1cf0 <__ultoa_invert+0x86>
    1cd2:	c9 f7       	brne	.-14     	; 0x1cc6 <__ultoa_invert+0x5c>
    1cd4:	f6 cf       	rjmp	.-20     	; 0x1cc2 <__ultoa_invert+0x58>
    1cd6:	46 2f       	mov	r20, r22
    1cd8:	4f 70       	andi	r20, 0x0F	; 15
    1cda:	40 5d       	subi	r20, 0xD0	; 208
    1cdc:	4a 33       	cpi	r20, 0x3A	; 58
    1cde:	18 f0       	brcs	.+6      	; 0x1ce6 <__ultoa_invert+0x7c>
    1ce0:	49 5d       	subi	r20, 0xD9	; 217
    1ce2:	31 fd       	sbrc	r19, 1
    1ce4:	40 52       	subi	r20, 0x20	; 32
    1ce6:	41 93       	st	Z+, r20
    1ce8:	02 d0       	rcall	.+4      	; 0x1cee <__ultoa_invert+0x84>
    1cea:	a9 f7       	brne	.-22     	; 0x1cd6 <__ultoa_invert+0x6c>
    1cec:	ea cf       	rjmp	.-44     	; 0x1cc2 <__ultoa_invert+0x58>
    1cee:	b4 e0       	ldi	r27, 0x04	; 4
    1cf0:	a6 95       	lsr	r26
    1cf2:	97 95       	ror	r25
    1cf4:	87 95       	ror	r24
    1cf6:	77 95       	ror	r23
    1cf8:	67 95       	ror	r22
    1cfa:	ba 95       	dec	r27
    1cfc:	c9 f7       	brne	.-14     	; 0x1cf0 <__ultoa_invert+0x86>
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	61 05       	cpc	r22, r1
    1d02:	71 05       	cpc	r23, r1
    1d04:	08 95       	ret
    1d06:	9b 01       	movw	r18, r22
    1d08:	ac 01       	movw	r20, r24
    1d0a:	0a 2e       	mov	r0, r26
    1d0c:	06 94       	lsr	r0
    1d0e:	57 95       	ror	r21
    1d10:	47 95       	ror	r20
    1d12:	37 95       	ror	r19
    1d14:	27 95       	ror	r18
    1d16:	ba 95       	dec	r27
    1d18:	c9 f7       	brne	.-14     	; 0x1d0c <__ultoa_invert+0xa2>
    1d1a:	62 0f       	add	r22, r18
    1d1c:	73 1f       	adc	r23, r19
    1d1e:	84 1f       	adc	r24, r20
    1d20:	95 1f       	adc	r25, r21
    1d22:	a0 1d       	adc	r26, r0
    1d24:	08 95       	ret

00001d26 <_exit>:
    1d26:	f8 94       	cli

00001d28 <__stop_program>:
    1d28:	ff cf       	rjmp	.-2      	; 0x1d28 <__stop_program>
