
Xmega_NXT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00802000  00001146  000011da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b8  0080201a  0080201a  000011f4  2**0
                  ALLOC
  3 .stab         00002550  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008c2  00000000  00000000  00003744  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004006  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000180  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000027db  00000000  00000000  000041b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000893  00000000  00000000  00006990  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e1f  00000000  00000000  00007223  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000614  00000000  00000000  00008044  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000010bb  00000000  00000000  00008658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017fd  00000000  00000000  00009713  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  0000af10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c2       	rjmp	.+1298   	; 0x51c <__vector_2>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
      2e:	00 00       	nop
      30:	41 c2       	rjmp	.+1154   	; 0x4b4 <__vector_12>
      32:	00 00       	nop
      34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	79 c2       	rjmp	.+1266   	; 0x544 <__vector_20>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f8 c0       	rjmp	.+496    	; 0x262 <__vector_28>
      72:	00 00       	nop
      74:	2a c1       	rjmp	.+596    	; 0x2ca <__vector_29>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	e8 c0       	rjmp	.+464    	; 0x332 <__vector_88>
     162:	00 00       	nop
     164:	1a c1       	rjmp	.+564    	; 0x39a <__vector_89>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e3       	ldi	r29, 0x3F	; 63
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e6 e4       	ldi	r30, 0x46	; 70
     21c:	f1 e1       	ldi	r31, 0x11	; 17
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	aa 31       	cpi	r26, 0x1A	; 26
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	22 e2       	ldi	r18, 0x22	; 34
     232:	aa e1       	ldi	r26, 0x1A	; 26
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a2 3d       	cpi	r26, 0xD2	; 210
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	e0 d0       	rcall	.+448    	; 0x402 <main>
     242:	7f c7       	rjmp	.+3838   	; 0x1142 <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <TWIC_SlaveProcessData>:
char indata[16];
uint8_t index;

void TWIC_SlaveProcessData(void)
{
	index = twiSlave.bytesReceived;
     246:	80 91 35 21 	lds	r24, 0x2135
     24a:	80 93 c1 21 	sts	0x21C1, r24
	indata[index] = twiSlave.receivedData[index];
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	fc 01       	movw	r30, r24
     252:	ef 54       	subi	r30, 0x4F	; 79
     254:	ff 4d       	sbci	r31, 0xDF	; 223
     256:	24 81       	ldd	r18, Z+4	; 0x04
     258:	fc 01       	movw	r30, r24
     25a:	ee 53       	subi	r30, 0x3E	; 62
     25c:	fe 4d       	sbci	r31, 0xDE	; 222
     25e:	20 83       	st	Z, r18
     260:	08 95       	ret

00000262 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     262:	1f 92       	push	r1
     264:	0f 92       	push	r0
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	0f 92       	push	r0
     26a:	11 24       	eor	r1, r1
     26c:	08 b6       	in	r0, 0x38	; 56
     26e:	0f 92       	push	r0
     270:	18 be       	out	0x38, r1	; 56
     272:	09 b6       	in	r0, 0x39	; 57
     274:	0f 92       	push	r0
     276:	19 be       	out	0x39, r1	; 57
     278:	0b b6       	in	r0, 0x3b	; 59
     27a:	0f 92       	push	r0
     27c:	1b be       	out	0x3b, r1	; 59
     27e:	2f 93       	push	r18
     280:	3f 93       	push	r19
     282:	4f 93       	push	r20
     284:	5f 93       	push	r21
     286:	6f 93       	push	r22
     288:	7f 93       	push	r23
     28a:	8f 93       	push	r24
     28c:	9f 93       	push	r25
     28e:	af 93       	push	r26
     290:	bf 93       	push	r27
     292:	ef 93       	push	r30
     294:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     296:	8a e3       	ldi	r24, 0x3A	; 58
     298:	91 e2       	ldi	r25, 0x21	; 33
     29a:	da d4       	rcall	.+2484   	; 0xc50 <USART_RXComplete>
}
     29c:	ff 91       	pop	r31
     29e:	ef 91       	pop	r30
     2a0:	bf 91       	pop	r27
     2a2:	af 91       	pop	r26
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	7f 91       	pop	r23
     2aa:	6f 91       	pop	r22
     2ac:	5f 91       	pop	r21
     2ae:	4f 91       	pop	r20
     2b0:	3f 91       	pop	r19
     2b2:	2f 91       	pop	r18
     2b4:	0f 90       	pop	r0
     2b6:	0b be       	out	0x3b, r0	; 59
     2b8:	0f 90       	pop	r0
     2ba:	09 be       	out	0x39, r0	; 57
     2bc:	0f 90       	pop	r0
     2be:	08 be       	out	0x38, r0	; 56
     2c0:	0f 90       	pop	r0
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	0f 90       	pop	r0
     2c6:	1f 90       	pop	r1
     2c8:	18 95       	reti

000002ca <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     2ca:	1f 92       	push	r1
     2cc:	0f 92       	push	r0
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	08 b6       	in	r0, 0x38	; 56
     2d6:	0f 92       	push	r0
     2d8:	18 be       	out	0x38, r1	; 56
     2da:	09 b6       	in	r0, 0x39	; 57
     2dc:	0f 92       	push	r0
     2de:	19 be       	out	0x39, r1	; 57
     2e0:	0b b6       	in	r0, 0x3b	; 59
     2e2:	0f 92       	push	r0
     2e4:	1b be       	out	0x3b, r1	; 59
     2e6:	2f 93       	push	r18
     2e8:	3f 93       	push	r19
     2ea:	4f 93       	push	r20
     2ec:	5f 93       	push	r21
     2ee:	6f 93       	push	r22
     2f0:	7f 93       	push	r23
     2f2:	8f 93       	push	r24
     2f4:	9f 93       	push	r25
     2f6:	af 93       	push	r26
     2f8:	bf 93       	push	r27
     2fa:	ef 93       	push	r30
     2fc:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     2fe:	8a e3       	ldi	r24, 0x3A	; 58
     300:	91 e2       	ldi	r25, 0x21	; 33
     302:	c4 d4       	rcall	.+2440   	; 0xc8c <USART_DataRegEmpty>
}
     304:	ff 91       	pop	r31
     306:	ef 91       	pop	r30
     308:	bf 91       	pop	r27
     30a:	af 91       	pop	r26
     30c:	9f 91       	pop	r25
     30e:	8f 91       	pop	r24
     310:	7f 91       	pop	r23
     312:	6f 91       	pop	r22
     314:	5f 91       	pop	r21
     316:	4f 91       	pop	r20
     318:	3f 91       	pop	r19
     31a:	2f 91       	pop	r18
     31c:	0f 90       	pop	r0
     31e:	0b be       	out	0x3b, r0	; 59
     320:	0f 90       	pop	r0
     322:	09 be       	out	0x39, r0	; 57
     324:	0f 90       	pop	r0
     326:	08 be       	out	0x38, r0	; 56
     328:	0f 90       	pop	r0
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	0f 90       	pop	r0
     32e:	1f 90       	pop	r1
     330:	18 95       	reti

00000332 <__vector_88>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_RXC_vect)
{
     332:	1f 92       	push	r1
     334:	0f 92       	push	r0
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	0f 92       	push	r0
     33a:	11 24       	eor	r1, r1
     33c:	08 b6       	in	r0, 0x38	; 56
     33e:	0f 92       	push	r0
     340:	18 be       	out	0x38, r1	; 56
     342:	09 b6       	in	r0, 0x39	; 57
     344:	0f 92       	push	r0
     346:	19 be       	out	0x39, r1	; 57
     348:	0b b6       	in	r0, 0x3b	; 59
     34a:	0f 92       	push	r0
     34c:	1b be       	out	0x3b, r1	; 59
     34e:	2f 93       	push	r18
     350:	3f 93       	push	r19
     352:	4f 93       	push	r20
     354:	5f 93       	push	r21
     356:	6f 93       	push	r22
     358:	7f 93       	push	r23
     35a:	8f 93       	push	r24
     35c:	9f 93       	push	r25
     35e:	af 93       	push	r26
     360:	bf 93       	push	r27
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
  USART_RXComplete(&uartD0);
     366:	8a e1       	ldi	r24, 0x1A	; 26
     368:	90 e2       	ldi	r25, 0x20	; 32
     36a:	72 d4       	rcall	.+2276   	; 0xc50 <USART_RXComplete>
}
     36c:	ff 91       	pop	r31
     36e:	ef 91       	pop	r30
     370:	bf 91       	pop	r27
     372:	af 91       	pop	r26
     374:	9f 91       	pop	r25
     376:	8f 91       	pop	r24
     378:	7f 91       	pop	r23
     37a:	6f 91       	pop	r22
     37c:	5f 91       	pop	r21
     37e:	4f 91       	pop	r20
     380:	3f 91       	pop	r19
     382:	2f 91       	pop	r18
     384:	0f 90       	pop	r0
     386:	0b be       	out	0x3b, r0	; 59
     388:	0f 90       	pop	r0
     38a:	09 be       	out	0x39, r0	; 57
     38c:	0f 90       	pop	r0
     38e:	08 be       	out	0x38, r0	; 56
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <__vector_89>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_DRE_vect)
{
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	08 b6       	in	r0, 0x38	; 56
     3a6:	0f 92       	push	r0
     3a8:	18 be       	out	0x38, r1	; 56
     3aa:	09 b6       	in	r0, 0x39	; 57
     3ac:	0f 92       	push	r0
     3ae:	19 be       	out	0x39, r1	; 57
     3b0:	0b b6       	in	r0, 0x3b	; 59
     3b2:	0f 92       	push	r0
     3b4:	1b be       	out	0x3b, r1	; 59
     3b6:	2f 93       	push	r18
     3b8:	3f 93       	push	r19
     3ba:	4f 93       	push	r20
     3bc:	5f 93       	push	r21
     3be:	6f 93       	push	r22
     3c0:	7f 93       	push	r23
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
     3c6:	af 93       	push	r26
     3c8:	bf 93       	push	r27
     3ca:	ef 93       	push	r30
     3cc:	ff 93       	push	r31
  USART_DataRegEmpty(&uartD0);
     3ce:	8a e1       	ldi	r24, 0x1A	; 26
     3d0:	90 e2       	ldi	r25, 0x20	; 32
     3d2:	5c d4       	rcall	.+2232   	; 0xc8c <USART_DataRegEmpty>
}
     3d4:	ff 91       	pop	r31
     3d6:	ef 91       	pop	r30
     3d8:	bf 91       	pop	r27
     3da:	af 91       	pop	r26
     3dc:	9f 91       	pop	r25
     3de:	8f 91       	pop	r24
     3e0:	7f 91       	pop	r23
     3e2:	6f 91       	pop	r22
     3e4:	5f 91       	pop	r21
     3e6:	4f 91       	pop	r20
     3e8:	3f 91       	pop	r19
     3ea:	2f 91       	pop	r18
     3ec:	0f 90       	pop	r0
     3ee:	0b be       	out	0x3b, r0	; 59
     3f0:	0f 90       	pop	r0
     3f2:	09 be       	out	0x39, r0	; 57
     3f4:	0f 90       	pop	r0
     3f6:	08 be       	out	0x38, r0	; 56
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <main>:
}

int main(void)
{
	PORTE.DIRSET = PIN0_bm;
     402:	c1 e0       	ldi	r28, 0x01	; 1
     404:	e0 e8       	ldi	r30, 0x80	; 128
     406:	f6 e0       	ldi	r31, 0x06	; 6
     408:	c1 83       	std	Z+1, r28	; 0x01
	
	PORTC.INT0MASK = PIN6_bm;
     40a:	e0 e4       	ldi	r30, 0x40	; 64
     40c:	f6 e0       	ldi	r31, 0x06	; 6
     40e:	80 e4       	ldi	r24, 0x40	; 64
     410:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.PIN6CTRL = PORT_ISC_RISING_gc;
     412:	c6 8b       	std	Z+22, r28	; 0x16
	PORTC.INTCTRL  = PORT_INT0LVL_LO_gc;
     414:	c1 87       	std	Z+9, r28	; 0x09
	
	init_uart(&uartD0, &USARTD0, F_CPU, D0_BAUD, D0_CLK2X);
     416:	c1 2c       	mov	r12, r1
     418:	e1 2c       	mov	r14, r1
     41a:	12 ec       	ldi	r17, 0xC2	; 194
     41c:	f1 2e       	mov	r15, r17
     41e:	01 e0       	ldi	r16, 0x01	; 1
     420:	10 e0       	ldi	r17, 0x00	; 0
     422:	20 e8       	ldi	r18, 0x80	; 128
     424:	34 e8       	ldi	r19, 0x84	; 132
     426:	4e e1       	ldi	r20, 0x1E	; 30
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	60 ea       	ldi	r22, 0xA0	; 160
     42c:	79 e0       	ldi	r23, 0x09	; 9
     42e:	8a e1       	ldi	r24, 0x1A	; 26
     430:	90 e2       	ldi	r25, 0x20	; 32
     432:	53 d3       	rcall	.+1702   	; 0xada <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X);
     434:	10 e8       	ldi	r17, 0x80	; 128
     436:	e1 2e       	mov	r14, r17
     438:	15 e2       	ldi	r17, 0x25	; 37
     43a:	f1 2e       	mov	r15, r17
     43c:	00 e0       	ldi	r16, 0x00	; 0
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	20 e8       	ldi	r18, 0x80	; 128
     442:	34 e8       	ldi	r19, 0x84	; 132
     444:	4e e1       	ldi	r20, 0x1E	; 30
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	60 eb       	ldi	r22, 0xB0	; 176
     44a:	78 e0       	ldi	r23, 0x08	; 8
     44c:	8a e3       	ldi	r24, 0x3A	; 58
     44e:	91 e2       	ldi	r25, 0x21	; 33
     450:	44 d3       	rcall	.+1672   	; 0xada <init_uart>
	
	TCC1.CTRLB     = TC_WGMODE_NORMAL_gc;
     452:	e0 e4       	ldi	r30, 0x40	; 64
     454:	f8 e0       	ldi	r31, 0x08	; 8
     456:	11 82       	std	Z+1, r1	; 0x01
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     458:	10 82       	st	Z, r1
	TCC1.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     45a:	c6 83       	std	Z+6, r28	; 0x06
	TCC1.PER       = 400;
     45c:	80 e9       	ldi	r24, 0x90	; 144
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	86 a3       	std	Z+38, r24	; 0x26
     462:	97 a3       	std	Z+39, r25	; 0x27
	
	TWI_SlaveInitializeDriver(&twiSlave, &TWIC, TWIC_SlaveProcessData);
     464:	43 e2       	ldi	r20, 0x23	; 35
     466:	51 e0       	ldi	r21, 0x01	; 1
     468:	60 e8       	ldi	r22, 0x80	; 128
     46a:	74 e0       	ldi	r23, 0x04	; 4
     46c:	81 eb       	ldi	r24, 0xB1	; 177
     46e:	90 e2       	ldi	r25, 0x20	; 32
     470:	e5 d0       	rcall	.+458    	; 0x63c <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twiSlave, SLAVE_ADDRESS, TWI_SLAVE_INTLVL_LO_gc);
     472:	40 e4       	ldi	r20, 0x40	; 64
     474:	61 e0       	ldi	r22, 0x01	; 1
     476:	81 eb       	ldi	r24, 0xB1	; 177
     478:	90 e2       	ldi	r25, 0x20	; 32
     47a:	f9 d0       	rcall	.+498    	; 0x66e <TWI_SlaveInitializeModule>
	
	PMIC.CTRL = PMIC_LOLVLEN_bm;
     47c:	e0 ea       	ldi	r30, 0xA0	; 160
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	c2 83       	std	Z+2, r28	; 0x02
	sei();
     482:	78 94       	sei
	
	twiSlave.sendData[0] = 'T';
     484:	84 e5       	ldi	r24, 0x54	; 84
     486:	80 93 f5 20 	sts	0x20F5, r24
	twiSlave.sendData[1] = 'W';
     48a:	87 e5       	ldi	r24, 0x57	; 87
     48c:	80 93 f6 20 	sts	0x20F6, r24
	twiSlave.sendData[2] = 'I';
     490:	89 e4       	ldi	r24, 0x49	; 73
     492:	80 93 f7 20 	sts	0x20F7, r24

	
	sprintf(str, "UART Connected!!!\n\r");
     496:	84 e1       	ldi	r24, 0x14	; 20
     498:	e0 e0       	ldi	r30, 0x00	; 0
     49a:	f0 e2       	ldi	r31, 0x20	; 32
     49c:	a2 ed       	ldi	r26, 0xD2	; 210
     49e:	b1 e2       	ldi	r27, 0x21	; 33
     4a0:	01 90       	ld	r0, Z+
     4a2:	0d 92       	st	X+, r0
     4a4:	8a 95       	dec	r24
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <main+0x9e>
	uart_puts(&uartD0, str);
     4a8:	62 ed       	ldi	r22, 0xD2	; 210
     4aa:	71 e2       	ldi	r23, 0x21	; 33
     4ac:	8a e1       	ldi	r24, 0x1A	; 26
     4ae:	90 e2       	ldi	r25, 0x20	; 32
     4b0:	02 d2       	rcall	.+1028   	; 0x8b6 <uart_puts>
     4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <main+0xb0>

000004b4 <__vector_12>:
		//nop
	}
}

ISR(TWIC_TWIS_vect)
{
     4b4:	1f 92       	push	r1
     4b6:	0f 92       	push	r0
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	0f 92       	push	r0
     4bc:	11 24       	eor	r1, r1
     4be:	08 b6       	in	r0, 0x38	; 56
     4c0:	0f 92       	push	r0
     4c2:	18 be       	out	0x38, r1	; 56
     4c4:	09 b6       	in	r0, 0x39	; 57
     4c6:	0f 92       	push	r0
     4c8:	19 be       	out	0x39, r1	; 57
     4ca:	0b b6       	in	r0, 0x3b	; 59
     4cc:	0f 92       	push	r0
     4ce:	1b be       	out	0x3b, r1	; 59
     4d0:	2f 93       	push	r18
     4d2:	3f 93       	push	r19
     4d4:	4f 93       	push	r20
     4d6:	5f 93       	push	r21
     4d8:	6f 93       	push	r22
     4da:	7f 93       	push	r23
     4dc:	8f 93       	push	r24
     4de:	9f 93       	push	r25
     4e0:	af 93       	push	r26
     4e2:	bf 93       	push	r27
     4e4:	ef 93       	push	r30
     4e6:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twiSlave);
     4e8:	81 eb       	ldi	r24, 0xB1	; 177
     4ea:	90 e2       	ldi	r25, 0x20	; 32
     4ec:	9a d1       	rcall	.+820    	; 0x822 <TWI_SlaveInterruptHandler>
}
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	bf 91       	pop	r27
     4f4:	af 91       	pop	r26
     4f6:	9f 91       	pop	r25
     4f8:	8f 91       	pop	r24
     4fa:	7f 91       	pop	r23
     4fc:	6f 91       	pop	r22
     4fe:	5f 91       	pop	r21
     500:	4f 91       	pop	r20
     502:	3f 91       	pop	r19
     504:	2f 91       	pop	r18
     506:	0f 90       	pop	r0
     508:	0b be       	out	0x3b, r0	; 59
     50a:	0f 90       	pop	r0
     50c:	09 be       	out	0x39, r0	; 57
     50e:	0f 90       	pop	r0
     510:	08 be       	out	0x38, r0	; 56
     512:	0f 90       	pop	r0
     514:	0f be       	out	0x3f, r0	; 63
     516:	0f 90       	pop	r0
     518:	1f 90       	pop	r1
     51a:	18 95       	reti

0000051c <__vector_2>:

ISR(PORTC_INT0_vect)
{
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	08 b6       	in	r0, 0x38	; 56
     528:	0f 92       	push	r0
     52a:	18 be       	out	0x38, r1	; 56
     52c:	8f 93       	push	r24
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
     52e:	87 e0       	ldi	r24, 0x07	; 7
     530:	80 93 40 08 	sts	0x0840, r24
}
     534:	8f 91       	pop	r24
     536:	0f 90       	pop	r0
     538:	08 be       	out	0x38, r0	; 56
     53a:	0f 90       	pop	r0
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	0f 90       	pop	r0
     540:	1f 90       	pop	r1
     542:	18 95       	reti

00000544 <__vector_20>:

ISR(TCC1_OVF_vect)
{
     544:	1f 92       	push	r1
     546:	0f 92       	push	r0
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	08 b6       	in	r0, 0x38	; 56
     550:	0f 92       	push	r0
     552:	18 be       	out	0x38, r1	; 56
     554:	09 b6       	in	r0, 0x39	; 57
     556:	0f 92       	push	r0
     558:	19 be       	out	0x39, r1	; 57
     55a:	0a b6       	in	r0, 0x3a	; 58
     55c:	0f 92       	push	r0
     55e:	1a be       	out	0x3a, r1	; 58
     560:	0b b6       	in	r0, 0x3b	; 59
     562:	0f 92       	push	r0
     564:	1b be       	out	0x3b, r1	; 59
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	2f 93       	push	r18
     570:	3f 93       	push	r19
     572:	4f 93       	push	r20
     574:	5f 93       	push	r21
     576:	6f 93       	push	r22
     578:	7f 93       	push	r23
     57a:	8f 93       	push	r24
     57c:	9f 93       	push	r25
     57e:	af 93       	push	r26
     580:	bf 93       	push	r27
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     58a:	10 92 40 08 	sts	0x0840, r1
	PORTE.OUTSET   = PIN0_bm;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	e0 e8       	ldi	r30, 0x80	; 128
     592:	f6 e0       	ldi	r31, 0x06	; 6
     594:	85 83       	std	Z+5, r24	; 0x05
     596:	01 ea       	ldi	r16, 0xA1	; 161
     598:	10 e2       	ldi	r17, 0x20	; 32
ISR(PORTC_INT0_vect)
{
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
}

ISR(TCC1_OVF_vect)
     59a:	0f 2e       	mov	r0, r31
     59c:	f1 eb       	ldi	r31, 0xB1	; 177
     59e:	ef 2e       	mov	r14, r31
     5a0:	f0 e2       	ldi	r31, 0x20	; 32
     5a2:	ff 2e       	mov	r15, r31
     5a4:	f0 2d       	mov	r31, r0
     5a6:	e8 01       	movw	r28, r16
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
	PORTE.OUTSET   = PIN0_bm;
	int i = 0;
	while (i < NUM_BYTES)
	{
		if (USART_RXBufferData_Available(&uartC1))
     5a8:	8a e3       	ldi	r24, 0x3A	; 58
     5aa:	91 e2       	ldi	r25, 0x21	; 33
     5ac:	36 d3       	rcall	.+1644   	; 0xc1a <USART_RXBufferData_Available>
     5ae:	88 23       	and	r24, r24
     5b0:	21 f0       	breq	.+8      	; 0x5ba <__vector_20+0x76>
		{
			receiveArray[i] = USART_RXBuffer_GetByte(&uartC1);
     5b2:	8a e3       	ldi	r24, 0x3A	; 58
     5b4:	91 e2       	ldi	r25, 0x21	; 33
     5b6:	3e d3       	rcall	.+1660   	; 0xc34 <USART_RXBuffer_GetByte>
     5b8:	88 83       	st	Y, r24
     5ba:	21 96       	adiw	r28, 0x01	; 1
ISR(TCC1_OVF_vect)
{
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
	PORTE.OUTSET   = PIN0_bm;
	int i = 0;
	while (i < NUM_BYTES)
     5bc:	ce 15       	cp	r28, r14
     5be:	df 05       	cpc	r29, r15
     5c0:	99 f7       	brne	.-26     	; 0x5a8 <__vector_20+0x64>
		}
		i++;
	}
	
	i = 0;
	uart_puts(&uartD0, "ID: ");
     5c2:	64 e1       	ldi	r22, 0x14	; 20
     5c4:	70 e2       	ldi	r23, 0x20	; 32
     5c6:	8a e1       	ldi	r24, 0x1A	; 26
     5c8:	90 e2       	ldi	r25, 0x20	; 32
     5ca:	75 d1       	rcall	.+746    	; 0x8b6 <uart_puts>
			receiveArray[i] = USART_RXBuffer_GetByte(&uartC1);
		}
		i++;
	}
	
	i = 0;
     5cc:	c0 e0       	ldi	r28, 0x00	; 0
     5ce:	d0 e0       	ldi	r29, 0x00	; 0
	uart_puts(&uartD0, "ID: ");
	while (i < NUM_BYTES)
	{
		if (receiveArray[i]>0)
     5d0:	f8 01       	movw	r30, r16
     5d2:	61 91       	ld	r22, Z+
     5d4:	8f 01       	movw	r16, r30
     5d6:	66 23       	and	r22, r22
     5d8:	51 f0       	breq	.+20     	; 0x5ee <__vector_20+0xaa>
		{
			if (i<11)
     5da:	cb 30       	cpi	r28, 0x0B	; 11
     5dc:	d1 05       	cpc	r29, r1
     5de:	24 f4       	brge	.+8      	; 0x5e8 <__vector_20+0xa4>
			{
				twiSlave.sendData[i] = receiveArray[i];
     5e0:	fe 01       	movw	r30, r28
     5e2:	eb 50       	subi	r30, 0x0B	; 11
     5e4:	ff 4d       	sbci	r31, 0xDF	; 223
     5e6:	60 83       	st	Z, r22
			}
			uart_putc(&uartD0, receiveArray[i]);
     5e8:	8a e1       	ldi	r24, 0x1A	; 26
     5ea:	90 e2       	ldi	r25, 0x20	; 32
     5ec:	55 d1       	rcall	.+682    	; 0x898 <uart_putc>
		}
		i++;
     5ee:	21 96       	adiw	r28, 0x01	; 1
		i++;
	}
	
	i = 0;
	uart_puts(&uartD0, "ID: ");
	while (i < NUM_BYTES)
     5f0:	c0 31       	cpi	r28, 0x10	; 16
     5f2:	d1 05       	cpc	r29, r1
     5f4:	69 f7       	brne	.-38     	; 0x5d0 <__vector_20+0x8c>
			}
			uart_putc(&uartD0, receiveArray[i]);
		}
		i++;
	}
	PORTE.OUTCLR   = PIN0_bm;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	e0 e8       	ldi	r30, 0x80	; 128
     5fa:	f6 e0       	ldi	r31, 0x06	; 6
     5fc:	86 83       	std	Z+6, r24	; 0x06
     5fe:	ff 91       	pop	r31
     600:	ef 91       	pop	r30
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	bf 91       	pop	r27
     608:	af 91       	pop	r26
     60a:	9f 91       	pop	r25
     60c:	8f 91       	pop	r24
     60e:	7f 91       	pop	r23
     610:	6f 91       	pop	r22
     612:	5f 91       	pop	r21
     614:	4f 91       	pop	r20
     616:	3f 91       	pop	r19
     618:	2f 91       	pop	r18
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	0f 90       	pop	r0
     624:	0b be       	out	0x3b, r0	; 59
     626:	0f 90       	pop	r0
     628:	0a be       	out	0x3a, r0	; 58
     62a:	0f 90       	pop	r0
     62c:	09 be       	out	0x39, r0	; 57
     62e:	0f 90       	pop	r0
     630:	08 be       	out	0x38, r0	; 56
     632:	0f 90       	pop	r0
     634:	0f be       	out	0x3f, r0	; 63
     636:	0f 90       	pop	r0
     638:	1f 90       	pop	r1
     63a:	18 95       	reti

0000063c <TWI_SlaveInitializeDriver>:
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
	twi->interface = module;
     63c:	fc 01       	movw	r30, r24
     63e:	60 83       	st	Z, r22
     640:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
     642:	42 83       	std	Z+2, r20	; 0x02
     644:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
     646:	ec 57       	subi	r30, 0x7C	; 124
     648:	ff 4f       	sbci	r31, 0xFF	; 255
     64a:	10 82       	st	Z, r1
	twi->bytesSent = 0;
     64c:	fc 01       	movw	r30, r24
     64e:	eb 57       	subi	r30, 0x7B	; 123
     650:	ff 4f       	sbci	r31, 0xFF	; 255
     652:	10 82       	st	Z, r1
	twi->status = TWIS_STATUS_READY;
     654:	fc 01       	movw	r30, r24
     656:	ea 57       	subi	r30, 0x7A	; 122
     658:	ff 4f       	sbci	r31, 0xFF	; 255
     65a:	10 82       	st	Z, r1
	twi->result = TWIS_RESULT_UNKNOWN;
     65c:	fc 01       	movw	r30, r24
     65e:	e9 57       	subi	r30, 0x79	; 121
     660:	ff 4f       	sbci	r31, 0xFF	; 255
     662:	10 82       	st	Z, r1
	twi->abort = false;
     664:	fc 01       	movw	r30, r24
     666:	e8 57       	subi	r30, 0x78	; 120
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	10 82       	st	Z, r1
     66c:	08 95       	ret

0000066e <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
     66e:	dc 01       	movw	r26, r24
     670:	ed 91       	ld	r30, X+
     672:	fc 91       	ld	r31, X
     674:	11 97       	sbiw	r26, 0x01	; 1
     676:	48 63       	ori	r20, 0x38	; 56
     678:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
     67a:	ed 91       	ld	r30, X+
     67c:	fc 91       	ld	r31, X
     67e:	66 0f       	add	r22, r22
     680:	63 87       	std	Z+11, r22	; 0x0b
     682:	08 95       	ret

00000684 <TWI_SlaveTransactionFinished>:
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     684:	fc 01       	movw	r30, r24
     686:	e9 57       	subi	r30, 0x79	; 121
     688:	ff 4f       	sbci	r31, 0xFF	; 255
     68a:	60 83       	st	Z, r22
	twi->status = TWIS_STATUS_READY;
     68c:	fc 01       	movw	r30, r24
     68e:	ea 57       	subi	r30, 0x7A	; 122
     690:	ff 4f       	sbci	r31, 0xFF	; 255
     692:	10 82       	st	Z, r1
     694:	08 95       	ret

00000696 <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
     69a:	fc 01       	movw	r30, r24
     69c:	eb 57       	subi	r30, 0x7B	; 123
     69e:	ff 4f       	sbci	r31, 0xFF	; 255
     6a0:	20 81       	ld	r18, Z
     6a2:	22 23       	and	r18, r18
     6a4:	59 f0       	breq	.+22     	; 0x6bc <TWI_SlaveWriteHandler+0x26>
     6a6:	dc 01       	movw	r26, r24
     6a8:	ed 91       	ld	r30, X+
     6aa:	fc 91       	ld	r31, X
     6ac:	22 85       	ldd	r18, Z+10	; 0x0a
     6ae:	24 ff       	sbrs	r18, 4
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <TWI_SlaveWriteHandler+0x26>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     6b2:	22 e0       	ldi	r18, 0x02	; 2
     6b4:	21 87       	std	Z+9, r18	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	e5 df       	rcall	.-54     	; 0x684 <TWI_SlaveTransactionFinished>
     6ba:	24 c0       	rjmp	.+72     	; 0x704 <TWI_SlaveWriteHandler+0x6e>
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
     6bc:	fc 01       	movw	r30, r24
     6be:	eb 57       	subi	r30, 0x7B	; 123
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	20 81       	ld	r18, Z
     6c4:	20 34       	cpi	r18, 0x40	; 64
     6c6:	b8 f4       	brcc	.+46     	; 0x6f6 <TWI_SlaveWriteHandler+0x60>
			uint8_t data = twi->sendData[twi->bytesSent];
     6c8:	fc 01       	movw	r30, r24
     6ca:	eb 57       	subi	r30, 0x7B	; 123
     6cc:	ff 4f       	sbci	r31, 0xFF	; 255
     6ce:	20 81       	ld	r18, Z
     6d0:	dc 01       	movw	r26, r24
     6d2:	a2 0f       	add	r26, r18
     6d4:	b1 1d       	adc	r27, r1
     6d6:	ac 5b       	subi	r26, 0xBC	; 188
     6d8:	bf 4f       	sbci	r27, 0xFF	; 255
     6da:	2c 91       	ld	r18, X
			twi->interface->SLAVE.DATA = data;
     6dc:	ec 01       	movw	r28, r24
     6de:	a8 81       	ld	r26, Y
     6e0:	b9 81       	ldd	r27, Y+1	; 0x01
     6e2:	1c 96       	adiw	r26, 0x0c	; 12
     6e4:	2c 93       	st	X, r18
			twi->bytesSent++;
     6e6:	20 81       	ld	r18, Z
     6e8:	2f 5f       	subi	r18, 0xFF	; 255
     6ea:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     6ec:	e8 81       	ld	r30, Y
     6ee:	f9 81       	ldd	r31, Y+1	; 0x01
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	81 87       	std	Z+9, r24	; 0x09
     6f4:	07 c0       	rjmp	.+14     	; 0x704 <TWI_SlaveWriteHandler+0x6e>
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     6f6:	dc 01       	movw	r26, r24
     6f8:	ed 91       	ld	r30, X+
     6fa:	fc 91       	ld	r31, X
     6fc:	22 e0       	ldi	r18, 0x02	; 2
     6fe:	21 87       	std	Z+9, r18	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     700:	62 e0       	ldi	r22, 0x02	; 2
     702:	c0 df       	rcall	.-128    	; 0x684 <TWI_SlaveTransactionFinished>
		}
	}
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	ec 01       	movw	r28, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     714:	e8 81       	ld	r30, Y
     716:	f9 81       	ldd	r31, Y+1	; 0x01
     718:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
     71a:	84 60       	ori	r24, 0x04	; 4
     71c:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
     71e:	fe 01       	movw	r30, r28
     720:	ec 57       	subi	r30, 0x7C	; 124
     722:	ff 4f       	sbci	r31, 0xFF	; 255
     724:	80 81       	ld	r24, Z
     726:	80 34       	cpi	r24, 0x40	; 64
     728:	48 f5       	brcc	.+82     	; 0x77c <TWI_SlaveReadHandler+0x72>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
     72a:	e8 81       	ld	r30, Y
     72c:	f9 81       	ldd	r31, Y+1	; 0x01
     72e:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
     730:	8e 01       	movw	r16, r28
     732:	0c 57       	subi	r16, 0x7C	; 124
     734:	1f 4f       	sbci	r17, 0xFF	; 255
     736:	f8 01       	movw	r30, r16
     738:	90 81       	ld	r25, Z
     73a:	fe 01       	movw	r30, r28
     73c:	e9 0f       	add	r30, r25
     73e:	f1 1d       	adc	r31, r1
     740:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
     742:	ea 81       	ldd	r30, Y+2	; 0x02
     744:	fb 81       	ldd	r31, Y+3	; 0x03
     746:	19 95       	eicall

		twi->bytesReceived++;
     748:	f8 01       	movw	r30, r16
     74a:	80 81       	ld	r24, Z
     74c:	8f 5f       	subi	r24, 0xFF	; 255
     74e:	80 83       	st	Z, r24

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
     750:	fe 01       	movw	r30, r28
     752:	e8 57       	subi	r30, 0x78	; 120
     754:	ff 4f       	sbci	r31, 0xFF	; 255
     756:	80 81       	ld	r24, Z
     758:	88 23       	and	r24, r24
     75a:	59 f0       	breq	.+22     	; 0x772 <TWI_SlaveReadHandler+0x68>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     75c:	e8 81       	ld	r30, Y
     75e:	f9 81       	ldd	r31, Y+1	; 0x01
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	81 87       	std	Z+9, r24	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     764:	66 e0       	ldi	r22, 0x06	; 6
     766:	ce 01       	movw	r24, r28
     768:	8d df       	rcall	.-230    	; 0x684 <TWI_SlaveTransactionFinished>
			twi->abort = false;
     76a:	c8 57       	subi	r28, 0x78	; 120
     76c:	df 4f       	sbci	r29, 0xFF	; 255
     76e:	18 82       	st	Y, r1
     770:	0c c0       	rjmp	.+24     	; 0x78a <TWI_SlaveReadHandler+0x80>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     772:	e8 81       	ld	r30, Y
     774:	f9 81       	ldd	r31, Y+1	; 0x01
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	81 87       	std	Z+9, r24	; 0x09
     77a:	07 c0       	rjmp	.+14     	; 0x78a <TWI_SlaveReadHandler+0x80>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
     77c:	e8 81       	ld	r30, Y
     77e:	f9 81       	ldd	r31, Y+1	; 0x01
     780:	86 e0       	ldi	r24, 0x06	; 6
     782:	81 87       	std	Z+9, r24	; 0x09
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     784:	62 e0       	ldi	r22, 0x02	; 2
     786:	ce 01       	movw	r24, r28
     788:	7d df       	rcall	.-262    	; 0x684 <TWI_SlaveTransactionFinished>
	}
}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
     794:	dc 01       	movw	r26, r24
     796:	ed 91       	ld	r30, X+
     798:	fc 91       	ld	r31, X
     79a:	22 85       	ldd	r18, Z+10	; 0x0a
     79c:	21 ff       	sbrs	r18, 1
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <TWI_SlaveDataHandler+0xe>
		TWI_SlaveWriteHandler(twi);
     7a0:	7a cf       	rjmp	.-268    	; 0x696 <TWI_SlaveWriteHandler>
	} else {
		TWI_SlaveReadHandler(twi);
     7a2:	b3 cf       	rjmp	.-154    	; 0x70a <TWI_SlaveReadHandler>

000007a4 <TWI_SlaveStopHandler>:
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     7a4:	dc 01       	movw	r26, r24
     7a6:	ed 91       	ld	r30, X+
     7a8:	fc 91       	ld	r31, X
     7aa:	11 97       	sbiw	r26, 0x01	; 1
     7ac:	20 85       	ldd	r18, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     7ae:	2b 7f       	andi	r18, 0xFB	; 251
     7b0:	20 87       	std	Z+8, r18	; 0x08
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     7b2:	ed 91       	ld	r30, X+
     7b4:	fc 91       	ld	r31, X
     7b6:	22 85       	ldd	r18, Z+10	; 0x0a
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
     7b8:	20 64       	ori	r18, 0x40	; 64
     7ba:	22 87       	std	Z+10, r18	; 0x0a

	TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	62 cf       	rjmp	.-316    	; 0x684 <TWI_SlaveTransactionFinished>

000007c0 <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	ec 01       	movw	r28, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
     7c6:	fc 01       	movw	r30, r24
     7c8:	e8 57       	subi	r30, 0x78	; 120
     7ca:	ff 4f       	sbci	r31, 0xFF	; 255
     7cc:	80 81       	ld	r24, Z
     7ce:	88 23       	and	r24, r24
     7d0:	59 f0       	breq	.+22     	; 0x7e8 <TWI_SlaveAddressMatchHandler+0x28>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     7d2:	e8 81       	ld	r30, Y
     7d4:	f9 81       	ldd	r31, Y+1	; 0x01
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	81 87       	std	Z+9, r24	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     7da:	66 e0       	ldi	r22, 0x06	; 6
     7dc:	ce 01       	movw	r24, r28
     7de:	52 df       	rcall	.-348    	; 0x684 <TWI_SlaveTransactionFinished>
		twi->abort = false;
     7e0:	c8 57       	subi	r28, 0x78	; 120
     7e2:	df 4f       	sbci	r29, 0xFF	; 255
     7e4:	18 82       	st	Y, r1
     7e6:	1a c0       	rjmp	.+52     	; 0x81c <TWI_SlaveAddressMatchHandler+0x5c>
	} else {
		twi->status = TWIS_STATUS_BUSY;
     7e8:	fe 01       	movw	r30, r28
     7ea:	ea 57       	subi	r30, 0x7A	; 122
     7ec:	ff 4f       	sbci	r31, 0xFF	; 255
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	80 83       	st	Z, r24
		twi->result = TWIS_RESULT_UNKNOWN;
     7f2:	fe 01       	movw	r30, r28
     7f4:	e9 57       	subi	r30, 0x79	; 121
     7f6:	ff 4f       	sbci	r31, 0xFF	; 255
     7f8:	10 82       	st	Z, r1

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     7fa:	e8 81       	ld	r30, Y
     7fc:	f9 81       	ldd	r31, Y+1	; 0x01
     7fe:	80 85       	ldd	r24, Z+8	; 0x08
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     800:	8b 7f       	andi	r24, 0xFB	; 251
     802:	80 87       	std	Z+8, r24	; 0x08

		twi->bytesReceived = 0;
     804:	fe 01       	movw	r30, r28
     806:	ec 57       	subi	r30, 0x7C	; 124
     808:	ff 4f       	sbci	r31, 0xFF	; 255
     80a:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     80c:	fe 01       	movw	r30, r28
     80e:	eb 57       	subi	r30, 0x7B	; 123
     810:	ff 4f       	sbci	r31, 0xFF	; 255
     812:	10 82       	st	Z, r1

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     814:	e8 81       	ld	r30, Y
     816:	f9 81       	ldd	r31, Y+1	; 0x01
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	81 87       	std	Z+9, r24	; 0x09
	}
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <TWI_SlaveInterruptHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     822:	dc 01       	movw	r26, r24
     824:	ed 91       	ld	r30, X+
     826:	fc 91       	ld	r31, X
     828:	22 85       	ldd	r18, Z+10	; 0x0a

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
     82a:	22 ff       	sbrs	r18, 2
     82c:	12 c0       	rjmp	.+36     	; 0x852 <TWI_SlaveInterruptHandler+0x30>
		twi->bytesReceived = 0;
     82e:	fc 01       	movw	r30, r24
     830:	ec 57       	subi	r30, 0x7C	; 124
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     836:	fc 01       	movw	r30, r24
     838:	eb 57       	subi	r30, 0x7B	; 123
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_BUS_ERROR;
     83e:	fc 01       	movw	r30, r24
     840:	e9 57       	subi	r30, 0x79	; 121
     842:	ff 4f       	sbci	r31, 0xFF	; 255
     844:	24 e0       	ldi	r18, 0x04	; 4
     846:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     848:	fc 01       	movw	r30, r24
     84a:	ea 57       	subi	r30, 0x7A	; 122
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	10 82       	st	Z, r1
     850:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
     852:	23 ff       	sbrs	r18, 3
     854:	12 c0       	rjmp	.+36     	; 0x87a <TWI_SlaveInterruptHandler+0x58>
		twi->bytesReceived = 0;
     856:	fc 01       	movw	r30, r24
     858:	ec 57       	subi	r30, 0x7C	; 124
     85a:	ff 4f       	sbci	r31, 0xFF	; 255
     85c:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     85e:	fc 01       	movw	r30, r24
     860:	eb 57       	subi	r30, 0x7B	; 123
     862:	ff 4f       	sbci	r31, 0xFF	; 255
     864:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
     866:	fc 01       	movw	r30, r24
     868:	e9 57       	subi	r30, 0x79	; 121
     86a:	ff 4f       	sbci	r31, 0xFF	; 255
     86c:	23 e0       	ldi	r18, 0x03	; 3
     86e:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     870:	fc 01       	movw	r30, r24
     872:	ea 57       	subi	r30, 0x7A	; 122
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	10 82       	st	Z, r1
     878:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     87a:	42 2f       	mov	r20, r18
     87c:	40 74       	andi	r20, 0x40	; 64
 *  Handles all TWI transactions and responses to address match, data reception,
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
     87e:	32 2f       	mov	r19, r18
     880:	31 74       	andi	r19, 0x41	; 65
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
		twi->status = TWIS_STATUS_READY;
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     882:	31 34       	cpi	r19, 0x41	; 65
     884:	09 f4       	brne	.+2      	; 0x888 <TWI_SlaveInterruptHandler+0x66>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
     886:	9c cf       	rjmp	.-200    	; 0x7c0 <TWI_SlaveAddressMatchHandler>
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
     888:	44 23       	and	r20, r20
     88a:	09 f0       	breq	.+2      	; 0x88e <TWI_SlaveInterruptHandler+0x6c>
		TWI_SlaveStopHandler(twi);
     88c:	8b cf       	rjmp	.-234    	; 0x7a4 <TWI_SlaveStopHandler>
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
     88e:	22 23       	and	r18, r18
     890:	0c f4       	brge	.+2      	; 0x894 <TWI_SlaveInterruptHandler+0x72>
		TWI_SlaveDataHandler(twi);
     892:	80 cf       	rjmp	.-256    	; 0x794 <TWI_SlaveDataHandler>
	}

	/* If unexpected state. */
	else {
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_FAIL);
     894:	65 e0       	ldi	r22, 0x05	; 5
     896:	f6 ce       	rjmp	.-532    	; 0x684 <TWI_SlaveTransactionFinished>

00000898 <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	ec 01       	movw	r28, r24
     8a0:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     8a2:	8c d1       	rcall	.+792    	; 0xbbc <USART_TXBuffer_FreeSpace>
     8a4:	88 23       	and	r24, r24
     8a6:	19 f0       	breq	.+6      	; 0x8ae <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     8a8:	61 2f       	mov	r22, r17
     8aa:	ce 01       	movw	r24, r28
     8ac:	96 d1       	rcall	.+812    	; 0xbda <USART_TXBuffer_PutByte>
  }
}
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	08 95       	ret

000008b6 <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
     8c0:	c6 2f       	mov	r28, r22
     8c2:	d7 2f       	mov	r29, r23
     8c4:	69 91       	ld	r22, Y+
     8c6:	66 23       	and	r22, r22
     8c8:	29 f0       	breq	.+10     	; 0x8d4 <uart_puts+0x1e>
    uart_putc(uart, c);
     8ca:	c8 01       	movw	r24, r16
     8cc:	e5 df       	rcall	.-54     	; 0x898 <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     8ce:	69 91       	ld	r22, Y+
     8d0:	61 11       	cpse	r22, r1
     8d2:	fb cf       	rjmp	.-10     	; 0x8ca <uart_puts+0x14>
    uart_putc(uart, c);
  }
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	08 95       	ret

000008de <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     8de:	80 3a       	cpi	r24, 0xA0	; 160
     8e0:	28 e0       	ldi	r18, 0x08	; 8
     8e2:	92 07       	cpc	r25, r18
     8e4:	39 f4       	brne	.+14     	; 0x8f4 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     8e6:	e0 e4       	ldi	r30, 0x40	; 64
     8e8:	f6 e0       	ldi	r31, 0x06	; 6
     8ea:	88 e0       	ldi	r24, 0x08	; 8
     8ec:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	82 83       	std	Z+2, r24	; 0x02
     return;
     8f2:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     8f4:	80 3b       	cpi	r24, 0xB0	; 176
     8f6:	28 e0       	ldi	r18, 0x08	; 8
     8f8:	92 07       	cpc	r25, r18
     8fa:	39 f4       	brne	.+14     	; 0x90a <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     8fc:	e0 e4       	ldi	r30, 0x40	; 64
     8fe:	f6 e0       	ldi	r31, 0x06	; 6
     900:	80 e8       	ldi	r24, 0x80	; 128
     902:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     904:	80 e4       	ldi	r24, 0x40	; 64
     906:	82 83       	std	Z+2, r24	; 0x02
     return;
     908:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     90a:	80 3a       	cpi	r24, 0xA0	; 160
     90c:	29 e0       	ldi	r18, 0x09	; 9
     90e:	92 07       	cpc	r25, r18
     910:	39 f4       	brne	.+14     	; 0x920 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     912:	e0 e6       	ldi	r30, 0x60	; 96
     914:	f6 e0       	ldi	r31, 0x06	; 6
     916:	88 e0       	ldi	r24, 0x08	; 8
     918:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     91a:	84 e0       	ldi	r24, 0x04	; 4
     91c:	82 83       	std	Z+2, r24	; 0x02
     return;
     91e:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     920:	80 3b       	cpi	r24, 0xB0	; 176
     922:	29 e0       	ldi	r18, 0x09	; 9
     924:	92 07       	cpc	r25, r18
     926:	39 f4       	brne	.+14     	; 0x936 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     928:	e0 e6       	ldi	r30, 0x60	; 96
     92a:	f6 e0       	ldi	r31, 0x06	; 6
     92c:	80 e8       	ldi	r24, 0x80	; 128
     92e:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     930:	80 e4       	ldi	r24, 0x40	; 64
     932:	82 83       	std	Z+2, r24	; 0x02
     return;
     934:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     936:	80 3a       	cpi	r24, 0xA0	; 160
     938:	9a 40       	sbci	r25, 0x0A	; 10
     93a:	31 f4       	brne	.+12     	; 0x948 <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     93c:	e0 e8       	ldi	r30, 0x80	; 128
     93e:	f6 e0       	ldi	r31, 0x06	; 6
     940:	88 e0       	ldi	r24, 0x08	; 8
     942:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     944:	84 e0       	ldi	r24, 0x04	; 4
     946:	82 83       	std	Z+2, r24	; 0x02
     948:	08 95       	ret

0000094a <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     94a:	4f 92       	push	r4
     94c:	5f 92       	push	r5
     94e:	6f 92       	push	r6
     950:	7f 92       	push	r7
     952:	8f 92       	push	r8
     954:	9f 92       	push	r9
     956:	af 92       	push	r10
     958:	bf 92       	push	r11
     95a:	cf 92       	push	r12
     95c:	df 92       	push	r13
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	49 01       	movw	r8, r18
     968:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     96a:	4e 2d       	mov	r20, r14
     96c:	41 70       	andi	r20, 0x01	; 1
     96e:	20 e1       	ldi	r18, 0x10	; 16
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	79 01       	movw	r14, r18
     974:	02 c0       	rjmp	.+4      	; 0x97a <calc_bsel+0x30>
     976:	f5 94       	asr	r15
     978:	e7 94       	ror	r14
     97a:	4a 95       	dec	r20
     97c:	e2 f7       	brpl	.-8      	; 0x976 <calc_bsel+0x2c>
  if ( scale < 0 ) {
     97e:	00 23       	and	r16, r16
     980:	0c f0       	brlt	.+2      	; 0x984 <calc_bsel+0x3a>
     982:	3a c0       	rjmp	.+116    	; 0x9f8 <calc_bsel+0xae>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     984:	a4 d2       	rcall	.+1352   	; 0xece <__floatunsisf>
     986:	2b 01       	movw	r4, r22
     988:	3c 01       	movw	r6, r24
     98a:	b7 01       	movw	r22, r14
     98c:	77 27       	eor	r23, r23
     98e:	88 27       	eor	r24, r24
     990:	77 fd       	sbrc	r23, 7
     992:	80 95       	com	r24
     994:	98 2f       	mov	r25, r24
     996:	9d d2       	rcall	.+1338   	; 0xed2 <__floatsisf>
     998:	6b 01       	movw	r12, r22
     99a:	7c 01       	movw	r14, r24
     99c:	c5 01       	movw	r24, r10
     99e:	b4 01       	movw	r22, r8
     9a0:	96 d2       	rcall	.+1324   	; 0xece <__floatunsisf>
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	c7 01       	movw	r24, r14
     9a8:	b6 01       	movw	r22, r12
     9aa:	1f d3       	rcall	.+1598   	; 0xfea <__mulsf3>
     9ac:	9b 01       	movw	r18, r22
     9ae:	ac 01       	movw	r20, r24
     9b0:	c3 01       	movw	r24, r6
     9b2:	b2 01       	movw	r22, r4
     9b4:	f8 d1       	rcall	.+1008   	; 0xda6 <__divsf3>
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e8       	ldi	r20, 0x80	; 128
     9bc:	5f e3       	ldi	r21, 0x3F	; 63
     9be:	8e d1       	rcall	.+796    	; 0xcdc <__subsf3>
     9c0:	6b 01       	movw	r12, r22
     9c2:	7c 01       	movw	r14, r24
     9c4:	11 27       	eor	r17, r17
     9c6:	01 95       	neg	r16
     9c8:	0c f4       	brge	.+2      	; 0x9cc <calc_bsel+0x82>
     9ca:	10 95       	com	r17
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <calc_bsel+0x8c>
     9d2:	66 0f       	add	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	0a 95       	dec	r16
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <calc_bsel+0x88>
     9da:	88 27       	eor	r24, r24
     9dc:	77 fd       	sbrc	r23, 7
     9de:	80 95       	com	r24
     9e0:	98 2f       	mov	r25, r24
     9e2:	77 d2       	rcall	.+1262   	; 0xed2 <__floatsisf>
     9e4:	9b 01       	movw	r18, r22
     9e6:	ac 01       	movw	r20, r24
     9e8:	c7 01       	movw	r24, r14
     9ea:	b6 01       	movw	r22, r12
     9ec:	fe d2       	rcall	.+1532   	; 0xfea <__mulsf3>
     9ee:	60 d3       	rcall	.+1728   	; 0x10b0 <round>
     9f0:	42 d2       	rcall	.+1156   	; 0xe76 <__fixunssfsi>
     9f2:	86 2f       	mov	r24, r22
     9f4:	97 2f       	mov	r25, r23
     9f6:	35 c0       	rjmp	.+106    	; 0xa62 <calc_bsel+0x118>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     9f8:	6a d2       	rcall	.+1236   	; 0xece <__floatunsisf>
     9fa:	2b 01       	movw	r4, r22
     9fc:	3c 01       	movw	r6, r24
     9fe:	b7 01       	movw	r22, r14
     a00:	77 27       	eor	r23, r23
     a02:	88 27       	eor	r24, r24
     a04:	77 fd       	sbrc	r23, 7
     a06:	80 95       	com	r24
     a08:	98 2f       	mov	r25, r24
     a0a:	63 d2       	rcall	.+1222   	; 0xed2 <__floatsisf>
     a0c:	6b 01       	movw	r12, r22
     a0e:	7c 01       	movw	r14, r24
     a10:	c5 01       	movw	r24, r10
     a12:	b4 01       	movw	r22, r8
     a14:	5c d2       	rcall	.+1208   	; 0xece <__floatunsisf>
     a16:	9b 01       	movw	r18, r22
     a18:	ac 01       	movw	r20, r24
     a1a:	c7 01       	movw	r24, r14
     a1c:	b6 01       	movw	r22, r12
     a1e:	e5 d2       	rcall	.+1482   	; 0xfea <__mulsf3>
     a20:	9b 01       	movw	r18, r22
     a22:	ac 01       	movw	r20, r24
     a24:	c3 01       	movw	r24, r6
     a26:	b2 01       	movw	r22, r4
     a28:	be d1       	rcall	.+892    	; 0xda6 <__divsf3>
     a2a:	4b 01       	movw	r8, r22
     a2c:	5c 01       	movw	r10, r24
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <calc_bsel+0xee>
     a34:	66 0f       	add	r22, r22
     a36:	77 1f       	adc	r23, r23
     a38:	0a 95       	dec	r16
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <calc_bsel+0xea>
     a3c:	88 27       	eor	r24, r24
     a3e:	77 fd       	sbrc	r23, 7
     a40:	80 95       	com	r24
     a42:	98 2f       	mov	r25, r24
     a44:	46 d2       	rcall	.+1164   	; 0xed2 <__floatsisf>
     a46:	9b 01       	movw	r18, r22
     a48:	ac 01       	movw	r20, r24
     a4a:	c5 01       	movw	r24, r10
     a4c:	b4 01       	movw	r22, r8
     a4e:	ab d1       	rcall	.+854    	; 0xda6 <__divsf3>
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	40 e8       	ldi	r20, 0x80	; 128
     a56:	5f e3       	ldi	r21, 0x3F	; 63
     a58:	41 d1       	rcall	.+642    	; 0xcdc <__subsf3>
     a5a:	2a d3       	rcall	.+1620   	; 0x10b0 <round>
     a5c:	0c d2       	rcall	.+1048   	; 0xe76 <__fixunssfsi>
     a5e:	86 2f       	mov	r24, r22
     a60:	97 2f       	mov	r25, r23
  }
}
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	cf 90       	pop	r12
     a6e:	bf 90       	pop	r11
     a70:	af 90       	pop	r10
     a72:	9f 90       	pop	r9
     a74:	8f 90       	pop	r8
     a76:	7f 90       	pop	r7
     a78:	6f 90       	pop	r6
     a7a:	5f 90       	pop	r5
     a7c:	4f 90       	pop	r4
     a7e:	08 95       	ret

00000a80 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     a80:	4f 92       	push	r4
     a82:	5f 92       	push	r5
     a84:	6f 92       	push	r6
     a86:	7f 92       	push	r7
     a88:	8f 92       	push	r8
     a8a:	9f 92       	push	r9
     a8c:	af 92       	push	r10
     a8e:	bf 92       	push	r11
     a90:	ef 92       	push	r14
     a92:	0f 93       	push	r16
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	2b 01       	movw	r4, r22
     a9a:	3c 01       	movw	r6, r24
     a9c:	49 01       	movw	r8, r18
     a9e:	5a 01       	movw	r10, r20
     aa0:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     aa2:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     aa4:	ed 2e       	mov	r14, r29
     aa6:	0c 2f       	mov	r16, r28
     aa8:	a5 01       	movw	r20, r10
     aaa:	94 01       	movw	r18, r8
     aac:	c3 01       	movw	r24, r6
     aae:	b2 01       	movw	r22, r4
     ab0:	4c df       	rcall	.-360    	; 0x94a <calc_bsel>
     ab2:	81 15       	cp	r24, r1
     ab4:	90 41       	sbci	r25, 0x10	; 16
     ab6:	18 f0       	brcs	.+6      	; 0xabe <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     ab8:	cf 5f       	subi	r28, 0xFF	; 255
     aba:	c8 30       	cpi	r28, 0x08	; 8
     abc:	99 f7       	brne	.-26     	; 0xaa4 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     abe:	8c 2f       	mov	r24, r28
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	0f 91       	pop	r16
     ac6:	ef 90       	pop	r14
     ac8:	bf 90       	pop	r11
     aca:	af 90       	pop	r10
     acc:	9f 90       	pop	r9
     ace:	8f 90       	pop	r8
     ad0:	7f 90       	pop	r7
     ad2:	6f 90       	pop	r6
     ad4:	5f 90       	pop	r5
     ad6:	4f 90       	pop	r4
     ad8:	08 95       	ret

00000ada <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     ada:	2f 92       	push	r2
     adc:	3f 92       	push	r3
     ade:	4f 92       	push	r4
     ae0:	5f 92       	push	r5
     ae2:	6f 92       	push	r6
     ae4:	7f 92       	push	r7
     ae6:	8f 92       	push	r8
     ae8:	9f 92       	push	r9
     aea:	af 92       	push	r10
     aec:	bf 92       	push	r11
     aee:	cf 92       	push	r12
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	ec 01       	movw	r28, r24
     afe:	3b 01       	movw	r6, r22
     b00:	49 01       	movw	r8, r18
     b02:	5a 01       	movw	r10, r20
     b04:	17 01       	movw	r2, r14
     b06:	28 01       	movw	r4, r16
     b08:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     b0a:	0c 2d       	mov	r16, r12
     b0c:	a2 01       	movw	r20, r4
     b0e:	91 01       	movw	r18, r2
     b10:	c5 01       	movw	r24, r10
     b12:	b4 01       	movw	r22, r8
     b14:	b5 df       	rcall	.-150    	; 0xa80 <calc_bscale>
     b16:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     b18:	08 2f       	mov	r16, r24
     b1a:	a2 01       	movw	r20, r4
     b1c:	91 01       	movw	r18, r2
     b1e:	c5 01       	movw	r24, r10
     b20:	b4 01       	movw	r22, r8
     b22:	13 df       	rcall	.-474    	; 0x94a <calc_bsel>
     b24:	b8 2e       	mov	r11, r24
     b26:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     b28:	41 e0       	ldi	r20, 0x01	; 1
     b2a:	b3 01       	movw	r22, r6
     b2c:	ce 01       	movw	r24, r28
     b2e:	32 d0       	rcall	.+100    	; 0xb94 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     b30:	e8 81       	ld	r30, Y
     b32:	f9 81       	ldd	r31, Y+1	; 0x01
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     b38:	e8 81       	ld	r30, Y
     b3a:	f9 81       	ldd	r31, Y+1	; 0x01
     b3c:	84 81       	ldd	r24, Z+4	; 0x04
     b3e:	80 61       	ori	r24, 0x10	; 16
     b40:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     b42:	e8 81       	ld	r30, Y
     b44:	f9 81       	ldd	r31, Y+1	; 0x01
     b46:	84 81       	ldd	r24, Z+4	; 0x04
     b48:	88 60       	ori	r24, 0x08	; 8
     b4a:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     b4c:	e8 81       	ld	r30, Y
     b4e:	f9 81       	ldd	r31, Y+1	; 0x01
     b50:	83 81       	ldd	r24, Z+3	; 0x03
     b52:	8f 7c       	andi	r24, 0xCF	; 207
     b54:	80 61       	ori	r24, 0x10	; 16
     b56:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     b58:	e8 81       	ld	r30, Y
     b5a:	f9 81       	ldd	r31, Y+1	; 0x01
     b5c:	b6 82       	std	Z+6, r11	; 0x06
     b5e:	e8 81       	ld	r30, Y
     b60:	f9 81       	ldd	r31, Y+1	; 0x01
     b62:	12 95       	swap	r17
     b64:	10 7f       	andi	r17, 0xF0	; 240
     b66:	e1 2a       	or	r14, r17
     b68:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
     b6a:	88 81       	ld	r24, Y
     b6c:	99 81       	ldd	r25, Y+1	; 0x01
     b6e:	b7 de       	rcall	.-658    	; 0x8de <set_usart_txrx_direction>
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	cf 90       	pop	r12
     b7e:	bf 90       	pop	r11
     b80:	af 90       	pop	r10
     b82:	9f 90       	pop	r9
     b84:	8f 90       	pop	r8
     b86:	7f 90       	pop	r7
     b88:	6f 90       	pop	r6
     b8a:	5f 90       	pop	r5
     b8c:	4f 90       	pop	r4
     b8e:	3f 90       	pop	r3
     b90:	2f 90       	pop	r2
     b92:	08 95       	ret

00000b94 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     b94:	fc 01       	movw	r30, r24
     b96:	60 83       	st	Z, r22
     b98:	71 83       	std	Z+1, r23	; 0x01
     b9a:	42 83       	std	Z+2, r20	; 0x02
     b9c:	ec 57       	subi	r30, 0x7C	; 124
     b9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ba0:	10 82       	st	Z, r1
     ba2:	fc 01       	movw	r30, r24
     ba4:	ed 57       	subi	r30, 0x7D	; 125
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	10 82       	st	Z, r1
     baa:	fc 01       	movw	r30, r24
     bac:	ea 57       	subi	r30, 0x7A	; 122
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	10 82       	st	Z, r1
     bb2:	fc 01       	movw	r30, r24
     bb4:	eb 57       	subi	r30, 0x7B	; 123
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	10 82       	st	Z, r1
     bba:	08 95       	ret

00000bbc <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     bbc:	fc 01       	movw	r30, r24
     bbe:	eb 57       	subi	r30, 0x7B	; 123
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     bc4:	fc 01       	movw	r30, r24
     bc6:	ea 57       	subi	r30, 0x7A	; 122
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     bcc:	2f 5f       	subi	r18, 0xFF	; 255
     bce:	2f 73       	andi	r18, 0x3F	; 63
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	29 13       	cpse	r18, r25
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <USART_TXBuffer_FreeSpace+0x1c>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
}
     bd8:	08 95       	ret

00000bda <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
     be2:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
     be4:	eb df       	rcall	.-42     	; 0xbbc <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
     be6:	88 23       	and	r24, r24
     be8:	a1 f0       	breq	.+40     	; 0xc12 <USART_TXBuffer_PutByte+0x38>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     bea:	fe 01       	movw	r30, r28
     bec:	eb 57       	subi	r30, 0x7B	; 123
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	90 81       	ld	r25, Z
	  	TXbufPtr->TX[tempTX_Head]= data;
     bf2:	de 01       	movw	r26, r28
     bf4:	a9 0f       	add	r26, r25
     bf6:	b1 1d       	adc	r27, r1
     bf8:	ad 5b       	subi	r26, 0xBD	; 189
     bfa:	bf 4f       	sbci	r27, 0xFF	; 255
     bfc:	1c 93       	st	X, r17
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     bfe:	9f 5f       	subi	r25, 0xFF	; 255
     c00:	9f 73       	andi	r25, 0x3F	; 63
     c02:	90 83       	st	Z, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     c04:	e8 81       	ld	r30, Y
     c06:	f9 81       	ldd	r31, Y+1	; 0x01
     c08:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     c0a:	9c 7f       	andi	r25, 0xFC	; 252
     c0c:	2a 81       	ldd	r18, Y+2	; 0x02
     c0e:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     c10:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	08 95       	ret

00000c1a <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     c1a:	fc 01       	movw	r30, r24
     c1c:	ed 57       	subi	r30, 0x7D	; 125
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     c22:	fc 01       	movw	r30, r24
     c24:	ec 57       	subi	r30, 0x7C	; 124
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	29 13       	cpse	r18, r25
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <USART_RXBufferData_Available+0x18>
     c30:	80 e0       	ldi	r24, 0x00	; 0
}
     c32:	08 95       	ret

00000c34 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     c34:	fc 01       	movw	r30, r24
     c36:	ec 57       	subi	r30, 0x7C	; 124
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	20 81       	ld	r18, Z
     c3c:	dc 01       	movw	r26, r24
     c3e:	a2 0f       	add	r26, r18
     c40:	b1 1d       	adc	r27, r1
     c42:	13 96       	adiw	r26, 0x03	; 3
     c44:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     c46:	90 81       	ld	r25, Z
     c48:	9f 5f       	subi	r25, 0xFF	; 255
     c4a:	9f 73       	andi	r25, 0x3F	; 63
     c4c:	90 83       	st	Z, r25

	return ans;
}
     c4e:	08 95       	ret

00000c50 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     c50:	fc 01       	movw	r30, r24
     c52:	ed 57       	subi	r30, 0x7D	; 125
     c54:	ff 4f       	sbci	r31, 0xFF	; 255
     c56:	20 81       	ld	r18, Z
     c58:	2f 5f       	subi	r18, 0xFF	; 255
     c5a:	2f 73       	andi	r18, 0x3F	; 63

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     c5c:	fc 01       	movw	r30, r24
     c5e:	ec 57       	subi	r30, 0x7C	; 124
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     c64:	dc 01       	movw	r26, r24
     c66:	ed 91       	ld	r30, X+
     c68:	fc 91       	ld	r31, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     c6e:	23 17       	cp	r18, r19
     c70:	59 f0       	breq	.+22     	; 0xc88 <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     c72:	fc 01       	movw	r30, r24
     c74:	ed 57       	subi	r30, 0x7D	; 125
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	30 81       	ld	r19, Z
     c7a:	a3 0f       	add	r26, r19
     c7c:	b1 1d       	adc	r27, r1
     c7e:	13 96       	adiw	r26, 0x03	; 3
     c80:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     c82:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     c88:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     c8a:	08 95       	ret

00000c8c <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     c90:	fc 01       	movw	r30, r24
     c92:	ea 57       	subi	r30, 0x7A	; 122
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     c98:	fc 01       	movw	r30, r24
     c9a:	eb 57       	subi	r30, 0x7B	; 123
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	30 81       	ld	r19, Z
     ca0:	32 13       	cpse	r19, r18
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <USART_DataRegEmpty+0x26>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     ca4:	dc 01       	movw	r26, r24
     ca6:	ed 91       	ld	r30, X+
     ca8:	fc 91       	ld	r31, X
     caa:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     cac:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     cae:	83 83       	std	Z+3, r24	; 0x03
     cb0:	12 c0       	rjmp	.+36     	; 0xcd6 <USART_DataRegEmpty+0x4a>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     cb2:	fc 01       	movw	r30, r24
     cb4:	ea 57       	subi	r30, 0x7A	; 122
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	20 81       	ld	r18, Z
     cba:	dc 01       	movw	r26, r24
     cbc:	a2 0f       	add	r26, r18
     cbe:	b1 1d       	adc	r27, r1
     cc0:	ad 5b       	subi	r26, 0xBD	; 189
     cc2:	bf 4f       	sbci	r27, 0xFF	; 255
     cc4:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
     cc6:	ec 01       	movw	r28, r24
     cc8:	a8 81       	ld	r26, Y
     cca:	b9 81       	ldd	r27, Y+1	; 0x01
     ccc:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     cce:	80 81       	ld	r24, Z
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	8f 73       	andi	r24, 0x3F	; 63
     cd4:	80 83       	st	Z, r24
	}
}
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <__subsf3>:
     cdc:	50 58       	subi	r21, 0x80	; 128

00000cde <__addsf3>:
     cde:	bb 27       	eor	r27, r27
     ce0:	aa 27       	eor	r26, r26
     ce2:	0e d0       	rcall	.+28     	; 0xd00 <__addsf3x>
     ce4:	48 c1       	rjmp	.+656    	; 0xf76 <__fp_round>
     ce6:	39 d1       	rcall	.+626    	; 0xf5a <__fp_pscA>
     ce8:	30 f0       	brcs	.+12     	; 0xcf6 <__addsf3+0x18>
     cea:	3e d1       	rcall	.+636    	; 0xf68 <__fp_pscB>
     cec:	20 f0       	brcs	.+8      	; 0xcf6 <__addsf3+0x18>
     cee:	31 f4       	brne	.+12     	; 0xcfc <__addsf3+0x1e>
     cf0:	9f 3f       	cpi	r25, 0xFF	; 255
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__addsf3+0x1a>
     cf4:	1e f4       	brtc	.+6      	; 0xcfc <__addsf3+0x1e>
     cf6:	2e c1       	rjmp	.+604    	; 0xf54 <__fp_nan>
     cf8:	0e f4       	brtc	.+2      	; 0xcfc <__addsf3+0x1e>
     cfa:	e0 95       	com	r30
     cfc:	e7 fb       	bst	r30, 7
     cfe:	24 c1       	rjmp	.+584    	; 0xf48 <__fp_inf>

00000d00 <__addsf3x>:
     d00:	e9 2f       	mov	r30, r25
     d02:	4a d1       	rcall	.+660    	; 0xf98 <__fp_split3>
     d04:	80 f3       	brcs	.-32     	; 0xce6 <__addsf3+0x8>
     d06:	ba 17       	cp	r27, r26
     d08:	62 07       	cpc	r22, r18
     d0a:	73 07       	cpc	r23, r19
     d0c:	84 07       	cpc	r24, r20
     d0e:	95 07       	cpc	r25, r21
     d10:	18 f0       	brcs	.+6      	; 0xd18 <__addsf3x+0x18>
     d12:	71 f4       	brne	.+28     	; 0xd30 <__addsf3x+0x30>
     d14:	9e f5       	brtc	.+102    	; 0xd7c <__addsf3x+0x7c>
     d16:	62 c1       	rjmp	.+708    	; 0xfdc <__fp_zero>
     d18:	0e f4       	brtc	.+2      	; 0xd1c <__addsf3x+0x1c>
     d1a:	e0 95       	com	r30
     d1c:	0b 2e       	mov	r0, r27
     d1e:	ba 2f       	mov	r27, r26
     d20:	a0 2d       	mov	r26, r0
     d22:	0b 01       	movw	r0, r22
     d24:	b9 01       	movw	r22, r18
     d26:	90 01       	movw	r18, r0
     d28:	0c 01       	movw	r0, r24
     d2a:	ca 01       	movw	r24, r20
     d2c:	a0 01       	movw	r20, r0
     d2e:	11 24       	eor	r1, r1
     d30:	ff 27       	eor	r31, r31
     d32:	59 1b       	sub	r21, r25
     d34:	99 f0       	breq	.+38     	; 0xd5c <__addsf3x+0x5c>
     d36:	59 3f       	cpi	r21, 0xF9	; 249
     d38:	50 f4       	brcc	.+20     	; 0xd4e <__addsf3x+0x4e>
     d3a:	50 3e       	cpi	r21, 0xE0	; 224
     d3c:	68 f1       	brcs	.+90     	; 0xd98 <__addsf3x+0x98>
     d3e:	1a 16       	cp	r1, r26
     d40:	f0 40       	sbci	r31, 0x00	; 0
     d42:	a2 2f       	mov	r26, r18
     d44:	23 2f       	mov	r18, r19
     d46:	34 2f       	mov	r19, r20
     d48:	44 27       	eor	r20, r20
     d4a:	58 5f       	subi	r21, 0xF8	; 248
     d4c:	f3 cf       	rjmp	.-26     	; 0xd34 <__addsf3x+0x34>
     d4e:	46 95       	lsr	r20
     d50:	37 95       	ror	r19
     d52:	27 95       	ror	r18
     d54:	a7 95       	ror	r26
     d56:	f0 40       	sbci	r31, 0x00	; 0
     d58:	53 95       	inc	r21
     d5a:	c9 f7       	brne	.-14     	; 0xd4e <__addsf3x+0x4e>
     d5c:	7e f4       	brtc	.+30     	; 0xd7c <__addsf3x+0x7c>
     d5e:	1f 16       	cp	r1, r31
     d60:	ba 0b       	sbc	r27, r26
     d62:	62 0b       	sbc	r22, r18
     d64:	73 0b       	sbc	r23, r19
     d66:	84 0b       	sbc	r24, r20
     d68:	ba f0       	brmi	.+46     	; 0xd98 <__addsf3x+0x98>
     d6a:	91 50       	subi	r25, 0x01	; 1
     d6c:	a1 f0       	breq	.+40     	; 0xd96 <__addsf3x+0x96>
     d6e:	ff 0f       	add	r31, r31
     d70:	bb 1f       	adc	r27, r27
     d72:	66 1f       	adc	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	88 1f       	adc	r24, r24
     d78:	c2 f7       	brpl	.-16     	; 0xd6a <__addsf3x+0x6a>
     d7a:	0e c0       	rjmp	.+28     	; 0xd98 <__addsf3x+0x98>
     d7c:	ba 0f       	add	r27, r26
     d7e:	62 1f       	adc	r22, r18
     d80:	73 1f       	adc	r23, r19
     d82:	84 1f       	adc	r24, r20
     d84:	48 f4       	brcc	.+18     	; 0xd98 <__addsf3x+0x98>
     d86:	87 95       	ror	r24
     d88:	77 95       	ror	r23
     d8a:	67 95       	ror	r22
     d8c:	b7 95       	ror	r27
     d8e:	f7 95       	ror	r31
     d90:	9e 3f       	cpi	r25, 0xFE	; 254
     d92:	08 f0       	brcs	.+2      	; 0xd96 <__addsf3x+0x96>
     d94:	b3 cf       	rjmp	.-154    	; 0xcfc <__addsf3+0x1e>
     d96:	93 95       	inc	r25
     d98:	88 0f       	add	r24, r24
     d9a:	08 f0       	brcs	.+2      	; 0xd9e <__addsf3x+0x9e>
     d9c:	99 27       	eor	r25, r25
     d9e:	ee 0f       	add	r30, r30
     da0:	97 95       	ror	r25
     da2:	87 95       	ror	r24
     da4:	08 95       	ret

00000da6 <__divsf3>:
     da6:	0c d0       	rcall	.+24     	; 0xdc0 <__divsf3x>
     da8:	e6 c0       	rjmp	.+460    	; 0xf76 <__fp_round>
     daa:	de d0       	rcall	.+444    	; 0xf68 <__fp_pscB>
     dac:	40 f0       	brcs	.+16     	; 0xdbe <__divsf3+0x18>
     dae:	d5 d0       	rcall	.+426    	; 0xf5a <__fp_pscA>
     db0:	30 f0       	brcs	.+12     	; 0xdbe <__divsf3+0x18>
     db2:	21 f4       	brne	.+8      	; 0xdbc <__divsf3+0x16>
     db4:	5f 3f       	cpi	r21, 0xFF	; 255
     db6:	19 f0       	breq	.+6      	; 0xdbe <__divsf3+0x18>
     db8:	c7 c0       	rjmp	.+398    	; 0xf48 <__fp_inf>
     dba:	51 11       	cpse	r21, r1
     dbc:	10 c1       	rjmp	.+544    	; 0xfde <__fp_szero>
     dbe:	ca c0       	rjmp	.+404    	; 0xf54 <__fp_nan>

00000dc0 <__divsf3x>:
     dc0:	eb d0       	rcall	.+470    	; 0xf98 <__fp_split3>
     dc2:	98 f3       	brcs	.-26     	; 0xdaa <__divsf3+0x4>

00000dc4 <__divsf3_pse>:
     dc4:	99 23       	and	r25, r25
     dc6:	c9 f3       	breq	.-14     	; 0xdba <__divsf3+0x14>
     dc8:	55 23       	and	r21, r21
     dca:	b1 f3       	breq	.-20     	; 0xdb8 <__divsf3+0x12>
     dcc:	95 1b       	sub	r25, r21
     dce:	55 0b       	sbc	r21, r21
     dd0:	bb 27       	eor	r27, r27
     dd2:	aa 27       	eor	r26, r26
     dd4:	62 17       	cp	r22, r18
     dd6:	73 07       	cpc	r23, r19
     dd8:	84 07       	cpc	r24, r20
     dda:	38 f0       	brcs	.+14     	; 0xdea <__divsf3_pse+0x26>
     ddc:	9f 5f       	subi	r25, 0xFF	; 255
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	22 0f       	add	r18, r18
     de2:	33 1f       	adc	r19, r19
     de4:	44 1f       	adc	r20, r20
     de6:	aa 1f       	adc	r26, r26
     de8:	a9 f3       	breq	.-22     	; 0xdd4 <__divsf3_pse+0x10>
     dea:	33 d0       	rcall	.+102    	; 0xe52 <__divsf3_pse+0x8e>
     dec:	0e 2e       	mov	r0, r30
     dee:	3a f0       	brmi	.+14     	; 0xdfe <__divsf3_pse+0x3a>
     df0:	e0 e8       	ldi	r30, 0x80	; 128
     df2:	30 d0       	rcall	.+96     	; 0xe54 <__divsf3_pse+0x90>
     df4:	91 50       	subi	r25, 0x01	; 1
     df6:	50 40       	sbci	r21, 0x00	; 0
     df8:	e6 95       	lsr	r30
     dfa:	00 1c       	adc	r0, r0
     dfc:	ca f7       	brpl	.-14     	; 0xdf0 <__divsf3_pse+0x2c>
     dfe:	29 d0       	rcall	.+82     	; 0xe52 <__divsf3_pse+0x8e>
     e00:	fe 2f       	mov	r31, r30
     e02:	27 d0       	rcall	.+78     	; 0xe52 <__divsf3_pse+0x8e>
     e04:	66 0f       	add	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	bb 1f       	adc	r27, r27
     e0c:	26 17       	cp	r18, r22
     e0e:	37 07       	cpc	r19, r23
     e10:	48 07       	cpc	r20, r24
     e12:	ab 07       	cpc	r26, r27
     e14:	b0 e8       	ldi	r27, 0x80	; 128
     e16:	09 f0       	breq	.+2      	; 0xe1a <__divsf3_pse+0x56>
     e18:	bb 0b       	sbc	r27, r27
     e1a:	80 2d       	mov	r24, r0
     e1c:	bf 01       	movw	r22, r30
     e1e:	ff 27       	eor	r31, r31
     e20:	93 58       	subi	r25, 0x83	; 131
     e22:	5f 4f       	sbci	r21, 0xFF	; 255
     e24:	2a f0       	brmi	.+10     	; 0xe30 <__divsf3_pse+0x6c>
     e26:	9e 3f       	cpi	r25, 0xFE	; 254
     e28:	51 05       	cpc	r21, r1
     e2a:	68 f0       	brcs	.+26     	; 0xe46 <__divsf3_pse+0x82>
     e2c:	8d c0       	rjmp	.+282    	; 0xf48 <__fp_inf>
     e2e:	d7 c0       	rjmp	.+430    	; 0xfde <__fp_szero>
     e30:	5f 3f       	cpi	r21, 0xFF	; 255
     e32:	ec f3       	brlt	.-6      	; 0xe2e <__divsf3_pse+0x6a>
     e34:	98 3e       	cpi	r25, 0xE8	; 232
     e36:	dc f3       	brlt	.-10     	; 0xe2e <__divsf3_pse+0x6a>
     e38:	86 95       	lsr	r24
     e3a:	77 95       	ror	r23
     e3c:	67 95       	ror	r22
     e3e:	b7 95       	ror	r27
     e40:	f7 95       	ror	r31
     e42:	9f 5f       	subi	r25, 0xFF	; 255
     e44:	c9 f7       	brne	.-14     	; 0xe38 <__divsf3_pse+0x74>
     e46:	88 0f       	add	r24, r24
     e48:	91 1d       	adc	r25, r1
     e4a:	96 95       	lsr	r25
     e4c:	87 95       	ror	r24
     e4e:	97 f9       	bld	r25, 7
     e50:	08 95       	ret
     e52:	e1 e0       	ldi	r30, 0x01	; 1
     e54:	66 0f       	add	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	bb 1f       	adc	r27, r27
     e5c:	62 17       	cp	r22, r18
     e5e:	73 07       	cpc	r23, r19
     e60:	84 07       	cpc	r24, r20
     e62:	ba 07       	cpc	r27, r26
     e64:	20 f0       	brcs	.+8      	; 0xe6e <__divsf3_pse+0xaa>
     e66:	62 1b       	sub	r22, r18
     e68:	73 0b       	sbc	r23, r19
     e6a:	84 0b       	sbc	r24, r20
     e6c:	ba 0b       	sbc	r27, r26
     e6e:	ee 1f       	adc	r30, r30
     e70:	88 f7       	brcc	.-30     	; 0xe54 <__divsf3_pse+0x90>
     e72:	e0 95       	com	r30
     e74:	08 95       	ret

00000e76 <__fixunssfsi>:
     e76:	98 d0       	rcall	.+304    	; 0xfa8 <__fp_splitA>
     e78:	88 f0       	brcs	.+34     	; 0xe9c <__fixunssfsi+0x26>
     e7a:	9f 57       	subi	r25, 0x7F	; 127
     e7c:	90 f0       	brcs	.+36     	; 0xea2 <__fixunssfsi+0x2c>
     e7e:	b9 2f       	mov	r27, r25
     e80:	99 27       	eor	r25, r25
     e82:	b7 51       	subi	r27, 0x17	; 23
     e84:	a0 f0       	brcs	.+40     	; 0xeae <__fixunssfsi+0x38>
     e86:	d1 f0       	breq	.+52     	; 0xebc <__fixunssfsi+0x46>
     e88:	66 0f       	add	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	88 1f       	adc	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	1a f0       	brmi	.+6      	; 0xe98 <__fixunssfsi+0x22>
     e92:	ba 95       	dec	r27
     e94:	c9 f7       	brne	.-14     	; 0xe88 <__fixunssfsi+0x12>
     e96:	12 c0       	rjmp	.+36     	; 0xebc <__fixunssfsi+0x46>
     e98:	b1 30       	cpi	r27, 0x01	; 1
     e9a:	81 f0       	breq	.+32     	; 0xebc <__fixunssfsi+0x46>
     e9c:	9f d0       	rcall	.+318    	; 0xfdc <__fp_zero>
     e9e:	b1 e0       	ldi	r27, 0x01	; 1
     ea0:	08 95       	ret
     ea2:	9c c0       	rjmp	.+312    	; 0xfdc <__fp_zero>
     ea4:	67 2f       	mov	r22, r23
     ea6:	78 2f       	mov	r23, r24
     ea8:	88 27       	eor	r24, r24
     eaa:	b8 5f       	subi	r27, 0xF8	; 248
     eac:	39 f0       	breq	.+14     	; 0xebc <__fixunssfsi+0x46>
     eae:	b9 3f       	cpi	r27, 0xF9	; 249
     eb0:	cc f3       	brlt	.-14     	; 0xea4 <__fixunssfsi+0x2e>
     eb2:	86 95       	lsr	r24
     eb4:	77 95       	ror	r23
     eb6:	67 95       	ror	r22
     eb8:	b3 95       	inc	r27
     eba:	d9 f7       	brne	.-10     	; 0xeb2 <__fixunssfsi+0x3c>
     ebc:	3e f4       	brtc	.+14     	; 0xecc <__fixunssfsi+0x56>
     ebe:	90 95       	com	r25
     ec0:	80 95       	com	r24
     ec2:	70 95       	com	r23
     ec4:	61 95       	neg	r22
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	8f 4f       	sbci	r24, 0xFF	; 255
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	08 95       	ret

00000ece <__floatunsisf>:
     ece:	e8 94       	clt
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <__floatsisf+0x12>

00000ed2 <__floatsisf>:
     ed2:	97 fb       	bst	r25, 7
     ed4:	3e f4       	brtc	.+14     	; 0xee4 <__floatsisf+0x12>
     ed6:	90 95       	com	r25
     ed8:	80 95       	com	r24
     eda:	70 95       	com	r23
     edc:	61 95       	neg	r22
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
     ee0:	8f 4f       	sbci	r24, 0xFF	; 255
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	99 23       	and	r25, r25
     ee6:	a9 f0       	breq	.+42     	; 0xf12 <__floatsisf+0x40>
     ee8:	f9 2f       	mov	r31, r25
     eea:	96 e9       	ldi	r25, 0x96	; 150
     eec:	bb 27       	eor	r27, r27
     eee:	93 95       	inc	r25
     ef0:	f6 95       	lsr	r31
     ef2:	87 95       	ror	r24
     ef4:	77 95       	ror	r23
     ef6:	67 95       	ror	r22
     ef8:	b7 95       	ror	r27
     efa:	f1 11       	cpse	r31, r1
     efc:	f8 cf       	rjmp	.-16     	; 0xeee <__floatsisf+0x1c>
     efe:	fa f4       	brpl	.+62     	; 0xf3e <__floatsisf+0x6c>
     f00:	bb 0f       	add	r27, r27
     f02:	11 f4       	brne	.+4      	; 0xf08 <__floatsisf+0x36>
     f04:	60 ff       	sbrs	r22, 0
     f06:	1b c0       	rjmp	.+54     	; 0xf3e <__floatsisf+0x6c>
     f08:	6f 5f       	subi	r22, 0xFF	; 255
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	8f 4f       	sbci	r24, 0xFF	; 255
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	16 c0       	rjmp	.+44     	; 0xf3e <__floatsisf+0x6c>
     f12:	88 23       	and	r24, r24
     f14:	11 f0       	breq	.+4      	; 0xf1a <__floatsisf+0x48>
     f16:	96 e9       	ldi	r25, 0x96	; 150
     f18:	11 c0       	rjmp	.+34     	; 0xf3c <__floatsisf+0x6a>
     f1a:	77 23       	and	r23, r23
     f1c:	21 f0       	breq	.+8      	; 0xf26 <__floatsisf+0x54>
     f1e:	9e e8       	ldi	r25, 0x8E	; 142
     f20:	87 2f       	mov	r24, r23
     f22:	76 2f       	mov	r23, r22
     f24:	05 c0       	rjmp	.+10     	; 0xf30 <__floatsisf+0x5e>
     f26:	66 23       	and	r22, r22
     f28:	71 f0       	breq	.+28     	; 0xf46 <__floatsisf+0x74>
     f2a:	96 e8       	ldi	r25, 0x86	; 134
     f2c:	86 2f       	mov	r24, r22
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	2a f0       	brmi	.+10     	; 0xf3e <__floatsisf+0x6c>
     f34:	9a 95       	dec	r25
     f36:	66 0f       	add	r22, r22
     f38:	77 1f       	adc	r23, r23
     f3a:	88 1f       	adc	r24, r24
     f3c:	da f7       	brpl	.-10     	; 0xf34 <__floatsisf+0x62>
     f3e:	88 0f       	add	r24, r24
     f40:	96 95       	lsr	r25
     f42:	87 95       	ror	r24
     f44:	97 f9       	bld	r25, 7
     f46:	08 95       	ret

00000f48 <__fp_inf>:
     f48:	97 f9       	bld	r25, 7
     f4a:	9f 67       	ori	r25, 0x7F	; 127
     f4c:	80 e8       	ldi	r24, 0x80	; 128
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	08 95       	ret

00000f54 <__fp_nan>:
     f54:	9f ef       	ldi	r25, 0xFF	; 255
     f56:	80 ec       	ldi	r24, 0xC0	; 192
     f58:	08 95       	ret

00000f5a <__fp_pscA>:
     f5a:	00 24       	eor	r0, r0
     f5c:	0a 94       	dec	r0
     f5e:	16 16       	cp	r1, r22
     f60:	17 06       	cpc	r1, r23
     f62:	18 06       	cpc	r1, r24
     f64:	09 06       	cpc	r0, r25
     f66:	08 95       	ret

00000f68 <__fp_pscB>:
     f68:	00 24       	eor	r0, r0
     f6a:	0a 94       	dec	r0
     f6c:	12 16       	cp	r1, r18
     f6e:	13 06       	cpc	r1, r19
     f70:	14 06       	cpc	r1, r20
     f72:	05 06       	cpc	r0, r21
     f74:	08 95       	ret

00000f76 <__fp_round>:
     f76:	09 2e       	mov	r0, r25
     f78:	03 94       	inc	r0
     f7a:	00 0c       	add	r0, r0
     f7c:	11 f4       	brne	.+4      	; 0xf82 <__fp_round+0xc>
     f7e:	88 23       	and	r24, r24
     f80:	52 f0       	brmi	.+20     	; 0xf96 <__fp_round+0x20>
     f82:	bb 0f       	add	r27, r27
     f84:	40 f4       	brcc	.+16     	; 0xf96 <__fp_round+0x20>
     f86:	bf 2b       	or	r27, r31
     f88:	11 f4       	brne	.+4      	; 0xf8e <__fp_round+0x18>
     f8a:	60 ff       	sbrs	r22, 0
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <__fp_round+0x20>
     f8e:	6f 5f       	subi	r22, 0xFF	; 255
     f90:	7f 4f       	sbci	r23, 0xFF	; 255
     f92:	8f 4f       	sbci	r24, 0xFF	; 255
     f94:	9f 4f       	sbci	r25, 0xFF	; 255
     f96:	08 95       	ret

00000f98 <__fp_split3>:
     f98:	57 fd       	sbrc	r21, 7
     f9a:	90 58       	subi	r25, 0x80	; 128
     f9c:	44 0f       	add	r20, r20
     f9e:	55 1f       	adc	r21, r21
     fa0:	59 f0       	breq	.+22     	; 0xfb8 <__fp_splitA+0x10>
     fa2:	5f 3f       	cpi	r21, 0xFF	; 255
     fa4:	71 f0       	breq	.+28     	; 0xfc2 <__fp_splitA+0x1a>
     fa6:	47 95       	ror	r20

00000fa8 <__fp_splitA>:
     fa8:	88 0f       	add	r24, r24
     faa:	97 fb       	bst	r25, 7
     fac:	99 1f       	adc	r25, r25
     fae:	61 f0       	breq	.+24     	; 0xfc8 <__fp_splitA+0x20>
     fb0:	9f 3f       	cpi	r25, 0xFF	; 255
     fb2:	79 f0       	breq	.+30     	; 0xfd2 <__fp_splitA+0x2a>
     fb4:	87 95       	ror	r24
     fb6:	08 95       	ret
     fb8:	12 16       	cp	r1, r18
     fba:	13 06       	cpc	r1, r19
     fbc:	14 06       	cpc	r1, r20
     fbe:	55 1f       	adc	r21, r21
     fc0:	f2 cf       	rjmp	.-28     	; 0xfa6 <__fp_split3+0xe>
     fc2:	46 95       	lsr	r20
     fc4:	f1 df       	rcall	.-30     	; 0xfa8 <__fp_splitA>
     fc6:	08 c0       	rjmp	.+16     	; 0xfd8 <__fp_splitA+0x30>
     fc8:	16 16       	cp	r1, r22
     fca:	17 06       	cpc	r1, r23
     fcc:	18 06       	cpc	r1, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	f1 cf       	rjmp	.-30     	; 0xfb4 <__fp_splitA+0xc>
     fd2:	86 95       	lsr	r24
     fd4:	71 05       	cpc	r23, r1
     fd6:	61 05       	cpc	r22, r1
     fd8:	08 94       	sec
     fda:	08 95       	ret

00000fdc <__fp_zero>:
     fdc:	e8 94       	clt

00000fde <__fp_szero>:
     fde:	bb 27       	eor	r27, r27
     fe0:	66 27       	eor	r22, r22
     fe2:	77 27       	eor	r23, r23
     fe4:	cb 01       	movw	r24, r22
     fe6:	97 f9       	bld	r25, 7
     fe8:	08 95       	ret

00000fea <__mulsf3>:
     fea:	0b d0       	rcall	.+22     	; 0x1002 <__mulsf3x>
     fec:	c4 cf       	rjmp	.-120    	; 0xf76 <__fp_round>
     fee:	b5 df       	rcall	.-150    	; 0xf5a <__fp_pscA>
     ff0:	28 f0       	brcs	.+10     	; 0xffc <__mulsf3+0x12>
     ff2:	ba df       	rcall	.-140    	; 0xf68 <__fp_pscB>
     ff4:	18 f0       	brcs	.+6      	; 0xffc <__mulsf3+0x12>
     ff6:	95 23       	and	r25, r21
     ff8:	09 f0       	breq	.+2      	; 0xffc <__mulsf3+0x12>
     ffa:	a6 cf       	rjmp	.-180    	; 0xf48 <__fp_inf>
     ffc:	ab cf       	rjmp	.-170    	; 0xf54 <__fp_nan>
     ffe:	11 24       	eor	r1, r1
    1000:	ee cf       	rjmp	.-36     	; 0xfde <__fp_szero>

00001002 <__mulsf3x>:
    1002:	ca df       	rcall	.-108    	; 0xf98 <__fp_split3>
    1004:	a0 f3       	brcs	.-24     	; 0xfee <__mulsf3+0x4>

00001006 <__mulsf3_pse>:
    1006:	95 9f       	mul	r25, r21
    1008:	d1 f3       	breq	.-12     	; 0xffe <__mulsf3+0x14>
    100a:	95 0f       	add	r25, r21
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	55 1f       	adc	r21, r21
    1010:	62 9f       	mul	r22, r18
    1012:	f0 01       	movw	r30, r0
    1014:	72 9f       	mul	r23, r18
    1016:	bb 27       	eor	r27, r27
    1018:	f0 0d       	add	r31, r0
    101a:	b1 1d       	adc	r27, r1
    101c:	63 9f       	mul	r22, r19
    101e:	aa 27       	eor	r26, r26
    1020:	f0 0d       	add	r31, r0
    1022:	b1 1d       	adc	r27, r1
    1024:	aa 1f       	adc	r26, r26
    1026:	64 9f       	mul	r22, r20
    1028:	66 27       	eor	r22, r22
    102a:	b0 0d       	add	r27, r0
    102c:	a1 1d       	adc	r26, r1
    102e:	66 1f       	adc	r22, r22
    1030:	82 9f       	mul	r24, r18
    1032:	22 27       	eor	r18, r18
    1034:	b0 0d       	add	r27, r0
    1036:	a1 1d       	adc	r26, r1
    1038:	62 1f       	adc	r22, r18
    103a:	73 9f       	mul	r23, r19
    103c:	b0 0d       	add	r27, r0
    103e:	a1 1d       	adc	r26, r1
    1040:	62 1f       	adc	r22, r18
    1042:	83 9f       	mul	r24, r19
    1044:	a0 0d       	add	r26, r0
    1046:	61 1d       	adc	r22, r1
    1048:	22 1f       	adc	r18, r18
    104a:	74 9f       	mul	r23, r20
    104c:	33 27       	eor	r19, r19
    104e:	a0 0d       	add	r26, r0
    1050:	61 1d       	adc	r22, r1
    1052:	23 1f       	adc	r18, r19
    1054:	84 9f       	mul	r24, r20
    1056:	60 0d       	add	r22, r0
    1058:	21 1d       	adc	r18, r1
    105a:	82 2f       	mov	r24, r18
    105c:	76 2f       	mov	r23, r22
    105e:	6a 2f       	mov	r22, r26
    1060:	11 24       	eor	r1, r1
    1062:	9f 57       	subi	r25, 0x7F	; 127
    1064:	50 40       	sbci	r21, 0x00	; 0
    1066:	8a f0       	brmi	.+34     	; 0x108a <__mulsf3_pse+0x84>
    1068:	e1 f0       	breq	.+56     	; 0x10a2 <__mulsf3_pse+0x9c>
    106a:	88 23       	and	r24, r24
    106c:	4a f0       	brmi	.+18     	; 0x1080 <__mulsf3_pse+0x7a>
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	bb 1f       	adc	r27, r27
    1074:	66 1f       	adc	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	91 50       	subi	r25, 0x01	; 1
    107c:	50 40       	sbci	r21, 0x00	; 0
    107e:	a9 f7       	brne	.-22     	; 0x106a <__mulsf3_pse+0x64>
    1080:	9e 3f       	cpi	r25, 0xFE	; 254
    1082:	51 05       	cpc	r21, r1
    1084:	70 f0       	brcs	.+28     	; 0x10a2 <__mulsf3_pse+0x9c>
    1086:	60 cf       	rjmp	.-320    	; 0xf48 <__fp_inf>
    1088:	aa cf       	rjmp	.-172    	; 0xfde <__fp_szero>
    108a:	5f 3f       	cpi	r21, 0xFF	; 255
    108c:	ec f3       	brlt	.-6      	; 0x1088 <__mulsf3_pse+0x82>
    108e:	98 3e       	cpi	r25, 0xE8	; 232
    1090:	dc f3       	brlt	.-10     	; 0x1088 <__mulsf3_pse+0x82>
    1092:	86 95       	lsr	r24
    1094:	77 95       	ror	r23
    1096:	67 95       	ror	r22
    1098:	b7 95       	ror	r27
    109a:	f7 95       	ror	r31
    109c:	e7 95       	ror	r30
    109e:	9f 5f       	subi	r25, 0xFF	; 255
    10a0:	c1 f7       	brne	.-16     	; 0x1092 <__mulsf3_pse+0x8c>
    10a2:	fe 2b       	or	r31, r30
    10a4:	88 0f       	add	r24, r24
    10a6:	91 1d       	adc	r25, r1
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	97 f9       	bld	r25, 7
    10ae:	08 95       	ret

000010b0 <round>:
    10b0:	7b df       	rcall	.-266    	; 0xfa8 <__fp_splitA>
    10b2:	e0 f0       	brcs	.+56     	; 0x10ec <round+0x3c>
    10b4:	9e 37       	cpi	r25, 0x7E	; 126
    10b6:	d8 f0       	brcs	.+54     	; 0x10ee <round+0x3e>
    10b8:	96 39       	cpi	r25, 0x96	; 150
    10ba:	b8 f4       	brcc	.+46     	; 0x10ea <round+0x3a>
    10bc:	9e 38       	cpi	r25, 0x8E	; 142
    10be:	48 f4       	brcc	.+18     	; 0x10d2 <round+0x22>
    10c0:	67 2f       	mov	r22, r23
    10c2:	78 2f       	mov	r23, r24
    10c4:	88 27       	eor	r24, r24
    10c6:	98 5f       	subi	r25, 0xF8	; 248
    10c8:	f9 cf       	rjmp	.-14     	; 0x10bc <round+0xc>
    10ca:	86 95       	lsr	r24
    10cc:	77 95       	ror	r23
    10ce:	67 95       	ror	r22
    10d0:	93 95       	inc	r25
    10d2:	95 39       	cpi	r25, 0x95	; 149
    10d4:	d0 f3       	brcs	.-12     	; 0x10ca <round+0x1a>
    10d6:	b6 2f       	mov	r27, r22
    10d8:	b1 70       	andi	r27, 0x01	; 1
    10da:	6b 0f       	add	r22, r27
    10dc:	71 1d       	adc	r23, r1
    10de:	81 1d       	adc	r24, r1
    10e0:	20 f4       	brcc	.+8      	; 0x10ea <round+0x3a>
    10e2:	87 95       	ror	r24
    10e4:	77 95       	ror	r23
    10e6:	67 95       	ror	r22
    10e8:	93 95       	inc	r25
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <__fp_mintl>
    10ec:	1c c0       	rjmp	.+56     	; 0x1126 <__fp_mpack>
    10ee:	77 cf       	rjmp	.-274    	; 0xfde <__fp_szero>

000010f0 <__fp_mintl>:
    10f0:	88 23       	and	r24, r24
    10f2:	71 f4       	brne	.+28     	; 0x1110 <__fp_mintl+0x20>
    10f4:	77 23       	and	r23, r23
    10f6:	21 f0       	breq	.+8      	; 0x1100 <__fp_mintl+0x10>
    10f8:	98 50       	subi	r25, 0x08	; 8
    10fa:	87 2b       	or	r24, r23
    10fc:	76 2f       	mov	r23, r22
    10fe:	07 c0       	rjmp	.+14     	; 0x110e <__fp_mintl+0x1e>
    1100:	66 23       	and	r22, r22
    1102:	11 f4       	brne	.+4      	; 0x1108 <__fp_mintl+0x18>
    1104:	99 27       	eor	r25, r25
    1106:	0d c0       	rjmp	.+26     	; 0x1122 <__fp_mintl+0x32>
    1108:	90 51       	subi	r25, 0x10	; 16
    110a:	86 2b       	or	r24, r22
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	2a f0       	brmi	.+10     	; 0x111c <__fp_mintl+0x2c>
    1112:	9a 95       	dec	r25
    1114:	66 0f       	add	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	88 1f       	adc	r24, r24
    111a:	da f7       	brpl	.-10     	; 0x1112 <__fp_mintl+0x22>
    111c:	88 0f       	add	r24, r24
    111e:	96 95       	lsr	r25
    1120:	87 95       	ror	r24
    1122:	97 f9       	bld	r25, 7
    1124:	08 95       	ret

00001126 <__fp_mpack>:
    1126:	9f 3f       	cpi	r25, 0xFF	; 255
    1128:	31 f0       	breq	.+12     	; 0x1136 <__fp_mpack_finite+0xc>

0000112a <__fp_mpack_finite>:
    112a:	91 50       	subi	r25, 0x01	; 1
    112c:	20 f4       	brcc	.+8      	; 0x1136 <__fp_mpack_finite+0xc>
    112e:	87 95       	ror	r24
    1130:	77 95       	ror	r23
    1132:	67 95       	ror	r22
    1134:	b7 95       	ror	r27
    1136:	88 0f       	add	r24, r24
    1138:	91 1d       	adc	r25, r1
    113a:	96 95       	lsr	r25
    113c:	87 95       	ror	r24
    113e:	97 f9       	bld	r25, 7
    1140:	08 95       	ret

00001142 <_exit>:
    1142:	f8 94       	cli

00001144 <__stop_program>:
    1144:	ff cf       	rjmp	.-2      	; 0x1144 <__stop_program>
