
Xmega_NXT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  000017d8  0000186c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003a7  00802020  00802020  0000188c  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a29  00000000  00000000  00004394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00004dbd  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e0  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000031da  00000000  00000000  00004fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d13  00000000  00000000  000081a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001583  00000000  00000000  00008eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000744  00000000  00000000  0000a43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000012f1  00000000  00000000  0000ab80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000208e  00000000  00000000  0000be71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000170  00000000  00000000  0000deff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	20 c1       	rjmp	.+576    	; 0x246 <__bad_interrupt>
       6:	00 00       	nop
       8:	1e c3       	rjmp	.+1596   	; 0x646 <__vector_2>
       a:	00 00       	nop
       c:	1c c1       	rjmp	.+568    	; 0x246 <__bad_interrupt>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__bad_interrupt>
      12:	00 00       	nop
      14:	18 c1       	rjmp	.+560    	; 0x246 <__bad_interrupt>
      16:	00 00       	nop
      18:	16 c1       	rjmp	.+556    	; 0x246 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	14 c1       	rjmp	.+552    	; 0x246 <__bad_interrupt>
      1e:	00 00       	nop
      20:	12 c1       	rjmp	.+548    	; 0x246 <__bad_interrupt>
      22:	00 00       	nop
      24:	10 c1       	rjmp	.+544    	; 0x246 <__bad_interrupt>
      26:	00 00       	nop
      28:	0e c1       	rjmp	.+540    	; 0x246 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c c1       	rjmp	.+536    	; 0x246 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d1 c2       	rjmp	.+1442   	; 0x5d4 <__vector_12>
      32:	00 00       	nop
      34:	08 c1       	rjmp	.+528    	; 0x246 <__bad_interrupt>
      36:	00 00       	nop
      38:	06 c1       	rjmp	.+524    	; 0x246 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	04 c1       	rjmp	.+520    	; 0x246 <__bad_interrupt>
      3e:	00 00       	nop
      40:	02 c1       	rjmp	.+516    	; 0x246 <__bad_interrupt>
      42:	00 00       	nop
      44:	00 c1       	rjmp	.+512    	; 0x246 <__bad_interrupt>
      46:	00 00       	nop
      48:	fe c0       	rjmp	.+508    	; 0x246 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fc c0       	rjmp	.+504    	; 0x246 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0e c3       	rjmp	.+1564   	; 0x66e <__vector_20>
      52:	00 00       	nop
      54:	f8 c0       	rjmp	.+496    	; 0x246 <__bad_interrupt>
      56:	00 00       	nop
      58:	f6 c0       	rjmp	.+492    	; 0x246 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f4 c0       	rjmp	.+488    	; 0x246 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f2 c0       	rjmp	.+484    	; 0x246 <__bad_interrupt>
      62:	00 00       	nop
      64:	f0 c0       	rjmp	.+480    	; 0x246 <__bad_interrupt>
      66:	00 00       	nop
      68:	ee c0       	rjmp	.+476    	; 0x246 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ec c0       	rjmp	.+472    	; 0x246 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0b c1       	rjmp	.+534    	; 0x288 <__vector_28>
      72:	00 00       	nop
      74:	3d c1       	rjmp	.+634    	; 0x2f0 <__vector_29>
      76:	00 00       	nop
      78:	e6 c0       	rjmp	.+460    	; 0x246 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e4 c0       	rjmp	.+456    	; 0x246 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c0       	rjmp	.+452    	; 0x246 <__bad_interrupt>
      82:	00 00       	nop
      84:	e0 c0       	rjmp	.+448    	; 0x246 <__bad_interrupt>
      86:	00 00       	nop
      88:	de c0       	rjmp	.+444    	; 0x246 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dc c0       	rjmp	.+440    	; 0x246 <__bad_interrupt>
      8e:	00 00       	nop
      90:	da c0       	rjmp	.+436    	; 0x246 <__bad_interrupt>
      92:	00 00       	nop
      94:	d8 c0       	rjmp	.+432    	; 0x246 <__bad_interrupt>
      96:	00 00       	nop
      98:	d6 c0       	rjmp	.+428    	; 0x246 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d4 c0       	rjmp	.+424    	; 0x246 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d2 c0       	rjmp	.+420    	; 0x246 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d0 c0       	rjmp	.+416    	; 0x246 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ce c0       	rjmp	.+412    	; 0x246 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cc c0       	rjmp	.+408    	; 0x246 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ca c0       	rjmp	.+404    	; 0x246 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c8 c0       	rjmp	.+400    	; 0x246 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c6 c0       	rjmp	.+396    	; 0x246 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c4 c0       	rjmp	.+392    	; 0x246 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c2 c0       	rjmp	.+388    	; 0x246 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c0 c0       	rjmp	.+384    	; 0x246 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	be c0       	rjmp	.+380    	; 0x246 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bc c0       	rjmp	.+376    	; 0x246 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ba c0       	rjmp	.+372    	; 0x246 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b8 c0       	rjmp	.+368    	; 0x246 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b6 c0       	rjmp	.+364    	; 0x246 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b4 c0       	rjmp	.+360    	; 0x246 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b2 c0       	rjmp	.+356    	; 0x246 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b0 c0       	rjmp	.+352    	; 0x246 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ae c0       	rjmp	.+348    	; 0x246 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ac c0       	rjmp	.+344    	; 0x246 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	aa c0       	rjmp	.+340    	; 0x246 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a8 c0       	rjmp	.+336    	; 0x246 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a6 c0       	rjmp	.+332    	; 0x246 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a4 c0       	rjmp	.+328    	; 0x246 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a2 c0       	rjmp	.+324    	; 0x246 <__bad_interrupt>
     102:	00 00       	nop
     104:	a0 c0       	rjmp	.+320    	; 0x246 <__bad_interrupt>
     106:	00 00       	nop
     108:	9e c0       	rjmp	.+316    	; 0x246 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9c c0       	rjmp	.+312    	; 0x246 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9a c0       	rjmp	.+308    	; 0x246 <__bad_interrupt>
     112:	00 00       	nop
     114:	98 c0       	rjmp	.+304    	; 0x246 <__bad_interrupt>
     116:	00 00       	nop
     118:	96 c0       	rjmp	.+300    	; 0x246 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	94 c0       	rjmp	.+296    	; 0x246 <__bad_interrupt>
     11e:	00 00       	nop
     120:	92 c0       	rjmp	.+292    	; 0x246 <__bad_interrupt>
     122:	00 00       	nop
     124:	90 c0       	rjmp	.+288    	; 0x246 <__bad_interrupt>
     126:	00 00       	nop
     128:	8e c0       	rjmp	.+284    	; 0x246 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8c c0       	rjmp	.+280    	; 0x246 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8a c0       	rjmp	.+276    	; 0x246 <__bad_interrupt>
     132:	00 00       	nop
     134:	88 c0       	rjmp	.+272    	; 0x246 <__bad_interrupt>
     136:	00 00       	nop
     138:	86 c0       	rjmp	.+268    	; 0x246 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	84 c0       	rjmp	.+264    	; 0x246 <__bad_interrupt>
     13e:	00 00       	nop
     140:	82 c0       	rjmp	.+260    	; 0x246 <__bad_interrupt>
     142:	00 00       	nop
     144:	80 c0       	rjmp	.+256    	; 0x246 <__bad_interrupt>
     146:	00 00       	nop
     148:	7e c0       	rjmp	.+252    	; 0x246 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7c c0       	rjmp	.+248    	; 0x246 <__bad_interrupt>
     14e:	00 00       	nop
     150:	7a c0       	rjmp	.+244    	; 0x246 <__bad_interrupt>
     152:	00 00       	nop
     154:	78 c0       	rjmp	.+240    	; 0x246 <__bad_interrupt>
     156:	00 00       	nop
     158:	76 c0       	rjmp	.+236    	; 0x246 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	74 c0       	rjmp	.+232    	; 0x246 <__bad_interrupt>
     15e:	00 00       	nop
     160:	fb c0       	rjmp	.+502    	; 0x358 <__vector_88>
     162:	00 00       	nop
     164:	2d c1       	rjmp	.+602    	; 0x3c0 <__vector_89>
     166:	00 00       	nop
     168:	6e c0       	rjmp	.+220    	; 0x246 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6c c0       	rjmp	.+216    	; 0x246 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6a c0       	rjmp	.+212    	; 0x246 <__bad_interrupt>
     172:	00 00       	nop
     174:	68 c0       	rjmp	.+208    	; 0x246 <__bad_interrupt>
     176:	00 00       	nop
     178:	66 c0       	rjmp	.+204    	; 0x246 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	64 c0       	rjmp	.+200    	; 0x246 <__bad_interrupt>
     17e:	00 00       	nop
     180:	62 c0       	rjmp	.+196    	; 0x246 <__bad_interrupt>
     182:	00 00       	nop
     184:	60 c0       	rjmp	.+192    	; 0x246 <__bad_interrupt>
     186:	00 00       	nop
     188:	5e c0       	rjmp	.+188    	; 0x246 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5c c0       	rjmp	.+184    	; 0x246 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5a c0       	rjmp	.+180    	; 0x246 <__bad_interrupt>
     192:	00 00       	nop
     194:	58 c0       	rjmp	.+176    	; 0x246 <__bad_interrupt>
     196:	00 00       	nop
     198:	56 c0       	rjmp	.+172    	; 0x246 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	54 c0       	rjmp	.+168    	; 0x246 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	52 c0       	rjmp	.+164    	; 0x246 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4e c0       	rjmp	.+156    	; 0x246 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4c c0       	rjmp	.+152    	; 0x246 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	48 c0       	rjmp	.+144    	; 0x246 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	46 c0       	rjmp	.+140    	; 0x246 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	44 c0       	rjmp	.+136    	; 0x246 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	42 c0       	rjmp	.+132    	; 0x246 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3e c0       	rjmp	.+124    	; 0x246 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3c c0       	rjmp	.+120    	; 0x246 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3a c0       	rjmp	.+116    	; 0x246 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	38 c0       	rjmp	.+112    	; 0x246 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	36 c0       	rjmp	.+108    	; 0x246 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	34 c0       	rjmp	.+104    	; 0x246 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	32 c0       	rjmp	.+100    	; 0x246 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	30 c0       	rjmp	.+96     	; 0x246 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2e c0       	rjmp	.+92     	; 0x246 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2c c0       	rjmp	.+88     	; 0x246 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2a c0       	rjmp	.+84     	; 0x246 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	28 c0       	rjmp	.+80     	; 0x246 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	26 c0       	rjmp	.+76     	; 0x246 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e3       	ldi	r29, 0x3F	; 63
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 ed       	ldi	r30, 0xD8	; 216
     21c:	f7 e1       	ldi	r31, 0x17	; 23
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a0 32       	cpi	r26, 0x20	; 32
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	23 e2       	ldi	r18, 0x23	; 35
     232:	a0 e2       	ldi	r26, 0x20	; 32
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a7 3c       	cpi	r26, 0xC7	; 199
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	f3 d0       	rcall	.+486    	; 0x428 <main>
     242:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <_exit>

00000246 <__bad_interrupt>:
     246:	dc ce       	rjmp	.-584    	; 0x0 <__vectors>

00000248 <TWIC_SlaveProcessData>:
uint8_t receiveArray[NUM_BYTES];
uint8_t transmitArray[256];

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
     248:	e0 91 bb 21 	lds	r30, 0x21BB
	for(uint8_t i = 0; i < NUM_BYTES; i++)
	{
		if (transmitArray[i+askbyte] >= ' ')
     24c:	f0 e0       	ldi	r31, 0x00	; 0

char str[256];
uint8_t receiveArray[NUM_BYTES];
uint8_t transmitArray[256];

void TWIC_SlaveProcessData(void)
     24e:	e0 5e       	subi	r30, 0xE0	; 224
     250:	ff 4d       	sbci	r31, 0xDF	; 223
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (transmitArray[i+askbyte] >= ' ')
		{
			twiSlave.sendData[i] = transmitArray[i+askbyte];
		}else{
			twiSlave.sendData[i] = '_';
     256:	3f e5       	ldi	r19, 0x5F	; 95
void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
	for(uint8_t i = 0; i < NUM_BYTES; i++)
	{
		if (transmitArray[i+askbyte] >= ' ')
     258:	21 91       	ld	r18, Z+
     25a:	20 32       	cpi	r18, 0x20	; 32
     25c:	28 f0       	brcs	.+10     	; 0x268 <TWIC_SlaveProcessData+0x20>
		{
			twiSlave.sendData[i] = transmitArray[i+askbyte];
     25e:	dc 01       	movw	r26, r24
     260:	a5 50       	subi	r26, 0x05	; 5
     262:	be 4d       	sbci	r27, 0xDE	; 222
     264:	2c 93       	st	X, r18
     266:	04 c0       	rjmp	.+8      	; 0x270 <TWIC_SlaveProcessData+0x28>
		}else{
			twiSlave.sendData[i] = '_';
     268:	dc 01       	movw	r26, r24
     26a:	a5 50       	subi	r26, 0x05	; 5
     26c:	be 4d       	sbci	r27, 0xDE	; 222
     26e:	3c 93       	st	X, r19
     270:	01 96       	adiw	r24, 0x01	; 1
uint8_t transmitArray[256];

void TWIC_SlaveProcessData(void)
{
	uint8_t askbyte = twiSlave.receivedData[0];
	for(uint8_t i = 0; i < NUM_BYTES; i++)
     272:	80 31       	cpi	r24, 0x10	; 16
     274:	91 05       	cpc	r25, r1
     276:	81 f7       	brne	.-32     	; 0x258 <TWIC_SlaveProcessData+0x10>
			twiSlave.sendData[i] = transmitArray[i+askbyte];
		}else{
			twiSlave.sendData[i] = '_';
		}
	}
	if(twiSlave.receivedData[0] == 0x01) transmitArray[5] = '_';
     278:	80 91 bb 21 	lds	r24, 0x21BB
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	19 f4       	brne	.+6      	; 0x286 <TWIC_SlaveProcessData+0x3e>
     280:	8f e5       	ldi	r24, 0x5F	; 95
     282:	80 93 25 20 	sts	0x2025, r24
     286:	08 95       	ret

00000288 <__vector_28>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_RXC_vect)
{
     288:	1f 92       	push	r1
     28a:	0f 92       	push	r0
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	08 b6       	in	r0, 0x38	; 56
     294:	0f 92       	push	r0
     296:	18 be       	out	0x38, r1	; 56
     298:	09 b6       	in	r0, 0x39	; 57
     29a:	0f 92       	push	r0
     29c:	19 be       	out	0x39, r1	; 57
     29e:	0b b6       	in	r0, 0x3b	; 59
     2a0:	0f 92       	push	r0
     2a2:	1b be       	out	0x3b, r1	; 59
     2a4:	2f 93       	push	r18
     2a6:	3f 93       	push	r19
     2a8:	4f 93       	push	r20
     2aa:	5f 93       	push	r21
     2ac:	6f 93       	push	r22
     2ae:	7f 93       	push	r23
     2b0:	8f 93       	push	r24
     2b2:	9f 93       	push	r25
     2b4:	af 93       	push	r26
     2b6:	bf 93       	push	r27
     2b8:	ef 93       	push	r30
     2ba:	ff 93       	push	r31
  USART_RXComplete(&uartC1);
     2bc:	80 e4       	ldi	r24, 0x40	; 64
     2be:	92 e2       	ldi	r25, 0x22	; 34
     2c0:	56 d5       	rcall	.+2732   	; 0xd6e <USART_RXComplete>
}
     2c2:	ff 91       	pop	r31
     2c4:	ef 91       	pop	r30
     2c6:	bf 91       	pop	r27
     2c8:	af 91       	pop	r26
     2ca:	9f 91       	pop	r25
     2cc:	8f 91       	pop	r24
     2ce:	7f 91       	pop	r23
     2d0:	6f 91       	pop	r22
     2d2:	5f 91       	pop	r21
     2d4:	4f 91       	pop	r20
     2d6:	3f 91       	pop	r19
     2d8:	2f 91       	pop	r18
     2da:	0f 90       	pop	r0
     2dc:	0b be       	out	0x3b, r0	; 59
     2de:	0f 90       	pop	r0
     2e0:	09 be       	out	0x39, r0	; 57
     2e2:	0f 90       	pop	r0
     2e4:	08 be       	out	0x38, r0	; 56
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <__vector_29>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTC1.
 *         This ISR is only defined if the macro ENABLE_UART_C1 is defined.
 */
ISR(USARTC1_DRE_vect)
{
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	08 b6       	in	r0, 0x38	; 56
     2fc:	0f 92       	push	r0
     2fe:	18 be       	out	0x38, r1	; 56
     300:	09 b6       	in	r0, 0x39	; 57
     302:	0f 92       	push	r0
     304:	19 be       	out	0x39, r1	; 57
     306:	0b b6       	in	r0, 0x3b	; 59
     308:	0f 92       	push	r0
     30a:	1b be       	out	0x3b, r1	; 59
     30c:	2f 93       	push	r18
     30e:	3f 93       	push	r19
     310:	4f 93       	push	r20
     312:	5f 93       	push	r21
     314:	6f 93       	push	r22
     316:	7f 93       	push	r23
     318:	8f 93       	push	r24
     31a:	9f 93       	push	r25
     31c:	af 93       	push	r26
     31e:	bf 93       	push	r27
     320:	ef 93       	push	r30
     322:	ff 93       	push	r31
  USART_DataRegEmpty(&uartC1);
     324:	80 e4       	ldi	r24, 0x40	; 64
     326:	92 e2       	ldi	r25, 0x22	; 34
     328:	40 d5       	rcall	.+2688   	; 0xdaa <USART_DataRegEmpty>
}
     32a:	ff 91       	pop	r31
     32c:	ef 91       	pop	r30
     32e:	bf 91       	pop	r27
     330:	af 91       	pop	r26
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	7f 91       	pop	r23
     338:	6f 91       	pop	r22
     33a:	5f 91       	pop	r21
     33c:	4f 91       	pop	r20
     33e:	3f 91       	pop	r19
     340:	2f 91       	pop	r18
     342:	0f 90       	pop	r0
     344:	0b be       	out	0x3b, r0	; 59
     346:	0f 90       	pop	r0
     348:	09 be       	out	0x39, r0	; 57
     34a:	0f 90       	pop	r0
     34c:	08 be       	out	0x38, r0	; 56
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <__vector_88>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_RXC_vect)
{
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	08 b6       	in	r0, 0x38	; 56
     364:	0f 92       	push	r0
     366:	18 be       	out	0x38, r1	; 56
     368:	09 b6       	in	r0, 0x39	; 57
     36a:	0f 92       	push	r0
     36c:	19 be       	out	0x39, r1	; 57
     36e:	0b b6       	in	r0, 0x3b	; 59
     370:	0f 92       	push	r0
     372:	1b be       	out	0x3b, r1	; 59
     374:	2f 93       	push	r18
     376:	3f 93       	push	r19
     378:	4f 93       	push	r20
     37a:	5f 93       	push	r21
     37c:	6f 93       	push	r22
     37e:	7f 93       	push	r23
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
     384:	af 93       	push	r26
     386:	bf 93       	push	r27
     388:	ef 93       	push	r30
     38a:	ff 93       	push	r31
  USART_RXComplete(&uartD0);
     38c:	80 e2       	ldi	r24, 0x20	; 32
     38e:	91 e2       	ldi	r25, 0x21	; 33
     390:	ee d4       	rcall	.+2524   	; 0xd6e <USART_RXComplete>
}
     392:	ff 91       	pop	r31
     394:	ef 91       	pop	r30
     396:	bf 91       	pop	r27
     398:	af 91       	pop	r26
     39a:	9f 91       	pop	r25
     39c:	8f 91       	pop	r24
     39e:	7f 91       	pop	r23
     3a0:	6f 91       	pop	r22
     3a2:	5f 91       	pop	r21
     3a4:	4f 91       	pop	r20
     3a6:	3f 91       	pop	r19
     3a8:	2f 91       	pop	r18
     3aa:	0f 90       	pop	r0
     3ac:	0b be       	out	0x3b, r0	; 59
     3ae:	0f 90       	pop	r0
     3b0:	09 be       	out	0x39, r0	; 57
     3b2:	0f 90       	pop	r0
     3b4:	08 be       	out	0x38, r0	; 56
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <__vector_89>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_DRE_vect)
{
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	08 b6       	in	r0, 0x38	; 56
     3cc:	0f 92       	push	r0
     3ce:	18 be       	out	0x38, r1	; 56
     3d0:	09 b6       	in	r0, 0x39	; 57
     3d2:	0f 92       	push	r0
     3d4:	19 be       	out	0x39, r1	; 57
     3d6:	0b b6       	in	r0, 0x3b	; 59
     3d8:	0f 92       	push	r0
     3da:	1b be       	out	0x3b, r1	; 59
     3dc:	2f 93       	push	r18
     3de:	3f 93       	push	r19
     3e0:	4f 93       	push	r20
     3e2:	5f 93       	push	r21
     3e4:	6f 93       	push	r22
     3e6:	7f 93       	push	r23
     3e8:	8f 93       	push	r24
     3ea:	9f 93       	push	r25
     3ec:	af 93       	push	r26
     3ee:	bf 93       	push	r27
     3f0:	ef 93       	push	r30
     3f2:	ff 93       	push	r31
  USART_DataRegEmpty(&uartD0);
     3f4:	80 e2       	ldi	r24, 0x20	; 32
     3f6:	91 e2       	ldi	r25, 0x21	; 33
     3f8:	d8 d4       	rcall	.+2480   	; 0xdaa <USART_DataRegEmpty>
}
     3fa:	ff 91       	pop	r31
     3fc:	ef 91       	pop	r30
     3fe:	bf 91       	pop	r27
     400:	af 91       	pop	r26
     402:	9f 91       	pop	r25
     404:	8f 91       	pop	r24
     406:	7f 91       	pop	r23
     408:	6f 91       	pop	r22
     40a:	5f 91       	pop	r21
     40c:	4f 91       	pop	r20
     40e:	3f 91       	pop	r19
     410:	2f 91       	pop	r18
     412:	0f 90       	pop	r0
     414:	0b be       	out	0x3b, r0	; 59
     416:	0f 90       	pop	r0
     418:	09 be       	out	0x39, r0	; 57
     41a:	0f 90       	pop	r0
     41c:	08 be       	out	0x38, r0	; 56
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <main>:
}
	

int main(void)
{
	PORTE.DIRSET = PIN0_bm;
     428:	e0 e8       	ldi	r30, 0x80	; 128
     42a:	f6 e0       	ldi	r31, 0x06	; 6
     42c:	c1 e0       	ldi	r28, 0x01	; 1
     42e:	c1 83       	std	Z+1, r28	; 0x01
	PORTE.DIRSET = PIN3_bm;
     430:	88 e0       	ldi	r24, 0x08	; 8
     432:	81 83       	std	Z+1, r24	; 0x01
	
	PORTC.INT0MASK = PIN6_bm;
     434:	e0 e4       	ldi	r30, 0x40	; 64
     436:	f6 e0       	ldi	r31, 0x06	; 6
     438:	80 e4       	ldi	r24, 0x40	; 64
     43a:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.PIN6CTRL = PORT_ISC_RISING_gc;
     43c:	c6 8b       	std	Z+22, r28	; 0x16
	PORTC.INTCTRL  = PORT_INT0LVL_LO_gc;
     43e:	c1 87       	std	Z+9, r28	; 0x09
	
	init_uart(&uartD0, &USARTD0, F_CPU, D0_BAUD, D0_CLK2X);
     440:	c1 2c       	mov	r12, r1
     442:	e1 2c       	mov	r14, r1
     444:	12 ec       	ldi	r17, 0xC2	; 194
     446:	f1 2e       	mov	r15, r17
     448:	01 e0       	ldi	r16, 0x01	; 1
     44a:	10 e0       	ldi	r17, 0x00	; 0
     44c:	20 e8       	ldi	r18, 0x80	; 128
     44e:	34 e8       	ldi	r19, 0x84	; 132
     450:	4e e1       	ldi	r20, 0x1E	; 30
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	60 ea       	ldi	r22, 0xA0	; 160
     456:	79 e0       	ldi	r23, 0x09	; 9
     458:	80 e2       	ldi	r24, 0x20	; 32
     45a:	91 e2       	ldi	r25, 0x21	; 33
     45c:	cd d3       	rcall	.+1946   	; 0xbf8 <init_uart>
	init_uart(&uartC1, &USARTC1, F_CPU, C1_BAUD, C1_CLK2X);
     45e:	10 e8       	ldi	r17, 0x80	; 128
     460:	e1 2e       	mov	r14, r17
     462:	15 e2       	ldi	r17, 0x25	; 37
     464:	f1 2e       	mov	r15, r17
     466:	00 e0       	ldi	r16, 0x00	; 0
     468:	10 e0       	ldi	r17, 0x00	; 0
     46a:	20 e8       	ldi	r18, 0x80	; 128
     46c:	34 e8       	ldi	r19, 0x84	; 132
     46e:	4e e1       	ldi	r20, 0x1E	; 30
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	60 eb       	ldi	r22, 0xB0	; 176
     474:	78 e0       	ldi	r23, 0x08	; 8
     476:	80 e4       	ldi	r24, 0x40	; 64
     478:	92 e2       	ldi	r25, 0x22	; 34
     47a:	be d3       	rcall	.+1916   	; 0xbf8 <init_uart>
	
	TCC1.CTRLB     = TC_WGMODE_NORMAL_gc;
     47c:	e0 e4       	ldi	r30, 0x40	; 64
     47e:	f8 e0       	ldi	r31, 0x08	; 8
     480:	11 82       	std	Z+1, r1	; 0x01
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     482:	10 82       	st	Z, r1
	TCC1.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     484:	c6 83       	std	Z+6, r28	; 0x06
	TCC1.PER       = 400;
     486:	80 e9       	ldi	r24, 0x90	; 144
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	86 a3       	std	Z+38, r24	; 0x26
     48c:	97 a3       	std	Z+39, r25	; 0x27
	
	TWI_SlaveInitializeDriver(&twiSlave, &TWIC, TWIC_SlaveProcessData);
     48e:	44 e2       	ldi	r20, 0x24	; 36
     490:	51 e0       	ldi	r21, 0x01	; 1
     492:	60 e8       	ldi	r22, 0x80	; 128
     494:	74 e0       	ldi	r23, 0x04	; 4
     496:	87 eb       	ldi	r24, 0xB7	; 183
     498:	91 e2       	ldi	r25, 0x21	; 33
     49a:	5f d1       	rcall	.+702    	; 0x75a <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twiSlave, SLAVE_ADDRESS, TWI_SLAVE_INTLVL_MED_gc);
     49c:	40 e8       	ldi	r20, 0x80	; 128
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	87 eb       	ldi	r24, 0xB7	; 183
     4a2:	91 e2       	ldi	r25, 0x21	; 33
     4a4:	73 d1       	rcall	.+742    	; 0x78c <TWI_SlaveInitializeModule>
	
	PMIC.CTRL = PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm;
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	e0 ea       	ldi	r30, 0xA0	; 160
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	82 83       	std	Z+2, r24	; 0x02
	sei();
     4ae:	78 94       	sei
	
	twiSlave.sendData[0] = 'T';
     4b0:	0f 2e       	mov	r0, r31
     4b2:	f4 e5       	ldi	r31, 0x54	; 84
     4b4:	ff 2e       	mov	r15, r31
     4b6:	f0 2d       	mov	r31, r0
     4b8:	f0 92 fb 21 	sts	0x21FB, r15
	twiSlave.sendData[1] = 'W';
     4bc:	07 e5       	ldi	r16, 0x57	; 87
     4be:	00 93 fc 21 	sts	0x21FC, r16
	twiSlave.sendData[2] = 'I';
     4c2:	19 e4       	ldi	r17, 0x49	; 73
     4c4:	10 93 fd 21 	sts	0x21FD, r17

	
	sprintf(str, "UART Connected!!!\n\r");
     4c8:	c7 ec       	ldi	r28, 0xC7	; 199
     4ca:	d2 e2       	ldi	r29, 0x22	; 34
     4cc:	84 e1       	ldi	r24, 0x14	; 20
     4ce:	e0 e0       	ldi	r30, 0x00	; 0
     4d0:	f0 e2       	ldi	r31, 0x20	; 32
     4d2:	de 01       	movw	r26, r28
     4d4:	01 90       	ld	r0, Z+
     4d6:	0d 92       	st	X+, r0
     4d8:	8a 95       	dec	r24
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <main+0xac>
	uart_puts(&uartD0, str);
     4dc:	be 01       	movw	r22, r28
     4de:	80 e2       	ldi	r24, 0x20	; 32
     4e0:	91 e2       	ldi	r25, 0x21	; 33
     4e2:	78 d2       	rcall	.+1264   	; 0x9d4 <uart_puts>
	uint8_t x = 0;
	while(1)
	{
		transmitArray[0] = 'T';
     4e4:	f0 92 20 20 	sts	0x2020, r15
		transmitArray[1] = 'W';
     4e8:	00 93 21 20 	sts	0x2021, r16
		transmitArray[2] = 'I';
     4ec:	10 93 22 20 	sts	0x2022, r17
		transmitArray[3] = ' ';
     4f0:	80 e2       	ldi	r24, 0x20	; 32
     4f2:	80 93 23 20 	sts	0x2023, r24
		transmitArray[4] = '0'+x;
     4f6:	80 e3       	ldi	r24, 0x30	; 48
     4f8:	80 93 24 20 	sts	0x2024, r24
		sprintf(str, "0x%d\n\r", x);
     4fc:	1f 92       	push	r1
     4fe:	1f 92       	push	r1
     500:	84 e1       	ldi	r24, 0x14	; 20
     502:	90 e2       	ldi	r25, 0x20	; 32
     504:	9f 93       	push	r25
     506:	8f 93       	push	r24
     508:	df 93       	push	r29
     50a:	cf 93       	push	r28
     50c:	a9 d6       	rcall	.+3410   	; 0x1260 <sprintf>
		uart_puts(&uartD0, str);
     50e:	be 01       	movw	r22, r28
     510:	80 e2       	ldi	r24, 0x20	; 32
     512:	91 e2       	ldi	r25, 0x21	; 33
     514:	5f d2       	rcall	.+1214   	; 0x9d4 <uart_puts>
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
		x++;
     522:	11 e0       	ldi	r17, 0x01	; 1
	sprintf(str, "UART Connected!!!\n\r");
	uart_puts(&uartD0, str);
	uint8_t x = 0;
	while(1)
	{
		transmitArray[0] = 'T';
     524:	0f 2e       	mov	r0, r31
     526:	f0 e2       	ldi	r31, 0x20	; 32
     528:	af 2e       	mov	r10, r31
     52a:	f0 e2       	ldi	r31, 0x20	; 32
     52c:	bf 2e       	mov	r11, r31
     52e:	f0 2d       	mov	r31, r0
     530:	0f 2e       	mov	r0, r31
     532:	f4 e5       	ldi	r31, 0x54	; 84
     534:	2f 2e       	mov	r2, r31
     536:	f0 2d       	mov	r31, r0
		transmitArray[1] = 'W';
     538:	0f 2e       	mov	r0, r31
     53a:	f1 e2       	ldi	r31, 0x21	; 33
     53c:	cf 2e       	mov	r12, r31
     53e:	f0 e2       	ldi	r31, 0x20	; 32
     540:	df 2e       	mov	r13, r31
     542:	f0 2d       	mov	r31, r0
     544:	0f 2e       	mov	r0, r31
     546:	f7 e5       	ldi	r31, 0x57	; 87
     548:	3f 2e       	mov	r3, r31
     54a:	f0 2d       	mov	r31, r0
		transmitArray[2] = 'I';
     54c:	0f 2e       	mov	r0, r31
     54e:	f2 e2       	ldi	r31, 0x22	; 34
     550:	ef 2e       	mov	r14, r31
     552:	f0 e2       	ldi	r31, 0x20	; 32
     554:	ff 2e       	mov	r15, r31
     556:	f0 2d       	mov	r31, r0
     558:	0f 2e       	mov	r0, r31
     55a:	f9 e4       	ldi	r31, 0x49	; 73
     55c:	4f 2e       	mov	r4, r31
     55e:	f0 2d       	mov	r31, r0
		transmitArray[3] = ' ';
		transmitArray[4] = '0'+x;
     560:	0f 2e       	mov	r0, r31
     562:	f4 e2       	ldi	r31, 0x24	; 36
     564:	8f 2e       	mov	r8, r31
     566:	f0 e2       	ldi	r31, 0x20	; 32
     568:	9f 2e       	mov	r9, r31
     56a:	f0 2d       	mov	r31, r0
		sprintf(str, "0x%d\n\r", x);
     56c:	0f 2e       	mov	r0, r31
     56e:	f4 e1       	ldi	r31, 0x14	; 20
     570:	6f 2e       	mov	r6, r31
     572:	f0 e2       	ldi	r31, 0x20	; 32
     574:	7f 2e       	mov	r7, r31
     576:	f0 2d       	mov	r31, r0
     578:	01 c0       	rjmp	.+2      	; 0x57c <main+0x154>
		uart_puts(&uartD0, str);
		x++;
		if (x>=10)
		{
			x = 0;
     57a:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     57c:	9f e7       	ldi	r25, 0x7F	; 127
     57e:	ea e1       	ldi	r30, 0x1A	; 26
     580:	f6 e0       	ldi	r31, 0x06	; 6
     582:	91 50       	subi	r25, 0x01	; 1
     584:	e0 40       	sbci	r30, 0x00	; 0
     586:	f0 40       	sbci	r31, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <main+0x15a>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <main+0x164>
     58c:	00 00       	nop
	sprintf(str, "UART Connected!!!\n\r");
	uart_puts(&uartD0, str);
	uint8_t x = 0;
	while(1)
	{
		transmitArray[0] = 'T';
     58e:	f5 01       	movw	r30, r10
     590:	20 82       	st	Z, r2
		transmitArray[1] = 'W';
     592:	f6 01       	movw	r30, r12
     594:	30 82       	st	Z, r3
		transmitArray[2] = 'I';
     596:	f7 01       	movw	r30, r14
     598:	40 82       	st	Z, r4
		transmitArray[3] = ' ';
     59a:	20 e2       	ldi	r18, 0x20	; 32
     59c:	e3 e2       	ldi	r30, 0x23	; 35
     59e:	f0 e2       	ldi	r31, 0x20	; 32
     5a0:	20 83       	st	Z, r18
		transmitArray[4] = '0'+x;
     5a2:	81 2f       	mov	r24, r17
     5a4:	80 5d       	subi	r24, 0xD0	; 208
     5a6:	f4 01       	movw	r30, r8
     5a8:	80 83       	st	Z, r24
		sprintf(str, "0x%d\n\r", x);
     5aa:	1f 92       	push	r1
     5ac:	1f 93       	push	r17
     5ae:	7f 92       	push	r7
     5b0:	6f 92       	push	r6
     5b2:	df 93       	push	r29
     5b4:	cf 93       	push	r28
     5b6:	54 d6       	rcall	.+3240   	; 0x1260 <sprintf>
		uart_puts(&uartD0, str);
     5b8:	be 01       	movw	r22, r28
     5ba:	80 e2       	ldi	r24, 0x20	; 32
     5bc:	91 e2       	ldi	r25, 0x21	; 33
     5be:	0a d2       	rcall	.+1044   	; 0x9d4 <uart_puts>
		x++;
     5c0:	1f 5f       	subi	r17, 0xFF	; 255
		if (x>=10)
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	1a 30       	cpi	r17, 0x0A	; 10
     5d0:	a0 f6       	brcc	.-88     	; 0x57a <main+0x152>
     5d2:	d4 cf       	rjmp	.-88     	; 0x57c <main+0x154>

000005d4 <__vector_12>:
		_delay_ms(1000);
	}
}

ISR(TWIC_TWIS_vect)
{
     5d4:	1f 92       	push	r1
     5d6:	0f 92       	push	r0
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	0f 92       	push	r0
     5dc:	11 24       	eor	r1, r1
     5de:	08 b6       	in	r0, 0x38	; 56
     5e0:	0f 92       	push	r0
     5e2:	18 be       	out	0x38, r1	; 56
     5e4:	09 b6       	in	r0, 0x39	; 57
     5e6:	0f 92       	push	r0
     5e8:	19 be       	out	0x39, r1	; 57
     5ea:	0b b6       	in	r0, 0x3b	; 59
     5ec:	0f 92       	push	r0
     5ee:	1b be       	out	0x3b, r1	; 59
     5f0:	2f 93       	push	r18
     5f2:	3f 93       	push	r19
     5f4:	4f 93       	push	r20
     5f6:	5f 93       	push	r21
     5f8:	6f 93       	push	r22
     5fa:	7f 93       	push	r23
     5fc:	8f 93       	push	r24
     5fe:	9f 93       	push	r25
     600:	af 93       	push	r26
     602:	bf 93       	push	r27
     604:	ef 93       	push	r30
     606:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twiSlave);
     608:	87 eb       	ldi	r24, 0xB7	; 183
     60a:	91 e2       	ldi	r25, 0x21	; 33
     60c:	99 d1       	rcall	.+818    	; 0x940 <TWI_SlaveInterruptHandler>
	PORTE.OUTSET   = PIN0_bm;
     60e:	e0 e8       	ldi	r30, 0x80	; 128
     610:	f6 e0       	ldi	r31, 0x06	; 6
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	85 83       	std	Z+5, r24	; 0x05
	PORTE.OUTCLR  = PIN0_bm;
     616:	86 83       	std	Z+6, r24	; 0x06
	
}
     618:	ff 91       	pop	r31
     61a:	ef 91       	pop	r30
     61c:	bf 91       	pop	r27
     61e:	af 91       	pop	r26
     620:	9f 91       	pop	r25
     622:	8f 91       	pop	r24
     624:	7f 91       	pop	r23
     626:	6f 91       	pop	r22
     628:	5f 91       	pop	r21
     62a:	4f 91       	pop	r20
     62c:	3f 91       	pop	r19
     62e:	2f 91       	pop	r18
     630:	0f 90       	pop	r0
     632:	0b be       	out	0x3b, r0	; 59
     634:	0f 90       	pop	r0
     636:	09 be       	out	0x39, r0	; 57
     638:	0f 90       	pop	r0
     63a:	08 be       	out	0x38, r0	; 56
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <__vector_2>:

ISR(PORTC_INT0_vect)
{
     646:	1f 92       	push	r1
     648:	0f 92       	push	r0
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	0f 92       	push	r0
     64e:	11 24       	eor	r1, r1
     650:	08 b6       	in	r0, 0x38	; 56
     652:	0f 92       	push	r0
     654:	18 be       	out	0x38, r1	; 56
     656:	8f 93       	push	r24
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
     658:	87 e0       	ldi	r24, 0x07	; 7
     65a:	80 93 40 08 	sts	0x0840, r24
}
     65e:	8f 91       	pop	r24
     660:	0f 90       	pop	r0
     662:	08 be       	out	0x38, r0	; 56
     664:	0f 90       	pop	r0
     666:	0f be       	out	0x3f, r0	; 63
     668:	0f 90       	pop	r0
     66a:	1f 90       	pop	r1
     66c:	18 95       	reti

0000066e <__vector_20>:

ISR(TCC1_OVF_vect)
{
     66e:	1f 92       	push	r1
     670:	0f 92       	push	r0
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	0f 92       	push	r0
     676:	11 24       	eor	r1, r1
     678:	08 b6       	in	r0, 0x38	; 56
     67a:	0f 92       	push	r0
     67c:	18 be       	out	0x38, r1	; 56
     67e:	09 b6       	in	r0, 0x39	; 57
     680:	0f 92       	push	r0
     682:	19 be       	out	0x39, r1	; 57
     684:	0a b6       	in	r0, 0x3a	; 58
     686:	0f 92       	push	r0
     688:	1a be       	out	0x3a, r1	; 58
     68a:	0b b6       	in	r0, 0x3b	; 59
     68c:	0f 92       	push	r0
     68e:	1b be       	out	0x3b, r1	; 59
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	2f 93       	push	r18
     69c:	3f 93       	push	r19
     69e:	4f 93       	push	r20
     6a0:	5f 93       	push	r21
     6a2:	6f 93       	push	r22
     6a4:	7f 93       	push	r23
     6a6:	8f 93       	push	r24
     6a8:	9f 93       	push	r25
     6aa:	af 93       	push	r26
     6ac:	bf 93       	push	r27
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	ef 93       	push	r30
     6b4:	ff 93       	push	r31
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
     6b6:	10 92 40 08 	sts	0x0840, r1
     6ba:	07 ea       	ldi	r16, 0xA7	; 167
     6bc:	11 e2       	ldi	r17, 0x21	; 33
ISR(PORTC_INT0_vect)
{
	TCC1.CTRLA     = TC_CLKSEL_DIV1024_gc;
}

ISR(TCC1_OVF_vect)
     6be:	0f 2e       	mov	r0, r31
     6c0:	f7 eb       	ldi	r31, 0xB7	; 183
     6c2:	ef 2e       	mov	r14, r31
     6c4:	f1 e2       	ldi	r31, 0x21	; 33
     6c6:	ff 2e       	mov	r15, r31
     6c8:	f0 2d       	mov	r31, r0
     6ca:	e8 01       	movw	r28, r16
	{
		if (USART_RXBufferData_Available(&uartC1))
		{
			receiveArray[i] = USART_RXBuffer_GetByte(&uartC1);
		}else{
			receiveArray[i] = '_';
     6cc:	0f 2e       	mov	r0, r31
     6ce:	ff e5       	ldi	r31, 0x5F	; 95
     6d0:	df 2e       	mov	r13, r31
     6d2:	f0 2d       	mov	r31, r0
{
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
	int i = 0;
	while (i < NUM_BYTES)
	{
		if (USART_RXBufferData_Available(&uartC1))
     6d4:	80 e4       	ldi	r24, 0x40	; 64
     6d6:	92 e2       	ldi	r25, 0x22	; 34
     6d8:	2f d3       	rcall	.+1630   	; 0xd38 <USART_RXBufferData_Available>
     6da:	88 23       	and	r24, r24
     6dc:	29 f0       	breq	.+10     	; 0x6e8 <__vector_20+0x7a>
		{
			receiveArray[i] = USART_RXBuffer_GetByte(&uartC1);
     6de:	80 e4       	ldi	r24, 0x40	; 64
     6e0:	92 e2       	ldi	r25, 0x22	; 34
     6e2:	37 d3       	rcall	.+1646   	; 0xd52 <USART_RXBuffer_GetByte>
     6e4:	88 83       	st	Y, r24
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__vector_20+0x7c>
		}else{
			receiveArray[i] = '_';
     6e8:	d8 82       	st	Y, r13
     6ea:	21 96       	adiw	r28, 0x01	; 1

ISR(TCC1_OVF_vect)
{
	TCC1.CTRLA     = TC_CLKSEL_OFF_gc;
	int i = 0;
	while (i < NUM_BYTES)
     6ec:	ce 15       	cp	r28, r14
     6ee:	df 05       	cpc	r29, r15
     6f0:	89 f7       	brne	.-30     	; 0x6d4 <__vector_20+0x66>
		}
		i++;
	}
	
	i = 0;
	uart_puts(&uartD0, "ID: ");
     6f2:	6b e1       	ldi	r22, 0x1B	; 27
     6f4:	70 e2       	ldi	r23, 0x20	; 32
     6f6:	80 e2       	ldi	r24, 0x20	; 32
     6f8:	91 e2       	ldi	r25, 0x21	; 33
     6fa:	6c d1       	rcall	.+728    	; 0x9d4 <uart_puts>
     6fc:	cf e2       	ldi	r28, 0x2F	; 47
     6fe:	d0 e2       	ldi	r29, 0x20	; 32
	while (i < NUM_BYTES)
	{
		transmitArray[i+0x0F] = receiveArray[i];
     700:	f8 01       	movw	r30, r16
     702:	61 91       	ld	r22, Z+
     704:	8f 01       	movw	r16, r30
     706:	69 93       	st	Y+, r22
		uart_putc(&uartD0, receiveArray[i]);
     708:	80 e2       	ldi	r24, 0x20	; 32
     70a:	91 e2       	ldi	r25, 0x21	; 33
     70c:	54 d1       	rcall	.+680    	; 0x9b6 <uart_putc>
		i++;
	}
	
	i = 0;
	uart_puts(&uartD0, "ID: ");
	while (i < NUM_BYTES)
     70e:	e0 16       	cp	r14, r16
     710:	f1 06       	cpc	r15, r17
     712:	b1 f7       	brne	.-20     	; 0x700 <__vector_20+0x92>
	{
		transmitArray[i+0x0F] = receiveArray[i];
		uart_putc(&uartD0, receiveArray[i]);
		i++;
	}
	transmitArray[5] = 'B';
     714:	82 e4       	ldi	r24, 0x42	; 66
     716:	80 93 25 20 	sts	0x2025, r24
     71a:	ff 91       	pop	r31
     71c:	ef 91       	pop	r30
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	bf 91       	pop	r27
     724:	af 91       	pop	r26
     726:	9f 91       	pop	r25
     728:	8f 91       	pop	r24
     72a:	7f 91       	pop	r23
     72c:	6f 91       	pop	r22
     72e:	5f 91       	pop	r21
     730:	4f 91       	pop	r20
     732:	3f 91       	pop	r19
     734:	2f 91       	pop	r18
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	0f 90       	pop	r0
     742:	0b be       	out	0x3b, r0	; 59
     744:	0f 90       	pop	r0
     746:	0a be       	out	0x3a, r0	; 58
     748:	0f 90       	pop	r0
     74a:	09 be       	out	0x39, r0	; 57
     74c:	0f 90       	pop	r0
     74e:	08 be       	out	0x38, r0	; 56
     750:	0f 90       	pop	r0
     752:	0f be       	out	0x3f, r0	; 63
     754:	0f 90       	pop	r0
     756:	1f 90       	pop	r1
     758:	18 95       	reti

0000075a <TWI_SlaveInitializeDriver>:
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
	twi->interface = module;
     75a:	fc 01       	movw	r30, r24
     75c:	60 83       	st	Z, r22
     75e:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
     760:	42 83       	std	Z+2, r20	; 0x02
     762:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
     764:	ec 57       	subi	r30, 0x7C	; 124
     766:	ff 4f       	sbci	r31, 0xFF	; 255
     768:	10 82       	st	Z, r1
	twi->bytesSent = 0;
     76a:	fc 01       	movw	r30, r24
     76c:	eb 57       	subi	r30, 0x7B	; 123
     76e:	ff 4f       	sbci	r31, 0xFF	; 255
     770:	10 82       	st	Z, r1
	twi->status = TWIS_STATUS_READY;
     772:	fc 01       	movw	r30, r24
     774:	ea 57       	subi	r30, 0x7A	; 122
     776:	ff 4f       	sbci	r31, 0xFF	; 255
     778:	10 82       	st	Z, r1
	twi->result = TWIS_RESULT_UNKNOWN;
     77a:	fc 01       	movw	r30, r24
     77c:	e9 57       	subi	r30, 0x79	; 121
     77e:	ff 4f       	sbci	r31, 0xFF	; 255
     780:	10 82       	st	Z, r1
	twi->abort = false;
     782:	fc 01       	movw	r30, r24
     784:	e8 57       	subi	r30, 0x78	; 120
     786:	ff 4f       	sbci	r31, 0xFF	; 255
     788:	10 82       	st	Z, r1
     78a:	08 95       	ret

0000078c <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
     78c:	dc 01       	movw	r26, r24
     78e:	ed 91       	ld	r30, X+
     790:	fc 91       	ld	r31, X
     792:	11 97       	sbiw	r26, 0x01	; 1
     794:	48 63       	ori	r20, 0x38	; 56
     796:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
     798:	ed 91       	ld	r30, X+
     79a:	fc 91       	ld	r31, X
     79c:	66 0f       	add	r22, r22
     79e:	63 87       	std	Z+11, r22	; 0x0b
     7a0:	08 95       	ret

000007a2 <TWI_SlaveTransactionFinished>:
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
     7a2:	fc 01       	movw	r30, r24
     7a4:	e9 57       	subi	r30, 0x79	; 121
     7a6:	ff 4f       	sbci	r31, 0xFF	; 255
     7a8:	60 83       	st	Z, r22
	twi->status = TWIS_STATUS_READY;
     7aa:	fc 01       	movw	r30, r24
     7ac:	ea 57       	subi	r30, 0x7A	; 122
     7ae:	ff 4f       	sbci	r31, 0xFF	; 255
     7b0:	10 82       	st	Z, r1
     7b2:	08 95       	ret

000007b4 <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
     7b8:	fc 01       	movw	r30, r24
     7ba:	eb 57       	subi	r30, 0x7B	; 123
     7bc:	ff 4f       	sbci	r31, 0xFF	; 255
     7be:	20 81       	ld	r18, Z
     7c0:	22 23       	and	r18, r18
     7c2:	59 f0       	breq	.+22     	; 0x7da <TWI_SlaveWriteHandler+0x26>
     7c4:	dc 01       	movw	r26, r24
     7c6:	ed 91       	ld	r30, X+
     7c8:	fc 91       	ld	r31, X
     7ca:	22 85       	ldd	r18, Z+10	; 0x0a
     7cc:	24 ff       	sbrs	r18, 4
     7ce:	05 c0       	rjmp	.+10     	; 0x7da <TWI_SlaveWriteHandler+0x26>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     7d0:	22 e0       	ldi	r18, 0x02	; 2
     7d2:	21 87       	std	Z+9, r18	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	e5 df       	rcall	.-54     	; 0x7a2 <TWI_SlaveTransactionFinished>
     7d8:	24 c0       	rjmp	.+72     	; 0x822 <TWI_SlaveWriteHandler+0x6e>
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
     7da:	fc 01       	movw	r30, r24
     7dc:	eb 57       	subi	r30, 0x7B	; 123
     7de:	ff 4f       	sbci	r31, 0xFF	; 255
     7e0:	20 81       	ld	r18, Z
     7e2:	20 34       	cpi	r18, 0x40	; 64
     7e4:	b8 f4       	brcc	.+46     	; 0x814 <TWI_SlaveWriteHandler+0x60>
			uint8_t data = twi->sendData[twi->bytesSent];
     7e6:	fc 01       	movw	r30, r24
     7e8:	eb 57       	subi	r30, 0x7B	; 123
     7ea:	ff 4f       	sbci	r31, 0xFF	; 255
     7ec:	20 81       	ld	r18, Z
     7ee:	dc 01       	movw	r26, r24
     7f0:	a2 0f       	add	r26, r18
     7f2:	b1 1d       	adc	r27, r1
     7f4:	ac 5b       	subi	r26, 0xBC	; 188
     7f6:	bf 4f       	sbci	r27, 0xFF	; 255
     7f8:	2c 91       	ld	r18, X
			twi->interface->SLAVE.DATA = data;
     7fa:	ec 01       	movw	r28, r24
     7fc:	a8 81       	ld	r26, Y
     7fe:	b9 81       	ldd	r27, Y+1	; 0x01
     800:	1c 96       	adiw	r26, 0x0c	; 12
     802:	2c 93       	st	X, r18
			twi->bytesSent++;
     804:	20 81       	ld	r18, Z
     806:	2f 5f       	subi	r18, 0xFF	; 255
     808:	20 83       	st	Z, r18

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     80a:	e8 81       	ld	r30, Y
     80c:	f9 81       	ldd	r31, Y+1	; 0x01
     80e:	83 e0       	ldi	r24, 0x03	; 3
     810:	81 87       	std	Z+9, r24	; 0x09
     812:	07 c0       	rjmp	.+14     	; 0x822 <TWI_SlaveWriteHandler+0x6e>
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     814:	dc 01       	movw	r26, r24
     816:	ed 91       	ld	r30, X+
     818:	fc 91       	ld	r31, X
     81a:	22 e0       	ldi	r18, 0x02	; 2
     81c:	21 87       	std	Z+9, r18	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     81e:	62 e0       	ldi	r22, 0x02	; 2
     820:	c0 df       	rcall	.-128    	; 0x7a2 <TWI_SlaveTransactionFinished>
		}
	}
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	ec 01       	movw	r28, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     832:	e8 81       	ld	r30, Y
     834:	f9 81       	ldd	r31, Y+1	; 0x01
     836:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
     838:	84 60       	ori	r24, 0x04	; 4
     83a:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
     83c:	fe 01       	movw	r30, r28
     83e:	ec 57       	subi	r30, 0x7C	; 124
     840:	ff 4f       	sbci	r31, 0xFF	; 255
     842:	80 81       	ld	r24, Z
     844:	80 34       	cpi	r24, 0x40	; 64
     846:	48 f5       	brcc	.+82     	; 0x89a <TWI_SlaveReadHandler+0x72>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
     848:	e8 81       	ld	r30, Y
     84a:	f9 81       	ldd	r31, Y+1	; 0x01
     84c:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
     84e:	8e 01       	movw	r16, r28
     850:	0c 57       	subi	r16, 0x7C	; 124
     852:	1f 4f       	sbci	r17, 0xFF	; 255
     854:	f8 01       	movw	r30, r16
     856:	90 81       	ld	r25, Z
     858:	fe 01       	movw	r30, r28
     85a:	e9 0f       	add	r30, r25
     85c:	f1 1d       	adc	r31, r1
     85e:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
     860:	ea 81       	ldd	r30, Y+2	; 0x02
     862:	fb 81       	ldd	r31, Y+3	; 0x03
     864:	19 95       	eicall

		twi->bytesReceived++;
     866:	f8 01       	movw	r30, r16
     868:	80 81       	ld	r24, Z
     86a:	8f 5f       	subi	r24, 0xFF	; 255
     86c:	80 83       	st	Z, r24

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
     86e:	fe 01       	movw	r30, r28
     870:	e8 57       	subi	r30, 0x78	; 120
     872:	ff 4f       	sbci	r31, 0xFF	; 255
     874:	80 81       	ld	r24, Z
     876:	88 23       	and	r24, r24
     878:	59 f0       	breq	.+22     	; 0x890 <TWI_SlaveReadHandler+0x68>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     87a:	e8 81       	ld	r30, Y
     87c:	f9 81       	ldd	r31, Y+1	; 0x01
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	81 87       	std	Z+9, r24	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     882:	66 e0       	ldi	r22, 0x06	; 6
     884:	ce 01       	movw	r24, r28
     886:	8d df       	rcall	.-230    	; 0x7a2 <TWI_SlaveTransactionFinished>
			twi->abort = false;
     888:	c8 57       	subi	r28, 0x78	; 120
     88a:	df 4f       	sbci	r29, 0xFF	; 255
     88c:	18 82       	st	Y, r1
     88e:	0c c0       	rjmp	.+24     	; 0x8a8 <TWI_SlaveReadHandler+0x80>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     890:	e8 81       	ld	r30, Y
     892:	f9 81       	ldd	r31, Y+1	; 0x01
     894:	83 e0       	ldi	r24, 0x03	; 3
     896:	81 87       	std	Z+9, r24	; 0x09
     898:	07 c0       	rjmp	.+14     	; 0x8a8 <TWI_SlaveReadHandler+0x80>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
     89a:	e8 81       	ld	r30, Y
     89c:	f9 81       	ldd	r31, Y+1	; 0x01
     89e:	86 e0       	ldi	r24, 0x06	; 6
     8a0:	81 87       	std	Z+9, r24	; 0x09
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     8a2:	62 e0       	ldi	r22, 0x02	; 2
     8a4:	ce 01       	movw	r24, r28
     8a6:	7d df       	rcall	.-262    	; 0x7a2 <TWI_SlaveTransactionFinished>
	}
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	08 95       	ret

000008b2 <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
     8b2:	dc 01       	movw	r26, r24
     8b4:	ed 91       	ld	r30, X+
     8b6:	fc 91       	ld	r31, X
     8b8:	22 85       	ldd	r18, Z+10	; 0x0a
     8ba:	21 ff       	sbrs	r18, 1
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <TWI_SlaveDataHandler+0xe>
		TWI_SlaveWriteHandler(twi);
     8be:	7a cf       	rjmp	.-268    	; 0x7b4 <TWI_SlaveWriteHandler>
	} else {
		TWI_SlaveReadHandler(twi);
     8c0:	b3 cf       	rjmp	.-154    	; 0x828 <TWI_SlaveReadHandler>

000008c2 <TWI_SlaveStopHandler>:
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     8c2:	dc 01       	movw	r26, r24
     8c4:	ed 91       	ld	r30, X+
     8c6:	fc 91       	ld	r31, X
     8c8:	11 97       	sbiw	r26, 0x01	; 1
     8ca:	20 85       	ldd	r18, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     8cc:	2b 7f       	andi	r18, 0xFB	; 251
     8ce:	20 87       	std	Z+8, r18	; 0x08
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     8d0:	ed 91       	ld	r30, X+
     8d2:	fc 91       	ld	r31, X
     8d4:	22 85       	ldd	r18, Z+10	; 0x0a
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
     8d6:	20 64       	ori	r18, 0x40	; 64
     8d8:	22 87       	std	Z+10, r18	; 0x0a

	TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	62 cf       	rjmp	.-316    	; 0x7a2 <TWI_SlaveTransactionFinished>

000008de <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	ec 01       	movw	r28, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
     8e4:	fc 01       	movw	r30, r24
     8e6:	e8 57       	subi	r30, 0x78	; 120
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	80 81       	ld	r24, Z
     8ec:	88 23       	and	r24, r24
     8ee:	59 f0       	breq	.+22     	; 0x906 <TWI_SlaveAddressMatchHandler+0x28>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     8f0:	e8 81       	ld	r30, Y
     8f2:	f9 81       	ldd	r31, Y+1	; 0x01
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	81 87       	std	Z+9, r24	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     8f8:	66 e0       	ldi	r22, 0x06	; 6
     8fa:	ce 01       	movw	r24, r28
     8fc:	52 df       	rcall	.-348    	; 0x7a2 <TWI_SlaveTransactionFinished>
		twi->abort = false;
     8fe:	c8 57       	subi	r28, 0x78	; 120
     900:	df 4f       	sbci	r29, 0xFF	; 255
     902:	18 82       	st	Y, r1
     904:	1a c0       	rjmp	.+52     	; 0x93a <TWI_SlaveAddressMatchHandler+0x5c>
	} else {
		twi->status = TWIS_STATUS_BUSY;
     906:	fe 01       	movw	r30, r28
     908:	ea 57       	subi	r30, 0x7A	; 122
     90a:	ff 4f       	sbci	r31, 0xFF	; 255
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	80 83       	st	Z, r24
		twi->result = TWIS_RESULT_UNKNOWN;
     910:	fe 01       	movw	r30, r28
     912:	e9 57       	subi	r30, 0x79	; 121
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	10 82       	st	Z, r1

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     918:	e8 81       	ld	r30, Y
     91a:	f9 81       	ldd	r31, Y+1	; 0x01
     91c:	80 85       	ldd	r24, Z+8	; 0x08
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     91e:	8b 7f       	andi	r24, 0xFB	; 251
     920:	80 87       	std	Z+8, r24	; 0x08

		twi->bytesReceived = 0;
     922:	fe 01       	movw	r30, r28
     924:	ec 57       	subi	r30, 0x7C	; 124
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     92a:	fe 01       	movw	r30, r28
     92c:	eb 57       	subi	r30, 0x7B	; 123
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	10 82       	st	Z, r1

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     932:	e8 81       	ld	r30, Y
     934:	f9 81       	ldd	r31, Y+1	; 0x01
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	81 87       	std	Z+9, r24	; 0x09
	}
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <TWI_SlaveInterruptHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     940:	dc 01       	movw	r26, r24
     942:	ed 91       	ld	r30, X+
     944:	fc 91       	ld	r31, X
     946:	22 85       	ldd	r18, Z+10	; 0x0a

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
     948:	22 ff       	sbrs	r18, 2
     94a:	12 c0       	rjmp	.+36     	; 0x970 <TWI_SlaveInterruptHandler+0x30>
		twi->bytesReceived = 0;
     94c:	fc 01       	movw	r30, r24
     94e:	ec 57       	subi	r30, 0x7C	; 124
     950:	ff 4f       	sbci	r31, 0xFF	; 255
     952:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     954:	fc 01       	movw	r30, r24
     956:	eb 57       	subi	r30, 0x7B	; 123
     958:	ff 4f       	sbci	r31, 0xFF	; 255
     95a:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_BUS_ERROR;
     95c:	fc 01       	movw	r30, r24
     95e:	e9 57       	subi	r30, 0x79	; 121
     960:	ff 4f       	sbci	r31, 0xFF	; 255
     962:	24 e0       	ldi	r18, 0x04	; 4
     964:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     966:	fc 01       	movw	r30, r24
     968:	ea 57       	subi	r30, 0x7A	; 122
     96a:	ff 4f       	sbci	r31, 0xFF	; 255
     96c:	10 82       	st	Z, r1
     96e:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
     970:	23 ff       	sbrs	r18, 3
     972:	12 c0       	rjmp	.+36     	; 0x998 <TWI_SlaveInterruptHandler+0x58>
		twi->bytesReceived = 0;
     974:	fc 01       	movw	r30, r24
     976:	ec 57       	subi	r30, 0x7C	; 124
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	10 82       	st	Z, r1
		twi->bytesSent = 0;
     97c:	fc 01       	movw	r30, r24
     97e:	eb 57       	subi	r30, 0x7B	; 123
     980:	ff 4f       	sbci	r31, 0xFF	; 255
     982:	10 82       	st	Z, r1
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
     984:	fc 01       	movw	r30, r24
     986:	e9 57       	subi	r30, 0x79	; 121
     988:	ff 4f       	sbci	r31, 0xFF	; 255
     98a:	23 e0       	ldi	r18, 0x03	; 3
     98c:	20 83       	st	Z, r18
		twi->status = TWIS_STATUS_READY;
     98e:	fc 01       	movw	r30, r24
     990:	ea 57       	subi	r30, 0x7A	; 122
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	10 82       	st	Z, r1
     996:	08 95       	ret
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     998:	42 2f       	mov	r20, r18
     99a:	40 74       	andi	r20, 0x40	; 64
 *  Handles all TWI transactions and responses to address match, data reception,
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
     99c:	32 2f       	mov	r19, r18
     99e:	31 74       	andi	r19, 0x41	; 65
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
		twi->status = TWIS_STATUS_READY;
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     9a0:	31 34       	cpi	r19, 0x41	; 65
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <TWI_SlaveInterruptHandler+0x66>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
     9a4:	9c cf       	rjmp	.-200    	; 0x8de <TWI_SlaveAddressMatchHandler>
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
     9a6:	44 23       	and	r20, r20
     9a8:	09 f0       	breq	.+2      	; 0x9ac <TWI_SlaveInterruptHandler+0x6c>
		TWI_SlaveStopHandler(twi);
     9aa:	8b cf       	rjmp	.-234    	; 0x8c2 <TWI_SlaveStopHandler>
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
     9ac:	22 23       	and	r18, r18
     9ae:	0c f4       	brge	.+2      	; 0x9b2 <TWI_SlaveInterruptHandler+0x72>
		TWI_SlaveDataHandler(twi);
     9b0:	80 cf       	rjmp	.-256    	; 0x8b2 <TWI_SlaveDataHandler>
	}

	/* If unexpected state. */
	else {
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_FAIL);
     9b2:	65 e0       	ldi	r22, 0x05	; 5
     9b4:	f6 ce       	rjmp	.-532    	; 0x7a2 <TWI_SlaveTransactionFinished>

000009b6 <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	ec 01       	movw	r28, r24
     9be:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
     9c0:	8c d1       	rcall	.+792    	; 0xcda <USART_TXBuffer_FreeSpace>
     9c2:	88 23       	and	r24, r24
     9c4:	19 f0       	breq	.+6      	; 0x9cc <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
     9c6:	61 2f       	mov	r22, r17
     9c8:	ce 01       	movw	r24, r28
     9ca:	96 d1       	rcall	.+812    	; 0xcf8 <USART_TXBuffer_PutByte>
  }
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	08 95       	ret

000009d4 <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
     9de:	c6 2f       	mov	r28, r22
     9e0:	d7 2f       	mov	r29, r23
     9e2:	69 91       	ld	r22, Y+
     9e4:	66 23       	and	r22, r22
     9e6:	29 f0       	breq	.+10     	; 0x9f2 <uart_puts+0x1e>
    uart_putc(uart, c);
     9e8:	c8 01       	movw	r24, r16
     9ea:	e5 df       	rcall	.-54     	; 0x9b6 <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
     9ec:	69 91       	ld	r22, Y+
     9ee:	61 11       	cpse	r22, r1
     9f0:	fb cf       	rjmp	.-10     	; 0x9e8 <uart_puts+0x14>
    uart_putc(uart, c);
  }
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	08 95       	ret

000009fc <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     9fc:	80 3a       	cpi	r24, 0xA0	; 160
     9fe:	28 e0       	ldi	r18, 0x08	; 8
     a00:	92 07       	cpc	r25, r18
     a02:	39 f4       	brne	.+14     	; 0xa12 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     a04:	e0 e4       	ldi	r30, 0x40	; 64
     a06:	f6 e0       	ldi	r31, 0x06	; 6
     a08:	88 e0       	ldi	r24, 0x08	; 8
     a0a:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     a0c:	84 e0       	ldi	r24, 0x04	; 4
     a0e:	82 83       	std	Z+2, r24	; 0x02
     return;
     a10:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     a12:	80 3b       	cpi	r24, 0xB0	; 176
     a14:	28 e0       	ldi	r18, 0x08	; 8
     a16:	92 07       	cpc	r25, r18
     a18:	39 f4       	brne	.+14     	; 0xa28 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     a1a:	e0 e4       	ldi	r30, 0x40	; 64
     a1c:	f6 e0       	ldi	r31, 0x06	; 6
     a1e:	80 e8       	ldi	r24, 0x80	; 128
     a20:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     a22:	80 e4       	ldi	r24, 0x40	; 64
     a24:	82 83       	std	Z+2, r24	; 0x02
     return;
     a26:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     a28:	80 3a       	cpi	r24, 0xA0	; 160
     a2a:	29 e0       	ldi	r18, 0x09	; 9
     a2c:	92 07       	cpc	r25, r18
     a2e:	39 f4       	brne	.+14     	; 0xa3e <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     a30:	e0 e6       	ldi	r30, 0x60	; 96
     a32:	f6 e0       	ldi	r31, 0x06	; 6
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     a38:	84 e0       	ldi	r24, 0x04	; 4
     a3a:	82 83       	std	Z+2, r24	; 0x02
     return;
     a3c:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     a3e:	80 3b       	cpi	r24, 0xB0	; 176
     a40:	29 e0       	ldi	r18, 0x09	; 9
     a42:	92 07       	cpc	r25, r18
     a44:	39 f4       	brne	.+14     	; 0xa54 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     a46:	e0 e6       	ldi	r30, 0x60	; 96
     a48:	f6 e0       	ldi	r31, 0x06	; 6
     a4a:	80 e8       	ldi	r24, 0x80	; 128
     a4c:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     a4e:	80 e4       	ldi	r24, 0x40	; 64
     a50:	82 83       	std	Z+2, r24	; 0x02
     return;
     a52:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     a54:	80 3a       	cpi	r24, 0xA0	; 160
     a56:	9a 40       	sbci	r25, 0x0A	; 10
     a58:	31 f4       	brne	.+12     	; 0xa66 <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
     a5a:	e0 e8       	ldi	r30, 0x80	; 128
     a5c:	f6 e0       	ldi	r31, 0x06	; 6
     a5e:	88 e0       	ldi	r24, 0x08	; 8
     a60:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	82 83       	std	Z+2, r24	; 0x02
     a66:	08 95       	ret

00000a68 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     a68:	4f 92       	push	r4
     a6a:	5f 92       	push	r5
     a6c:	6f 92       	push	r6
     a6e:	7f 92       	push	r7
     a70:	8f 92       	push	r8
     a72:	9f 92       	push	r9
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	49 01       	movw	r8, r18
     a86:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     a88:	4e 2d       	mov	r20, r14
     a8a:	41 70       	andi	r20, 0x01	; 1
     a8c:	20 e1       	ldi	r18, 0x10	; 16
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	79 01       	movw	r14, r18
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <calc_bsel+0x30>
     a94:	f5 94       	asr	r15
     a96:	e7 94       	ror	r14
     a98:	4a 95       	dec	r20
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <calc_bsel+0x2c>
  if ( scale < 0 ) {
     a9c:	00 23       	and	r16, r16
     a9e:	0c f0       	brlt	.+2      	; 0xaa2 <calc_bsel+0x3a>
     aa0:	3a c0       	rjmp	.+116    	; 0xb16 <calc_bsel+0xae>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     aa2:	a4 d2       	rcall	.+1352   	; 0xfec <__floatunsisf>
     aa4:	2b 01       	movw	r4, r22
     aa6:	3c 01       	movw	r6, r24
     aa8:	b7 01       	movw	r22, r14
     aaa:	77 27       	eor	r23, r23
     aac:	88 27       	eor	r24, r24
     aae:	77 fd       	sbrc	r23, 7
     ab0:	80 95       	com	r24
     ab2:	98 2f       	mov	r25, r24
     ab4:	9d d2       	rcall	.+1338   	; 0xff0 <__floatsisf>
     ab6:	6b 01       	movw	r12, r22
     ab8:	7c 01       	movw	r14, r24
     aba:	c5 01       	movw	r24, r10
     abc:	b4 01       	movw	r22, r8
     abe:	96 d2       	rcall	.+1324   	; 0xfec <__floatunsisf>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	c7 01       	movw	r24, r14
     ac6:	b6 01       	movw	r22, r12
     ac8:	1f d3       	rcall	.+1598   	; 0x1108 <__mulsf3>
     aca:	9b 01       	movw	r18, r22
     acc:	ac 01       	movw	r20, r24
     ace:	c3 01       	movw	r24, r6
     ad0:	b2 01       	movw	r22, r4
     ad2:	f8 d1       	rcall	.+1008   	; 0xec4 <__divsf3>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e8       	ldi	r20, 0x80	; 128
     ada:	5f e3       	ldi	r21, 0x3F	; 63
     adc:	8e d1       	rcall	.+796    	; 0xdfa <__subsf3>
     ade:	6b 01       	movw	r12, r22
     ae0:	7c 01       	movw	r14, r24
     ae2:	11 27       	eor	r17, r17
     ae4:	01 95       	neg	r16
     ae6:	0c f4       	brge	.+2      	; 0xaea <calc_bsel+0x82>
     ae8:	10 95       	com	r17
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <calc_bsel+0x8c>
     af0:	66 0f       	add	r22, r22
     af2:	77 1f       	adc	r23, r23
     af4:	0a 95       	dec	r16
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <calc_bsel+0x88>
     af8:	88 27       	eor	r24, r24
     afa:	77 fd       	sbrc	r23, 7
     afc:	80 95       	com	r24
     afe:	98 2f       	mov	r25, r24
     b00:	77 d2       	rcall	.+1262   	; 0xff0 <__floatsisf>
     b02:	9b 01       	movw	r18, r22
     b04:	ac 01       	movw	r20, r24
     b06:	c7 01       	movw	r24, r14
     b08:	b6 01       	movw	r22, r12
     b0a:	fe d2       	rcall	.+1532   	; 0x1108 <__mulsf3>
     b0c:	60 d3       	rcall	.+1728   	; 0x11ce <round>
     b0e:	42 d2       	rcall	.+1156   	; 0xf94 <__fixunssfsi>
     b10:	86 2f       	mov	r24, r22
     b12:	97 2f       	mov	r25, r23
     b14:	35 c0       	rjmp	.+106    	; 0xb80 <calc_bsel+0x118>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     b16:	6a d2       	rcall	.+1236   	; 0xfec <__floatunsisf>
     b18:	2b 01       	movw	r4, r22
     b1a:	3c 01       	movw	r6, r24
     b1c:	b7 01       	movw	r22, r14
     b1e:	77 27       	eor	r23, r23
     b20:	88 27       	eor	r24, r24
     b22:	77 fd       	sbrc	r23, 7
     b24:	80 95       	com	r24
     b26:	98 2f       	mov	r25, r24
     b28:	63 d2       	rcall	.+1222   	; 0xff0 <__floatsisf>
     b2a:	6b 01       	movw	r12, r22
     b2c:	7c 01       	movw	r14, r24
     b2e:	c5 01       	movw	r24, r10
     b30:	b4 01       	movw	r22, r8
     b32:	5c d2       	rcall	.+1208   	; 0xfec <__floatunsisf>
     b34:	9b 01       	movw	r18, r22
     b36:	ac 01       	movw	r20, r24
     b38:	c7 01       	movw	r24, r14
     b3a:	b6 01       	movw	r22, r12
     b3c:	e5 d2       	rcall	.+1482   	; 0x1108 <__mulsf3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c3 01       	movw	r24, r6
     b44:	b2 01       	movw	r22, r4
     b46:	be d1       	rcall	.+892    	; 0xec4 <__divsf3>
     b48:	4b 01       	movw	r8, r22
     b4a:	5c 01       	movw	r10, r24
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <calc_bsel+0xee>
     b52:	66 0f       	add	r22, r22
     b54:	77 1f       	adc	r23, r23
     b56:	0a 95       	dec	r16
     b58:	e2 f7       	brpl	.-8      	; 0xb52 <calc_bsel+0xea>
     b5a:	88 27       	eor	r24, r24
     b5c:	77 fd       	sbrc	r23, 7
     b5e:	80 95       	com	r24
     b60:	98 2f       	mov	r25, r24
     b62:	46 d2       	rcall	.+1164   	; 0xff0 <__floatsisf>
     b64:	9b 01       	movw	r18, r22
     b66:	ac 01       	movw	r20, r24
     b68:	c5 01       	movw	r24, r10
     b6a:	b4 01       	movw	r22, r8
     b6c:	ab d1       	rcall	.+854    	; 0xec4 <__divsf3>
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e8       	ldi	r20, 0x80	; 128
     b74:	5f e3       	ldi	r21, 0x3F	; 63
     b76:	41 d1       	rcall	.+642    	; 0xdfa <__subsf3>
     b78:	2a d3       	rcall	.+1620   	; 0x11ce <round>
     b7a:	0c d2       	rcall	.+1048   	; 0xf94 <__fixunssfsi>
     b7c:	86 2f       	mov	r24, r22
     b7e:	97 2f       	mov	r25, r23
  }
}
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	bf 90       	pop	r11
     b8e:	af 90       	pop	r10
     b90:	9f 90       	pop	r9
     b92:	8f 90       	pop	r8
     b94:	7f 90       	pop	r7
     b96:	6f 90       	pop	r6
     b98:	5f 90       	pop	r5
     b9a:	4f 90       	pop	r4
     b9c:	08 95       	ret

00000b9e <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     b9e:	4f 92       	push	r4
     ba0:	5f 92       	push	r5
     ba2:	6f 92       	push	r6
     ba4:	7f 92       	push	r7
     ba6:	8f 92       	push	r8
     ba8:	9f 92       	push	r9
     baa:	af 92       	push	r10
     bac:	bf 92       	push	r11
     bae:	ef 92       	push	r14
     bb0:	0f 93       	push	r16
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	2b 01       	movw	r4, r22
     bb8:	3c 01       	movw	r6, r24
     bba:	49 01       	movw	r8, r18
     bbc:	5a 01       	movw	r10, r20
     bbe:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     bc0:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     bc2:	ed 2e       	mov	r14, r29
     bc4:	0c 2f       	mov	r16, r28
     bc6:	a5 01       	movw	r20, r10
     bc8:	94 01       	movw	r18, r8
     bca:	c3 01       	movw	r24, r6
     bcc:	b2 01       	movw	r22, r4
     bce:	4c df       	rcall	.-360    	; 0xa68 <calc_bsel>
     bd0:	81 15       	cp	r24, r1
     bd2:	90 41       	sbci	r25, 0x10	; 16
     bd4:	18 f0       	brcs	.+6      	; 0xbdc <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     bd6:	cf 5f       	subi	r28, 0xFF	; 255
     bd8:	c8 30       	cpi	r28, 0x08	; 8
     bda:	99 f7       	brne	.-26     	; 0xbc2 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     bdc:	8c 2f       	mov	r24, r28
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	0f 91       	pop	r16
     be4:	ef 90       	pop	r14
     be6:	bf 90       	pop	r11
     be8:	af 90       	pop	r10
     bea:	9f 90       	pop	r9
     bec:	8f 90       	pop	r8
     bee:	7f 90       	pop	r7
     bf0:	6f 90       	pop	r6
     bf2:	5f 90       	pop	r5
     bf4:	4f 90       	pop	r4
     bf6:	08 95       	ret

00000bf8 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     bf8:	2f 92       	push	r2
     bfa:	3f 92       	push	r3
     bfc:	4f 92       	push	r4
     bfe:	5f 92       	push	r5
     c00:	6f 92       	push	r6
     c02:	7f 92       	push	r7
     c04:	8f 92       	push	r8
     c06:	9f 92       	push	r9
     c08:	af 92       	push	r10
     c0a:	bf 92       	push	r11
     c0c:	cf 92       	push	r12
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	ec 01       	movw	r28, r24
     c1c:	3b 01       	movw	r6, r22
     c1e:	49 01       	movw	r8, r18
     c20:	5a 01       	movw	r10, r20
     c22:	17 01       	movw	r2, r14
     c24:	28 01       	movw	r4, r16
     c26:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     c28:	0c 2d       	mov	r16, r12
     c2a:	a2 01       	movw	r20, r4
     c2c:	91 01       	movw	r18, r2
     c2e:	c5 01       	movw	r24, r10
     c30:	b4 01       	movw	r22, r8
     c32:	b5 df       	rcall	.-150    	; 0xb9e <calc_bscale>
     c34:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     c36:	08 2f       	mov	r16, r24
     c38:	a2 01       	movw	r20, r4
     c3a:	91 01       	movw	r18, r2
     c3c:	c5 01       	movw	r24, r10
     c3e:	b4 01       	movw	r22, r8
     c40:	13 df       	rcall	.-474    	; 0xa68 <calc_bsel>
     c42:	b8 2e       	mov	r11, r24
     c44:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     c46:	41 e0       	ldi	r20, 0x01	; 1
     c48:	b3 01       	movw	r22, r6
     c4a:	ce 01       	movw	r24, r28
     c4c:	32 d0       	rcall	.+100    	; 0xcb2 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     c4e:	e8 81       	ld	r30, Y
     c50:	f9 81       	ldd	r31, Y+1	; 0x01
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     c56:	e8 81       	ld	r30, Y
     c58:	f9 81       	ldd	r31, Y+1	; 0x01
     c5a:	84 81       	ldd	r24, Z+4	; 0x04
     c5c:	80 61       	ori	r24, 0x10	; 16
     c5e:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     c60:	e8 81       	ld	r30, Y
     c62:	f9 81       	ldd	r31, Y+1	; 0x01
     c64:	84 81       	ldd	r24, Z+4	; 0x04
     c66:	88 60       	ori	r24, 0x08	; 8
     c68:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     c6a:	e8 81       	ld	r30, Y
     c6c:	f9 81       	ldd	r31, Y+1	; 0x01
     c6e:	83 81       	ldd	r24, Z+3	; 0x03
     c70:	8f 7c       	andi	r24, 0xCF	; 207
     c72:	80 61       	ori	r24, 0x10	; 16
     c74:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     c76:	e8 81       	ld	r30, Y
     c78:	f9 81       	ldd	r31, Y+1	; 0x01
     c7a:	b6 82       	std	Z+6, r11	; 0x06
     c7c:	e8 81       	ld	r30, Y
     c7e:	f9 81       	ldd	r31, Y+1	; 0x01
     c80:	12 95       	swap	r17
     c82:	10 7f       	andi	r17, 0xF0	; 240
     c84:	e1 2a       	or	r14, r17
     c86:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
     c88:	88 81       	ld	r24, Y
     c8a:	99 81       	ldd	r25, Y+1	; 0x01
     c8c:	b7 de       	rcall	.-658    	; 0x9fc <set_usart_txrx_direction>
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	cf 90       	pop	r12
     c9c:	bf 90       	pop	r11
     c9e:	af 90       	pop	r10
     ca0:	9f 90       	pop	r9
     ca2:	8f 90       	pop	r8
     ca4:	7f 90       	pop	r7
     ca6:	6f 90       	pop	r6
     ca8:	5f 90       	pop	r5
     caa:	4f 90       	pop	r4
     cac:	3f 90       	pop	r3
     cae:	2f 90       	pop	r2
     cb0:	08 95       	ret

00000cb2 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     cb2:	fc 01       	movw	r30, r24
     cb4:	60 83       	st	Z, r22
     cb6:	71 83       	std	Z+1, r23	; 0x01
     cb8:	42 83       	std	Z+2, r20	; 0x02
     cba:	ec 57       	subi	r30, 0x7C	; 124
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	10 82       	st	Z, r1
     cc0:	fc 01       	movw	r30, r24
     cc2:	ed 57       	subi	r30, 0x7D	; 125
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	10 82       	st	Z, r1
     cc8:	fc 01       	movw	r30, r24
     cca:	ea 57       	subi	r30, 0x7A	; 122
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	10 82       	st	Z, r1
     cd0:	fc 01       	movw	r30, r24
     cd2:	eb 57       	subi	r30, 0x7B	; 123
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	10 82       	st	Z, r1
     cd8:	08 95       	ret

00000cda <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     cda:	fc 01       	movw	r30, r24
     cdc:	eb 57       	subi	r30, 0x7B	; 123
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     ce2:	fc 01       	movw	r30, r24
     ce4:	ea 57       	subi	r30, 0x7A	; 122
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	90 81       	ld	r25, Z
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     cea:	2f 5f       	subi	r18, 0xFF	; 255
     cec:	2f 73       	andi	r18, 0x3F	; 63
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	29 13       	cpse	r18, r25
     cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <USART_TXBuffer_FreeSpace+0x1c>
     cf4:	80 e0       	ldi	r24, 0x00	; 0
}
     cf6:	08 95       	ret

00000cf8 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
     d00:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
     d02:	eb df       	rcall	.-42     	; 0xcda <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
     d04:	88 23       	and	r24, r24
     d06:	a1 f0       	breq	.+40     	; 0xd30 <USART_TXBuffer_PutByte+0x38>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     d08:	fe 01       	movw	r30, r28
     d0a:	eb 57       	subi	r30, 0x7B	; 123
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	90 81       	ld	r25, Z
	  	TXbufPtr->TX[tempTX_Head]= data;
     d10:	de 01       	movw	r26, r28
     d12:	a9 0f       	add	r26, r25
     d14:	b1 1d       	adc	r27, r1
     d16:	ad 5b       	subi	r26, 0xBD	; 189
     d18:	bf 4f       	sbci	r27, 0xFF	; 255
     d1a:	1c 93       	st	X, r17
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     d1c:	9f 5f       	subi	r25, 0xFF	; 255
     d1e:	9f 73       	andi	r25, 0x3F	; 63
     d20:	90 83       	st	Z, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     d22:	e8 81       	ld	r30, Y
     d24:	f9 81       	ldd	r31, Y+1	; 0x01
     d26:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     d28:	9c 7f       	andi	r25, 0xFC	; 252
     d2a:	2a 81       	ldd	r18, Y+2	; 0x02
     d2c:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     d2e:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	08 95       	ret

00000d38 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     d38:	fc 01       	movw	r30, r24
     d3a:	ed 57       	subi	r30, 0x7D	; 125
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     d40:	fc 01       	movw	r30, r24
     d42:	ec 57       	subi	r30, 0x7C	; 124
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	29 13       	cpse	r18, r25
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <USART_RXBufferData_Available+0x18>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
}
     d50:	08 95       	ret

00000d52 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     d52:	fc 01       	movw	r30, r24
     d54:	ec 57       	subi	r30, 0x7C	; 124
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	20 81       	ld	r18, Z
     d5a:	dc 01       	movw	r26, r24
     d5c:	a2 0f       	add	r26, r18
     d5e:	b1 1d       	adc	r27, r1
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     d64:	90 81       	ld	r25, Z
     d66:	9f 5f       	subi	r25, 0xFF	; 255
     d68:	9f 73       	andi	r25, 0x3F	; 63
     d6a:	90 83       	st	Z, r25

	return ans;
}
     d6c:	08 95       	ret

00000d6e <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     d6e:	fc 01       	movw	r30, r24
     d70:	ed 57       	subi	r30, 0x7D	; 125
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	20 81       	ld	r18, Z
     d76:	2f 5f       	subi	r18, 0xFF	; 255
     d78:	2f 73       	andi	r18, 0x3F	; 63

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     d7a:	fc 01       	movw	r30, r24
     d7c:	ec 57       	subi	r30, 0x7C	; 124
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     d82:	dc 01       	movw	r26, r24
     d84:	ed 91       	ld	r30, X+
     d86:	fc 91       	ld	r31, X
     d88:	11 97       	sbiw	r26, 0x01	; 1
     d8a:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     d8c:	23 17       	cp	r18, r19
     d8e:	59 f0       	breq	.+22     	; 0xda6 <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     d90:	fc 01       	movw	r30, r24
     d92:	ed 57       	subi	r30, 0x7D	; 125
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	30 81       	ld	r19, Z
     d98:	a3 0f       	add	r26, r19
     d9a:	b1 1d       	adc	r27, r1
     d9c:	13 96       	adiw	r26, 0x03	; 3
     d9e:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     da0:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     da6:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     da8:	08 95       	ret

00000daa <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     dae:	fc 01       	movw	r30, r24
     db0:	ea 57       	subi	r30, 0x7A	; 122
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	20 81       	ld	r18, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     db6:	fc 01       	movw	r30, r24
     db8:	eb 57       	subi	r30, 0x7B	; 123
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	30 81       	ld	r19, Z
     dbe:	32 13       	cpse	r19, r18
     dc0:	07 c0       	rjmp	.+14     	; 0xdd0 <USART_DataRegEmpty+0x26>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     dc2:	dc 01       	movw	r26, r24
     dc4:	ed 91       	ld	r30, X+
     dc6:	fc 91       	ld	r31, X
     dc8:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     dca:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     dcc:	83 83       	std	Z+3, r24	; 0x03
     dce:	12 c0       	rjmp	.+36     	; 0xdf4 <USART_DataRegEmpty+0x4a>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     dd0:	fc 01       	movw	r30, r24
     dd2:	ea 57       	subi	r30, 0x7A	; 122
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	20 81       	ld	r18, Z
     dd8:	dc 01       	movw	r26, r24
     dda:	a2 0f       	add	r26, r18
     ddc:	b1 1d       	adc	r27, r1
     dde:	ad 5b       	subi	r26, 0xBD	; 189
     de0:	bf 4f       	sbci	r27, 0xFF	; 255
     de2:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
     de4:	ec 01       	movw	r28, r24
     de6:	a8 81       	ld	r26, Y
     de8:	b9 81       	ldd	r27, Y+1	; 0x01
     dea:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     dec:	80 81       	ld	r24, Z
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	8f 73       	andi	r24, 0x3F	; 63
     df2:	80 83       	st	Z, r24
	}
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <__subsf3>:
     dfa:	50 58       	subi	r21, 0x80	; 128

00000dfc <__addsf3>:
     dfc:	bb 27       	eor	r27, r27
     dfe:	aa 27       	eor	r26, r26
     e00:	0e d0       	rcall	.+28     	; 0xe1e <__addsf3x>
     e02:	48 c1       	rjmp	.+656    	; 0x1094 <__fp_round>
     e04:	39 d1       	rcall	.+626    	; 0x1078 <__fp_pscA>
     e06:	30 f0       	brcs	.+12     	; 0xe14 <__addsf3+0x18>
     e08:	3e d1       	rcall	.+636    	; 0x1086 <__fp_pscB>
     e0a:	20 f0       	brcs	.+8      	; 0xe14 <__addsf3+0x18>
     e0c:	31 f4       	brne	.+12     	; 0xe1a <__addsf3+0x1e>
     e0e:	9f 3f       	cpi	r25, 0xFF	; 255
     e10:	11 f4       	brne	.+4      	; 0xe16 <__addsf3+0x1a>
     e12:	1e f4       	brtc	.+6      	; 0xe1a <__addsf3+0x1e>
     e14:	2e c1       	rjmp	.+604    	; 0x1072 <__fp_nan>
     e16:	0e f4       	brtc	.+2      	; 0xe1a <__addsf3+0x1e>
     e18:	e0 95       	com	r30
     e1a:	e7 fb       	bst	r30, 7
     e1c:	24 c1       	rjmp	.+584    	; 0x1066 <__fp_inf>

00000e1e <__addsf3x>:
     e1e:	e9 2f       	mov	r30, r25
     e20:	4a d1       	rcall	.+660    	; 0x10b6 <__fp_split3>
     e22:	80 f3       	brcs	.-32     	; 0xe04 <__addsf3+0x8>
     e24:	ba 17       	cp	r27, r26
     e26:	62 07       	cpc	r22, r18
     e28:	73 07       	cpc	r23, r19
     e2a:	84 07       	cpc	r24, r20
     e2c:	95 07       	cpc	r25, r21
     e2e:	18 f0       	brcs	.+6      	; 0xe36 <__addsf3x+0x18>
     e30:	71 f4       	brne	.+28     	; 0xe4e <__addsf3x+0x30>
     e32:	9e f5       	brtc	.+102    	; 0xe9a <__addsf3x+0x7c>
     e34:	62 c1       	rjmp	.+708    	; 0x10fa <__fp_zero>
     e36:	0e f4       	brtc	.+2      	; 0xe3a <__addsf3x+0x1c>
     e38:	e0 95       	com	r30
     e3a:	0b 2e       	mov	r0, r27
     e3c:	ba 2f       	mov	r27, r26
     e3e:	a0 2d       	mov	r26, r0
     e40:	0b 01       	movw	r0, r22
     e42:	b9 01       	movw	r22, r18
     e44:	90 01       	movw	r18, r0
     e46:	0c 01       	movw	r0, r24
     e48:	ca 01       	movw	r24, r20
     e4a:	a0 01       	movw	r20, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	ff 27       	eor	r31, r31
     e50:	59 1b       	sub	r21, r25
     e52:	99 f0       	breq	.+38     	; 0xe7a <__addsf3x+0x5c>
     e54:	59 3f       	cpi	r21, 0xF9	; 249
     e56:	50 f4       	brcc	.+20     	; 0xe6c <__addsf3x+0x4e>
     e58:	50 3e       	cpi	r21, 0xE0	; 224
     e5a:	68 f1       	brcs	.+90     	; 0xeb6 <__addsf3x+0x98>
     e5c:	1a 16       	cp	r1, r26
     e5e:	f0 40       	sbci	r31, 0x00	; 0
     e60:	a2 2f       	mov	r26, r18
     e62:	23 2f       	mov	r18, r19
     e64:	34 2f       	mov	r19, r20
     e66:	44 27       	eor	r20, r20
     e68:	58 5f       	subi	r21, 0xF8	; 248
     e6a:	f3 cf       	rjmp	.-26     	; 0xe52 <__addsf3x+0x34>
     e6c:	46 95       	lsr	r20
     e6e:	37 95       	ror	r19
     e70:	27 95       	ror	r18
     e72:	a7 95       	ror	r26
     e74:	f0 40       	sbci	r31, 0x00	; 0
     e76:	53 95       	inc	r21
     e78:	c9 f7       	brne	.-14     	; 0xe6c <__addsf3x+0x4e>
     e7a:	7e f4       	brtc	.+30     	; 0xe9a <__addsf3x+0x7c>
     e7c:	1f 16       	cp	r1, r31
     e7e:	ba 0b       	sbc	r27, r26
     e80:	62 0b       	sbc	r22, r18
     e82:	73 0b       	sbc	r23, r19
     e84:	84 0b       	sbc	r24, r20
     e86:	ba f0       	brmi	.+46     	; 0xeb6 <__addsf3x+0x98>
     e88:	91 50       	subi	r25, 0x01	; 1
     e8a:	a1 f0       	breq	.+40     	; 0xeb4 <__addsf3x+0x96>
     e8c:	ff 0f       	add	r31, r31
     e8e:	bb 1f       	adc	r27, r27
     e90:	66 1f       	adc	r22, r22
     e92:	77 1f       	adc	r23, r23
     e94:	88 1f       	adc	r24, r24
     e96:	c2 f7       	brpl	.-16     	; 0xe88 <__addsf3x+0x6a>
     e98:	0e c0       	rjmp	.+28     	; 0xeb6 <__addsf3x+0x98>
     e9a:	ba 0f       	add	r27, r26
     e9c:	62 1f       	adc	r22, r18
     e9e:	73 1f       	adc	r23, r19
     ea0:	84 1f       	adc	r24, r20
     ea2:	48 f4       	brcc	.+18     	; 0xeb6 <__addsf3x+0x98>
     ea4:	87 95       	ror	r24
     ea6:	77 95       	ror	r23
     ea8:	67 95       	ror	r22
     eaa:	b7 95       	ror	r27
     eac:	f7 95       	ror	r31
     eae:	9e 3f       	cpi	r25, 0xFE	; 254
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <__addsf3x+0x96>
     eb2:	b3 cf       	rjmp	.-154    	; 0xe1a <__addsf3+0x1e>
     eb4:	93 95       	inc	r25
     eb6:	88 0f       	add	r24, r24
     eb8:	08 f0       	brcs	.+2      	; 0xebc <__addsf3x+0x9e>
     eba:	99 27       	eor	r25, r25
     ebc:	ee 0f       	add	r30, r30
     ebe:	97 95       	ror	r25
     ec0:	87 95       	ror	r24
     ec2:	08 95       	ret

00000ec4 <__divsf3>:
     ec4:	0c d0       	rcall	.+24     	; 0xede <__divsf3x>
     ec6:	e6 c0       	rjmp	.+460    	; 0x1094 <__fp_round>
     ec8:	de d0       	rcall	.+444    	; 0x1086 <__fp_pscB>
     eca:	40 f0       	brcs	.+16     	; 0xedc <__divsf3+0x18>
     ecc:	d5 d0       	rcall	.+426    	; 0x1078 <__fp_pscA>
     ece:	30 f0       	brcs	.+12     	; 0xedc <__divsf3+0x18>
     ed0:	21 f4       	brne	.+8      	; 0xeda <__divsf3+0x16>
     ed2:	5f 3f       	cpi	r21, 0xFF	; 255
     ed4:	19 f0       	breq	.+6      	; 0xedc <__divsf3+0x18>
     ed6:	c7 c0       	rjmp	.+398    	; 0x1066 <__fp_inf>
     ed8:	51 11       	cpse	r21, r1
     eda:	10 c1       	rjmp	.+544    	; 0x10fc <__fp_szero>
     edc:	ca c0       	rjmp	.+404    	; 0x1072 <__fp_nan>

00000ede <__divsf3x>:
     ede:	eb d0       	rcall	.+470    	; 0x10b6 <__fp_split3>
     ee0:	98 f3       	brcs	.-26     	; 0xec8 <__divsf3+0x4>

00000ee2 <__divsf3_pse>:
     ee2:	99 23       	and	r25, r25
     ee4:	c9 f3       	breq	.-14     	; 0xed8 <__divsf3+0x14>
     ee6:	55 23       	and	r21, r21
     ee8:	b1 f3       	breq	.-20     	; 0xed6 <__divsf3+0x12>
     eea:	95 1b       	sub	r25, r21
     eec:	55 0b       	sbc	r21, r21
     eee:	bb 27       	eor	r27, r27
     ef0:	aa 27       	eor	r26, r26
     ef2:	62 17       	cp	r22, r18
     ef4:	73 07       	cpc	r23, r19
     ef6:	84 07       	cpc	r24, r20
     ef8:	38 f0       	brcs	.+14     	; 0xf08 <__divsf3_pse+0x26>
     efa:	9f 5f       	subi	r25, 0xFF	; 255
     efc:	5f 4f       	sbci	r21, 0xFF	; 255
     efe:	22 0f       	add	r18, r18
     f00:	33 1f       	adc	r19, r19
     f02:	44 1f       	adc	r20, r20
     f04:	aa 1f       	adc	r26, r26
     f06:	a9 f3       	breq	.-22     	; 0xef2 <__divsf3_pse+0x10>
     f08:	33 d0       	rcall	.+102    	; 0xf70 <__divsf3_pse+0x8e>
     f0a:	0e 2e       	mov	r0, r30
     f0c:	3a f0       	brmi	.+14     	; 0xf1c <__divsf3_pse+0x3a>
     f0e:	e0 e8       	ldi	r30, 0x80	; 128
     f10:	30 d0       	rcall	.+96     	; 0xf72 <__divsf3_pse+0x90>
     f12:	91 50       	subi	r25, 0x01	; 1
     f14:	50 40       	sbci	r21, 0x00	; 0
     f16:	e6 95       	lsr	r30
     f18:	00 1c       	adc	r0, r0
     f1a:	ca f7       	brpl	.-14     	; 0xf0e <__divsf3_pse+0x2c>
     f1c:	29 d0       	rcall	.+82     	; 0xf70 <__divsf3_pse+0x8e>
     f1e:	fe 2f       	mov	r31, r30
     f20:	27 d0       	rcall	.+78     	; 0xf70 <__divsf3_pse+0x8e>
     f22:	66 0f       	add	r22, r22
     f24:	77 1f       	adc	r23, r23
     f26:	88 1f       	adc	r24, r24
     f28:	bb 1f       	adc	r27, r27
     f2a:	26 17       	cp	r18, r22
     f2c:	37 07       	cpc	r19, r23
     f2e:	48 07       	cpc	r20, r24
     f30:	ab 07       	cpc	r26, r27
     f32:	b0 e8       	ldi	r27, 0x80	; 128
     f34:	09 f0       	breq	.+2      	; 0xf38 <__divsf3_pse+0x56>
     f36:	bb 0b       	sbc	r27, r27
     f38:	80 2d       	mov	r24, r0
     f3a:	bf 01       	movw	r22, r30
     f3c:	ff 27       	eor	r31, r31
     f3e:	93 58       	subi	r25, 0x83	; 131
     f40:	5f 4f       	sbci	r21, 0xFF	; 255
     f42:	2a f0       	brmi	.+10     	; 0xf4e <__divsf3_pse+0x6c>
     f44:	9e 3f       	cpi	r25, 0xFE	; 254
     f46:	51 05       	cpc	r21, r1
     f48:	68 f0       	brcs	.+26     	; 0xf64 <__divsf3_pse+0x82>
     f4a:	8d c0       	rjmp	.+282    	; 0x1066 <__fp_inf>
     f4c:	d7 c0       	rjmp	.+430    	; 0x10fc <__fp_szero>
     f4e:	5f 3f       	cpi	r21, 0xFF	; 255
     f50:	ec f3       	brlt	.-6      	; 0xf4c <__divsf3_pse+0x6a>
     f52:	98 3e       	cpi	r25, 0xE8	; 232
     f54:	dc f3       	brlt	.-10     	; 0xf4c <__divsf3_pse+0x6a>
     f56:	86 95       	lsr	r24
     f58:	77 95       	ror	r23
     f5a:	67 95       	ror	r22
     f5c:	b7 95       	ror	r27
     f5e:	f7 95       	ror	r31
     f60:	9f 5f       	subi	r25, 0xFF	; 255
     f62:	c9 f7       	brne	.-14     	; 0xf56 <__divsf3_pse+0x74>
     f64:	88 0f       	add	r24, r24
     f66:	91 1d       	adc	r25, r1
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24
     f6c:	97 f9       	bld	r25, 7
     f6e:	08 95       	ret
     f70:	e1 e0       	ldi	r30, 0x01	; 1
     f72:	66 0f       	add	r22, r22
     f74:	77 1f       	adc	r23, r23
     f76:	88 1f       	adc	r24, r24
     f78:	bb 1f       	adc	r27, r27
     f7a:	62 17       	cp	r22, r18
     f7c:	73 07       	cpc	r23, r19
     f7e:	84 07       	cpc	r24, r20
     f80:	ba 07       	cpc	r27, r26
     f82:	20 f0       	brcs	.+8      	; 0xf8c <__divsf3_pse+0xaa>
     f84:	62 1b       	sub	r22, r18
     f86:	73 0b       	sbc	r23, r19
     f88:	84 0b       	sbc	r24, r20
     f8a:	ba 0b       	sbc	r27, r26
     f8c:	ee 1f       	adc	r30, r30
     f8e:	88 f7       	brcc	.-30     	; 0xf72 <__divsf3_pse+0x90>
     f90:	e0 95       	com	r30
     f92:	08 95       	ret

00000f94 <__fixunssfsi>:
     f94:	98 d0       	rcall	.+304    	; 0x10c6 <__fp_splitA>
     f96:	88 f0       	brcs	.+34     	; 0xfba <__fixunssfsi+0x26>
     f98:	9f 57       	subi	r25, 0x7F	; 127
     f9a:	90 f0       	brcs	.+36     	; 0xfc0 <__fixunssfsi+0x2c>
     f9c:	b9 2f       	mov	r27, r25
     f9e:	99 27       	eor	r25, r25
     fa0:	b7 51       	subi	r27, 0x17	; 23
     fa2:	a0 f0       	brcs	.+40     	; 0xfcc <__fixunssfsi+0x38>
     fa4:	d1 f0       	breq	.+52     	; 0xfda <__fixunssfsi+0x46>
     fa6:	66 0f       	add	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	1a f0       	brmi	.+6      	; 0xfb6 <__fixunssfsi+0x22>
     fb0:	ba 95       	dec	r27
     fb2:	c9 f7       	brne	.-14     	; 0xfa6 <__fixunssfsi+0x12>
     fb4:	12 c0       	rjmp	.+36     	; 0xfda <__fixunssfsi+0x46>
     fb6:	b1 30       	cpi	r27, 0x01	; 1
     fb8:	81 f0       	breq	.+32     	; 0xfda <__fixunssfsi+0x46>
     fba:	9f d0       	rcall	.+318    	; 0x10fa <__fp_zero>
     fbc:	b1 e0       	ldi	r27, 0x01	; 1
     fbe:	08 95       	ret
     fc0:	9c c0       	rjmp	.+312    	; 0x10fa <__fp_zero>
     fc2:	67 2f       	mov	r22, r23
     fc4:	78 2f       	mov	r23, r24
     fc6:	88 27       	eor	r24, r24
     fc8:	b8 5f       	subi	r27, 0xF8	; 248
     fca:	39 f0       	breq	.+14     	; 0xfda <__fixunssfsi+0x46>
     fcc:	b9 3f       	cpi	r27, 0xF9	; 249
     fce:	cc f3       	brlt	.-14     	; 0xfc2 <__fixunssfsi+0x2e>
     fd0:	86 95       	lsr	r24
     fd2:	77 95       	ror	r23
     fd4:	67 95       	ror	r22
     fd6:	b3 95       	inc	r27
     fd8:	d9 f7       	brne	.-10     	; 0xfd0 <__fixunssfsi+0x3c>
     fda:	3e f4       	brtc	.+14     	; 0xfea <__fixunssfsi+0x56>
     fdc:	90 95       	com	r25
     fde:	80 95       	com	r24
     fe0:	70 95       	com	r23
     fe2:	61 95       	neg	r22
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	8f 4f       	sbci	r24, 0xFF	; 255
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	08 95       	ret

00000fec <__floatunsisf>:
     fec:	e8 94       	clt
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <__floatsisf+0x12>

00000ff0 <__floatsisf>:
     ff0:	97 fb       	bst	r25, 7
     ff2:	3e f4       	brtc	.+14     	; 0x1002 <__floatsisf+0x12>
     ff4:	90 95       	com	r25
     ff6:	80 95       	com	r24
     ff8:	70 95       	com	r23
     ffa:	61 95       	neg	r22
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	99 23       	and	r25, r25
    1004:	a9 f0       	breq	.+42     	; 0x1030 <__floatsisf+0x40>
    1006:	f9 2f       	mov	r31, r25
    1008:	96 e9       	ldi	r25, 0x96	; 150
    100a:	bb 27       	eor	r27, r27
    100c:	93 95       	inc	r25
    100e:	f6 95       	lsr	r31
    1010:	87 95       	ror	r24
    1012:	77 95       	ror	r23
    1014:	67 95       	ror	r22
    1016:	b7 95       	ror	r27
    1018:	f1 11       	cpse	r31, r1
    101a:	f8 cf       	rjmp	.-16     	; 0x100c <__floatsisf+0x1c>
    101c:	fa f4       	brpl	.+62     	; 0x105c <__floatsisf+0x6c>
    101e:	bb 0f       	add	r27, r27
    1020:	11 f4       	brne	.+4      	; 0x1026 <__floatsisf+0x36>
    1022:	60 ff       	sbrs	r22, 0
    1024:	1b c0       	rjmp	.+54     	; 0x105c <__floatsisf+0x6c>
    1026:	6f 5f       	subi	r22, 0xFF	; 255
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	8f 4f       	sbci	r24, 0xFF	; 255
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	16 c0       	rjmp	.+44     	; 0x105c <__floatsisf+0x6c>
    1030:	88 23       	and	r24, r24
    1032:	11 f0       	breq	.+4      	; 0x1038 <__floatsisf+0x48>
    1034:	96 e9       	ldi	r25, 0x96	; 150
    1036:	11 c0       	rjmp	.+34     	; 0x105a <__floatsisf+0x6a>
    1038:	77 23       	and	r23, r23
    103a:	21 f0       	breq	.+8      	; 0x1044 <__floatsisf+0x54>
    103c:	9e e8       	ldi	r25, 0x8E	; 142
    103e:	87 2f       	mov	r24, r23
    1040:	76 2f       	mov	r23, r22
    1042:	05 c0       	rjmp	.+10     	; 0x104e <__floatsisf+0x5e>
    1044:	66 23       	and	r22, r22
    1046:	71 f0       	breq	.+28     	; 0x1064 <__floatsisf+0x74>
    1048:	96 e8       	ldi	r25, 0x86	; 134
    104a:	86 2f       	mov	r24, r22
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	2a f0       	brmi	.+10     	; 0x105c <__floatsisf+0x6c>
    1052:	9a 95       	dec	r25
    1054:	66 0f       	add	r22, r22
    1056:	77 1f       	adc	r23, r23
    1058:	88 1f       	adc	r24, r24
    105a:	da f7       	brpl	.-10     	; 0x1052 <__floatsisf+0x62>
    105c:	88 0f       	add	r24, r24
    105e:	96 95       	lsr	r25
    1060:	87 95       	ror	r24
    1062:	97 f9       	bld	r25, 7
    1064:	08 95       	ret

00001066 <__fp_inf>:
    1066:	97 f9       	bld	r25, 7
    1068:	9f 67       	ori	r25, 0x7F	; 127
    106a:	80 e8       	ldi	r24, 0x80	; 128
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	08 95       	ret

00001072 <__fp_nan>:
    1072:	9f ef       	ldi	r25, 0xFF	; 255
    1074:	80 ec       	ldi	r24, 0xC0	; 192
    1076:	08 95       	ret

00001078 <__fp_pscA>:
    1078:	00 24       	eor	r0, r0
    107a:	0a 94       	dec	r0
    107c:	16 16       	cp	r1, r22
    107e:	17 06       	cpc	r1, r23
    1080:	18 06       	cpc	r1, r24
    1082:	09 06       	cpc	r0, r25
    1084:	08 95       	ret

00001086 <__fp_pscB>:
    1086:	00 24       	eor	r0, r0
    1088:	0a 94       	dec	r0
    108a:	12 16       	cp	r1, r18
    108c:	13 06       	cpc	r1, r19
    108e:	14 06       	cpc	r1, r20
    1090:	05 06       	cpc	r0, r21
    1092:	08 95       	ret

00001094 <__fp_round>:
    1094:	09 2e       	mov	r0, r25
    1096:	03 94       	inc	r0
    1098:	00 0c       	add	r0, r0
    109a:	11 f4       	brne	.+4      	; 0x10a0 <__fp_round+0xc>
    109c:	88 23       	and	r24, r24
    109e:	52 f0       	brmi	.+20     	; 0x10b4 <__fp_round+0x20>
    10a0:	bb 0f       	add	r27, r27
    10a2:	40 f4       	brcc	.+16     	; 0x10b4 <__fp_round+0x20>
    10a4:	bf 2b       	or	r27, r31
    10a6:	11 f4       	brne	.+4      	; 0x10ac <__fp_round+0x18>
    10a8:	60 ff       	sbrs	r22, 0
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <__fp_round+0x20>
    10ac:	6f 5f       	subi	r22, 0xFF	; 255
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	8f 4f       	sbci	r24, 0xFF	; 255
    10b2:	9f 4f       	sbci	r25, 0xFF	; 255
    10b4:	08 95       	ret

000010b6 <__fp_split3>:
    10b6:	57 fd       	sbrc	r21, 7
    10b8:	90 58       	subi	r25, 0x80	; 128
    10ba:	44 0f       	add	r20, r20
    10bc:	55 1f       	adc	r21, r21
    10be:	59 f0       	breq	.+22     	; 0x10d6 <__fp_splitA+0x10>
    10c0:	5f 3f       	cpi	r21, 0xFF	; 255
    10c2:	71 f0       	breq	.+28     	; 0x10e0 <__fp_splitA+0x1a>
    10c4:	47 95       	ror	r20

000010c6 <__fp_splitA>:
    10c6:	88 0f       	add	r24, r24
    10c8:	97 fb       	bst	r25, 7
    10ca:	99 1f       	adc	r25, r25
    10cc:	61 f0       	breq	.+24     	; 0x10e6 <__fp_splitA+0x20>
    10ce:	9f 3f       	cpi	r25, 0xFF	; 255
    10d0:	79 f0       	breq	.+30     	; 0x10f0 <__fp_splitA+0x2a>
    10d2:	87 95       	ror	r24
    10d4:	08 95       	ret
    10d6:	12 16       	cp	r1, r18
    10d8:	13 06       	cpc	r1, r19
    10da:	14 06       	cpc	r1, r20
    10dc:	55 1f       	adc	r21, r21
    10de:	f2 cf       	rjmp	.-28     	; 0x10c4 <__fp_split3+0xe>
    10e0:	46 95       	lsr	r20
    10e2:	f1 df       	rcall	.-30     	; 0x10c6 <__fp_splitA>
    10e4:	08 c0       	rjmp	.+16     	; 0x10f6 <__fp_splitA+0x30>
    10e6:	16 16       	cp	r1, r22
    10e8:	17 06       	cpc	r1, r23
    10ea:	18 06       	cpc	r1, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	f1 cf       	rjmp	.-30     	; 0x10d2 <__fp_splitA+0xc>
    10f0:	86 95       	lsr	r24
    10f2:	71 05       	cpc	r23, r1
    10f4:	61 05       	cpc	r22, r1
    10f6:	08 94       	sec
    10f8:	08 95       	ret

000010fa <__fp_zero>:
    10fa:	e8 94       	clt

000010fc <__fp_szero>:
    10fc:	bb 27       	eor	r27, r27
    10fe:	66 27       	eor	r22, r22
    1100:	77 27       	eor	r23, r23
    1102:	cb 01       	movw	r24, r22
    1104:	97 f9       	bld	r25, 7
    1106:	08 95       	ret

00001108 <__mulsf3>:
    1108:	0b d0       	rcall	.+22     	; 0x1120 <__mulsf3x>
    110a:	c4 cf       	rjmp	.-120    	; 0x1094 <__fp_round>
    110c:	b5 df       	rcall	.-150    	; 0x1078 <__fp_pscA>
    110e:	28 f0       	brcs	.+10     	; 0x111a <__mulsf3+0x12>
    1110:	ba df       	rcall	.-140    	; 0x1086 <__fp_pscB>
    1112:	18 f0       	brcs	.+6      	; 0x111a <__mulsf3+0x12>
    1114:	95 23       	and	r25, r21
    1116:	09 f0       	breq	.+2      	; 0x111a <__mulsf3+0x12>
    1118:	a6 cf       	rjmp	.-180    	; 0x1066 <__fp_inf>
    111a:	ab cf       	rjmp	.-170    	; 0x1072 <__fp_nan>
    111c:	11 24       	eor	r1, r1
    111e:	ee cf       	rjmp	.-36     	; 0x10fc <__fp_szero>

00001120 <__mulsf3x>:
    1120:	ca df       	rcall	.-108    	; 0x10b6 <__fp_split3>
    1122:	a0 f3       	brcs	.-24     	; 0x110c <__mulsf3+0x4>

00001124 <__mulsf3_pse>:
    1124:	95 9f       	mul	r25, r21
    1126:	d1 f3       	breq	.-12     	; 0x111c <__mulsf3+0x14>
    1128:	95 0f       	add	r25, r21
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	55 1f       	adc	r21, r21
    112e:	62 9f       	mul	r22, r18
    1130:	f0 01       	movw	r30, r0
    1132:	72 9f       	mul	r23, r18
    1134:	bb 27       	eor	r27, r27
    1136:	f0 0d       	add	r31, r0
    1138:	b1 1d       	adc	r27, r1
    113a:	63 9f       	mul	r22, r19
    113c:	aa 27       	eor	r26, r26
    113e:	f0 0d       	add	r31, r0
    1140:	b1 1d       	adc	r27, r1
    1142:	aa 1f       	adc	r26, r26
    1144:	64 9f       	mul	r22, r20
    1146:	66 27       	eor	r22, r22
    1148:	b0 0d       	add	r27, r0
    114a:	a1 1d       	adc	r26, r1
    114c:	66 1f       	adc	r22, r22
    114e:	82 9f       	mul	r24, r18
    1150:	22 27       	eor	r18, r18
    1152:	b0 0d       	add	r27, r0
    1154:	a1 1d       	adc	r26, r1
    1156:	62 1f       	adc	r22, r18
    1158:	73 9f       	mul	r23, r19
    115a:	b0 0d       	add	r27, r0
    115c:	a1 1d       	adc	r26, r1
    115e:	62 1f       	adc	r22, r18
    1160:	83 9f       	mul	r24, r19
    1162:	a0 0d       	add	r26, r0
    1164:	61 1d       	adc	r22, r1
    1166:	22 1f       	adc	r18, r18
    1168:	74 9f       	mul	r23, r20
    116a:	33 27       	eor	r19, r19
    116c:	a0 0d       	add	r26, r0
    116e:	61 1d       	adc	r22, r1
    1170:	23 1f       	adc	r18, r19
    1172:	84 9f       	mul	r24, r20
    1174:	60 0d       	add	r22, r0
    1176:	21 1d       	adc	r18, r1
    1178:	82 2f       	mov	r24, r18
    117a:	76 2f       	mov	r23, r22
    117c:	6a 2f       	mov	r22, r26
    117e:	11 24       	eor	r1, r1
    1180:	9f 57       	subi	r25, 0x7F	; 127
    1182:	50 40       	sbci	r21, 0x00	; 0
    1184:	8a f0       	brmi	.+34     	; 0x11a8 <__mulsf3_pse+0x84>
    1186:	e1 f0       	breq	.+56     	; 0x11c0 <__mulsf3_pse+0x9c>
    1188:	88 23       	and	r24, r24
    118a:	4a f0       	brmi	.+18     	; 0x119e <__mulsf3_pse+0x7a>
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	bb 1f       	adc	r27, r27
    1192:	66 1f       	adc	r22, r22
    1194:	77 1f       	adc	r23, r23
    1196:	88 1f       	adc	r24, r24
    1198:	91 50       	subi	r25, 0x01	; 1
    119a:	50 40       	sbci	r21, 0x00	; 0
    119c:	a9 f7       	brne	.-22     	; 0x1188 <__mulsf3_pse+0x64>
    119e:	9e 3f       	cpi	r25, 0xFE	; 254
    11a0:	51 05       	cpc	r21, r1
    11a2:	70 f0       	brcs	.+28     	; 0x11c0 <__mulsf3_pse+0x9c>
    11a4:	60 cf       	rjmp	.-320    	; 0x1066 <__fp_inf>
    11a6:	aa cf       	rjmp	.-172    	; 0x10fc <__fp_szero>
    11a8:	5f 3f       	cpi	r21, 0xFF	; 255
    11aa:	ec f3       	brlt	.-6      	; 0x11a6 <__mulsf3_pse+0x82>
    11ac:	98 3e       	cpi	r25, 0xE8	; 232
    11ae:	dc f3       	brlt	.-10     	; 0x11a6 <__mulsf3_pse+0x82>
    11b0:	86 95       	lsr	r24
    11b2:	77 95       	ror	r23
    11b4:	67 95       	ror	r22
    11b6:	b7 95       	ror	r27
    11b8:	f7 95       	ror	r31
    11ba:	e7 95       	ror	r30
    11bc:	9f 5f       	subi	r25, 0xFF	; 255
    11be:	c1 f7       	brne	.-16     	; 0x11b0 <__mulsf3_pse+0x8c>
    11c0:	fe 2b       	or	r31, r30
    11c2:	88 0f       	add	r24, r24
    11c4:	91 1d       	adc	r25, r1
    11c6:	96 95       	lsr	r25
    11c8:	87 95       	ror	r24
    11ca:	97 f9       	bld	r25, 7
    11cc:	08 95       	ret

000011ce <round>:
    11ce:	7b df       	rcall	.-266    	; 0x10c6 <__fp_splitA>
    11d0:	e0 f0       	brcs	.+56     	; 0x120a <round+0x3c>
    11d2:	9e 37       	cpi	r25, 0x7E	; 126
    11d4:	d8 f0       	brcs	.+54     	; 0x120c <round+0x3e>
    11d6:	96 39       	cpi	r25, 0x96	; 150
    11d8:	b8 f4       	brcc	.+46     	; 0x1208 <round+0x3a>
    11da:	9e 38       	cpi	r25, 0x8E	; 142
    11dc:	48 f4       	brcc	.+18     	; 0x11f0 <round+0x22>
    11de:	67 2f       	mov	r22, r23
    11e0:	78 2f       	mov	r23, r24
    11e2:	88 27       	eor	r24, r24
    11e4:	98 5f       	subi	r25, 0xF8	; 248
    11e6:	f9 cf       	rjmp	.-14     	; 0x11da <round+0xc>
    11e8:	86 95       	lsr	r24
    11ea:	77 95       	ror	r23
    11ec:	67 95       	ror	r22
    11ee:	93 95       	inc	r25
    11f0:	95 39       	cpi	r25, 0x95	; 149
    11f2:	d0 f3       	brcs	.-12     	; 0x11e8 <round+0x1a>
    11f4:	b6 2f       	mov	r27, r22
    11f6:	b1 70       	andi	r27, 0x01	; 1
    11f8:	6b 0f       	add	r22, r27
    11fa:	71 1d       	adc	r23, r1
    11fc:	81 1d       	adc	r24, r1
    11fe:	20 f4       	brcc	.+8      	; 0x1208 <round+0x3a>
    1200:	87 95       	ror	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	93 95       	inc	r25
    1208:	02 c0       	rjmp	.+4      	; 0x120e <__fp_mintl>
    120a:	1c c0       	rjmp	.+56     	; 0x1244 <__fp_mpack>
    120c:	77 cf       	rjmp	.-274    	; 0x10fc <__fp_szero>

0000120e <__fp_mintl>:
    120e:	88 23       	and	r24, r24
    1210:	71 f4       	brne	.+28     	; 0x122e <__fp_mintl+0x20>
    1212:	77 23       	and	r23, r23
    1214:	21 f0       	breq	.+8      	; 0x121e <__fp_mintl+0x10>
    1216:	98 50       	subi	r25, 0x08	; 8
    1218:	87 2b       	or	r24, r23
    121a:	76 2f       	mov	r23, r22
    121c:	07 c0       	rjmp	.+14     	; 0x122c <__fp_mintl+0x1e>
    121e:	66 23       	and	r22, r22
    1220:	11 f4       	brne	.+4      	; 0x1226 <__fp_mintl+0x18>
    1222:	99 27       	eor	r25, r25
    1224:	0d c0       	rjmp	.+26     	; 0x1240 <__fp_mintl+0x32>
    1226:	90 51       	subi	r25, 0x10	; 16
    1228:	86 2b       	or	r24, r22
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	2a f0       	brmi	.+10     	; 0x123a <__fp_mintl+0x2c>
    1230:	9a 95       	dec	r25
    1232:	66 0f       	add	r22, r22
    1234:	77 1f       	adc	r23, r23
    1236:	88 1f       	adc	r24, r24
    1238:	da f7       	brpl	.-10     	; 0x1230 <__fp_mintl+0x22>
    123a:	88 0f       	add	r24, r24
    123c:	96 95       	lsr	r25
    123e:	87 95       	ror	r24
    1240:	97 f9       	bld	r25, 7
    1242:	08 95       	ret

00001244 <__fp_mpack>:
    1244:	9f 3f       	cpi	r25, 0xFF	; 255
    1246:	31 f0       	breq	.+12     	; 0x1254 <__fp_mpack_finite+0xc>

00001248 <__fp_mpack_finite>:
    1248:	91 50       	subi	r25, 0x01	; 1
    124a:	20 f4       	brcc	.+8      	; 0x1254 <__fp_mpack_finite+0xc>
    124c:	87 95       	ror	r24
    124e:	77 95       	ror	r23
    1250:	67 95       	ror	r22
    1252:	b7 95       	ror	r27
    1254:	88 0f       	add	r24, r24
    1256:	91 1d       	adc	r25, r1
    1258:	96 95       	lsr	r25
    125a:	87 95       	ror	r24
    125c:	97 f9       	bld	r25, 7
    125e:	08 95       	ret

00001260 <sprintf>:
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	2e 97       	sbiw	r28, 0x0e	; 14
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0e 89       	ldd	r16, Y+22	; 0x16
    1274:	1f 89       	ldd	r17, Y+23	; 0x17
    1276:	86 e0       	ldi	r24, 0x06	; 6
    1278:	8c 83       	std	Y+4, r24	; 0x04
    127a:	09 83       	std	Y+1, r16	; 0x01
    127c:	1a 83       	std	Y+2, r17	; 0x02
    127e:	8f ef       	ldi	r24, 0xFF	; 255
    1280:	9f e7       	ldi	r25, 0x7F	; 127
    1282:	8d 83       	std	Y+5, r24	; 0x05
    1284:	9e 83       	std	Y+6, r25	; 0x06
    1286:	ce 01       	movw	r24, r28
    1288:	4a 96       	adiw	r24, 0x1a	; 26
    128a:	ac 01       	movw	r20, r24
    128c:	68 8d       	ldd	r22, Y+24	; 0x18
    128e:	79 8d       	ldd	r23, Y+25	; 0x19
    1290:	ce 01       	movw	r24, r28
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	0d d0       	rcall	.+26     	; 0x12b0 <vfprintf>
    1296:	ef 81       	ldd	r30, Y+7	; 0x07
    1298:	f8 85       	ldd	r31, Y+8	; 0x08
    129a:	e0 0f       	add	r30, r16
    129c:	f1 1f       	adc	r31, r17
    129e:	10 82       	st	Z, r1
    12a0:	2e 96       	adiw	r28, 0x0e	; 14
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	08 95       	ret

000012b0 <vfprintf>:
    12b0:	2f 92       	push	r2
    12b2:	3f 92       	push	r3
    12b4:	4f 92       	push	r4
    12b6:	5f 92       	push	r5
    12b8:	6f 92       	push	r6
    12ba:	7f 92       	push	r7
    12bc:	8f 92       	push	r8
    12be:	9f 92       	push	r9
    12c0:	af 92       	push	r10
    12c2:	bf 92       	push	r11
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	2c 97       	sbiw	r28, 0x0c	; 12
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	7c 01       	movw	r14, r24
    12e0:	6b 01       	movw	r12, r22
    12e2:	8a 01       	movw	r16, r20
    12e4:	fc 01       	movw	r30, r24
    12e6:	16 82       	std	Z+6, r1	; 0x06
    12e8:	17 82       	std	Z+7, r1	; 0x07
    12ea:	83 81       	ldd	r24, Z+3	; 0x03
    12ec:	81 ff       	sbrs	r24, 1
    12ee:	b9 c1       	rjmp	.+882    	; 0x1662 <vfprintf+0x3b2>
    12f0:	88 24       	eor	r8, r8
    12f2:	83 94       	inc	r8
    12f4:	91 2c       	mov	r9, r1
    12f6:	8c 0e       	add	r8, r28
    12f8:	9d 1e       	adc	r9, r29
    12fa:	f7 01       	movw	r30, r14
    12fc:	93 81       	ldd	r25, Z+3	; 0x03
    12fe:	f6 01       	movw	r30, r12
    1300:	93 fd       	sbrc	r25, 3
    1302:	85 91       	lpm	r24, Z+
    1304:	93 ff       	sbrs	r25, 3
    1306:	81 91       	ld	r24, Z+
    1308:	6f 01       	movw	r12, r30
    130a:	88 23       	and	r24, r24
    130c:	09 f4       	brne	.+2      	; 0x1310 <vfprintf+0x60>
    130e:	a5 c1       	rjmp	.+842    	; 0x165a <vfprintf+0x3aa>
    1310:	85 32       	cpi	r24, 0x25	; 37
    1312:	39 f4       	brne	.+14     	; 0x1322 <vfprintf+0x72>
    1314:	93 fd       	sbrc	r25, 3
    1316:	85 91       	lpm	r24, Z+
    1318:	93 ff       	sbrs	r25, 3
    131a:	81 91       	ld	r24, Z+
    131c:	6f 01       	movw	r12, r30
    131e:	85 32       	cpi	r24, 0x25	; 37
    1320:	21 f4       	brne	.+8      	; 0x132a <vfprintf+0x7a>
    1322:	b7 01       	movw	r22, r14
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	cc d1       	rcall	.+920    	; 0x16c0 <fputc>
    1328:	e8 cf       	rjmp	.-48     	; 0x12fa <vfprintf+0x4a>
    132a:	51 2c       	mov	r5, r1
    132c:	31 2c       	mov	r3, r1
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	20 32       	cpi	r18, 0x20	; 32
    1332:	a8 f4       	brcc	.+42     	; 0x135e <vfprintf+0xae>
    1334:	8b 32       	cpi	r24, 0x2B	; 43
    1336:	61 f0       	breq	.+24     	; 0x1350 <vfprintf+0xa0>
    1338:	28 f4       	brcc	.+10     	; 0x1344 <vfprintf+0x94>
    133a:	80 32       	cpi	r24, 0x20	; 32
    133c:	51 f0       	breq	.+20     	; 0x1352 <vfprintf+0xa2>
    133e:	83 32       	cpi	r24, 0x23	; 35
    1340:	71 f4       	brne	.+28     	; 0x135e <vfprintf+0xae>
    1342:	0b c0       	rjmp	.+22     	; 0x135a <vfprintf+0xaa>
    1344:	8d 32       	cpi	r24, 0x2D	; 45
    1346:	39 f0       	breq	.+14     	; 0x1356 <vfprintf+0xa6>
    1348:	80 33       	cpi	r24, 0x30	; 48
    134a:	49 f4       	brne	.+18     	; 0x135e <vfprintf+0xae>
    134c:	21 60       	ori	r18, 0x01	; 1
    134e:	28 c0       	rjmp	.+80     	; 0x13a0 <vfprintf+0xf0>
    1350:	22 60       	ori	r18, 0x02	; 2
    1352:	24 60       	ori	r18, 0x04	; 4
    1354:	25 c0       	rjmp	.+74     	; 0x13a0 <vfprintf+0xf0>
    1356:	28 60       	ori	r18, 0x08	; 8
    1358:	23 c0       	rjmp	.+70     	; 0x13a0 <vfprintf+0xf0>
    135a:	20 61       	ori	r18, 0x10	; 16
    135c:	21 c0       	rjmp	.+66     	; 0x13a0 <vfprintf+0xf0>
    135e:	27 fd       	sbrc	r18, 7
    1360:	27 c0       	rjmp	.+78     	; 0x13b0 <vfprintf+0x100>
    1362:	38 2f       	mov	r19, r24
    1364:	30 53       	subi	r19, 0x30	; 48
    1366:	3a 30       	cpi	r19, 0x0A	; 10
    1368:	78 f4       	brcc	.+30     	; 0x1388 <vfprintf+0xd8>
    136a:	26 ff       	sbrs	r18, 6
    136c:	06 c0       	rjmp	.+12     	; 0x137a <vfprintf+0xca>
    136e:	fa e0       	ldi	r31, 0x0A	; 10
    1370:	5f 9e       	mul	r5, r31
    1372:	30 0d       	add	r19, r0
    1374:	11 24       	eor	r1, r1
    1376:	53 2e       	mov	r5, r19
    1378:	13 c0       	rjmp	.+38     	; 0x13a0 <vfprintf+0xf0>
    137a:	8a e0       	ldi	r24, 0x0A	; 10
    137c:	38 9e       	mul	r3, r24
    137e:	30 0d       	add	r19, r0
    1380:	11 24       	eor	r1, r1
    1382:	33 2e       	mov	r3, r19
    1384:	20 62       	ori	r18, 0x20	; 32
    1386:	0c c0       	rjmp	.+24     	; 0x13a0 <vfprintf+0xf0>
    1388:	8e 32       	cpi	r24, 0x2E	; 46
    138a:	21 f4       	brne	.+8      	; 0x1394 <vfprintf+0xe4>
    138c:	26 fd       	sbrc	r18, 6
    138e:	65 c1       	rjmp	.+714    	; 0x165a <vfprintf+0x3aa>
    1390:	20 64       	ori	r18, 0x40	; 64
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <vfprintf+0xf0>
    1394:	8c 36       	cpi	r24, 0x6C	; 108
    1396:	11 f4       	brne	.+4      	; 0x139c <vfprintf+0xec>
    1398:	20 68       	ori	r18, 0x80	; 128
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <vfprintf+0xf0>
    139c:	88 36       	cpi	r24, 0x68	; 104
    139e:	41 f4       	brne	.+16     	; 0x13b0 <vfprintf+0x100>
    13a0:	f6 01       	movw	r30, r12
    13a2:	93 fd       	sbrc	r25, 3
    13a4:	85 91       	lpm	r24, Z+
    13a6:	93 ff       	sbrs	r25, 3
    13a8:	81 91       	ld	r24, Z+
    13aa:	6f 01       	movw	r12, r30
    13ac:	81 11       	cpse	r24, r1
    13ae:	c0 cf       	rjmp	.-128    	; 0x1330 <vfprintf+0x80>
    13b0:	98 2f       	mov	r25, r24
    13b2:	95 54       	subi	r25, 0x45	; 69
    13b4:	93 30       	cpi	r25, 0x03	; 3
    13b6:	18 f0       	brcs	.+6      	; 0x13be <vfprintf+0x10e>
    13b8:	90 52       	subi	r25, 0x20	; 32
    13ba:	93 30       	cpi	r25, 0x03	; 3
    13bc:	28 f4       	brcc	.+10     	; 0x13c8 <vfprintf+0x118>
    13be:	0c 5f       	subi	r16, 0xFC	; 252
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	ff e3       	ldi	r31, 0x3F	; 63
    13c4:	f9 83       	std	Y+1, r31	; 0x01
    13c6:	0d c0       	rjmp	.+26     	; 0x13e2 <vfprintf+0x132>
    13c8:	83 36       	cpi	r24, 0x63	; 99
    13ca:	31 f0       	breq	.+12     	; 0x13d8 <vfprintf+0x128>
    13cc:	83 37       	cpi	r24, 0x73	; 115
    13ce:	71 f0       	breq	.+28     	; 0x13ec <vfprintf+0x13c>
    13d0:	83 35       	cpi	r24, 0x53	; 83
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <vfprintf+0x126>
    13d4:	5a c0       	rjmp	.+180    	; 0x148a <vfprintf+0x1da>
    13d6:	22 c0       	rjmp	.+68     	; 0x141c <vfprintf+0x16c>
    13d8:	f8 01       	movw	r30, r16
    13da:	80 81       	ld	r24, Z
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	0e 5f       	subi	r16, 0xFE	; 254
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
    13e2:	44 24       	eor	r4, r4
    13e4:	43 94       	inc	r4
    13e6:	51 2c       	mov	r5, r1
    13e8:	54 01       	movw	r10, r8
    13ea:	14 c0       	rjmp	.+40     	; 0x1414 <vfprintf+0x164>
    13ec:	38 01       	movw	r6, r16
    13ee:	f2 e0       	ldi	r31, 0x02	; 2
    13f0:	6f 0e       	add	r6, r31
    13f2:	71 1c       	adc	r7, r1
    13f4:	f8 01       	movw	r30, r16
    13f6:	a0 80       	ld	r10, Z
    13f8:	b1 80       	ldd	r11, Z+1	; 0x01
    13fa:	26 ff       	sbrs	r18, 6
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <vfprintf+0x154>
    13fe:	65 2d       	mov	r22, r5
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <vfprintf+0x158>
    1404:	6f ef       	ldi	r22, 0xFF	; 255
    1406:	7f ef       	ldi	r23, 0xFF	; 255
    1408:	c5 01       	movw	r24, r10
    140a:	2c 87       	std	Y+12, r18	; 0x0c
    140c:	4e d1       	rcall	.+668    	; 0x16aa <strnlen>
    140e:	2c 01       	movw	r4, r24
    1410:	83 01       	movw	r16, r6
    1412:	2c 85       	ldd	r18, Y+12	; 0x0c
    1414:	6f e7       	ldi	r22, 0x7F	; 127
    1416:	26 2e       	mov	r2, r22
    1418:	22 22       	and	r2, r18
    141a:	17 c0       	rjmp	.+46     	; 0x144a <vfprintf+0x19a>
    141c:	38 01       	movw	r6, r16
    141e:	f2 e0       	ldi	r31, 0x02	; 2
    1420:	6f 0e       	add	r6, r31
    1422:	71 1c       	adc	r7, r1
    1424:	f8 01       	movw	r30, r16
    1426:	a0 80       	ld	r10, Z
    1428:	b1 80       	ldd	r11, Z+1	; 0x01
    142a:	26 ff       	sbrs	r18, 6
    142c:	03 c0       	rjmp	.+6      	; 0x1434 <vfprintf+0x184>
    142e:	65 2d       	mov	r22, r5
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <vfprintf+0x188>
    1434:	6f ef       	ldi	r22, 0xFF	; 255
    1436:	7f ef       	ldi	r23, 0xFF	; 255
    1438:	c5 01       	movw	r24, r10
    143a:	2c 87       	std	Y+12, r18	; 0x0c
    143c:	2b d1       	rcall	.+598    	; 0x1694 <strnlen_P>
    143e:	2c 01       	movw	r4, r24
    1440:	2c 85       	ldd	r18, Y+12	; 0x0c
    1442:	50 e8       	ldi	r21, 0x80	; 128
    1444:	25 2e       	mov	r2, r21
    1446:	22 2a       	or	r2, r18
    1448:	83 01       	movw	r16, r6
    144a:	23 fc       	sbrc	r2, 3
    144c:	1a c0       	rjmp	.+52     	; 0x1482 <vfprintf+0x1d2>
    144e:	05 c0       	rjmp	.+10     	; 0x145a <vfprintf+0x1aa>
    1450:	b7 01       	movw	r22, r14
    1452:	80 e2       	ldi	r24, 0x20	; 32
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	34 d1       	rcall	.+616    	; 0x16c0 <fputc>
    1458:	3a 94       	dec	r3
    145a:	83 2d       	mov	r24, r3
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	48 16       	cp	r4, r24
    1460:	59 06       	cpc	r5, r25
    1462:	b0 f3       	brcs	.-20     	; 0x1450 <vfprintf+0x1a0>
    1464:	0e c0       	rjmp	.+28     	; 0x1482 <vfprintf+0x1d2>
    1466:	f5 01       	movw	r30, r10
    1468:	27 fc       	sbrc	r2, 7
    146a:	85 91       	lpm	r24, Z+
    146c:	27 fe       	sbrs	r2, 7
    146e:	81 91       	ld	r24, Z+
    1470:	5f 01       	movw	r10, r30
    1472:	b7 01       	movw	r22, r14
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	24 d1       	rcall	.+584    	; 0x16c0 <fputc>
    1478:	31 10       	cpse	r3, r1
    147a:	3a 94       	dec	r3
    147c:	f1 e0       	ldi	r31, 0x01	; 1
    147e:	4f 1a       	sub	r4, r31
    1480:	51 08       	sbc	r5, r1
    1482:	41 14       	cp	r4, r1
    1484:	51 04       	cpc	r5, r1
    1486:	79 f7       	brne	.-34     	; 0x1466 <vfprintf+0x1b6>
    1488:	e5 c0       	rjmp	.+458    	; 0x1654 <vfprintf+0x3a4>
    148a:	84 36       	cpi	r24, 0x64	; 100
    148c:	11 f0       	breq	.+4      	; 0x1492 <vfprintf+0x1e2>
    148e:	89 36       	cpi	r24, 0x69	; 105
    1490:	39 f5       	brne	.+78     	; 0x14e0 <vfprintf+0x230>
    1492:	f8 01       	movw	r30, r16
    1494:	27 ff       	sbrs	r18, 7
    1496:	07 c0       	rjmp	.+14     	; 0x14a6 <vfprintf+0x1f6>
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	0c 5f       	subi	r16, 0xFC	; 252
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
    14a4:	08 c0       	rjmp	.+16     	; 0x14b6 <vfprintf+0x206>
    14a6:	60 81       	ld	r22, Z
    14a8:	71 81       	ldd	r23, Z+1	; 0x01
    14aa:	88 27       	eor	r24, r24
    14ac:	77 fd       	sbrc	r23, 7
    14ae:	80 95       	com	r24
    14b0:	98 2f       	mov	r25, r24
    14b2:	0e 5f       	subi	r16, 0xFE	; 254
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	4f e6       	ldi	r20, 0x6F	; 111
    14b8:	b4 2e       	mov	r11, r20
    14ba:	b2 22       	and	r11, r18
    14bc:	97 ff       	sbrs	r25, 7
    14be:	09 c0       	rjmp	.+18     	; 0x14d2 <vfprintf+0x222>
    14c0:	90 95       	com	r25
    14c2:	80 95       	com	r24
    14c4:	70 95       	com	r23
    14c6:	61 95       	neg	r22
    14c8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ca:	8f 4f       	sbci	r24, 0xFF	; 255
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	f0 e8       	ldi	r31, 0x80	; 128
    14d0:	bf 2a       	or	r11, r31
    14d2:	2a e0       	ldi	r18, 0x0A	; 10
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	a4 01       	movw	r20, r8
    14d8:	1f d1       	rcall	.+574    	; 0x1718 <__ultoa_invert>
    14da:	a8 2e       	mov	r10, r24
    14dc:	a8 18       	sub	r10, r8
    14de:	42 c0       	rjmp	.+132    	; 0x1564 <vfprintf+0x2b4>
    14e0:	85 37       	cpi	r24, 0x75	; 117
    14e2:	31 f4       	brne	.+12     	; 0x14f0 <vfprintf+0x240>
    14e4:	3f ee       	ldi	r19, 0xEF	; 239
    14e6:	b3 2e       	mov	r11, r19
    14e8:	b2 22       	and	r11, r18
    14ea:	2a e0       	ldi	r18, 0x0A	; 10
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	24 c0       	rjmp	.+72     	; 0x1538 <vfprintf+0x288>
    14f0:	99 ef       	ldi	r25, 0xF9	; 249
    14f2:	b9 2e       	mov	r11, r25
    14f4:	b2 22       	and	r11, r18
    14f6:	8f 36       	cpi	r24, 0x6F	; 111
    14f8:	b9 f0       	breq	.+46     	; 0x1528 <vfprintf+0x278>
    14fa:	20 f4       	brcc	.+8      	; 0x1504 <vfprintf+0x254>
    14fc:	88 35       	cpi	r24, 0x58	; 88
    14fe:	09 f0       	breq	.+2      	; 0x1502 <vfprintf+0x252>
    1500:	ac c0       	rjmp	.+344    	; 0x165a <vfprintf+0x3aa>
    1502:	0d c0       	rjmp	.+26     	; 0x151e <vfprintf+0x26e>
    1504:	80 37       	cpi	r24, 0x70	; 112
    1506:	21 f0       	breq	.+8      	; 0x1510 <vfprintf+0x260>
    1508:	88 37       	cpi	r24, 0x78	; 120
    150a:	09 f0       	breq	.+2      	; 0x150e <vfprintf+0x25e>
    150c:	a6 c0       	rjmp	.+332    	; 0x165a <vfprintf+0x3aa>
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <vfprintf+0x264>
    1510:	20 e1       	ldi	r18, 0x10	; 16
    1512:	b2 2a       	or	r11, r18
    1514:	b4 fe       	sbrs	r11, 4
    1516:	0b c0       	rjmp	.+22     	; 0x152e <vfprintf+0x27e>
    1518:	84 e0       	ldi	r24, 0x04	; 4
    151a:	b8 2a       	or	r11, r24
    151c:	08 c0       	rjmp	.+16     	; 0x152e <vfprintf+0x27e>
    151e:	24 ff       	sbrs	r18, 4
    1520:	09 c0       	rjmp	.+18     	; 0x1534 <vfprintf+0x284>
    1522:	e6 e0       	ldi	r30, 0x06	; 6
    1524:	be 2a       	or	r11, r30
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <vfprintf+0x284>
    1528:	28 e0       	ldi	r18, 0x08	; 8
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	05 c0       	rjmp	.+10     	; 0x1538 <vfprintf+0x288>
    152e:	20 e1       	ldi	r18, 0x10	; 16
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <vfprintf+0x288>
    1534:	20 e1       	ldi	r18, 0x10	; 16
    1536:	32 e0       	ldi	r19, 0x02	; 2
    1538:	f8 01       	movw	r30, r16
    153a:	b7 fe       	sbrs	r11, 7
    153c:	07 c0       	rjmp	.+14     	; 0x154c <vfprintf+0x29c>
    153e:	60 81       	ld	r22, Z
    1540:	71 81       	ldd	r23, Z+1	; 0x01
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	0c 5f       	subi	r16, 0xFC	; 252
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	06 c0       	rjmp	.+12     	; 0x1558 <vfprintf+0x2a8>
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 5f       	subi	r16, 0xFE	; 254
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	a4 01       	movw	r20, r8
    155a:	de d0       	rcall	.+444    	; 0x1718 <__ultoa_invert>
    155c:	a8 2e       	mov	r10, r24
    155e:	a8 18       	sub	r10, r8
    1560:	ff e7       	ldi	r31, 0x7F	; 127
    1562:	bf 22       	and	r11, r31
    1564:	b6 fe       	sbrs	r11, 6
    1566:	0b c0       	rjmp	.+22     	; 0x157e <vfprintf+0x2ce>
    1568:	2b 2d       	mov	r18, r11
    156a:	2e 7f       	andi	r18, 0xFE	; 254
    156c:	a5 14       	cp	r10, r5
    156e:	50 f4       	brcc	.+20     	; 0x1584 <vfprintf+0x2d4>
    1570:	b4 fe       	sbrs	r11, 4
    1572:	0a c0       	rjmp	.+20     	; 0x1588 <vfprintf+0x2d8>
    1574:	b2 fc       	sbrc	r11, 2
    1576:	08 c0       	rjmp	.+16     	; 0x1588 <vfprintf+0x2d8>
    1578:	2b 2d       	mov	r18, r11
    157a:	2e 7e       	andi	r18, 0xEE	; 238
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <vfprintf+0x2d8>
    157e:	7a 2c       	mov	r7, r10
    1580:	2b 2d       	mov	r18, r11
    1582:	03 c0       	rjmp	.+6      	; 0x158a <vfprintf+0x2da>
    1584:	7a 2c       	mov	r7, r10
    1586:	01 c0       	rjmp	.+2      	; 0x158a <vfprintf+0x2da>
    1588:	75 2c       	mov	r7, r5
    158a:	24 ff       	sbrs	r18, 4
    158c:	0d c0       	rjmp	.+26     	; 0x15a8 <vfprintf+0x2f8>
    158e:	fe 01       	movw	r30, r28
    1590:	ea 0d       	add	r30, r10
    1592:	f1 1d       	adc	r31, r1
    1594:	80 81       	ld	r24, Z
    1596:	80 33       	cpi	r24, 0x30	; 48
    1598:	11 f4       	brne	.+4      	; 0x159e <vfprintf+0x2ee>
    159a:	29 7e       	andi	r18, 0xE9	; 233
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <vfprintf+0x300>
    159e:	22 ff       	sbrs	r18, 2
    15a0:	06 c0       	rjmp	.+12     	; 0x15ae <vfprintf+0x2fe>
    15a2:	73 94       	inc	r7
    15a4:	73 94       	inc	r7
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <vfprintf+0x300>
    15a8:	82 2f       	mov	r24, r18
    15aa:	86 78       	andi	r24, 0x86	; 134
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <vfprintf+0x300>
    15ae:	73 94       	inc	r7
    15b0:	23 fd       	sbrc	r18, 3
    15b2:	13 c0       	rjmp	.+38     	; 0x15da <vfprintf+0x32a>
    15b4:	20 ff       	sbrs	r18, 0
    15b6:	0e c0       	rjmp	.+28     	; 0x15d4 <vfprintf+0x324>
    15b8:	5a 2c       	mov	r5, r10
    15ba:	73 14       	cp	r7, r3
    15bc:	58 f4       	brcc	.+22     	; 0x15d4 <vfprintf+0x324>
    15be:	53 0c       	add	r5, r3
    15c0:	57 18       	sub	r5, r7
    15c2:	73 2c       	mov	r7, r3
    15c4:	07 c0       	rjmp	.+14     	; 0x15d4 <vfprintf+0x324>
    15c6:	b7 01       	movw	r22, r14
    15c8:	80 e2       	ldi	r24, 0x20	; 32
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	2c 87       	std	Y+12, r18	; 0x0c
    15ce:	78 d0       	rcall	.+240    	; 0x16c0 <fputc>
    15d0:	73 94       	inc	r7
    15d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15d4:	73 14       	cp	r7, r3
    15d6:	b8 f3       	brcs	.-18     	; 0x15c6 <vfprintf+0x316>
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <vfprintf+0x332>
    15da:	73 14       	cp	r7, r3
    15dc:	10 f4       	brcc	.+4      	; 0x15e2 <vfprintf+0x332>
    15de:	37 18       	sub	r3, r7
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <vfprintf+0x334>
    15e2:	31 2c       	mov	r3, r1
    15e4:	24 ff       	sbrs	r18, 4
    15e6:	11 c0       	rjmp	.+34     	; 0x160a <vfprintf+0x35a>
    15e8:	b7 01       	movw	r22, r14
    15ea:	80 e3       	ldi	r24, 0x30	; 48
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	2c 87       	std	Y+12, r18	; 0x0c
    15f0:	67 d0       	rcall	.+206    	; 0x16c0 <fputc>
    15f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15f4:	22 ff       	sbrs	r18, 2
    15f6:	1c c0       	rjmp	.+56     	; 0x1630 <vfprintf+0x380>
    15f8:	21 ff       	sbrs	r18, 1
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <vfprintf+0x352>
    15fc:	88 e5       	ldi	r24, 0x58	; 88
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <vfprintf+0x356>
    1602:	88 e7       	ldi	r24, 0x78	; 120
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	b7 01       	movw	r22, r14
    1608:	0c c0       	rjmp	.+24     	; 0x1622 <vfprintf+0x372>
    160a:	82 2f       	mov	r24, r18
    160c:	86 78       	andi	r24, 0x86	; 134
    160e:	81 f0       	breq	.+32     	; 0x1630 <vfprintf+0x380>
    1610:	21 fd       	sbrc	r18, 1
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <vfprintf+0x368>
    1614:	80 e2       	ldi	r24, 0x20	; 32
    1616:	01 c0       	rjmp	.+2      	; 0x161a <vfprintf+0x36a>
    1618:	8b e2       	ldi	r24, 0x2B	; 43
    161a:	27 fd       	sbrc	r18, 7
    161c:	8d e2       	ldi	r24, 0x2D	; 45
    161e:	b7 01       	movw	r22, r14
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	4e d0       	rcall	.+156    	; 0x16c0 <fputc>
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <vfprintf+0x380>
    1626:	b7 01       	movw	r22, r14
    1628:	80 e3       	ldi	r24, 0x30	; 48
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	49 d0       	rcall	.+146    	; 0x16c0 <fputc>
    162e:	5a 94       	dec	r5
    1630:	a5 14       	cp	r10, r5
    1632:	c8 f3       	brcs	.-14     	; 0x1626 <vfprintf+0x376>
    1634:	aa 94       	dec	r10
    1636:	f4 01       	movw	r30, r8
    1638:	ea 0d       	add	r30, r10
    163a:	f1 1d       	adc	r31, r1
    163c:	b7 01       	movw	r22, r14
    163e:	80 81       	ld	r24, Z
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	3e d0       	rcall	.+124    	; 0x16c0 <fputc>
    1644:	a1 10       	cpse	r10, r1
    1646:	f6 cf       	rjmp	.-20     	; 0x1634 <vfprintf+0x384>
    1648:	05 c0       	rjmp	.+10     	; 0x1654 <vfprintf+0x3a4>
    164a:	b7 01       	movw	r22, r14
    164c:	80 e2       	ldi	r24, 0x20	; 32
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	37 d0       	rcall	.+110    	; 0x16c0 <fputc>
    1652:	3a 94       	dec	r3
    1654:	31 10       	cpse	r3, r1
    1656:	f9 cf       	rjmp	.-14     	; 0x164a <vfprintf+0x39a>
    1658:	50 ce       	rjmp	.-864    	; 0x12fa <vfprintf+0x4a>
    165a:	f7 01       	movw	r30, r14
    165c:	26 81       	ldd	r18, Z+6	; 0x06
    165e:	37 81       	ldd	r19, Z+7	; 0x07
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <vfprintf+0x3b6>
    1662:	2f ef       	ldi	r18, 0xFF	; 255
    1664:	3f ef       	ldi	r19, 0xFF	; 255
    1666:	c9 01       	movw	r24, r18
    1668:	2c 96       	adiw	r28, 0x0c	; 12
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	df 90       	pop	r13
    167c:	cf 90       	pop	r12
    167e:	bf 90       	pop	r11
    1680:	af 90       	pop	r10
    1682:	9f 90       	pop	r9
    1684:	8f 90       	pop	r8
    1686:	7f 90       	pop	r7
    1688:	6f 90       	pop	r6
    168a:	5f 90       	pop	r5
    168c:	4f 90       	pop	r4
    168e:	3f 90       	pop	r3
    1690:	2f 90       	pop	r2
    1692:	08 95       	ret

00001694 <strnlen_P>:
    1694:	fc 01       	movw	r30, r24
    1696:	05 90       	lpm	r0, Z+
    1698:	61 50       	subi	r22, 0x01	; 1
    169a:	70 40       	sbci	r23, 0x00	; 0
    169c:	01 10       	cpse	r0, r1
    169e:	d8 f7       	brcc	.-10     	; 0x1696 <strnlen_P+0x2>
    16a0:	80 95       	com	r24
    16a2:	90 95       	com	r25
    16a4:	8e 0f       	add	r24, r30
    16a6:	9f 1f       	adc	r25, r31
    16a8:	08 95       	ret

000016aa <strnlen>:
    16aa:	fc 01       	movw	r30, r24
    16ac:	61 50       	subi	r22, 0x01	; 1
    16ae:	70 40       	sbci	r23, 0x00	; 0
    16b0:	01 90       	ld	r0, Z+
    16b2:	01 10       	cpse	r0, r1
    16b4:	d8 f7       	brcc	.-10     	; 0x16ac <strnlen+0x2>
    16b6:	80 95       	com	r24
    16b8:	90 95       	com	r25
    16ba:	8e 0f       	add	r24, r30
    16bc:	9f 1f       	adc	r25, r31
    16be:	08 95       	ret

000016c0 <fputc>:
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	8c 01       	movw	r16, r24
    16ca:	eb 01       	movw	r28, r22
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	81 fd       	sbrc	r24, 1
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <fputc+0x18>
    16d2:	0f ef       	ldi	r16, 0xFF	; 255
    16d4:	1f ef       	ldi	r17, 0xFF	; 255
    16d6:	1a c0       	rjmp	.+52     	; 0x170c <fputc+0x4c>
    16d8:	82 ff       	sbrs	r24, 2
    16da:	0d c0       	rjmp	.+26     	; 0x16f6 <fputc+0x36>
    16dc:	2e 81       	ldd	r18, Y+6	; 0x06
    16de:	3f 81       	ldd	r19, Y+7	; 0x07
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	9d 81       	ldd	r25, Y+5	; 0x05
    16e4:	28 17       	cp	r18, r24
    16e6:	39 07       	cpc	r19, r25
    16e8:	64 f4       	brge	.+24     	; 0x1702 <fputc+0x42>
    16ea:	e8 81       	ld	r30, Y
    16ec:	f9 81       	ldd	r31, Y+1	; 0x01
    16ee:	01 93       	st	Z+, r16
    16f0:	e8 83       	st	Y, r30
    16f2:	f9 83       	std	Y+1, r31	; 0x01
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <fputc+0x42>
    16f6:	e8 85       	ldd	r30, Y+8	; 0x08
    16f8:	f9 85       	ldd	r31, Y+9	; 0x09
    16fa:	80 2f       	mov	r24, r16
    16fc:	19 95       	eicall
    16fe:	89 2b       	or	r24, r25
    1700:	41 f7       	brne	.-48     	; 0x16d2 <fputc+0x12>
    1702:	8e 81       	ldd	r24, Y+6	; 0x06
    1704:	9f 81       	ldd	r25, Y+7	; 0x07
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	8e 83       	std	Y+6, r24	; 0x06
    170a:	9f 83       	std	Y+7, r25	; 0x07
    170c:	c8 01       	movw	r24, r16
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	08 95       	ret

00001718 <__ultoa_invert>:
    1718:	fa 01       	movw	r30, r20
    171a:	aa 27       	eor	r26, r26
    171c:	28 30       	cpi	r18, 0x08	; 8
    171e:	51 f1       	breq	.+84     	; 0x1774 <__ultoa_invert+0x5c>
    1720:	20 31       	cpi	r18, 0x10	; 16
    1722:	81 f1       	breq	.+96     	; 0x1784 <__ultoa_invert+0x6c>
    1724:	e8 94       	clt
    1726:	6f 93       	push	r22
    1728:	6e 7f       	andi	r22, 0xFE	; 254
    172a:	6e 5f       	subi	r22, 0xFE	; 254
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	8f 4f       	sbci	r24, 0xFF	; 255
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	af 4f       	sbci	r26, 0xFF	; 255
    1734:	b1 e0       	ldi	r27, 0x01	; 1
    1736:	3e d0       	rcall	.+124    	; 0x17b4 <__ultoa_invert+0x9c>
    1738:	b4 e0       	ldi	r27, 0x04	; 4
    173a:	3c d0       	rcall	.+120    	; 0x17b4 <__ultoa_invert+0x9c>
    173c:	67 0f       	add	r22, r23
    173e:	78 1f       	adc	r23, r24
    1740:	89 1f       	adc	r24, r25
    1742:	9a 1f       	adc	r25, r26
    1744:	a1 1d       	adc	r26, r1
    1746:	68 0f       	add	r22, r24
    1748:	79 1f       	adc	r23, r25
    174a:	8a 1f       	adc	r24, r26
    174c:	91 1d       	adc	r25, r1
    174e:	a1 1d       	adc	r26, r1
    1750:	6a 0f       	add	r22, r26
    1752:	71 1d       	adc	r23, r1
    1754:	81 1d       	adc	r24, r1
    1756:	91 1d       	adc	r25, r1
    1758:	a1 1d       	adc	r26, r1
    175a:	20 d0       	rcall	.+64     	; 0x179c <__ultoa_invert+0x84>
    175c:	09 f4       	brne	.+2      	; 0x1760 <__ultoa_invert+0x48>
    175e:	68 94       	set
    1760:	3f 91       	pop	r19
    1762:	2a e0       	ldi	r18, 0x0A	; 10
    1764:	26 9f       	mul	r18, r22
    1766:	11 24       	eor	r1, r1
    1768:	30 19       	sub	r19, r0
    176a:	30 5d       	subi	r19, 0xD0	; 208
    176c:	31 93       	st	Z+, r19
    176e:	de f6       	brtc	.-74     	; 0x1726 <__ultoa_invert+0xe>
    1770:	cf 01       	movw	r24, r30
    1772:	08 95       	ret
    1774:	46 2f       	mov	r20, r22
    1776:	47 70       	andi	r20, 0x07	; 7
    1778:	40 5d       	subi	r20, 0xD0	; 208
    177a:	41 93       	st	Z+, r20
    177c:	b3 e0       	ldi	r27, 0x03	; 3
    177e:	0f d0       	rcall	.+30     	; 0x179e <__ultoa_invert+0x86>
    1780:	c9 f7       	brne	.-14     	; 0x1774 <__ultoa_invert+0x5c>
    1782:	f6 cf       	rjmp	.-20     	; 0x1770 <__ultoa_invert+0x58>
    1784:	46 2f       	mov	r20, r22
    1786:	4f 70       	andi	r20, 0x0F	; 15
    1788:	40 5d       	subi	r20, 0xD0	; 208
    178a:	4a 33       	cpi	r20, 0x3A	; 58
    178c:	18 f0       	brcs	.+6      	; 0x1794 <__ultoa_invert+0x7c>
    178e:	49 5d       	subi	r20, 0xD9	; 217
    1790:	31 fd       	sbrc	r19, 1
    1792:	40 52       	subi	r20, 0x20	; 32
    1794:	41 93       	st	Z+, r20
    1796:	02 d0       	rcall	.+4      	; 0x179c <__ultoa_invert+0x84>
    1798:	a9 f7       	brne	.-22     	; 0x1784 <__ultoa_invert+0x6c>
    179a:	ea cf       	rjmp	.-44     	; 0x1770 <__ultoa_invert+0x58>
    179c:	b4 e0       	ldi	r27, 0x04	; 4
    179e:	a6 95       	lsr	r26
    17a0:	97 95       	ror	r25
    17a2:	87 95       	ror	r24
    17a4:	77 95       	ror	r23
    17a6:	67 95       	ror	r22
    17a8:	ba 95       	dec	r27
    17aa:	c9 f7       	brne	.-14     	; 0x179e <__ultoa_invert+0x86>
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	61 05       	cpc	r22, r1
    17b0:	71 05       	cpc	r23, r1
    17b2:	08 95       	ret
    17b4:	9b 01       	movw	r18, r22
    17b6:	ac 01       	movw	r20, r24
    17b8:	0a 2e       	mov	r0, r26
    17ba:	06 94       	lsr	r0
    17bc:	57 95       	ror	r21
    17be:	47 95       	ror	r20
    17c0:	37 95       	ror	r19
    17c2:	27 95       	ror	r18
    17c4:	ba 95       	dec	r27
    17c6:	c9 f7       	brne	.-14     	; 0x17ba <__ultoa_invert+0xa2>
    17c8:	62 0f       	add	r22, r18
    17ca:	73 1f       	adc	r23, r19
    17cc:	84 1f       	adc	r24, r20
    17ce:	95 1f       	adc	r25, r21
    17d0:	a0 1d       	adc	r26, r0
    17d2:	08 95       	ret

000017d4 <_exit>:
    17d4:	f8 94       	cli

000017d6 <__stop_program>:
    17d6:	ff cf       	rjmp	.-2      	; 0x17d6 <__stop_program>
