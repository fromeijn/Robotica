
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00802000  00000ba6  00000c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00802018  00802018  00000c52  2**0
                  ALLOC
  3 .stab         00002550  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008c2  00000000  00000000  000031a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00003a66  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000158  00000000  00000000  00003a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001e97  00000000  00000000  00003bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000803  00000000  00000000  00005a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e25  00000000  00000000  00006287  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000458  00000000  00000000  000070ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a3b  00000000  00000000  00007504  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015b1  00000000  00000000  00007f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  000094f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
   6:	00 00       	nop
   8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
   a:	00 00       	nop
   c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
   e:	00 00       	nop
  10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
  16:	00 00       	nop
  18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
  1e:	00 00       	nop
  20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
  22:	00 00       	nop
  24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
  26:	00 00       	nop
  28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
  2e:	00 00       	nop
  30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
  32:	00 00       	nop
  34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
  36:	00 00       	nop
  38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
  3e:	00 00       	nop
  40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
  42:	00 00       	nop
  44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
  46:	00 00       	nop
  48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
  52:	00 00       	nop
  54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
  56:	00 00       	nop
  58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
  5e:	00 00       	nop
  60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
  62:	00 00       	nop
  64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
  66:	00 00       	nop
  68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
  72:	00 00       	nop
  74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
  76:	00 00       	nop
  78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
  82:	00 00       	nop
  84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
  86:	00 00       	nop
  88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
  92:	00 00       	nop
  94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
  96:	00 00       	nop
  98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
  be:	00 00       	nop
  c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
  da:	00 00       	nop
  dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
  de:	00 00       	nop
  e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
  fe:	00 00       	nop
 100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
 102:	00 00       	nop
 104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
 106:	00 00       	nop
 108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
 10e:	00 00       	nop
 110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
 112:	00 00       	nop
 114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
 116:	00 00       	nop
 118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
 11e:	00 00       	nop
 120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
 122:	00 00       	nop
 124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
 126:	00 00       	nop
 128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
 12e:	00 00       	nop
 130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
 132:	00 00       	nop
 134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
 136:	00 00       	nop
 138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
 13e:	00 00       	nop
 140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
 142:	00 00       	nop
 144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
 146:	00 00       	nop
 148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
 14e:	00 00       	nop
 150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
 152:	00 00       	nop
 154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
 156:	00 00       	nop
 158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
 15e:	00 00       	nop
 160:	72 c0       	rjmp	.+228    	; 0x246 <__vector_88>
 162:	00 00       	nop
 164:	a4 c0       	rjmp	.+328    	; 0x2ae <__vector_89>
 166:	00 00       	nop
 168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
 16e:	00 00       	nop
 170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
 172:	00 00       	nop
 174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
 176:	00 00       	nop
 178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
 17e:	00 00       	nop
 180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
 182:	00 00       	nop
 184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
 186:	00 00       	nop
 188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
 18e:	00 00       	nop
 190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
 192:	00 00       	nop
 194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
 196:	00 00       	nop
 198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	27 c0       	rjmp	.+78     	; 0x244 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	25 c0       	rjmp	.+74     	; 0x244 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e3       	ldi	r29, 0x3F	; 63
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e6 ea       	ldi	r30, 0xA6	; 166
 21c:	fb e0       	ldi	r31, 0x0B	; 11
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a8 31       	cpi	r26, 0x18	; 24
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a8 e1       	ldi	r26, 0x18	; 24
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a7 32       	cpi	r26, 0x27	; 39
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	6a d0       	rcall	.+212    	; 0x316 <main>
 242:	af c4       	rjmp	.+2398   	; 0xba2 <_exit>

00000244 <__bad_interrupt>:
 244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <__vector_88>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_RXC_vect)
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	08 b6       	in	r0, 0x38	; 56
 252:	0f 92       	push	r0
 254:	18 be       	out	0x38, r1	; 56
 256:	09 b6       	in	r0, 0x39	; 57
 258:	0f 92       	push	r0
 25a:	19 be       	out	0x39, r1	; 57
 25c:	0b b6       	in	r0, 0x3b	; 59
 25e:	0f 92       	push	r0
 260:	1b be       	out	0x3b, r1	; 59
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
  USART_RXComplete(&uartD0);
 27a:	88 e1       	ldi	r24, 0x18	; 24
 27c:	90 e2       	ldi	r25, 0x20	; 32
 27e:	2f d2       	rcall	.+1118   	; 0x6de <USART_RXComplete>
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0b be       	out	0x3b, r0	; 59
 29c:	0f 90       	pop	r0
 29e:	09 be       	out	0x39, r0	; 57
 2a0:	0f 90       	pop	r0
 2a2:	08 be       	out	0x38, r0	; 56
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_89>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTD0.
 *         This ISR is only defined if the macro ENABLE_UART_D0 is defined.
 */
ISR(USARTD0_DRE_vect)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	08 b6       	in	r0, 0x38	; 56
 2ba:	0f 92       	push	r0
 2bc:	18 be       	out	0x38, r1	; 56
 2be:	09 b6       	in	r0, 0x39	; 57
 2c0:	0f 92       	push	r0
 2c2:	19 be       	out	0x39, r1	; 57
 2c4:	0b b6       	in	r0, 0x3b	; 59
 2c6:	0f 92       	push	r0
 2c8:	1b be       	out	0x3b, r1	; 59
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
  USART_DataRegEmpty(&uartD0);
 2e2:	88 e1       	ldi	r24, 0x18	; 24
 2e4:	90 e2       	ldi	r25, 0x20	; 32
 2e6:	10 d2       	rcall	.+1056   	; 0x708 <USART_DataRegEmpty>
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0b be       	out	0x3b, r0	; 59
 304:	0f 90       	pop	r0
 306:	09 be       	out	0x39, r0	; 57
 308:	0f 90       	pop	r0
 30a:	08 be       	out	0x38, r0	; 56
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <main>:
#include "uart.h"


int main(void)
{
	PORTE.DIRSET = PIN0_bm;
 316:	c1 e0       	ldi	r28, 0x01	; 1
 318:	e0 e8       	ldi	r30, 0x80	; 128
 31a:	f6 e0       	ldi	r31, 0x06	; 6
 31c:	c1 83       	std	Z+1, r28	; 0x01
	
	init_uart(&uartD0, &USARTD0, F_CPU, D0_BAUD, D0_CLK2X);
 31e:	c1 2c       	mov	r12, r1
 320:	e1 2c       	mov	r14, r1
 322:	12 ec       	ldi	r17, 0xC2	; 194
 324:	f1 2e       	mov	r15, r17
 326:	01 e0       	ldi	r16, 0x01	; 1
 328:	10 e0       	ldi	r17, 0x00	; 0
 32a:	20 e8       	ldi	r18, 0x80	; 128
 32c:	34 e8       	ldi	r19, 0x84	; 132
 32e:	4e e1       	ldi	r20, 0x1E	; 30
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	60 ea       	ldi	r22, 0xA0	; 160
 334:	79 e0       	ldi	r23, 0x09	; 9
 336:	88 e1       	ldi	r24, 0x18	; 24
 338:	90 e2       	ldi	r25, 0x20	; 32
 33a:	46 d1       	rcall	.+652    	; 0x5c8 <init_uart>
	PMIC.CTRL = PMIC_LOLVLEN_bm;
 33c:	e0 ea       	ldi	r30, 0xA0	; 160
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	c2 83       	std	Z+2, r28	; 0x02
	sei();
 342:	78 94       	sei
	
	
	uart_puts(&uartD0, "init succeeded\n");
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	70 e2       	ldi	r23, 0x20	; 32
 348:	88 e1       	ldi	r24, 0x18	; 24
 34a:	90 e2       	ldi	r25, 0x20	; 32
 34c:	2b d0       	rcall	.+86     	; 0x3a4 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34e:	2f e7       	ldi	r18, 0x7F	; 127
 350:	8a e1       	ldi	r24, 0x1A	; 26
 352:	96 e0       	ldi	r25, 0x06	; 6
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0x3e>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x48>
 35e:	00 00       	nop
	_delay_ms(1000);
	
    while(1)
    {
        PORTE.OUTTGL = PIN0_bm;
 360:	c0 e8       	ldi	r28, 0x80	; 128
 362:	d6 e0       	ldi	r29, 0x06	; 6
 364:	11 e0       	ldi	r17, 0x01	; 1
 366:	1f 83       	std	Y+7, r17	; 0x07
        uart_puts(&uartD0, "hallo\n");
 368:	60 e1       	ldi	r22, 0x10	; 16
 36a:	70 e2       	ldi	r23, 0x20	; 32
 36c:	88 e1       	ldi	r24, 0x18	; 24
 36e:	90 e2       	ldi	r25, 0x20	; 32
 370:	19 d0       	rcall	.+50     	; 0x3a4 <uart_puts>
 372:	2f e7       	ldi	r18, 0x7F	; 127
 374:	8a e1       	ldi	r24, 0x1A	; 26
 376:	96 e0       	ldi	r25, 0x06	; 6
 378:	21 50       	subi	r18, 0x01	; 1
 37a:	80 40       	sbci	r24, 0x00	; 0
 37c:	90 40       	sbci	r25, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <main+0x62>
 380:	00 c0       	rjmp	.+0      	; 0x382 <main+0x6c>
 382:	00 00       	nop
 384:	f0 cf       	rjmp	.-32     	; 0x366 <main+0x50>

00000386 <uart_putc>:
 *  \param  data      byte to be written
 *
 *  \return void
 */
void uart_putc(USART_data_t *uart, uint8_t data)
{
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ec 01       	movw	r28, r24
 38e:	16 2f       	mov	r17, r22
  if ( USART_TXBuffer_FreeSpace(uart) ) {
 390:	81 d1       	rcall	.+770    	; 0x694 <USART_TXBuffer_FreeSpace>
 392:	88 23       	and	r24, r24
 394:	19 f0       	breq	.+6      	; 0x39c <uart_putc+0x16>
    USART_TXBuffer_PutByte(uart, data);
 396:	61 2f       	mov	r22, r17
 398:	ce 01       	movw	r24, r28
 39a:	86 d1       	rcall	.+780    	; 0x6a8 <USART_TXBuffer_PutByte>
  }
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	08 95       	ret

000003a4 <uart_puts>:
 *  \param  s         pointer to string to be written
 *
 *  \return void
 */
void uart_puts(USART_data_t *uart, char *s)
{
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	8c 01       	movw	r16, r24
  char c;

  while ( (c = *s++) ) {
 3ae:	c6 2f       	mov	r28, r22
 3b0:	d7 2f       	mov	r29, r23
 3b2:	69 91       	ld	r22, Y+
 3b4:	66 23       	and	r22, r22
 3b6:	29 f0       	breq	.+10     	; 0x3c2 <uart_puts+0x1e>
    uart_putc(uart, c);
 3b8:	c8 01       	movw	r24, r16
 3ba:	e5 df       	rcall	.-54     	; 0x386 <uart_putc>
 */
void uart_puts(USART_data_t *uart, char *s)
{
  char c;

  while ( (c = *s++) ) {
 3bc:	69 91       	ld	r22, Y+
 3be:	61 11       	cpse	r22, r1
 3c0:	fb cf       	rjmp	.-10     	; 0x3b8 <uart_puts+0x14>
    uart_putc(uart, c);
  }
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	08 95       	ret

000003cc <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
 3cc:	80 3a       	cpi	r24, 0xA0	; 160
 3ce:	28 e0       	ldi	r18, 0x08	; 8
 3d0:	92 07       	cpc	r25, r18
 3d2:	39 f4       	brne	.+14     	; 0x3e2 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
 3d4:	e0 e4       	ldi	r30, 0x40	; 64
 3d6:	f6 e0       	ldi	r31, 0x06	; 6
 3d8:	88 e0       	ldi	r24, 0x08	; 8
 3da:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
 3dc:	84 e0       	ldi	r24, 0x04	; 4
 3de:	82 83       	std	Z+2, r24	; 0x02
     return;
 3e0:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
 3e2:	80 3b       	cpi	r24, 0xB0	; 176
 3e4:	28 e0       	ldi	r18, 0x08	; 8
 3e6:	92 07       	cpc	r25, r18
 3e8:	39 f4       	brne	.+14     	; 0x3f8 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
 3ea:	e0 e4       	ldi	r30, 0x40	; 64
 3ec:	f6 e0       	ldi	r31, 0x06	; 6
 3ee:	80 e8       	ldi	r24, 0x80	; 128
 3f0:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
 3f2:	80 e4       	ldi	r24, 0x40	; 64
 3f4:	82 83       	std	Z+2, r24	; 0x02
     return;
 3f6:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
 3f8:	80 3a       	cpi	r24, 0xA0	; 160
 3fa:	29 e0       	ldi	r18, 0x09	; 9
 3fc:	92 07       	cpc	r25, r18
 3fe:	39 f4       	brne	.+14     	; 0x40e <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
 400:	e0 e6       	ldi	r30, 0x60	; 96
 402:	f6 e0       	ldi	r31, 0x06	; 6
 404:	88 e0       	ldi	r24, 0x08	; 8
 406:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	82 83       	std	Z+2, r24	; 0x02
     return;
 40c:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
 40e:	80 3b       	cpi	r24, 0xB0	; 176
 410:	29 e0       	ldi	r18, 0x09	; 9
 412:	92 07       	cpc	r25, r18
 414:	39 f4       	brne	.+14     	; 0x424 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
 416:	e0 e6       	ldi	r30, 0x60	; 96
 418:	f6 e0       	ldi	r31, 0x06	; 6
 41a:	80 e8       	ldi	r24, 0x80	; 128
 41c:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
 41e:	80 e4       	ldi	r24, 0x40	; 64
 420:	82 83       	std	Z+2, r24	; 0x02
     return;
 422:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
 424:	80 3a       	cpi	r24, 0xA0	; 160
 426:	9a 40       	sbci	r25, 0x0A	; 10
 428:	31 f4       	brne	.+12     	; 0x436 <set_usart_txrx_direction+0x6a>
     PORTE.DIRSET      = PIN3_bm;
 42a:	e0 e8       	ldi	r30, 0x80	; 128
 42c:	f6 e0       	ldi	r31, 0x06	; 6
 42e:	88 e0       	ldi	r24, 0x08	; 8
 430:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
 432:	84 e0       	ldi	r24, 0x04	; 4
 434:	82 83       	std	Z+2, r24	; 0x02
 436:	08 95       	ret

00000438 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
 438:	4f 92       	push	r4
 43a:	5f 92       	push	r5
 43c:	6f 92       	push	r6
 43e:	7f 92       	push	r7
 440:	8f 92       	push	r8
 442:	9f 92       	push	r9
 444:	af 92       	push	r10
 446:	bf 92       	push	r11
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	49 01       	movw	r8, r18
 456:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
 458:	4e 2d       	mov	r20, r14
 45a:	41 70       	andi	r20, 0x01	; 1
 45c:	20 e1       	ldi	r18, 0x10	; 16
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	79 01       	movw	r14, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <calc_bsel+0x30>
 464:	f5 94       	asr	r15
 466:	e7 94       	ror	r14
 468:	4a 95       	dec	r20
 46a:	e2 f7       	brpl	.-8      	; 0x464 <calc_bsel+0x2c>
  if ( scale < 0 ) {
 46c:	00 23       	and	r16, r16
 46e:	0c f0       	brlt	.+2      	; 0x472 <calc_bsel+0x3a>
 470:	3a c0       	rjmp	.+116    	; 0x4e6 <calc_bsel+0xae>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
 472:	5d d2       	rcall	.+1210   	; 0x92e <__floatunsisf>
 474:	2b 01       	movw	r4, r22
 476:	3c 01       	movw	r6, r24
 478:	b7 01       	movw	r22, r14
 47a:	77 27       	eor	r23, r23
 47c:	88 27       	eor	r24, r24
 47e:	77 fd       	sbrc	r23, 7
 480:	80 95       	com	r24
 482:	98 2f       	mov	r25, r24
 484:	56 d2       	rcall	.+1196   	; 0x932 <__floatsisf>
 486:	6b 01       	movw	r12, r22
 488:	7c 01       	movw	r14, r24
 48a:	c5 01       	movw	r24, r10
 48c:	b4 01       	movw	r22, r8
 48e:	4f d2       	rcall	.+1182   	; 0x92e <__floatunsisf>
 490:	9b 01       	movw	r18, r22
 492:	ac 01       	movw	r20, r24
 494:	c7 01       	movw	r24, r14
 496:	b6 01       	movw	r22, r12
 498:	d8 d2       	rcall	.+1456   	; 0xa4a <__mulsf3>
 49a:	9b 01       	movw	r18, r22
 49c:	ac 01       	movw	r20, r24
 49e:	c3 01       	movw	r24, r6
 4a0:	b2 01       	movw	r22, r4
 4a2:	b1 d1       	rcall	.+866    	; 0x806 <__divsf3>
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	40 e8       	ldi	r20, 0x80	; 128
 4aa:	5f e3       	ldi	r21, 0x3F	; 63
 4ac:	47 d1       	rcall	.+654    	; 0x73c <__subsf3>
 4ae:	6b 01       	movw	r12, r22
 4b0:	7c 01       	movw	r14, r24
 4b2:	11 27       	eor	r17, r17
 4b4:	01 95       	neg	r16
 4b6:	0c f4       	brge	.+2      	; 0x4ba <calc_bsel+0x82>
 4b8:	10 95       	com	r17
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <calc_bsel+0x8c>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	0a 95       	dec	r16
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <calc_bsel+0x88>
 4c8:	88 27       	eor	r24, r24
 4ca:	77 fd       	sbrc	r23, 7
 4cc:	80 95       	com	r24
 4ce:	98 2f       	mov	r25, r24
 4d0:	30 d2       	rcall	.+1120   	; 0x932 <__floatsisf>
 4d2:	9b 01       	movw	r18, r22
 4d4:	ac 01       	movw	r20, r24
 4d6:	c7 01       	movw	r24, r14
 4d8:	b6 01       	movw	r22, r12
 4da:	b7 d2       	rcall	.+1390   	; 0xa4a <__mulsf3>
 4dc:	19 d3       	rcall	.+1586   	; 0xb10 <round>
 4de:	fb d1       	rcall	.+1014   	; 0x8d6 <__fixunssfsi>
 4e0:	86 2f       	mov	r24, r22
 4e2:	97 2f       	mov	r25, r23
 4e4:	35 c0       	rjmp	.+106    	; 0x550 <calc_bsel+0x118>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
 4e6:	23 d2       	rcall	.+1094   	; 0x92e <__floatunsisf>
 4e8:	2b 01       	movw	r4, r22
 4ea:	3c 01       	movw	r6, r24
 4ec:	b7 01       	movw	r22, r14
 4ee:	77 27       	eor	r23, r23
 4f0:	88 27       	eor	r24, r24
 4f2:	77 fd       	sbrc	r23, 7
 4f4:	80 95       	com	r24
 4f6:	98 2f       	mov	r25, r24
 4f8:	1c d2       	rcall	.+1080   	; 0x932 <__floatsisf>
 4fa:	6b 01       	movw	r12, r22
 4fc:	7c 01       	movw	r14, r24
 4fe:	c5 01       	movw	r24, r10
 500:	b4 01       	movw	r22, r8
 502:	15 d2       	rcall	.+1066   	; 0x92e <__floatunsisf>
 504:	9b 01       	movw	r18, r22
 506:	ac 01       	movw	r20, r24
 508:	c7 01       	movw	r24, r14
 50a:	b6 01       	movw	r22, r12
 50c:	9e d2       	rcall	.+1340   	; 0xa4a <__mulsf3>
 50e:	9b 01       	movw	r18, r22
 510:	ac 01       	movw	r20, r24
 512:	c3 01       	movw	r24, r6
 514:	b2 01       	movw	r22, r4
 516:	77 d1       	rcall	.+750    	; 0x806 <__divsf3>
 518:	4b 01       	movw	r8, r22
 51a:	5c 01       	movw	r10, r24
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <calc_bsel+0xee>
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	0a 95       	dec	r16
 528:	e2 f7       	brpl	.-8      	; 0x522 <calc_bsel+0xea>
 52a:	88 27       	eor	r24, r24
 52c:	77 fd       	sbrc	r23, 7
 52e:	80 95       	com	r24
 530:	98 2f       	mov	r25, r24
 532:	ff d1       	rcall	.+1022   	; 0x932 <__floatsisf>
 534:	9b 01       	movw	r18, r22
 536:	ac 01       	movw	r20, r24
 538:	c5 01       	movw	r24, r10
 53a:	b4 01       	movw	r22, r8
 53c:	64 d1       	rcall	.+712    	; 0x806 <__divsf3>
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	40 e8       	ldi	r20, 0x80	; 128
 544:	5f e3       	ldi	r21, 0x3F	; 63
 546:	fa d0       	rcall	.+500    	; 0x73c <__subsf3>
 548:	e3 d2       	rcall	.+1478   	; 0xb10 <round>
 54a:	c5 d1       	rcall	.+906    	; 0x8d6 <__fixunssfsi>
 54c:	86 2f       	mov	r24, r22
 54e:	97 2f       	mov	r25, r23
  }
}
 550:	1f 91       	pop	r17
 552:	0f 91       	pop	r16
 554:	ff 90       	pop	r15
 556:	ef 90       	pop	r14
 558:	df 90       	pop	r13
 55a:	cf 90       	pop	r12
 55c:	bf 90       	pop	r11
 55e:	af 90       	pop	r10
 560:	9f 90       	pop	r9
 562:	8f 90       	pop	r8
 564:	7f 90       	pop	r7
 566:	6f 90       	pop	r6
 568:	5f 90       	pop	r5
 56a:	4f 90       	pop	r4
 56c:	08 95       	ret

0000056e <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
 56e:	4f 92       	push	r4
 570:	5f 92       	push	r5
 572:	6f 92       	push	r6
 574:	7f 92       	push	r7
 576:	8f 92       	push	r8
 578:	9f 92       	push	r9
 57a:	af 92       	push	r10
 57c:	bf 92       	push	r11
 57e:	ef 92       	push	r14
 580:	0f 93       	push	r16
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	2b 01       	movw	r4, r22
 588:	3c 01       	movw	r6, r24
 58a:	49 01       	movw	r8, r18
 58c:	5a 01       	movw	r10, r20
 58e:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
 590:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
 592:	ed 2e       	mov	r14, r29
 594:	0c 2f       	mov	r16, r28
 596:	a5 01       	movw	r20, r10
 598:	94 01       	movw	r18, r8
 59a:	c3 01       	movw	r24, r6
 59c:	b2 01       	movw	r22, r4
 59e:	4c df       	rcall	.-360    	; 0x438 <calc_bsel>
 5a0:	81 15       	cp	r24, r1
 5a2:	90 41       	sbci	r25, 0x10	; 16
 5a4:	18 f0       	brcs	.+6      	; 0x5ac <calc_bscale+0x3e>
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
 5a6:	cf 5f       	subi	r28, 0xFF	; 255
 5a8:	c8 30       	cpi	r28, 0x08	; 8
 5aa:	99 f7       	brne	.-26     	; 0x592 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
 5ac:	8c 2f       	mov	r24, r28
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	0f 91       	pop	r16
 5b4:	ef 90       	pop	r14
 5b6:	bf 90       	pop	r11
 5b8:	af 90       	pop	r10
 5ba:	9f 90       	pop	r9
 5bc:	8f 90       	pop	r8
 5be:	7f 90       	pop	r7
 5c0:	6f 90       	pop	r6
 5c2:	5f 90       	pop	r5
 5c4:	4f 90       	pop	r4
 5c6:	08 95       	ret

000005c8 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
 5c8:	2f 92       	push	r2
 5ca:	3f 92       	push	r3
 5cc:	4f 92       	push	r4
 5ce:	5f 92       	push	r5
 5d0:	6f 92       	push	r6
 5d2:	7f 92       	push	r7
 5d4:	8f 92       	push	r8
 5d6:	9f 92       	push	r9
 5d8:	af 92       	push	r10
 5da:	bf 92       	push	r11
 5dc:	cf 92       	push	r12
 5de:	ef 92       	push	r14
 5e0:	ff 92       	push	r15
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	ec 01       	movw	r28, r24
 5ec:	3b 01       	movw	r6, r22
 5ee:	49 01       	movw	r8, r18
 5f0:	5a 01       	movw	r10, r20
 5f2:	17 01       	movw	r2, r14
 5f4:	28 01       	movw	r4, r16
 5f6:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
 5f8:	0c 2d       	mov	r16, r12
 5fa:	a2 01       	movw	r20, r4
 5fc:	91 01       	movw	r18, r2
 5fe:	c5 01       	movw	r24, r10
 600:	b4 01       	movw	r22, r8
 602:	b5 df       	rcall	.-150    	; 0x56e <calc_bscale>
 604:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
 606:	08 2f       	mov	r16, r24
 608:	a2 01       	movw	r20, r4
 60a:	91 01       	movw	r18, r2
 60c:	c5 01       	movw	r24, r10
 60e:	b4 01       	movw	r22, r8
 610:	13 df       	rcall	.-474    	; 0x438 <calc_bsel>
 612:	b8 2e       	mov	r11, r24
 614:	e9 2e       	mov	r14, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
 616:	41 e0       	ldi	r20, 0x01	; 1
 618:	b3 01       	movw	r22, r6
 61a:	ce 01       	movw	r24, r28
 61c:	32 d0       	rcall	.+100    	; 0x682 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
 61e:	e8 81       	ld	r30, Y
 620:	f9 81       	ldd	r31, Y+1	; 0x01
 622:	83 e0       	ldi	r24, 0x03	; 3
 624:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
 626:	e8 81       	ld	r30, Y
 628:	f9 81       	ldd	r31, Y+1	; 0x01
 62a:	84 81       	ldd	r24, Z+4	; 0x04
 62c:	80 61       	ori	r24, 0x10	; 16
 62e:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
 630:	e8 81       	ld	r30, Y
 632:	f9 81       	ldd	r31, Y+1	; 0x01
 634:	84 81       	ldd	r24, Z+4	; 0x04
 636:	88 60       	ori	r24, 0x08	; 8
 638:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
 63a:	e8 81       	ld	r30, Y
 63c:	f9 81       	ldd	r31, Y+1	; 0x01
 63e:	83 81       	ldd	r24, Z+3	; 0x03
 640:	8f 7c       	andi	r24, 0xCF	; 207
 642:	80 61       	ori	r24, 0x10	; 16
 644:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
 646:	e8 81       	ld	r30, Y
 648:	f9 81       	ldd	r31, Y+1	; 0x01
 64a:	b6 82       	std	Z+6, r11	; 0x06
 64c:	e8 81       	ld	r30, Y
 64e:	f9 81       	ldd	r31, Y+1	; 0x01
 650:	12 95       	swap	r17
 652:	10 7f       	andi	r17, 0xF0	; 240
 654:	e1 2a       	or	r14, r17
 656:	e7 82       	std	Z+7, r14	; 0x07

  set_usart_txrx_direction(uart->usart);
 658:	88 81       	ld	r24, Y
 65a:	99 81       	ldd	r25, Y+1	; 0x01
 65c:	b7 de       	rcall	.-658    	; 0x3cc <set_usart_txrx_direction>
}
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	ff 90       	pop	r15
 668:	ef 90       	pop	r14
 66a:	cf 90       	pop	r12
 66c:	bf 90       	pop	r11
 66e:	af 90       	pop	r10
 670:	9f 90       	pop	r9
 672:	8f 90       	pop	r8
 674:	7f 90       	pop	r7
 676:	6f 90       	pop	r6
 678:	5f 90       	pop	r5
 67a:	4f 90       	pop	r4
 67c:	3f 90       	pop	r3
 67e:	2f 90       	pop	r2
 680:	08 95       	ret

00000682 <USART_InterruptDriver_Initialize>:

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;

	return ans;
}
 682:	fc 01       	movw	r30, r24
 684:	60 83       	st	Z, r22
 686:	71 83       	std	Z+1, r23	; 0x01
 688:	42 83       	std	Z+2, r20	; 0x02
 68a:	14 86       	std	Z+12, r1	; 0x0c
 68c:	13 86       	std	Z+11, r1	; 0x0b
 68e:	16 86       	std	Z+14, r1	; 0x0e
 690:	15 86       	std	Z+13, r1	; 0x0d
 692:	08 95       	ret

00000694 <USART_TXBuffer_FreeSpace>:
 694:	fc 01       	movw	r30, r24
 696:	25 85       	ldd	r18, Z+13	; 0x0d
 698:	96 85       	ldd	r25, Z+14	; 0x0e
 69a:	2f 5f       	subi	r18, 0xFF	; 255
 69c:	23 70       	andi	r18, 0x03	; 3
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	29 13       	cpse	r18, r25
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <USART_TXBuffer_FreeSpace+0x12>
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	08 95       	ret

000006a8 <USART_TXBuffer_PutByte>:
 6a8:	1f 93       	push	r17
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	ec 01       	movw	r28, r24
 6b0:	16 2f       	mov	r17, r22
 6b2:	f0 df       	rcall	.-32     	; 0x694 <USART_TXBuffer_FreeSpace>
 6b4:	88 23       	and	r24, r24
 6b6:	79 f0       	breq	.+30     	; 0x6d6 <USART_TXBuffer_PutByte+0x2e>
 6b8:	9d 85       	ldd	r25, Y+13	; 0x0d
 6ba:	fe 01       	movw	r30, r28
 6bc:	e9 0f       	add	r30, r25
 6be:	f1 1d       	adc	r31, r1
 6c0:	17 83       	std	Z+7, r17	; 0x07
 6c2:	9f 5f       	subi	r25, 0xFF	; 255
 6c4:	93 70       	andi	r25, 0x03	; 3
 6c6:	9d 87       	std	Y+13, r25	; 0x0d
 6c8:	e8 81       	ld	r30, Y
 6ca:	f9 81       	ldd	r31, Y+1	; 0x01
 6cc:	93 81       	ldd	r25, Z+3	; 0x03
 6ce:	9c 7f       	andi	r25, 0xFC	; 252
 6d0:	2a 81       	ldd	r18, Y+2	; 0x02
 6d2:	92 2b       	or	r25, r18
 6d4:	93 83       	std	Z+3, r25	; 0x03
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	08 95       	ret

000006de <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 6de:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 6e0:	83 85       	ldd	r24, Z+11	; 0x0b
 6e2:	8f 5f       	subi	r24, 0xFF	; 255
 6e4:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 6e6:	94 85       	ldd	r25, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 6e8:	a0 81       	ld	r26, Z
 6ea:	b1 81       	ldd	r27, Z+1	; 0x01
 6ec:	2c 91       	ld	r18, X

	if (tempRX_Head == tempRX_Tail) {
 6ee:	89 17       	cp	r24, r25
 6f0:	49 f0       	breq	.+18     	; 0x704 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 6f2:	93 85       	ldd	r25, Z+11	; 0x0b
 6f4:	df 01       	movw	r26, r30
 6f6:	a9 0f       	add	r26, r25
 6f8:	b1 1d       	adc	r27, r1
 6fa:	13 96       	adiw	r26, 0x03	; 3
 6fc:	2c 93       	st	X, r18
		usart_data->buffer.RX_Head = tempRX_Head;
 6fe:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 704:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 706:	08 95       	ret

00000708 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 708:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 70a:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 70c:	95 85       	ldd	r25, Z+13	; 0x0d
 70e:	98 13       	cpse	r25, r24
 710:	07 c0       	rjmp	.+14     	; 0x720 <USART_DataRegEmpty+0x18>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 712:	01 90       	ld	r0, Z+
 714:	f0 81       	ld	r31, Z
 716:	e0 2d       	mov	r30, r0
 718:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 71a:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 71c:	83 83       	std	Z+3, r24	; 0x03
 71e:	08 95       	ret

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 720:	86 85       	ldd	r24, Z+14	; 0x0e
 722:	df 01       	movw	r26, r30
 724:	a8 0f       	add	r26, r24
 726:	b1 1d       	adc	r27, r1
 728:	17 96       	adiw	r26, 0x07	; 7
 72a:	8c 91       	ld	r24, X
		usart_data->usart->DATA = data;
 72c:	a0 81       	ld	r26, Z
 72e:	b1 81       	ldd	r27, Z+1	; 0x01
 730:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 732:	86 85       	ldd	r24, Z+14	; 0x0e
 734:	8f 5f       	subi	r24, 0xFF	; 255
 736:	83 70       	andi	r24, 0x03	; 3
 738:	86 87       	std	Z+14, r24	; 0x0e
 73a:	08 95       	ret

0000073c <__subsf3>:
 73c:	50 58       	subi	r21, 0x80	; 128

0000073e <__addsf3>:
 73e:	bb 27       	eor	r27, r27
 740:	aa 27       	eor	r26, r26
 742:	0e d0       	rcall	.+28     	; 0x760 <__addsf3x>
 744:	48 c1       	rjmp	.+656    	; 0x9d6 <__fp_round>
 746:	39 d1       	rcall	.+626    	; 0x9ba <__fp_pscA>
 748:	30 f0       	brcs	.+12     	; 0x756 <__addsf3+0x18>
 74a:	3e d1       	rcall	.+636    	; 0x9c8 <__fp_pscB>
 74c:	20 f0       	brcs	.+8      	; 0x756 <__addsf3+0x18>
 74e:	31 f4       	brne	.+12     	; 0x75c <__addsf3+0x1e>
 750:	9f 3f       	cpi	r25, 0xFF	; 255
 752:	11 f4       	brne	.+4      	; 0x758 <__addsf3+0x1a>
 754:	1e f4       	brtc	.+6      	; 0x75c <__addsf3+0x1e>
 756:	2e c1       	rjmp	.+604    	; 0x9b4 <__fp_nan>
 758:	0e f4       	brtc	.+2      	; 0x75c <__addsf3+0x1e>
 75a:	e0 95       	com	r30
 75c:	e7 fb       	bst	r30, 7
 75e:	24 c1       	rjmp	.+584    	; 0x9a8 <__fp_inf>

00000760 <__addsf3x>:
 760:	e9 2f       	mov	r30, r25
 762:	4a d1       	rcall	.+660    	; 0x9f8 <__fp_split3>
 764:	80 f3       	brcs	.-32     	; 0x746 <__addsf3+0x8>
 766:	ba 17       	cp	r27, r26
 768:	62 07       	cpc	r22, r18
 76a:	73 07       	cpc	r23, r19
 76c:	84 07       	cpc	r24, r20
 76e:	95 07       	cpc	r25, r21
 770:	18 f0       	brcs	.+6      	; 0x778 <__addsf3x+0x18>
 772:	71 f4       	brne	.+28     	; 0x790 <__addsf3x+0x30>
 774:	9e f5       	brtc	.+102    	; 0x7dc <__addsf3x+0x7c>
 776:	62 c1       	rjmp	.+708    	; 0xa3c <__fp_zero>
 778:	0e f4       	brtc	.+2      	; 0x77c <__addsf3x+0x1c>
 77a:	e0 95       	com	r30
 77c:	0b 2e       	mov	r0, r27
 77e:	ba 2f       	mov	r27, r26
 780:	a0 2d       	mov	r26, r0
 782:	0b 01       	movw	r0, r22
 784:	b9 01       	movw	r22, r18
 786:	90 01       	movw	r18, r0
 788:	0c 01       	movw	r0, r24
 78a:	ca 01       	movw	r24, r20
 78c:	a0 01       	movw	r20, r0
 78e:	11 24       	eor	r1, r1
 790:	ff 27       	eor	r31, r31
 792:	59 1b       	sub	r21, r25
 794:	99 f0       	breq	.+38     	; 0x7bc <__addsf3x+0x5c>
 796:	59 3f       	cpi	r21, 0xF9	; 249
 798:	50 f4       	brcc	.+20     	; 0x7ae <__addsf3x+0x4e>
 79a:	50 3e       	cpi	r21, 0xE0	; 224
 79c:	68 f1       	brcs	.+90     	; 0x7f8 <__addsf3x+0x98>
 79e:	1a 16       	cp	r1, r26
 7a0:	f0 40       	sbci	r31, 0x00	; 0
 7a2:	a2 2f       	mov	r26, r18
 7a4:	23 2f       	mov	r18, r19
 7a6:	34 2f       	mov	r19, r20
 7a8:	44 27       	eor	r20, r20
 7aa:	58 5f       	subi	r21, 0xF8	; 248
 7ac:	f3 cf       	rjmp	.-26     	; 0x794 <__addsf3x+0x34>
 7ae:	46 95       	lsr	r20
 7b0:	37 95       	ror	r19
 7b2:	27 95       	ror	r18
 7b4:	a7 95       	ror	r26
 7b6:	f0 40       	sbci	r31, 0x00	; 0
 7b8:	53 95       	inc	r21
 7ba:	c9 f7       	brne	.-14     	; 0x7ae <__addsf3x+0x4e>
 7bc:	7e f4       	brtc	.+30     	; 0x7dc <__addsf3x+0x7c>
 7be:	1f 16       	cp	r1, r31
 7c0:	ba 0b       	sbc	r27, r26
 7c2:	62 0b       	sbc	r22, r18
 7c4:	73 0b       	sbc	r23, r19
 7c6:	84 0b       	sbc	r24, r20
 7c8:	ba f0       	brmi	.+46     	; 0x7f8 <__addsf3x+0x98>
 7ca:	91 50       	subi	r25, 0x01	; 1
 7cc:	a1 f0       	breq	.+40     	; 0x7f6 <__addsf3x+0x96>
 7ce:	ff 0f       	add	r31, r31
 7d0:	bb 1f       	adc	r27, r27
 7d2:	66 1f       	adc	r22, r22
 7d4:	77 1f       	adc	r23, r23
 7d6:	88 1f       	adc	r24, r24
 7d8:	c2 f7       	brpl	.-16     	; 0x7ca <__addsf3x+0x6a>
 7da:	0e c0       	rjmp	.+28     	; 0x7f8 <__addsf3x+0x98>
 7dc:	ba 0f       	add	r27, r26
 7de:	62 1f       	adc	r22, r18
 7e0:	73 1f       	adc	r23, r19
 7e2:	84 1f       	adc	r24, r20
 7e4:	48 f4       	brcc	.+18     	; 0x7f8 <__addsf3x+0x98>
 7e6:	87 95       	ror	r24
 7e8:	77 95       	ror	r23
 7ea:	67 95       	ror	r22
 7ec:	b7 95       	ror	r27
 7ee:	f7 95       	ror	r31
 7f0:	9e 3f       	cpi	r25, 0xFE	; 254
 7f2:	08 f0       	brcs	.+2      	; 0x7f6 <__addsf3x+0x96>
 7f4:	b3 cf       	rjmp	.-154    	; 0x75c <__addsf3+0x1e>
 7f6:	93 95       	inc	r25
 7f8:	88 0f       	add	r24, r24
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <__addsf3x+0x9e>
 7fc:	99 27       	eor	r25, r25
 7fe:	ee 0f       	add	r30, r30
 800:	97 95       	ror	r25
 802:	87 95       	ror	r24
 804:	08 95       	ret

00000806 <__divsf3>:
 806:	0c d0       	rcall	.+24     	; 0x820 <__divsf3x>
 808:	e6 c0       	rjmp	.+460    	; 0x9d6 <__fp_round>
 80a:	de d0       	rcall	.+444    	; 0x9c8 <__fp_pscB>
 80c:	40 f0       	brcs	.+16     	; 0x81e <__divsf3+0x18>
 80e:	d5 d0       	rcall	.+426    	; 0x9ba <__fp_pscA>
 810:	30 f0       	brcs	.+12     	; 0x81e <__divsf3+0x18>
 812:	21 f4       	brne	.+8      	; 0x81c <__divsf3+0x16>
 814:	5f 3f       	cpi	r21, 0xFF	; 255
 816:	19 f0       	breq	.+6      	; 0x81e <__divsf3+0x18>
 818:	c7 c0       	rjmp	.+398    	; 0x9a8 <__fp_inf>
 81a:	51 11       	cpse	r21, r1
 81c:	10 c1       	rjmp	.+544    	; 0xa3e <__fp_szero>
 81e:	ca c0       	rjmp	.+404    	; 0x9b4 <__fp_nan>

00000820 <__divsf3x>:
 820:	eb d0       	rcall	.+470    	; 0x9f8 <__fp_split3>
 822:	98 f3       	brcs	.-26     	; 0x80a <__divsf3+0x4>

00000824 <__divsf3_pse>:
 824:	99 23       	and	r25, r25
 826:	c9 f3       	breq	.-14     	; 0x81a <__divsf3+0x14>
 828:	55 23       	and	r21, r21
 82a:	b1 f3       	breq	.-20     	; 0x818 <__divsf3+0x12>
 82c:	95 1b       	sub	r25, r21
 82e:	55 0b       	sbc	r21, r21
 830:	bb 27       	eor	r27, r27
 832:	aa 27       	eor	r26, r26
 834:	62 17       	cp	r22, r18
 836:	73 07       	cpc	r23, r19
 838:	84 07       	cpc	r24, r20
 83a:	38 f0       	brcs	.+14     	; 0x84a <__divsf3_pse+0x26>
 83c:	9f 5f       	subi	r25, 0xFF	; 255
 83e:	5f 4f       	sbci	r21, 0xFF	; 255
 840:	22 0f       	add	r18, r18
 842:	33 1f       	adc	r19, r19
 844:	44 1f       	adc	r20, r20
 846:	aa 1f       	adc	r26, r26
 848:	a9 f3       	breq	.-22     	; 0x834 <__divsf3_pse+0x10>
 84a:	33 d0       	rcall	.+102    	; 0x8b2 <__divsf3_pse+0x8e>
 84c:	0e 2e       	mov	r0, r30
 84e:	3a f0       	brmi	.+14     	; 0x85e <__divsf3_pse+0x3a>
 850:	e0 e8       	ldi	r30, 0x80	; 128
 852:	30 d0       	rcall	.+96     	; 0x8b4 <__divsf3_pse+0x90>
 854:	91 50       	subi	r25, 0x01	; 1
 856:	50 40       	sbci	r21, 0x00	; 0
 858:	e6 95       	lsr	r30
 85a:	00 1c       	adc	r0, r0
 85c:	ca f7       	brpl	.-14     	; 0x850 <__divsf3_pse+0x2c>
 85e:	29 d0       	rcall	.+82     	; 0x8b2 <__divsf3_pse+0x8e>
 860:	fe 2f       	mov	r31, r30
 862:	27 d0       	rcall	.+78     	; 0x8b2 <__divsf3_pse+0x8e>
 864:	66 0f       	add	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	bb 1f       	adc	r27, r27
 86c:	26 17       	cp	r18, r22
 86e:	37 07       	cpc	r19, r23
 870:	48 07       	cpc	r20, r24
 872:	ab 07       	cpc	r26, r27
 874:	b0 e8       	ldi	r27, 0x80	; 128
 876:	09 f0       	breq	.+2      	; 0x87a <__divsf3_pse+0x56>
 878:	bb 0b       	sbc	r27, r27
 87a:	80 2d       	mov	r24, r0
 87c:	bf 01       	movw	r22, r30
 87e:	ff 27       	eor	r31, r31
 880:	93 58       	subi	r25, 0x83	; 131
 882:	5f 4f       	sbci	r21, 0xFF	; 255
 884:	2a f0       	brmi	.+10     	; 0x890 <__divsf3_pse+0x6c>
 886:	9e 3f       	cpi	r25, 0xFE	; 254
 888:	51 05       	cpc	r21, r1
 88a:	68 f0       	brcs	.+26     	; 0x8a6 <__divsf3_pse+0x82>
 88c:	8d c0       	rjmp	.+282    	; 0x9a8 <__fp_inf>
 88e:	d7 c0       	rjmp	.+430    	; 0xa3e <__fp_szero>
 890:	5f 3f       	cpi	r21, 0xFF	; 255
 892:	ec f3       	brlt	.-6      	; 0x88e <__divsf3_pse+0x6a>
 894:	98 3e       	cpi	r25, 0xE8	; 232
 896:	dc f3       	brlt	.-10     	; 0x88e <__divsf3_pse+0x6a>
 898:	86 95       	lsr	r24
 89a:	77 95       	ror	r23
 89c:	67 95       	ror	r22
 89e:	b7 95       	ror	r27
 8a0:	f7 95       	ror	r31
 8a2:	9f 5f       	subi	r25, 0xFF	; 255
 8a4:	c9 f7       	brne	.-14     	; 0x898 <__divsf3_pse+0x74>
 8a6:	88 0f       	add	r24, r24
 8a8:	91 1d       	adc	r25, r1
 8aa:	96 95       	lsr	r25
 8ac:	87 95       	ror	r24
 8ae:	97 f9       	bld	r25, 7
 8b0:	08 95       	ret
 8b2:	e1 e0       	ldi	r30, 0x01	; 1
 8b4:	66 0f       	add	r22, r22
 8b6:	77 1f       	adc	r23, r23
 8b8:	88 1f       	adc	r24, r24
 8ba:	bb 1f       	adc	r27, r27
 8bc:	62 17       	cp	r22, r18
 8be:	73 07       	cpc	r23, r19
 8c0:	84 07       	cpc	r24, r20
 8c2:	ba 07       	cpc	r27, r26
 8c4:	20 f0       	brcs	.+8      	; 0x8ce <__divsf3_pse+0xaa>
 8c6:	62 1b       	sub	r22, r18
 8c8:	73 0b       	sbc	r23, r19
 8ca:	84 0b       	sbc	r24, r20
 8cc:	ba 0b       	sbc	r27, r26
 8ce:	ee 1f       	adc	r30, r30
 8d0:	88 f7       	brcc	.-30     	; 0x8b4 <__divsf3_pse+0x90>
 8d2:	e0 95       	com	r30
 8d4:	08 95       	ret

000008d6 <__fixunssfsi>:
 8d6:	98 d0       	rcall	.+304    	; 0xa08 <__fp_splitA>
 8d8:	88 f0       	brcs	.+34     	; 0x8fc <__fixunssfsi+0x26>
 8da:	9f 57       	subi	r25, 0x7F	; 127
 8dc:	90 f0       	brcs	.+36     	; 0x902 <__fixunssfsi+0x2c>
 8de:	b9 2f       	mov	r27, r25
 8e0:	99 27       	eor	r25, r25
 8e2:	b7 51       	subi	r27, 0x17	; 23
 8e4:	a0 f0       	brcs	.+40     	; 0x90e <__fixunssfsi+0x38>
 8e6:	d1 f0       	breq	.+52     	; 0x91c <__fixunssfsi+0x46>
 8e8:	66 0f       	add	r22, r22
 8ea:	77 1f       	adc	r23, r23
 8ec:	88 1f       	adc	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	1a f0       	brmi	.+6      	; 0x8f8 <__fixunssfsi+0x22>
 8f2:	ba 95       	dec	r27
 8f4:	c9 f7       	brne	.-14     	; 0x8e8 <__fixunssfsi+0x12>
 8f6:	12 c0       	rjmp	.+36     	; 0x91c <__fixunssfsi+0x46>
 8f8:	b1 30       	cpi	r27, 0x01	; 1
 8fa:	81 f0       	breq	.+32     	; 0x91c <__fixunssfsi+0x46>
 8fc:	9f d0       	rcall	.+318    	; 0xa3c <__fp_zero>
 8fe:	b1 e0       	ldi	r27, 0x01	; 1
 900:	08 95       	ret
 902:	9c c0       	rjmp	.+312    	; 0xa3c <__fp_zero>
 904:	67 2f       	mov	r22, r23
 906:	78 2f       	mov	r23, r24
 908:	88 27       	eor	r24, r24
 90a:	b8 5f       	subi	r27, 0xF8	; 248
 90c:	39 f0       	breq	.+14     	; 0x91c <__fixunssfsi+0x46>
 90e:	b9 3f       	cpi	r27, 0xF9	; 249
 910:	cc f3       	brlt	.-14     	; 0x904 <__fixunssfsi+0x2e>
 912:	86 95       	lsr	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	b3 95       	inc	r27
 91a:	d9 f7       	brne	.-10     	; 0x912 <__fixunssfsi+0x3c>
 91c:	3e f4       	brtc	.+14     	; 0x92c <__fixunssfsi+0x56>
 91e:	90 95       	com	r25
 920:	80 95       	com	r24
 922:	70 95       	com	r23
 924:	61 95       	neg	r22
 926:	7f 4f       	sbci	r23, 0xFF	; 255
 928:	8f 4f       	sbci	r24, 0xFF	; 255
 92a:	9f 4f       	sbci	r25, 0xFF	; 255
 92c:	08 95       	ret

0000092e <__floatunsisf>:
 92e:	e8 94       	clt
 930:	09 c0       	rjmp	.+18     	; 0x944 <__floatsisf+0x12>

00000932 <__floatsisf>:
 932:	97 fb       	bst	r25, 7
 934:	3e f4       	brtc	.+14     	; 0x944 <__floatsisf+0x12>
 936:	90 95       	com	r25
 938:	80 95       	com	r24
 93a:	70 95       	com	r23
 93c:	61 95       	neg	r22
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	8f 4f       	sbci	r24, 0xFF	; 255
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	99 23       	and	r25, r25
 946:	a9 f0       	breq	.+42     	; 0x972 <__floatsisf+0x40>
 948:	f9 2f       	mov	r31, r25
 94a:	96 e9       	ldi	r25, 0x96	; 150
 94c:	bb 27       	eor	r27, r27
 94e:	93 95       	inc	r25
 950:	f6 95       	lsr	r31
 952:	87 95       	ror	r24
 954:	77 95       	ror	r23
 956:	67 95       	ror	r22
 958:	b7 95       	ror	r27
 95a:	f1 11       	cpse	r31, r1
 95c:	f8 cf       	rjmp	.-16     	; 0x94e <__floatsisf+0x1c>
 95e:	fa f4       	brpl	.+62     	; 0x99e <__floatsisf+0x6c>
 960:	bb 0f       	add	r27, r27
 962:	11 f4       	brne	.+4      	; 0x968 <__floatsisf+0x36>
 964:	60 ff       	sbrs	r22, 0
 966:	1b c0       	rjmp	.+54     	; 0x99e <__floatsisf+0x6c>
 968:	6f 5f       	subi	r22, 0xFF	; 255
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	16 c0       	rjmp	.+44     	; 0x99e <__floatsisf+0x6c>
 972:	88 23       	and	r24, r24
 974:	11 f0       	breq	.+4      	; 0x97a <__floatsisf+0x48>
 976:	96 e9       	ldi	r25, 0x96	; 150
 978:	11 c0       	rjmp	.+34     	; 0x99c <__floatsisf+0x6a>
 97a:	77 23       	and	r23, r23
 97c:	21 f0       	breq	.+8      	; 0x986 <__floatsisf+0x54>
 97e:	9e e8       	ldi	r25, 0x8E	; 142
 980:	87 2f       	mov	r24, r23
 982:	76 2f       	mov	r23, r22
 984:	05 c0       	rjmp	.+10     	; 0x990 <__floatsisf+0x5e>
 986:	66 23       	and	r22, r22
 988:	71 f0       	breq	.+28     	; 0x9a6 <__floatsisf+0x74>
 98a:	96 e8       	ldi	r25, 0x86	; 134
 98c:	86 2f       	mov	r24, r22
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	60 e0       	ldi	r22, 0x00	; 0
 992:	2a f0       	brmi	.+10     	; 0x99e <__floatsisf+0x6c>
 994:	9a 95       	dec	r25
 996:	66 0f       	add	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	da f7       	brpl	.-10     	; 0x994 <__floatsisf+0x62>
 99e:	88 0f       	add	r24, r24
 9a0:	96 95       	lsr	r25
 9a2:	87 95       	ror	r24
 9a4:	97 f9       	bld	r25, 7
 9a6:	08 95       	ret

000009a8 <__fp_inf>:
 9a8:	97 f9       	bld	r25, 7
 9aa:	9f 67       	ori	r25, 0x7F	; 127
 9ac:	80 e8       	ldi	r24, 0x80	; 128
 9ae:	70 e0       	ldi	r23, 0x00	; 0
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	08 95       	ret

000009b4 <__fp_nan>:
 9b4:	9f ef       	ldi	r25, 0xFF	; 255
 9b6:	80 ec       	ldi	r24, 0xC0	; 192
 9b8:	08 95       	ret

000009ba <__fp_pscA>:
 9ba:	00 24       	eor	r0, r0
 9bc:	0a 94       	dec	r0
 9be:	16 16       	cp	r1, r22
 9c0:	17 06       	cpc	r1, r23
 9c2:	18 06       	cpc	r1, r24
 9c4:	09 06       	cpc	r0, r25
 9c6:	08 95       	ret

000009c8 <__fp_pscB>:
 9c8:	00 24       	eor	r0, r0
 9ca:	0a 94       	dec	r0
 9cc:	12 16       	cp	r1, r18
 9ce:	13 06       	cpc	r1, r19
 9d0:	14 06       	cpc	r1, r20
 9d2:	05 06       	cpc	r0, r21
 9d4:	08 95       	ret

000009d6 <__fp_round>:
 9d6:	09 2e       	mov	r0, r25
 9d8:	03 94       	inc	r0
 9da:	00 0c       	add	r0, r0
 9dc:	11 f4       	brne	.+4      	; 0x9e2 <__fp_round+0xc>
 9de:	88 23       	and	r24, r24
 9e0:	52 f0       	brmi	.+20     	; 0x9f6 <__fp_round+0x20>
 9e2:	bb 0f       	add	r27, r27
 9e4:	40 f4       	brcc	.+16     	; 0x9f6 <__fp_round+0x20>
 9e6:	bf 2b       	or	r27, r31
 9e8:	11 f4       	brne	.+4      	; 0x9ee <__fp_round+0x18>
 9ea:	60 ff       	sbrs	r22, 0
 9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <__fp_round+0x20>
 9ee:	6f 5f       	subi	r22, 0xFF	; 255
 9f0:	7f 4f       	sbci	r23, 0xFF	; 255
 9f2:	8f 4f       	sbci	r24, 0xFF	; 255
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	08 95       	ret

000009f8 <__fp_split3>:
 9f8:	57 fd       	sbrc	r21, 7
 9fa:	90 58       	subi	r25, 0x80	; 128
 9fc:	44 0f       	add	r20, r20
 9fe:	55 1f       	adc	r21, r21
 a00:	59 f0       	breq	.+22     	; 0xa18 <__fp_splitA+0x10>
 a02:	5f 3f       	cpi	r21, 0xFF	; 255
 a04:	71 f0       	breq	.+28     	; 0xa22 <__fp_splitA+0x1a>
 a06:	47 95       	ror	r20

00000a08 <__fp_splitA>:
 a08:	88 0f       	add	r24, r24
 a0a:	97 fb       	bst	r25, 7
 a0c:	99 1f       	adc	r25, r25
 a0e:	61 f0       	breq	.+24     	; 0xa28 <__fp_splitA+0x20>
 a10:	9f 3f       	cpi	r25, 0xFF	; 255
 a12:	79 f0       	breq	.+30     	; 0xa32 <__fp_splitA+0x2a>
 a14:	87 95       	ror	r24
 a16:	08 95       	ret
 a18:	12 16       	cp	r1, r18
 a1a:	13 06       	cpc	r1, r19
 a1c:	14 06       	cpc	r1, r20
 a1e:	55 1f       	adc	r21, r21
 a20:	f2 cf       	rjmp	.-28     	; 0xa06 <__fp_split3+0xe>
 a22:	46 95       	lsr	r20
 a24:	f1 df       	rcall	.-30     	; 0xa08 <__fp_splitA>
 a26:	08 c0       	rjmp	.+16     	; 0xa38 <__fp_splitA+0x30>
 a28:	16 16       	cp	r1, r22
 a2a:	17 06       	cpc	r1, r23
 a2c:	18 06       	cpc	r1, r24
 a2e:	99 1f       	adc	r25, r25
 a30:	f1 cf       	rjmp	.-30     	; 0xa14 <__fp_splitA+0xc>
 a32:	86 95       	lsr	r24
 a34:	71 05       	cpc	r23, r1
 a36:	61 05       	cpc	r22, r1
 a38:	08 94       	sec
 a3a:	08 95       	ret

00000a3c <__fp_zero>:
 a3c:	e8 94       	clt

00000a3e <__fp_szero>:
 a3e:	bb 27       	eor	r27, r27
 a40:	66 27       	eor	r22, r22
 a42:	77 27       	eor	r23, r23
 a44:	cb 01       	movw	r24, r22
 a46:	97 f9       	bld	r25, 7
 a48:	08 95       	ret

00000a4a <__mulsf3>:
 a4a:	0b d0       	rcall	.+22     	; 0xa62 <__mulsf3x>
 a4c:	c4 cf       	rjmp	.-120    	; 0x9d6 <__fp_round>
 a4e:	b5 df       	rcall	.-150    	; 0x9ba <__fp_pscA>
 a50:	28 f0       	brcs	.+10     	; 0xa5c <__mulsf3+0x12>
 a52:	ba df       	rcall	.-140    	; 0x9c8 <__fp_pscB>
 a54:	18 f0       	brcs	.+6      	; 0xa5c <__mulsf3+0x12>
 a56:	95 23       	and	r25, r21
 a58:	09 f0       	breq	.+2      	; 0xa5c <__mulsf3+0x12>
 a5a:	a6 cf       	rjmp	.-180    	; 0x9a8 <__fp_inf>
 a5c:	ab cf       	rjmp	.-170    	; 0x9b4 <__fp_nan>
 a5e:	11 24       	eor	r1, r1
 a60:	ee cf       	rjmp	.-36     	; 0xa3e <__fp_szero>

00000a62 <__mulsf3x>:
 a62:	ca df       	rcall	.-108    	; 0x9f8 <__fp_split3>
 a64:	a0 f3       	brcs	.-24     	; 0xa4e <__mulsf3+0x4>

00000a66 <__mulsf3_pse>:
 a66:	95 9f       	mul	r25, r21
 a68:	d1 f3       	breq	.-12     	; 0xa5e <__mulsf3+0x14>
 a6a:	95 0f       	add	r25, r21
 a6c:	50 e0       	ldi	r21, 0x00	; 0
 a6e:	55 1f       	adc	r21, r21
 a70:	62 9f       	mul	r22, r18
 a72:	f0 01       	movw	r30, r0
 a74:	72 9f       	mul	r23, r18
 a76:	bb 27       	eor	r27, r27
 a78:	f0 0d       	add	r31, r0
 a7a:	b1 1d       	adc	r27, r1
 a7c:	63 9f       	mul	r22, r19
 a7e:	aa 27       	eor	r26, r26
 a80:	f0 0d       	add	r31, r0
 a82:	b1 1d       	adc	r27, r1
 a84:	aa 1f       	adc	r26, r26
 a86:	64 9f       	mul	r22, r20
 a88:	66 27       	eor	r22, r22
 a8a:	b0 0d       	add	r27, r0
 a8c:	a1 1d       	adc	r26, r1
 a8e:	66 1f       	adc	r22, r22
 a90:	82 9f       	mul	r24, r18
 a92:	22 27       	eor	r18, r18
 a94:	b0 0d       	add	r27, r0
 a96:	a1 1d       	adc	r26, r1
 a98:	62 1f       	adc	r22, r18
 a9a:	73 9f       	mul	r23, r19
 a9c:	b0 0d       	add	r27, r0
 a9e:	a1 1d       	adc	r26, r1
 aa0:	62 1f       	adc	r22, r18
 aa2:	83 9f       	mul	r24, r19
 aa4:	a0 0d       	add	r26, r0
 aa6:	61 1d       	adc	r22, r1
 aa8:	22 1f       	adc	r18, r18
 aaa:	74 9f       	mul	r23, r20
 aac:	33 27       	eor	r19, r19
 aae:	a0 0d       	add	r26, r0
 ab0:	61 1d       	adc	r22, r1
 ab2:	23 1f       	adc	r18, r19
 ab4:	84 9f       	mul	r24, r20
 ab6:	60 0d       	add	r22, r0
 ab8:	21 1d       	adc	r18, r1
 aba:	82 2f       	mov	r24, r18
 abc:	76 2f       	mov	r23, r22
 abe:	6a 2f       	mov	r22, r26
 ac0:	11 24       	eor	r1, r1
 ac2:	9f 57       	subi	r25, 0x7F	; 127
 ac4:	50 40       	sbci	r21, 0x00	; 0
 ac6:	8a f0       	brmi	.+34     	; 0xaea <__mulsf3_pse+0x84>
 ac8:	e1 f0       	breq	.+56     	; 0xb02 <__mulsf3_pse+0x9c>
 aca:	88 23       	and	r24, r24
 acc:	4a f0       	brmi	.+18     	; 0xae0 <__mulsf3_pse+0x7a>
 ace:	ee 0f       	add	r30, r30
 ad0:	ff 1f       	adc	r31, r31
 ad2:	bb 1f       	adc	r27, r27
 ad4:	66 1f       	adc	r22, r22
 ad6:	77 1f       	adc	r23, r23
 ad8:	88 1f       	adc	r24, r24
 ada:	91 50       	subi	r25, 0x01	; 1
 adc:	50 40       	sbci	r21, 0x00	; 0
 ade:	a9 f7       	brne	.-22     	; 0xaca <__mulsf3_pse+0x64>
 ae0:	9e 3f       	cpi	r25, 0xFE	; 254
 ae2:	51 05       	cpc	r21, r1
 ae4:	70 f0       	brcs	.+28     	; 0xb02 <__mulsf3_pse+0x9c>
 ae6:	60 cf       	rjmp	.-320    	; 0x9a8 <__fp_inf>
 ae8:	aa cf       	rjmp	.-172    	; 0xa3e <__fp_szero>
 aea:	5f 3f       	cpi	r21, 0xFF	; 255
 aec:	ec f3       	brlt	.-6      	; 0xae8 <__mulsf3_pse+0x82>
 aee:	98 3e       	cpi	r25, 0xE8	; 232
 af0:	dc f3       	brlt	.-10     	; 0xae8 <__mulsf3_pse+0x82>
 af2:	86 95       	lsr	r24
 af4:	77 95       	ror	r23
 af6:	67 95       	ror	r22
 af8:	b7 95       	ror	r27
 afa:	f7 95       	ror	r31
 afc:	e7 95       	ror	r30
 afe:	9f 5f       	subi	r25, 0xFF	; 255
 b00:	c1 f7       	brne	.-16     	; 0xaf2 <__mulsf3_pse+0x8c>
 b02:	fe 2b       	or	r31, r30
 b04:	88 0f       	add	r24, r24
 b06:	91 1d       	adc	r25, r1
 b08:	96 95       	lsr	r25
 b0a:	87 95       	ror	r24
 b0c:	97 f9       	bld	r25, 7
 b0e:	08 95       	ret

00000b10 <round>:
 b10:	7b df       	rcall	.-266    	; 0xa08 <__fp_splitA>
 b12:	e0 f0       	brcs	.+56     	; 0xb4c <round+0x3c>
 b14:	9e 37       	cpi	r25, 0x7E	; 126
 b16:	d8 f0       	brcs	.+54     	; 0xb4e <round+0x3e>
 b18:	96 39       	cpi	r25, 0x96	; 150
 b1a:	b8 f4       	brcc	.+46     	; 0xb4a <round+0x3a>
 b1c:	9e 38       	cpi	r25, 0x8E	; 142
 b1e:	48 f4       	brcc	.+18     	; 0xb32 <round+0x22>
 b20:	67 2f       	mov	r22, r23
 b22:	78 2f       	mov	r23, r24
 b24:	88 27       	eor	r24, r24
 b26:	98 5f       	subi	r25, 0xF8	; 248
 b28:	f9 cf       	rjmp	.-14     	; 0xb1c <round+0xc>
 b2a:	86 95       	lsr	r24
 b2c:	77 95       	ror	r23
 b2e:	67 95       	ror	r22
 b30:	93 95       	inc	r25
 b32:	95 39       	cpi	r25, 0x95	; 149
 b34:	d0 f3       	brcs	.-12     	; 0xb2a <round+0x1a>
 b36:	b6 2f       	mov	r27, r22
 b38:	b1 70       	andi	r27, 0x01	; 1
 b3a:	6b 0f       	add	r22, r27
 b3c:	71 1d       	adc	r23, r1
 b3e:	81 1d       	adc	r24, r1
 b40:	20 f4       	brcc	.+8      	; 0xb4a <round+0x3a>
 b42:	87 95       	ror	r24
 b44:	77 95       	ror	r23
 b46:	67 95       	ror	r22
 b48:	93 95       	inc	r25
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <__fp_mintl>
 b4c:	1c c0       	rjmp	.+56     	; 0xb86 <__fp_mpack>
 b4e:	77 cf       	rjmp	.-274    	; 0xa3e <__fp_szero>

00000b50 <__fp_mintl>:
 b50:	88 23       	and	r24, r24
 b52:	71 f4       	brne	.+28     	; 0xb70 <__fp_mintl+0x20>
 b54:	77 23       	and	r23, r23
 b56:	21 f0       	breq	.+8      	; 0xb60 <__fp_mintl+0x10>
 b58:	98 50       	subi	r25, 0x08	; 8
 b5a:	87 2b       	or	r24, r23
 b5c:	76 2f       	mov	r23, r22
 b5e:	07 c0       	rjmp	.+14     	; 0xb6e <__fp_mintl+0x1e>
 b60:	66 23       	and	r22, r22
 b62:	11 f4       	brne	.+4      	; 0xb68 <__fp_mintl+0x18>
 b64:	99 27       	eor	r25, r25
 b66:	0d c0       	rjmp	.+26     	; 0xb82 <__fp_mintl+0x32>
 b68:	90 51       	subi	r25, 0x10	; 16
 b6a:	86 2b       	or	r24, r22
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	2a f0       	brmi	.+10     	; 0xb7c <__fp_mintl+0x2c>
 b72:	9a 95       	dec	r25
 b74:	66 0f       	add	r22, r22
 b76:	77 1f       	adc	r23, r23
 b78:	88 1f       	adc	r24, r24
 b7a:	da f7       	brpl	.-10     	; 0xb72 <__fp_mintl+0x22>
 b7c:	88 0f       	add	r24, r24
 b7e:	96 95       	lsr	r25
 b80:	87 95       	ror	r24
 b82:	97 f9       	bld	r25, 7
 b84:	08 95       	ret

00000b86 <__fp_mpack>:
 b86:	9f 3f       	cpi	r25, 0xFF	; 255
 b88:	31 f0       	breq	.+12     	; 0xb96 <__fp_mpack_finite+0xc>

00000b8a <__fp_mpack_finite>:
 b8a:	91 50       	subi	r25, 0x01	; 1
 b8c:	20 f4       	brcc	.+8      	; 0xb96 <__fp_mpack_finite+0xc>
 b8e:	87 95       	ror	r24
 b90:	77 95       	ror	r23
 b92:	67 95       	ror	r22
 b94:	b7 95       	ror	r27
 b96:	88 0f       	add	r24, r24
 b98:	91 1d       	adc	r25, r1
 b9a:	96 95       	lsr	r25
 b9c:	87 95       	ror	r24
 b9e:	97 f9       	bld	r25, 7
 ba0:	08 95       	ret

00000ba2 <_exit>:
 ba2:	f8 94       	cli

00000ba4 <__stop_program>:
 ba4:	ff cf       	rjmp	.-2      	; 0xba4 <__stop_program>
